const DesignerJs = function () {
  this.mother = new GeneralJs();
  this.totalContents = this.mother.totalContents;
  this.module = {};
  this.module.paddingTop = 38;
  this.module.height = <%% 18, 16, 16, 16, 18 %%>;
  this.module.marginBottom = 18;
  this.module.initialLine = 14;
  this.module.initialMargin = 14;

  this.grayBarWidth = null;
  this.belowHeight = null;
  this.whiteBox = null;
  this.standardDoms = [];
  this.caseDoms = [];
  this.cases = [];
  this.totalMother = null;
  this.totalFather = null;
  this.totalFatherChildren = [];
  this.onView = "mother";
  this.whiteConvert = 0;
  this.whiteMatrixA = null;
  this.whiteMatrixB = null;
  this.aspirants = [];
  this.aspirants_searchInput = null;
  this.whiteSse = null;
  this.ea = <%% "px", "px", "px", "px", "vw" %%>;
  this.media = GeneralJs.stacks.updateMiddleMedialQueryConditions;
  this.designers = [];
}

DesignerJs.prototype.rawUploadView = function () {
  const instance = this;
  const { createNode, withOut, colorChip, ajaxJson, removeByClass, dateToString, svgMaker } = GeneralJs;
  return async function () {
    try {
      const totalContents = document.getElementById("totalcontents");
      const rawCommentPopupClassName = "rawCommentPopupClassName";
      const { belowHeight } = instance;
      const ea = "px";
      const zIndex = 40;
      let thisRawContents;
      let cancelBack, whitePrompt;
      let whitePromptWidth;
      let whitePromptMarginTop;
      let realBaseTong;
      let realMargin;
      let dateCloseTong;
      let contentsTong;
      let closeButtonHeight;
      let grayBlockBetween;
      let textMargin;
      let updatedTextTop;
      let textSize;
      let xIconWidth;
      let textWeight;
      let textLineHeight;
      let iframeLink;

      whitePromptMarginTop = 30;
      whitePromptWidth = window.innerWidth - (whitePromptMarginTop * 2);
      
      realMargin = 20;
      closeButtonHeight = 50;
      grayBlockBetween = 8;

      textMargin = 30;
      updatedTextTop = -1;
      textSize = 14;
      xIconWidth = 16;

      textWeight = 400;
      textLineHeight = 1.6;

      iframeLink = "/raw?dataonly=true&entire=true";

      cancelBack = createNode({
        mother: totalContents,
        class: [ rawCommentPopupClassName ],
        event: {
          click: (e) => {
            removeByClass(rawCommentPopupClassName);
          }
        },
        style: {
          top: String(0),
          left: String(0),
          width: withOut(0, ea),
          height: withOut(belowHeight, ea),
          background: colorChip.black,
          opacity: String(0.3),
          position: "fixed",
          zIndex: String(zIndex),
        }
      });

      whitePrompt = createNode({
        mother: totalContents,
        class: [ rawCommentPopupClassName ],
        event: {
          click: (e) => { e.stopPropagation() }
        },
        style: {
          display: "inline-flex",
          position: "fixed",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          borderRadius: String(5) + "px",
          background: colorChip.white,
          boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
          width: String(whitePromptWidth) + ea,
          height: "calc(calc(100vh - " + String(belowHeight) + ea + ") - " + String(whitePromptMarginTop * 2) + ea + ")",
          left: withOut(50, whitePromptWidth / 2, ea),
          top: String(whitePromptMarginTop) + ea,
          zIndex: String(zIndex),
          animation: "fadeuplite 0.3s ease",
          overflow: "hidden",
        }
      });

      realBaseTong = createNode({
        mother: whitePrompt,
        style: {
          display: "flex",
          flexDirection: "column",
          position: "relative",
          width: withOut(0 * 2, ea),
          height: withOut(0 * 2, ea),
        },
        child: {
          mode: "iframe",
          attribute: {
            src: iframeLink,
          },
          style: {
            position: "absolute",
            display: "block",
            top: String(0),
            left: String(0),
            width: withOut(0, ea),
            height: withOut(0, ea),
            border: String(0),
          }
        }
      });

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.standardBar = function (standard, localMode = false, specificDesid = null) {
  const instance = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  let div_clone, div_clone2, div_clone3;
  let style, style2, style3;
  let ea = "px";
  let temp, target;
  let num, leftPosition, secondLeftPosition;
  let sortEventFunction;
  let desidDom, desidArr;
  let size;

  size = <%% 14, 13, 13, 13, 0 %%>;

  leftPosition = new Array(2);
  secondLeftPosition = new Array(2);

  leftPosition[0] = <%% 57, 56, 56, 56, 0 %%>;
  leftPosition[1] = <%% 141, 136, 136, 136, 0 %%>;

  secondLeftPosition[0] = <%% 38, 36, 36, 36, 0 %%>;
  secondLeftPosition[1] = <%% 135, 131, 131, 131, 0 %%>;

  temp = {
    desid: standard.standard.desid.name,
    designer: standard.standard.designer.name
  };
  target = standard.data;
  if (standard.search === null) {
    target.unshift(temp);
  }

  style = {
    display: desktop ? (GeneralJs.returnGet().dataonly === "true" ? "none" : "block") : "none",
    position: "relative",
    top: String(0),
    left: String(0),
    width: String(this.grayBarWidth) + ea,
    zIndex: String(2),
  };

  style2 = {
    display: desktop ? (GeneralJs.returnGet().dataonly === "true" ? "none" : "block") : "none",
    position: "fixed",
    height: String(this.module.height + this.module.marginBottom) + ea,
    paddingTop: String(this.module.paddingTop) + ea,
    top: String(0) + ea,
    zIndex: String(1),
    background: GeneralJs.colorChip.gray0,
    width: style.width,
  };

  style3 = {
    display: desktop ? "blcok" : "none",
    position: "absolute",
    height: String(this.module.height + this.module.marginBottom) + ea,
    fontSize: String(size) + ea,
    fontWeight: String(600),
    color: GeneralJs.colorChip.green,
  };

  if (standard.search === null) {
    div_clone = GeneralJs.nodes.div.cloneNode(true);
    for (let i in style) {
      div_clone.style[i] = style[i];
    }
    div_clone2 = GeneralJs.nodes.div.cloneNode(true);
    div_clone2.style.height = String(this.module.height + this.module.marginBottom + this.module.paddingTop + this.module.initialMargin) + ea;
    div_clone.appendChild(div_clone2);
  } else {
    div_clone = this.totalMother.children[0];
  }

  sortEventFunction = function (index) {
    return function (e) {
      e.preventDefault();
      e.stopPropagation();
      let s, h, arr, toggle;
      let g, tempObj;
      s = document.createDocumentFragment();
      h = document.createDocumentFragment();
      g = document.createDocumentFragment();
      arr = [];
      toggle = Number(instance.standardDoms[0].getAttribute("sort"));
      for (let i = 1; i < instance.standardDoms.length; i++) {
        tempObj = {};
        tempObj.standard = instance.standardDoms[i];
        tempObj.caseDom = instance.caseDoms[i];
        if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
          tempObj.grayDom = GeneralJs.stacks["grayDataDoms"][i];
        }
        arr.push(tempObj);
      }
      arr.sort((a, b) => {
        if (/^[0-9]/.test(a.standard.children[index].textContent) && !/\-/g.test(a.standard.children[index].textContent)) {
          if (toggle) {
            return Number(a.standard.children[index].textContent.replace(/[^0-9\.]/g, '')) - Number(b.standard.children[index].textContent.replace(/[^0-9\.]/g, ''));
          } else {
            return Number(b.standard.children[index].textContent.replace(/[^0-9\.]/g, '')) - Number(a.standard.children[index].textContent.replace(/[^0-9\.]/g, ''));
          }
        } else {
          if (a.standard.children[index].textContent < b.standard.children[index].textContent) {
            return toggle ? -1 : 1;
          }
          if (a.standard.children[index].textContent > b.standard.children[index].textContent) {
            return toggle ? 1 : -1;
          }
          return 0;
        }
      });
      for (let obj of arr) {
        s.appendChild(obj.standard);
        h.appendChild(obj.caseDom);
        if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
          g.appendChild(obj.grayDom);
        }
      }
      instance.totalMother.firstChild.appendChild(s);
      instance.totalMother.children[2].appendChild(h);
      instance.standardDoms = [];
      for (let i = 1; i < instance.totalMother.children[0].children.length; i++) {
        instance.standardDoms.push(instance.totalMother.children[0].children[i]);
      }
      instance.caseDoms = [ instance.totalMother.children[1] ];
      for (let i = 1; i < instance.totalMother.children[2].children.length; i++) {
        instance.caseDoms.push(instance.totalMother.children[2].children[i]);
      }
      if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
        GeneralJs.stacks["grayData"].appendChild(g);
        GeneralJs.stacks["grayDataDoms"] = [];
        for (let i = 0; i < GeneralJs.stacks["grayData"].children.length; i++) {
          GeneralJs.stacks["grayDataDoms"].push(GeneralJs.stacks["grayData"].children[i]);
        }
        GeneralJs.stacks["grayData"].style.height = '';
        if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
          GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
        }
      }
      instance.standardDoms[0].setAttribute("sort", String(toggle ? 0 : 1));
    }
  }

  desidDom = [];
  desidArr = [];
  num = (standard.search === null ? 0 : 1);
  for (let { desid, designer } of target) {
    if (num === 1) {
      style2.position = "relative";
      style3.color = GeneralJs.colorChip.black;
      delete style2.paddingTop;
      delete style2.zIndex;
      delete style2.background;
      delete style2.width;
      leftPosition[0] = secondLeftPosition[0];
      leftPosition[1] = secondLeftPosition[1];
    }

    div_clone2 = GeneralJs.nodes.div.cloneNode(true);
    for (let i in style2) {
      div_clone2.style[i] = style2[i];
    }
    if (num !== 0) {
      div_clone2.setAttribute("desid", desid);
      if (specificDesid !== null) {
        if (specificDesid !== desid) {
          div_clone2.style.display = "none";
        }
      }
    } else {
      if (specificDesid === "middle") {
        div_clone2.style.display = "none";
      }
    }

    div_clone3 = GeneralJs.nodes.div.cloneNode(true);
    div_clone3.textContent = desid;
    for (let i in style3) {
      div_clone3.style[i] = style3[i];
    }
    div_clone3.style.left = String(leftPosition[0]) + ea;
    div_clone3.addEventListener("selectstart", (e) => { e.preventDefault() });
    if (num === 0) {
      if (!localMode) {
        div_clone3.addEventListener("contextmenu", sortEventFunction(0));
      }
    }
    div_clone2.appendChild(div_clone3);

    div_clone3 = GeneralJs.nodes.div.cloneNode(true);
    div_clone3.textContent = designer;
    for (let i in style3) {
      div_clone3.style[i] = style3[i];
    }
    div_clone3.style.left = String(leftPosition[1]) + ea;
    div_clone3.addEventListener("selectstart", (e) => { e.preventDefault() });
    if (num === 0) {
      if (!localMode) {
        div_clone3.addEventListener("contextmenu", sortEventFunction(1));
      }
    }
    div_clone2.appendChild(div_clone3);

    div_clone2.style.cursor = "pointer";
    if (num !== 0) {
      if (!localMode) {
        div_clone2.addEventListener("click", this.whiteViewMaker(num));
        // div_clone2.addEventListener("contextmenu", this.makeClipBoardEvent(desid));
      }
      desidDom.push({ desid, dom: div_clone2 });
      desidArr.push(desid);
    }

    if (num !== 0) {
      this.cases.push({ desid, designer });
    } else {
      div_clone2.style.borderBottom = "1px dashed " + GeneralJs.colorChip.gray3;
      div_clone2.style.height = String(this.module.height + this.module.initialLine) + ea;
      this.cases.push(null);
    }

    this.standardDoms.push(div_clone2);
    if (num === 0) {
      div_clone2.setAttribute("sort", String(0));
    }
    div_clone2.setAttribute("index", String(num));
    div_clone.appendChild(div_clone2);
    num++;
  }

  if (standard.search === null) {
    this.totalMother.appendChild(div_clone);
  }

  if (!localMode) {
    if (this.standardDoms.length === 2) {
      GeneralJs.timeouts["oneWhiteCardOnSelection"] = setTimeout(function () {
        instance.standardDoms[1].click();
        clearTimeout(GeneralJs.timeouts["oneWhiteCardOnSelection"]);
        GeneralJs.timeouts["oneWhiteCardOnSelection"] = null;
      }, 401);
    }
  }

  GeneralJs.ajax({
    idArr: desidArr,
    method: "designer",
    property: "important"
  }, "/getHistoryProperty", function (obj) {
    const desidObj = JSON.parse(obj);
    let boo, tempFunction;

    if (desidObj !== null) {
      for (let { desid, dom } of desidDom) {
        if (desidObj[desid] === undefined) {
          boo = false;
        } else {
          if (desidObj[desid]) {
            boo = true;
          } else {
            boo = false;
          }
        }
        dom.setAttribute("important", "false");
        dom.addEventListener("contextmenu", instance.makeImportantEvent(desid));
        if (boo) {
          tempFunction = instance.makeImportantEvent(desid, !boo);
          tempFunction.call(dom, { type: "click" });
        }
      }
    }
  });

  for (let { desid, dom } of desidDom) {
    dom.addEventListener("dblclick", function (e) {
      GeneralJs.blankHref(FRONTHOST + "/designer/dashboard.php?desid=" + this.getAttribute("desid"));
    });
  }

}

DesignerJs.prototype.infoArea = function (info) {
  const instance = this;
  let div_clone, div_clone2, div_clone3;
  let style, style2, style3;
  let ea = "px";
  let temp, target;
  let num, leftPosition, widthArr;
  let columns;
  const grayBarWidth = this.grayBarWidth;
  let upsideWhiteBar;
  let eventFunction, updateEventFunction;
  let enterEventFunction, leaveEventFunction;
  let sortEventFunction;
  let dragstartEventFunction, dragendEventFunction, dragenterEventFunction, dragleaveEventFunction, dragoverEventFunction, dropEventFunction;
  let dropPoint, redPoint;
  let onoffDummy;
  let thisOnOff;
  let originalColumns;
  let size;

  size = <%% 14, 13, 13, 13, 3 %%>;

  temp = {};
  columns = [];
  leftPosition = [];
  widthArr = [];

  if (window.localStorage.getItem("designer_columnsOrder") !== null && window.localStorage.getItem("designer_columnsOrder") !== undefined) {
    originalColumns = JSON.parse(window.localStorage.getItem("designer_columnsOrder"));
    for (let c of originalColumns) {
      if (Number.isNaN(Number(c.left))) {
        window.localStorage.clear();
        window.location.reload();
        break;
      }
      info.standard[c.name].left = c.left;
    }
  }

  for (let i in info.standard) {
    temp[i] = info.standard[i].name;
    columns.push(i);
    widthArr.push(info.standard[i].width);
    leftPosition.push(info.standard[i].left);
  }

  target = info.data;
  if (info.search === null) {
    target.unshift(temp);
  }

  onoffDummy = {};
  if (target.length > 0) {
    for (let i in target[0]) {
      onoffDummy[i] = false;
    }
  }

  style = {
    display: GeneralJs.returnGet().dataonly === "true" ? "none" : "block",
    position: "absolute",
    top: String(0),
    left: String(grayBarWidth) + ea,
    width: String(5000) + ea,
    color: GeneralJs.colorChip.black,
  };

  style2 = {
    display: GeneralJs.returnGet().dataonly === "true" ? "none" : "block",
    position: "fixed",
    height: String(this.module.height + this.module.marginBottom) + ea,
    paddingTop: String(this.module.paddingTop) + ea,
    top: String(0) + ea,
    zIndex: String(1),
    background: GeneralJs.colorChip.white,
    width: style.width,
    left: style.left,
    color: "inherit",
  };

  style3 = {
    position: "absolute",
    marginBottom: String(this.module.marginBottom) + ea,
    height: String(this.module.height) + ea,
    fontSize: String(size) + ea,
    fontWeight: String(600),
    color: GeneralJs.colorChip.green,
    textAlign: "center",
    overflow: "hidden",
    cursor: "pointer",
    transition: "0s all ease",
  };

  if (info.search === null) {
    div_clone = GeneralJs.nodes.div.cloneNode(true);
    for (let i in style) {
      div_clone.style[i] = style[i];
    }
    div_clone2 = GeneralJs.nodes.div.cloneNode(true);
    div_clone2.style.height = String(this.module.height + this.module.marginBottom + this.module.paddingTop + this.module.initialMargin) + ea;
    div_clone.appendChild(div_clone2);
  } else {
    div_clone = this.totalMother.children[2];
  }

  num = (info.search === null ? 0 : 1);
  eventFunction = function (left) {
    return function (e) {
      if (e.type === "click" && e.altKey) {
        const thisId = /d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/i.exec(this.parentElement.className)[0];
        const onOffObj = JSON.parse(window.localStorage.getItem(thisId));
        onOffObj[this.getAttribute("column")] = !onOffObj[this.getAttribute("column")];
        window.localStorage.setItem(thisId, JSON.stringify(onOffObj));
        if (onOffObj[this.getAttribute("column")]) {
          this.style.color = GeneralJs.colorChip.green;
        }
      }
      const targets = document.querySelectorAll(".moveTarget");
      const ea = "px";
      if (Number(targets[0].style.width.replace(/[^0-9]/g, '')) >= window.innerWidth - 20) {
        for (let target of targets) {
          target.style.transform = "translateX(" + String(left * -1) + ea + ")";
          if (Number(target.style.transform.replace(/[^0-9\-\.]/g, '')) > 0) {
            target.style.transform = "translateX(0px)";
          } else if ((-1 * (Number(target.style.width.replace(/[^0-9]/g, '')) - (window.innerWidth - 20))) > Number(target.style.transform.replace(/[^0-9\-\.]/g, ''))) {
            target.style.transform = "translateX(" + String(-1 * (Number(target.style.width.replace(/[^0-9]/g, '')) - (window.innerWidth - 20))) + ea + ")";
          }
        }
      }
    }
  }

  enterEventFunction = function (e) {
    const mother = this.parentElement;
    const thisIndex = this.parentElement.getAttribute("index");
    const desidChildren = instance.totalMother.children[0].children;
    for (let z = 0; z < mother.children.length; z++) {
      mother.children[z].style.color = GeneralJs.colorChip.green;
    }
    for (let z = 0; z < desidChildren.length; z++) {
      if (desidChildren[z].getAttribute("index") === thisIndex) {
        for (let y = 0; y < desidChildren[z].children.length; y++) {
          desidChildren[z].children[y].style.color = GeneralJs.colorChip.green;
        }
      }
    }
  }

  leaveEventFunction = function (e) {
    const mother = this.parentElement;
    const thisIndex = this.parentElement.getAttribute("index");
    const thisId = /d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/i.exec(mother.className)[0];
    const onOffObj = JSON.parse(window.localStorage.getItem(thisId));
    const desidChildren = instance.totalMother.children[0].children;
    let finalColor;
    finalColor = GeneralJs.colorChip.black;
    if (mother.getAttribute("red") === "true") {
      finalColor = GeneralJs.colorChip.darkRed;
    }
    if (mother.getAttribute("drop") === "true") {
      finalColor = GeneralJs.colorChip.gray4;
    }
    for (let z = 0; z < mother.children.length; z++) {
      if (!onOffObj[mother.children[z].getAttribute("column")]) {
        mother.children[z].style.color = finalColor;
      } else {
        mother.children[z].style.color = GeneralJs.colorChip.green;
      }
    }
    for (let z = 0; z < desidChildren.length; z++) {
      if (desidChildren[z].getAttribute("index") === thisIndex) {
        for (let y = 0; y < desidChildren[z].children.length; y++) {
          desidChildren[z].children[y].style.color = finalColor;
        }
      }
    }
  }

  updateEventFunction = function (left) {
    return function (e) {
      if (e.cancelable) {
        e.preventDefault();
      }
      // const clickEventFunction = eventFunction(left);
      // clickEventFunction.call(this, e);

      const thisIndex = this.parentElement.getAttribute("index");
      const thisId = /d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/i.exec(this.parentElement.className)[0];

      leaveEventFunction.call(this, e);
      for (let z = 0; z < instance.totalMother.children[0].children.length; z++) {
        if (instance.totalMother.children[0].children[z].getAttribute("index") === thisIndex) {
          for (let y = 0; y < instance.totalMother.children[0].children[z].children.length; y++) {
            instance.totalMother.children[0].children[z].children[y].style.color = GeneralJs.colorChip.green;
          }
        }
      }

      const removeAllEvent = function () {
        GeneralJs.timeouts.whiteCardRemoveTargets = setTimeout(function () {
          const standardArea = instance.totalMother.children[2];
          const infoArea = instance.totalMother.children[0];
          const onOffObj = JSON.parse(window.localStorage.getItem(thisId));
          let finalColor;

          for (let z = 0; z < standardArea.children.length; z++) {
            if (standardArea.children[z].getAttribute("index") === thisIndex) {
              finalColor = GeneralJs.colorChip.black;
              if (standardArea.children[z].getAttribute("drop") === "true") {
                finalColor = GeneralJs.colorChip.gray4;
              }
              if (standardArea.children[z].getAttribute("red") === "true") {
                finalColor = GeneralJs.colorChip.darkRed;
              }
              for (let y = 0; y < standardArea.children[z].children.length; y++) {
                if (!onOffObj[standardArea.children[z].children[y].getAttribute("column")]) {
                  standardArea.children[z].children[y].style.color = finalColor;
                } else {
                  standardArea.children[z].children[y].style.color = GeneralJs.colorChip.green;
                }
              }
            }
          }
          for (let z = 0; z < infoArea.children.length; z++) {
            if (infoArea.children[z].getAttribute("index") === thisIndex) {
              for (let y = 0; y < infoArea.children[z].children.length; y++) {
                infoArea.children[z].children[y].style.color = finalColor;
              }
            }
          }
          while (document.querySelectorAll('.removeTarget').length !== 0) {
            document.querySelectorAll('.removeTarget')[0].remove();
          }
          clearTimeout(GeneralJs.timeouts.whiteCardRemoveTargets);
          GeneralJs.timeouts.whiteCardRemoveTargets = null;
        }, 10);
      }
      const cancel_event = function (e) {
        e.preventDefault();

        let originalDiv = this.parentNode;

        removeAllEvent();
        originalDiv.style.overflow = "hidden";
        originalDiv.style.color = "inherit";
        originalDiv.style.transition = "";

        window.removeEventListener('message', GeneralJs.stacks["addressEvent"]);
        GeneralJs.stacks["addressEvent"] = null;
      }
      const updateValueEvent = async function (e) {
        let thisId, requestIndex, column;
        let idDom;
        let mothers, targetDom;
        let originalDiv;
        let finalValue;
        let pastRawData;

        if ((e.type === "keypress" && GeneralJs.confirmKey.includes(e.key)) || e.type === "click" || e.type === "message") {

          if (this.hasAttribute("dateEventMethod")) {
            originalDiv = this.parentNode.parentNode.parentNode.parentNode.parentNode;
            column = originalDiv.getAttribute("column");
            idDom = this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
          } else {
            originalDiv = this.parentNode;
            column = this.parentNode.getAttribute("column");
            idDom = this.parentNode.parentNode;
          }

          idDom.setAttribute("active", "true");
          thisId = idDom.getAttribute("class");
          mothers = document.querySelectorAll('.' + thisId);
          for (let i = 0; i < mothers.length; i++) {
            if (mothers[i].hasAttribute("active")) {
              if (mothers[i].getAttribute("active") === "true") {
                targetDom = mothers[i];
                requestIndex = i;
              }
            }
          }

          if (originalDiv.childNodes[0] !== undefined && originalDiv.childNodes[0].nodeType === 3) {
            pastRawData = originalDiv.childNodes[0].data;
          } else {
            pastRawData = '';
          }

          if (e.type === "keypress") {
            finalValue = GeneralJs.vaildValue(column, this.value.replace(/[\&\=]/g, ''), pastRawData);
          } else if (e.type === "click") {
            finalValue = GeneralJs.vaildValue(column, this.getAttribute("buttonValue"), pastRawData);
          } else if (e.type === "message") {
            finalValue = GeneralJs.vaildValue(column, e.data, pastRawData);
          }

          instance.cases[Number(idDom.getAttribute("index"))][column] = finalValue;
          await GeneralJs.updateValue({
            thisId: thisId,
            requestIndex: String(requestIndex),
            column: column,
            pastValue: pastRawData,
            value: finalValue,
            index: Number(idDom.getAttribute("index")),
            thisCase: instance.cases[Number(idDom.getAttribute("index"))],
          });

          originalDiv.textContent = finalValue;
          idDom.setAttribute("active", "false");
          removeAllEvent();
          originalDiv.style.overflow = "hidden";
        }

      }

      let input_clone;
      let button_clone, button_clone2;
      let svg_clone = {};
      let cancel_inputBack;
      let style;
      let ea = 'px';
      let paddingBottom;
      let height;
      let top;
      let width;
      let fontSize;
      let iframe_clone;
      let tempFunction;
      const updateEventMother = this;

      if (this.querySelector("input") === null) {

        cancel_inputBack = GeneralJs.nodes.div.cloneNode(true);
        cancel_inputBack.classList.add("removeTarget");
        style = {
          position: "fixed",
          top: String(0) + ea,
          left: String(0) + ea,
          width: String(100) + "%",
          height: String(document.querySelector('.totalMother').children[2].getBoundingClientRect().height) + ea,
          opacity: String(0.7),
          zIndex: String(3),
        };
        for (let i in style) {
          cancel_inputBack.style[i] = style[i];
        }
        this.appendChild(cancel_inputBack);

        input_clone = GeneralJs.nodes.input.cloneNode(true);
        input_clone.classList.add("removeTarget");
        input_clone.setAttribute("type", "text");
        input_clone.setAttribute("value", this.textContent);

        paddingBottom = 1;

        style = {
          position: "absolute",
          top: String(0) + ea,
          left: String(0) + ea,
          width: String(100) + '%',
          outline: String(0) + ea,
          border: String(0) + ea,
          textAlign: "center",
          fontSize: "inherit",
          color: GeneralJs.colorChip.green,
          paddingBottom: String(paddingBottom) + ea,
          zIndex: String(3),
        };
        for (let i in style) {
          input_clone.style[i] = style[i];
        }

        cancel_inputBack.addEventListener("click", cancel_event);
        cancel_inputBack.addEventListener("contextmenu", cancel_event);
        input_clone.addEventListener("keypress", updateValueEvent);

        this.appendChild(input_clone);

        //items
        const map = DataPatch.designerMap();
        const thisMap = map[this.getAttribute("column")];

        if (thisMap.type === "date" && e.type === "click") {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          width = 260;
          height = 280;
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = Number(this.style.height.replace((new RegExp(ea, "gi")), '')) * 1.5;

          button_clone = GeneralJs.nodes.div.cloneNode(true);
          button_clone.classList.add("removeTarget");
          style = {
            position: "absolute",
            top: String(top) + ea,
            left: "calc(50% - " + String((width / 2) + 0.1) + ea + ")",
            width: String(width) + ea,
            height: String(260) + ea,
            background: GeneralJs.colorChip.white,
            textAlign: "center",
            fontSize: "inherit",
            color: GeneralJs.colorChip.green,
            zIndex: String(3),
            borderRadius: String(3) + ea,
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0px 2px 11px -6px " + GeneralJs.colorChip.shadow,
            transition: "all 0s ease",
          };
          for (let j in style) {
            button_clone.style[j] = style[j];
          }
          const calendar = instance.mother.makeCalendar((this.textContent === '-' || this.textContent === '' || this.textContent === '예정') ? (new Date()) : this.textContent, updateValueEvent);
          button_clone.appendChild(calendar.calendarBase);
          button_clone.style.height = String(calendar.calendarHeight) + ea;
          this.appendChild(button_clone);

        } else if (thisMap.type !== "object" && thisMap.items !== undefined) {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          height = Number(this.style.height.replace((new RegExp(ea, "gi")), ''));
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = height * 0.5;

          width = GeneralJs.calculationMenuWidth(fontSize, thisMap.items);

          for (let i = 0; i < thisMap.items.length; i++) {
            button_clone = GeneralJs.nodes.div.cloneNode(true);
            button_clone.classList.add("removeTarget");
            button_clone.setAttribute("buttonValue", thisMap.items[i]);
            style = {
              position: "absolute",
              top: String(((height * 2) * (i + 1)) - top) + ea,
              left: "calc(50% - " + String((width / 2) + 0.1) + ea + ")",
              width: String(width) + ea,
              paddingTop: String(height * (GeneralJs.isMac() ? 0.4 : 0.5)) + ea,
              height: String(height * (GeneralJs.isMac() ? 1.4 : 1.3)) + ea,
              background: thisMap.multiple === undefined ? GeneralJs.colorChip.green : GeneralJs.colorChip.gray2,
              textAlign: "center",
              fontSize: "inherit",
              color: GeneralJs.colorChip.whiteBlack,
              zIndex: String(3),
              borderRadius: String(3) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              boxShadow: "0px 2px 11px -6px " + (thisMap.multiple === undefined ? GeneralJs.colorChip.green : GeneralJs.colorChip.gray1),
            };
            for (let j in style) {
              button_clone.style[j] = style[j];
            }

            button_clone2 = GeneralJs.nodes.div.cloneNode(true);
            button_clone2.classList.add("hoverDefault");
            style = {
              position: "absolute",
              fontSize: "inherit",
              fontWeight: String(400),
              color: thisMap.multiple === undefined ? GeneralJs.colorChip.whiteBlack : GeneralJs.colorChip.deactive,
              zIndex: String(3),
              textAlign: "center",
              background: "transparent",
              width: "100%",
              height: "calc(100% - " + String(5) + ea + ")",
              left: String(0) + ea,
              top: String(GeneralJs.isMac() ? (height / 2.9) : (height / 2.8)) + ea,
              borderRadius: String(3) + ea,
              border: String(0),
              cursor: "pointer",
            };
            for (let j in style) {
              button_clone2.style[j] = style[j];
            }
            button_clone2.textContent = thisMap.items[i];
            button_clone.appendChild(button_clone2);

            if (thisMap.multiple === undefined) {
              button_clone.addEventListener("click", updateValueEvent);
            } else {
              //multiple select
              if ((new RegExp(thisMap.items[i], "gi")).test(input_clone.value)) {
                button_clone.setAttribute("selected", "true");
                button_clone.style.background = GeneralJs.colorChip.green;
                button_clone.style.boxShadow = GeneralJs.colorChip.green;
                button_clone.firstChild.style.color = GeneralJs.colorChip.white;
              } else {
                button_clone.setAttribute("selected", "false");
              }
              button_clone.addEventListener("click", function (e) {
                if (this.getAttribute("selected") === "false") {
                  this.style.background = GeneralJs.colorChip.green;
                  this.style.boxShadow = GeneralJs.colorChip.green;
                  this.firstChild.style.color = GeneralJs.colorChip.white;
                  this.setAttribute("selected", "true");
                } else {
                  this.style.background = GeneralJs.colorChip.gray2;
                  this.style.boxShadow = GeneralJs.colorChip.gray1;
                  this.firstChild.style.color = GeneralJs.colorChip.deactive;
                  this.setAttribute("selected", "false");
                }
                const children = this.parentNode.children;
                let value;
                value = '';
                for (let dom of children) {
                  if (dom.hasAttribute("selected")) {
                    if (dom.getAttribute("selected") === "true") {
                      value += dom.getAttribute("buttonValue");
                      value += ", ";
                    }
                  }
                }
                value = value.slice(0, -2);
                svg_clone.setAttribute("buttonValue", value);
              });
            }
            this.appendChild(button_clone);
          }

          if (thisMap.multiple !== undefined) {
            svg_clone = SvgTong.stringParsing(instance.mother.returnOk(GeneralJs.colorChip.green));
            svg_clone.classList.add("removeTarget");
            svg_clone.setAttribute("buttonValue", input_clone.value);
            style = {
              position: "absolute",
              top: String(((height * 2) * (thisMap.items.length + 1)) - 5) + ea,
              width: String(18) + ea,
              left: "calc(50% - " + String(18 / 2) + ea + ")",
              zIndex: String(3),
            };
            for (let j in style) {
              svg_clone.style[j] = style[j];
            }
            svg_clone.addEventListener("click", updateValueEvent);
            this.appendChild(svg_clone);
          }

        } else if (thisMap.type !== "object" && thisMap.address !== undefined && e.type === "click") {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          height = Number(this.style.height.replace((new RegExp(ea, "gi")), ''));
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = height * 0.5;
          width = fontSize * 36;

          button_clone = GeneralJs.nodes.div.cloneNode(true);
          button_clone.classList.add("removeTarget");

          style = {
            position: "absolute",
            top: String((height * 1.9) - top) + ea,
            left: "calc(50% - " + String((width / 2) + 0.1) + ea + ")",
            width: String(width) + ea,
            paddingTop: String(height * 0.3) + ea,
            height: String(width * 0.9) + ea,
            background: GeneralJs.colorChip.white,
            zIndex: String(3),
            borderRadius: String(3) + ea,
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0px 2px 11px -6px " + GeneralJs.colorChip.gray5,
          };
          for (let i in style) {
            button_clone.style[i] = style[i];
          }

          iframe_clone = GeneralJs.nodes.iframe.cloneNode(true);
          iframe_clone.setAttribute("src", window.location.protocol + "//" + window.location.host + "/tools/address");
          iframe_clone.setAttribute("width", "100%");
          iframe_clone.setAttribute("height", "100%");
          iframe_clone.style.border = String(0);
          iframe_clone.style.borderRadius = String(3) + ea;
          button_clone.appendChild(iframe_clone);

          GeneralJs.stacks["addressEvent"] = async function (e) {
            updateValueEvent.call(button_clone, e);
            window.removeEventListener('message', GeneralJs.stacks["addressEvent"]);
            GeneralJs.stacks["addressEvent"] = null;
          }
          window.addEventListener('message', GeneralJs.stacks["addressEvent"]);

          this.appendChild(button_clone);

        } else if (thisMap.type === "object" && thisMap.inputFunction !== undefined) {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";
          tempFunction = new Function("mother", "input", "callback", thisMap.inputFunction);
          tempFunction(this, input_clone, function () {
            let e = {};
            e.type = "keypress";
            e.key = "Enter";
            updateValueEvent.call(input_clone, e);
            updateEventMother.style.overflow = "hidden";
          });

        } else {

          GeneralJs.timeouts.updateInputTimeout = setTimeout(function () {
            input_clone.focus();
            clearTimeout(GeneralJs.timeouts.updateInputTimeout);
            GeneralJs.timeouts.updateInputTimeout = null;
          }, 200);

        }

      }
    }
  }

  sortEventFunction = function (left, z) {
    return function (e) {
      if (e.cancelable) {
        e.preventDefault();
      }
      const map = DataPatch.designerMap();
      const clickEventFunction = eventFunction(left);
      clickEventFunction.call(this, e);

      let cancel_inputBack, cancel_event;
      let sort_event;
      let button_clone, button_clone2;
      let style;
      let ea = "px";
      let height, fontSize, top, width;
      let items;
      let tempArr;

      items = [
        "오름차순",
        "내림차순",
      ];

      tempArr = map[instance.caseDoms[0].children[z].getAttribute("column")];
      if (tempArr.items !== undefined && tempArr.items !== null) {
        tempArr = tempArr.items;
        tempArr.unshift("전체 보기");
        items = items.concat(tempArr);
      } else if (tempArr.yesNo !== undefined && tempArr.yesNo !== null) {
        tempArr = tempArr.yesNo;
        tempArr.unshift("전체 보기");
        items = items.concat(tempArr);
      }

      cancel_event = function (e) {
        if (e.cancelable) {
          e.preventDefault();
        }
        let originalDiv = this.parentNode;

        GeneralJs.timeouts.whiteCardRemoveTargets = setTimeout(function () {
          while (document.querySelectorAll('.removeTarget').length !== 0) {
            document.querySelectorAll('.removeTarget')[0].remove();
          }
          clearTimeout(GeneralJs.timeouts.whiteCardRemoveTargets);
          GeneralJs.timeouts.whiteCardRemoveTargets = null;
        }, 10);

        originalDiv.style.overflow = "hidden";
        originalDiv.style.color = GeneralJs.colorChip.green;
        originalDiv.style.transition = "";
      }

      sort_event = function (toggle = true) {
        return function (e) {
          let s, h, g, arr;
          let tempObj;
          s = document.createDocumentFragment();
          h = document.createDocumentFragment();
          g = document.createDocumentFragment();
          arr = [];

          for (let i = 1; i < instance.caseDoms.length; i++) {
            tempObj = {};
            tempObj.standard = instance.standardDoms[i];
            tempObj.caseDom = instance.caseDoms[i];
            if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
              tempObj.grayDom = GeneralJs.stacks["grayDataDoms"][i];
            }
            arr.push(tempObj);
          }

          arr.sort((a, b) => {
            if ((/^[0-9]/.test(a.caseDom.children[z].textContent) && !/\-/g.test(a.caseDom.children[z].textContent)) || /d[0-9]+/g.test(a.caseDom.children[z].textContent)) {
              if (toggle) {
                return Number(a.caseDom.children[z].textContent.replace(/[^0-9\.]/g, '')) - Number(b.caseDom.children[z].textContent.replace(/[^0-9\.]/g, ''));
              } else {
                return Number(b.caseDom.children[z].textContent.replace(/[^0-9\.]/g, '')) - Number(a.caseDom.children[z].textContent.replace(/[^0-9\.]/g, ''));
              }
            } else {
              if (a.caseDom.children[z].textContent < b.caseDom.children[z].textContent) {
                return toggle ? -1 : 1;
              }
              if (a.caseDom.children[z].textContent > b.caseDom.children[z].textContent) {
                return toggle ? 1 : -1;
              }
              return 0;
            }
          });

          for (let obj of arr) {
            s.appendChild(obj.standard);
            h.appendChild(obj.caseDom);
            if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
              g.appendChild(obj.grayDom);
            }
          }
          instance.totalMother.firstChild.appendChild(s);
          instance.totalMother.children[2].appendChild(h);
          instance.standardDoms = [];
          for (let i = 1; i < instance.totalMother.children[0].children.length; i++) {
            instance.standardDoms.push(instance.totalMother.children[0].children[i]);
          }
          instance.caseDoms = [ instance.totalMother.children[1] ];
          for (let i = 1; i < instance.totalMother.children[2].children.length; i++) {
            instance.caseDoms.push(instance.totalMother.children[2].children[i]);
          }
          if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
            GeneralJs.stacks["grayData"].appendChild(g);
            GeneralJs.stacks["grayDataDoms"] = [];
            for (let i = 0; i < GeneralJs.stacks["grayData"].children.length; i++) {
              GeneralJs.stacks["grayDataDoms"].push(GeneralJs.stacks["grayData"].children[i]);
            }
            GeneralJs.stacks["grayData"].style.height = '';
            if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
              GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
            }
          }
          GeneralJs.stacks["latestSort"].unshift(instance.caseDoms[0].children[z].getAttribute("column"));
          if (GeneralJs.stacks["latestSort"].length > 10) {
            GeneralJs.stacks["latestSort"] = GeneralJs.stacks["latestSort"].slice(0, 3);
          }
          cancel_event.call(this, e);
        }
      }

      cancel_inputBack = GeneralJs.nodes.div.cloneNode(true);
      cancel_inputBack.classList.add("removeTarget");
      style = {
        position: "fixed",
        top: String(0) + ea,
        left: String(0) + ea,
        width: String(100) + "%",
        height: String(document.querySelector('.totalMother').children[2].getBoundingClientRect().height) + ea,
        opacity: String(0.7),
        zIndex: String(3),
        background: GeneralJs.colorChip.white,
        animation: "justfadeinmiddle 0.3s ease forwards",
      };
      for (let i in style) {
        cancel_inputBack.style[i] = style[i];
      }
      cancel_inputBack.addEventListener("dragstart", (e) => { e.stopPropagation(); e.preventDefault(); });
      cancel_inputBack.addEventListener("dragenter", (e) => { e.stopPropagation(); e.preventDefault(); });
      cancel_inputBack.addEventListener("dragleave", (e) => { e.stopPropagation(); e.preventDefault(); });
      cancel_inputBack.addEventListener("dragover", (e) => { e.stopPropagation(); e.preventDefault(); });
      cancel_inputBack.addEventListener("drop", (e) => { e.stopPropagation(); e.preventDefault(); });
      this.appendChild(cancel_inputBack);

      cancel_inputBack.addEventListener("click", cancel_event);
      cancel_inputBack.addEventListener("contextmenu", cancel_event);

      this.style.overflow = "";

      height = Number(this.style.height.replace((new RegExp(ea, "gi")), ''));
      fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
      top = height * 0.5;
      width = GeneralJs.calculationMenuWidth(fontSize, items);

      for (let i = 0; i < items.length; i++) {
        button_clone = GeneralJs.nodes.div.cloneNode(true);
        button_clone.classList.add("removeTarget");
        button_clone.setAttribute("buttonValue", items[i]);
        style = {
          position: "absolute",
          top: String(((height * 2) * (i + 1)) - top) + ea,
          left: "calc(50% - " + String((width / 2) + 0.1) + ea + ")",
          width: String(width) + ea,
          paddingTop: String(height * (GeneralJs.isMac() ? 0.4 : 0.5)) + ea,
          height: String(height * (GeneralJs.isMac() ? 1.4 : 1.3)) + ea,
          background: GeneralJs.colorChip.green,
          textAlign: "center",
          fontSize: "inherit",
          fontWeight: String(500),
          color: GeneralJs.colorChip.white,
          zIndex: String(3),
          borderRadius: String(3) + ea,
          animation: "fadeuplite 0.3s ease forwards",
          boxShadow: "0px 2px 11px -6px " + GeneralJs.colorChip.green,
        };
        for (let j in style) {
          button_clone.style[j] = style[j];
        }

        button_clone2 = GeneralJs.nodes.div.cloneNode(true);
        button_clone2.classList.add("hoverDefault");
        style = {
          position: "absolute",
          fontSize: "inherit",
          fontWeight: String(400),
          color: GeneralJs.colorChip.white,
          zIndex: String(3),
          textAlign: "center",
          background: "transparent",
          width: "100%",
          height: "calc(100% - " + String(5) + ea + ")",
          left: String(0) + ea,
          top: String(GeneralJs.isMac() ? (height / 2.9) : (height / 2.8)) + ea,
          borderRadius: String(3) + ea,
          border: String(0),
          cursor: "pointer",
        };
        for (let j in style) {
          button_clone2.style[j] = style[j];
        }
        button_clone2.textContent = items[i];
        button_clone.appendChild(button_clone2);

        if (i < 2) {
          button_clone.addEventListener("click", sort_event(i === 0));
        } else if (i === 2) {
          button_clone.addEventListener("click", function (e) {
            for (let j = 1; j < instance.caseDoms.length; j++) {
              instance.standardDoms[j].style.display = "block";
              instance.caseDoms[j].style.display = "block";
              if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                GeneralJs.stacks["grayData"].style.height = '';
                if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                  GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                }
              }
            }
            GeneralJs.stacks["latestSort"].unshift(null);
            if (GeneralJs.stacks["latestSort"].length > 10) {
              GeneralJs.stacks["latestSort"] = GeneralJs.stacks["latestSort"].slice(0, 3);
            }
            cancel_event.call(this, e);
          });
        } else if (i >= 3) {
          button_clone.addEventListener("click", function (e) {
            const yesNo = [ "Y", "N" ];
            for (let j = 1; j < instance.caseDoms.length; j++) {
              if (!yesNo.includes(this.textContent)) {
                if (instance.caseDoms[j].children[z].textContent !== this.textContent) {
                  instance.standardDoms[j].style.display = "none";
                  instance.caseDoms[j].style.display = "none";
                  if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                    GeneralJs.stacks["grayDataDoms"][j].style.display = "none";
                    GeneralJs.stacks["grayData"].style.height = '';
                    if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                      GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                    }
                  }
                } else {
                  if (GeneralJs.stacks["latestSort"][0] === instance.caseDoms[0].children[z].getAttribute("column")) {
                    instance.standardDoms[j].style.display = "block";
                    instance.caseDoms[j].style.display = "block";
                    if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                      GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                      GeneralJs.stacks["grayData"].style.height = '';
                      if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                        GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                      }
                    }
                  } else {
                    if (instance.caseDoms[j].style.display !== "none") {
                      instance.standardDoms[j].style.display = "block";
                      instance.caseDoms[j].style.display = "block";
                      if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                        GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                        GeneralJs.stacks["grayData"].style.height = '';
                        if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                          GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                        }
                      }
                    }
                  }
                }
              } else {
                if (/^1[6789]/.test(instance.caseDoms[j].children[z].textContent) || instance.caseDoms[j].children[z].textContent === '' || instance.caseDoms[j].children[z].textContent === '-') {

                  if (this.textContent === "Y") {
                    instance.standardDoms[j].style.display = "none";
                    instance.caseDoms[j].style.display = "none";
                    if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                      GeneralJs.stacks["grayDataDoms"][j].style.display = "none";
                      GeneralJs.stacks["grayData"].style.height = '';
                      if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                        GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                      }
                    }
                  } else {
                    if (GeneralJs.stacks["latestSort"][0] === instance.caseDoms[0].children[z].getAttribute("column")) {
                      instance.standardDoms[j].style.display = "block";
                      instance.caseDoms[j].style.display = "block";
                      if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                        GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                        GeneralJs.stacks["grayData"].style.height = '';
                        if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                          GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                        }
                      }
                    } else {
                      if (instance.caseDoms[j].style.display !== "none") {
                        instance.standardDoms[j].style.display = "block";
                        instance.caseDoms[j].style.display = "block";
                        if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                          GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                          GeneralJs.stacks["grayData"].style.height = '';
                          if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                            GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                          }
                        }
                      }
                    }
                  }

                } else {

                  if (this.textContent !== "Y") {
                    instance.standardDoms[j].style.display = "none";
                    instance.caseDoms[j].style.display = "none";
                    if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                      GeneralJs.stacks["grayDataDoms"][j].style.display = "none";
                      GeneralJs.stacks["grayData"].style.height = '';
                      if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                        GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                      }
                    }
                  } else {
                    if (GeneralJs.stacks["latestSort"][0] === instance.caseDoms[0].children[z].getAttribute("column")) {
                      instance.standardDoms[j].style.display = "block";
                      instance.caseDoms[j].style.display = "block";
                      if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                        GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                        GeneralJs.stacks["grayData"].style.height = '';
                        if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                          GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                        }
                      }
                    } else {
                      if (instance.caseDoms[j].style.display !== "none") {
                        instance.standardDoms[j].style.display = "block";
                        instance.caseDoms[j].style.display = "block";
                        if (GeneralJs.stacks["grayDataDoms"] !== null && GeneralJs.stacks["grayDataDoms"] !== undefined) {
                          GeneralJs.stacks["grayDataDoms"][j].style.display = "block";
                          GeneralJs.stacks["grayData"].style.height = '';
                          if (GeneralJs.stacks["grayData"].getBoundingClientRect().height < window.innerHeight) {
                            GeneralJs.stacks["grayData"].style.height = String(window.innerHeight) + ea;
                          }
                        }
                      }
                    }
                  }

                }
              }
            }
            GeneralJs.stacks["latestSort"].unshift(instance.caseDoms[0].children[z].getAttribute("column"));
            if (GeneralJs.stacks["latestSort"].length > 10) {
              GeneralJs.stacks["latestSort"] = GeneralJs.stacks["latestSort"].slice(0, 3);
            }
            cancel_event.call(this, e);
          });
        }
        button_clone.addEventListener("contextmenu", (e) => { e.stopPropagation(); e.preventDefault(); });
        button_clone.addEventListener("dragstart", (e) => { e.stopPropagation(); e.preventDefault(); });
        button_clone.addEventListener("dragenter", (e) => { e.stopPropagation(); e.preventDefault(); });
        button_clone.addEventListener("dragleave", (e) => { e.stopPropagation(); e.preventDefault(); });
        button_clone.addEventListener("dragover", (e) => { e.stopPropagation(); e.preventDefault(); });
        button_clone.addEventListener("drop", (e) => { e.stopPropagation(); e.preventDefault(); });
        this.appendChild(button_clone);
      }
    }
  }

  dragstartEventFunction = function (e) {
    e.dataTransfer.setData("dragData", e.target.getAttribute("column"));
    const img = new Image();
    e.dataTransfer.setDragImage(img, 1, 1);
  }

  dragendEventFunction = function (e) {
    this.style.opacity = String(1);
    e.preventDefault();
  }

  dragenterEventFunction = function (e) {
    this.style.opacity = String(0.5);
    e.preventDefault();
  }

  dragleaveEventFunction = function (e) {
    this.style.opacity = String(1);
    e.preventDefault();
  }

  dragoverEventFunction = function (e) {
    this.style.opacity = String(0.5);
    e.preventDefault();
  }

  dropEventFunction = function (e) {
    e.preventDefault();
    this.style.opacity = String(1);
    const movingColumn = e.dataTransfer.getData("dragData");
    const thisColumn = this.getAttribute("column");
    let allColumns;
    let originalColumns;
    let margin, initialLeft;
    let thisWidth, thisLeft;
    let ea = "px";

    margin = 20;
    initialLeft = 30;
    originalColumns = [];
    allColumns = [];

    if (window.localStorage.getItem("designer_columnsOrder") !== null && window.localStorage.getItem("designer_columnsOrder") !== undefined) {
      originalColumns = JSON.parse(window.localStorage.getItem("designer_columnsOrder"));
    } else {
      for (let c of instance.caseDoms[0].children) {
        originalColumns.push({ name: c.getAttribute("column"), width: info.standard[c.getAttribute("column")].width, left: info.standard[c.getAttribute("column")].left });
      }
    }

    for (let obj of originalColumns) {
      if (Number.isNaN(Number(obj.width)) || Number.isNaN(Number(obj.left))) {
        window.localStorage.clear();
        window.location.reload();
        break;
      }
    }

    for (let c of originalColumns) {
      if (c.name === movingColumn) {
        thisWidth = c.width;
        thisLeft = c.left;
      }
    }
    for (let c of originalColumns) {
      if (c.name !== movingColumn) {
        if (thisColumn === c.name) {
          allColumns.push({ name: movingColumn, width: thisWidth, left: thisLeft });
        }
        allColumns.push({ name: c.name, width: c.width, left: c.left });
      }
    }
    for (let c = 0; c < allColumns.length; c++) {
      if (c === 0) {
        allColumns[c].left = initialLeft;
      } else {
        allColumns[c].left = allColumns[c - 1].width + allColumns[c - 1].left + margin;
      }
    }

    window.localStorage.setItem("designer_columnsOrder", JSON.stringify(allColumns));

    for (let c of instance.caseDoms) {
      for (let d of c.children) {
        for (let { name, left } of allColumns) {
          if (d.getAttribute("column") === name) {
            d.style.left = String(left) + ea;
          }
        }
      }
    }

    e.stopPropagation();
  }

  dropPoint = DataPatch.designerDropPoint();
  redPoint = DataPatch.designerRedPoint();

  for (let obj of target) {
    if (num === 1) {
      style3.fontWeight = "500";
      style3.color = "inherit";
      style2.position = "relative";
      delete style2.paddingTop;
      delete style2.zIndex;
      delete style2.background;
      delete style2.width;
      delete style2.left;
    }

    div_clone2 = GeneralJs.nodes.div.cloneNode(true);
    div_clone2.setAttribute("index", String(num));
    if (num !== 0) {
      div_clone2.classList.add(this.cases[num].desid);

      div_clone2.setAttribute("drop", "false");
      div_clone2.setAttribute("red", "false");
      if (dropPoint.values.includes(obj[dropPoint.column])) {
        style2.color = GeneralJs.colorChip.gray4;
        for (let z = 0; z < this.standardDoms[num].children.length; z++) {
          this.standardDoms[num].children[z].style.color = GeneralJs.colorChip.gray4;
        }
        div_clone2.setAttribute("drop", "true");
      } else if (redPoint.values.includes(obj[redPoint.column])) {
        style2.color = GeneralJs.colorChip.darkRed;
        for (let z = 0; z < this.standardDoms[num].children.length; z++) {
          this.standardDoms[num].children[z].style.color = GeneralJs.colorChip.darkRed;
        }
        div_clone2.setAttribute("red", "true");
      } else {
        style2.color = "inherit";
      }

      if (window.localStorage.getItem(this.cases[num].desid) === null) {
        window.localStorage.setItem(this.cases[num].desid, JSON.stringify(onoffDummy));
        thisOnOff = onoffDummy;
      } else {
        thisOnOff = JSON.parse(window.localStorage.getItem(this.cases[num].desid));
      }
    }

    for (let i in style2) {
      div_clone2.style[i] = style2[i];
    }

    for (let z = 0; z < columns.length; z++) {
      div_clone3 = GeneralJs.nodes.div.cloneNode(true);
      div_clone3.textContent = obj[columns[z]];
      for (let i in style3) {
        div_clone3.style[i] = style3[i];
      }
      if (num !== 0) {
        if (thisOnOff[columns[z]]) {
          div_clone3.style.color = GeneralJs.colorChip.green;
        }
      }
      div_clone3.style.width = String(widthArr[z]) + ea;
      div_clone3.style.left = String(leftPosition[z]) + ea;
      div_clone3.setAttribute("column", columns[z]);

      if (num === 0) {
        div_clone3.setAttribute("draggable", "true");
        div_clone3.addEventListener("contextmenu", sortEventFunction((leftPosition[z] - (window.innerWidth / 2) + grayBarWidth), z));
        div_clone3.addEventListener("dragstart", dragstartEventFunction);
        div_clone3.addEventListener("dragenter", dragenterEventFunction);
        div_clone3.addEventListener("dragleave", dragleaveEventFunction);
        div_clone3.addEventListener("dragover", dragoverEventFunction);
        div_clone3.addEventListener("drop", dropEventFunction);
      } else {
        div_clone3.addEventListener("mouseenter", enterEventFunction);
        div_clone3.addEventListener("mouseleave", leaveEventFunction);
        div_clone3.addEventListener("click", updateEventFunction(leftPosition[z] - (window.innerWidth / 2) + grayBarWidth));
        div_clone3.addEventListener("contextmenu", updateEventFunction(leftPosition[z] - (window.innerWidth / 2) + grayBarWidth));
      }

      div_clone2.appendChild(div_clone3);
    }

    if (num === 0) {
      upsideWhiteBar = div_clone2;
      upsideWhiteBar.classList.add("moveTarget");

      upsideWhiteBar.style.borderBottom = "1px dashed " + GeneralJs.colorChip.gray3;
      upsideWhiteBar.style.height = String(this.module.height + this.module.initialLine) + ea;

      upsideWhiteBar.setAttribute("sort", String(0));
      this.totalMother.appendChild(upsideWhiteBar);
    } else {
      this.cases[num] = ({ ...this.cases[num], ...obj });
      div_clone.appendChild(div_clone2);
    }

    this.caseDoms.push(div_clone2);
    num++;
  }

  if (info.search === null) {
    div_clone.classList.add("moveTarget");
    upsideWhiteBar.style.width = div_clone.style.width = String(grayBarWidth + leftPosition[leftPosition.length - 1] + widthArr[widthArr.length - 1]) + ea;
    this.totalMother.appendChild(div_clone);
  }

  if ([ ...div_clone.children ].length < 15) {
    div_clone.style.height = String(window.innerHeight) + ea;
  } else {
    div_clone.style.height = "";
  }

}

DesignerJs.prototype.spreadData = async function (search = null, localMode = false, specificDesid = null) {
  const instance = this;
  try {
    let designers, totalMother;
    let standardDataTong = [], infoDataTong = [];
    let standardDomsFirst, caseDomsFirst, casesFirst;
    let standardDomsTargets, caseDomsTargets;

    if (search === null || search === '' || search === '-') {
      designers = JSON.parse(await GeneralJs.ajaxPromise("limit=1000", "/getDesigners"));
    } else {
      designers = JSON.parse(await GeneralJs.ajaxPromise("query=" + search, "/searchDesigners"));
    }

    const { standard, data } = designers;

    for (let i of data) {
      standardDataTong.push(i.standard);
      infoDataTong.push(i.info);
    }

    if (search === null) {
      totalMother = GeneralJs.nodes.div.cloneNode(true);
      totalMother.classList.add("totalMother");
      totalMother.style.height = "calc(100% - " + String(this.belowHeight) + "px" + ")";
      this.totalContents.appendChild(totalMother);
      this.totalMother = totalMother;
    } else {
      standardDomsFirst = this.standardDoms.shift();
      caseDomsFirst = this.caseDoms.shift();
      casesFirst = this.cases.shift();
      this.standardDoms = [];
      this.caseDoms = [];
      this.cases = [];
      this.standardDoms.push(standardDomsFirst);
      this.caseDoms.push(caseDomsFirst);
      this.cases.push(casesFirst);

      standardDomsTargets = this.totalMother.children[0].children;
      while (standardDomsTargets[2] !== undefined) {
        this.totalMother.children[0].removeChild(this.totalMother.children[0].lastChild);
      }
      caseDomsTargets = this.totalMother.children[2].children;
      while (caseDomsTargets[1] !== undefined) {
        this.totalMother.children[2].removeChild(this.totalMother.children[2].lastChild);
      }
    }

    this.standardBar({ standard: standard.standard, data: standardDataTong, search: search }, localMode, specificDesid);
    if (!localMode) {
      this.infoArea({ standard: standard.info, data: infoDataTong, search: search });
    }

  } catch (e) {
    GeneralJs.ajax("message=" + e.message + "&channel=#error_log", "/sendSlack", function () {});
    console.log(e);
  }
}

DesignerJs.prototype.makeImportantEvent = function (id, update = true) {
  const instance = this;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  return async function (e) {
    if (e.cancelable) {
      e.preventDefault();
    }
    try {
      let alarmCircle, alarmStyle;
      let children, length;
      let ea;
      let value;

      ea = "px";
      children = this.children;
      length = children.length;

      if (this.getAttribute("important") === "false") {

        value = 1;
        this.setAttribute("important", "true");

        alarmStyle = {
          position: "absolute",
          transform: "scale(0.4)",
          transformOrigin: "100% 0%",
          right: String(-8.5) + ea,
          top: (GeneralJs.isMac() ? String(3) : String(1)) + ea,
          zIndex: String(0),
        };

        for (let i = 0; i < length; i++) {
          alarmCircle = SvgTong.stringParsing(instance.mother.returnCircle("", GeneralJs.colorChip.red));
          for (let j in alarmStyle) {
            alarmCircle.style[j] = alarmStyle[j];
          }
          children[i].appendChild(alarmCircle);
        }

      } else {

        value = 0;
        this.setAttribute("important", "false");
        for (let i = 0; i < length; i++) {
          children[i].removeChild(children[i].querySelector("svg"));
        }

      }

      if (update) {
        await GeneralJs.ajaxPromise("id=" + id + "&column=important&value=" + value + "&email=" + cookies.homeliaisonConsoleLoginedEmail, "/updateDesignerHistory");
      }

    } catch (e) {
      GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
      console.log(e);
    }
  }
}

DesignerJs.prototype.cardViewMaker = function (force = false) {
  const instance = this;

  return async function (e) {
    const { cases, totalContents, totalMother } = instance;

    if (instance.whiteBox !== null) {
      if (GeneralJs.stacks.whiteBox !== 1) {
        instance.whiteBox.cancelBox.click();
      }
    }

    if (instance.totalFather !== null) {

      instance.totalFather.style.zIndex = String(1);
      if (instance.totalMother !== null && instance.totalMother !== undefined) {
        instance.totalMother.classList.remove("justfadeinoriginal");
        instance.totalMother.classList.add("justfadeoutoriginal");
      }
      instance.totalFather.classList.remove("fadeout");
      instance.totalFather.classList.add("fadein");

    } else {

      if (instance.totalMother !== null && instance.totalMother !== undefined) {
        instance.totalMother.classList.remove("justfadeinoriginal");
        instance.totalMother.classList.add("justfadeoutoriginal");
      }

      const ea = "px";
      const { createNodes, colorChip, withOut } = GeneralJs;
      const modeHref = (mode) => { window.location.href = `${window.location.protocol}//${window.location.host}${window.location.pathname}?mode=${mode}`; }
      const cards = [
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">디자이너</b><br>신청자 조회", event: (e) => { modeHref("aspirant"); } },
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">디자이너</b><br>기본 정보", event: (e) => { modeHref("normal"); } },
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">디자이너</b><br>가격 정보", event: (e) => { modeHref("price"); } },
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">디자이너</b><br>일정 관리", event: (e) => { modeHref("possible"); }, contextmenu: (e) => { modeHref("possible"); } },
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">홈스타일링</b><br>의뢰서", event: (e) => { modeHref("request"); }, contextmenu: (e) => { modeHref("request"); } },
        { name: "<b style=\"font-weight:100;color:" + colorChip.black + "\">디자이너</b><br>보고서", event: (e) => { modeHref("report"); } },
      ];
      let totalFather, tong, nodeArr;
      let tempObj;
      let topMargin, leftMargin;
      let margin;
      let width, height;
      let sqrt;

      topMargin = 42;
      leftMargin = 42;
      margin = 12;

      [ totalFather, tong ] = createNodes([
        {
          mother: totalContents,
          class: !force ? [ "totalFather", "fadein" ] : [ "totalFather" ],
          style: {
            zIndex: String(1),
            background: colorChip.gray3,
            overflow: "hidden",
            transition: "all 0s ease",
            position: "absolute",
            top: String(0),
            left: String(0),
            width: withOut(0, ea),
            height: withOut(instance.belowHeight, ea)
          }
        },
        {
          mother: -1,
          style: {
            position: "relative",
            top: String(topMargin) + ea,
            left: String(leftMargin) + ea,
            width: withOut(leftMargin * 2, ea),
            height: withOut(topMargin * 2, ea)
          }
        }
      ]);

      for (let i = 0; i < cards.length; i++) {
        nodeArr = createNodes([
          {
            mother: tong,
            text: cards[i].name,
            class: [ "hoverDefault_lite" ],
            attribute: {
              index: String(i),
            },
            events: [
              {
                type: "click",
                event: cards[i].event
              },
              {
                type: "contextmenu",
                event: function (e) {
                  e.preventDefault();
                  const index = Number(this.getAttribute("index"));
                  if (typeof cards[index].contextmenu === "function") {
                    cards[index].contextmenu.call(this, e);
                  } else {
                    cards[index].event.call(this, e);
                  }
                }
              },
            ],
            style: {
              display: "inline-block",
              position: "relative",
              width: "calc(calc(100% - " + String(margin * ((cards.length / 2) - 1)) + ea + ") / " + String(cards.length / 2) + ")",
              height: "calc(50% - " + String(margin) + ea + ")",
              background: colorChip.white,
              borderRadius: String(5) + "px",
              marginRight: ((i % (cards.length / 2)) === (cards.length / 2) - 1) ? String(0) + ea : String(margin) + ea,
              cursor: "pointer",
              boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
              marginBottom: (i < (cards.length / 2)) ? String(margin) + ea : String(0) + ea,
              opacity: String(0),
              animation: "fadeup 0.5s ease " + String(0.1 * (i % 4)) + "s forwards"
            }
          },
          {
            mother: -1,
            text: String(i + 1),
            style: {
              position: "absolute",
              fontSize: String(25) + ea,
              fontWeight: String(200),
              fontFamily: "graphik",
              top: String(16) + ea,
              left: String(29) + ea,
              color: colorChip.green,
            }
          },
          {
            mother: -2,
            text: cards[i].name,
            style: {
              position: "absolute",
              fontSize: String(30) + ea,
              fontWeight: String(500),
              bottom: String(31) + ea,
              right: String(32) + ea,
              color: colorChip.black,
              textAlign: "right",
              lineHeight: String(1.25),
            }
          },
          {
            mother: -3,
            style: {
              position: "absolute",
              top: String(0) + ea,
              left: String(0) + ea,
              width: String(100) + '%',
              height: String(50) + '%',
              borderBottom: "1px solid " + colorChip.green,
              transformOrigin: "50% 100%",
              transition: "all 0s ease",
              opacity: String(0.3)
            }
          },
        ]);

        width = nodeArr[0].getBoundingClientRect().width;
        height = nodeArr[0].getBoundingClientRect().height;
        sqrt = Math.sqrt((width * width) + (height * height));
        sqrt = sqrt - (2 * (31 / width) * sqrt);
        nodeArr[3].style.width = String(sqrt) + ea;
        nodeArr[3].style.left = String((width - sqrt) / 2) + ea;
        nodeArr[3].style.transform = "rotate(" + String(90 + (1 * (Math.atan(width / height) * (180 / Math.PI)))) + "deg)";

      }

      instance.totalFather = totalFather;
      window.addEventListener("resize", (e) => { window.location.reload(); });
    }
    instance.onView = "father";
  }
}

DesignerJs.prototype.whiteContentsMaker = function (thisCase, mother) {
  const instance = this;
  const { returnGet } = GeneralJs;
  const getObj = returnGet();
  const normalMode = (getObj.dataonly === "true" && getObj.entire === "true" && getObj.normal === "true");
  let { standard, info } = DataPatch.designerWhiteViewStandard();
  let div_clone, div_clone2, div_clone3, div_clone4, div_clone5, textArea_clone;
  let propertyBox, portfolioBox;
  let style;
  let ea = "px";
  let titleHeight, titleFontSize, topMargin, leftMargin;
  let fontSize;
  let motherHeight;
  let rightArrowBox, leftArrowBox;
  let rightArrow, leftArrow;
  let hInitial, hInitialBox;
  let updateEventFunction;
  let contentsBoxHeight, contentsBoxBottom;
  let lineHeightRatio;
  let historyTongTarget, historyTargetHeightConst;
  let visualSpecificMarginTop;
  let textAreas;
  let clipboardEvent;
  let dragstartEventFunction, dragendEventFunction, dragenterEventFunction, dragleaveEventFunction, dragoverEventFunction, dropEventFunction;
  let convertIcon, convertIconBox;
  let titleArea, contentsArea;
  let alimtalkIcon, alimtalkButton;
  let iconHeight, iconMargin;

  //entire box -------------------------------------
  div_clone = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "relative",
    top: String(0) + ea,
    left: String(0) + ea,
    width: mother.style.width,
    height: mother.style.height
  };
  for (let i in style) {
    div_clone.style[i] = style[i];
  }

  motherHeight = Number(mother.style.height.replace(/[^0-9\-\.]/g, ''));

  //title ------------------------------------------

  if (!normalMode) {
    leftMargin = (49 / 786) * motherHeight;
    titleFontSize = (32 / 786) * motherHeight;
    topMargin = leftMargin * (62 / 60);
    titleHeight = (54 / 42) * titleFontSize;
    clipboardEvent = instance.makeClipBoardEvent(thisCase[standard[1]]);
    iconHeight = leftMargin * (GeneralJs.isMac() ? (12 / 60) : (13 / 60));
  } else {
    leftMargin = 24;
    titleFontSize = (32 / 786) * motherHeight;
    topMargin = leftMargin * (62 / 60);
    titleHeight = (54 / 42) * titleFontSize;
    clipboardEvent = instance.makeClipBoardEvent(thisCase[standard[1]]);
    iconHeight = leftMargin * (GeneralJs.isMac() ? (12 / 60) : (13 / 60));
  }

  div_clone2 = GeneralJs.nodes.div.cloneNode(true);
  style = {
    display: GeneralJs.returnGet().entire !== "true" ? "block" : "none",
    position: "relative",
    top: String(topMargin) + ea,
    left: String(0) + ea,
    width: "100%",
    height: String(titleHeight) + ea,
  };
  for (let i in style) {
    div_clone2.style[i] = style[i];
  }

  //name
  div_clone3 = GeneralJs.nodes.div.cloneNode(true);
  div_clone3.textContent = thisCase[standard[0]];
  div_clone3.classList.add("hoverDefault_lite");
  style = {
    position: "absolute",
    color: GeneralJs.colorChip.black,
    fontSize: String(titleFontSize) + ea,
    fontWeight: String(800),
    bottom: String(leftMargin * (GeneralJs.isMac() ? (11 / 60) : (6 / 60))) + ea,
    left: String(leftMargin - 3) + ea,
  };
  for (let i in style) {
    div_clone3.style[i] = style[i];
  }
  div_clone3.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid: thisCase[standard[1]] }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });
  div_clone3.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid: thisCase[standard[1]] }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });
  div_clone2.appendChild(div_clone3);

  //desid
  div_clone3 = GeneralJs.nodes.div.cloneNode(true);
  div_clone3.textContent = thisCase[standard[1]];
  div_clone3.classList.add("hoverDefault_lite");
  style = {
    position: "absolute",
    color: GeneralJs.colorChip.green,
    fontSize: String(titleFontSize * (20 / 42)) + ea,
    bottom: String(leftMargin * (GeneralJs.isMac() ? (17 / 60) : (14 / 60))) + ea,
    left: String(leftMargin * (thisCase[standard[0]].length === 4 ? 3.6 : (thisCase[standard[0]].length === 2 ? 2.3 : 3))) + ea,
  };
  for (let i in style) {
    div_clone3.style[i] = style[i];
  }
  div_clone3.addEventListener("click", clipboardEvent);
  div_clone2.appendChild(div_clone3);

  //bar
  div_clone3 = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    background: GeneralJs.colorChip.gray3,
    height: String(1) + ea,
    width: "calc(100% - " + (leftMargin * 2) + ea + ")",
    bottom: String(0) + ea,
    left: String(leftMargin) + ea,
  };
  for (let i in style) {
    div_clone3.style[i] = style[i];
  }
  div_clone2.appendChild(div_clone3);
  titleArea = div_clone2;

  div_clone.appendChild(div_clone2);

  //contents ---------------------------------------------------------------------------------

  //property
  if (normalMode) {
    contentsBoxHeight = 38;
    contentsBoxBottom = 24;
  } else {
    contentsBoxHeight = GeneralJs.returnGet().entire !== "true" ? motherHeight - titleHeight - (topMargin * 2.5) : motherHeight - (topMargin * 2);
    contentsBoxBottom = topMargin;
  }
  fontSize = <%% 15, 13, 12, 11, 3 %%>;
  lineHeightRatio = <%% 1.97, 1.93, 1.9, 1.9, 1.9 %%>;

  //contents event
  updateEventFunction = function () {
    return function (e) {
      e.preventDefault();

      const removeAllEvent = function () {
        GeneralJs.timeouts.whiteCardRemoveTargets = setTimeout(function () {
          while (document.querySelectorAll('.removeTarget').length !== 0) {
            document.querySelectorAll('.removeTarget')[0].remove();
          }
          clearTimeout(GeneralJs.timeouts.whiteCardRemoveTargets);
          GeneralJs.timeouts.whiteCardRemoveTargets = null;
        }, 10);
      }
      const cancel_event = function (e) {
        e.preventDefault();

        let originalDiv = this.parentNode;

        removeAllEvent();
        originalDiv.style.overflow = "hidden";
        originalDiv.style.color = "inherit";
        originalDiv.style.transition = "";

        window.removeEventListener('message', GeneralJs.stacks["addressEvent"]);
        GeneralJs.stacks["addressEvent"] = null;
      }
      const updateValueEvent = async function (e) {
        let grandMother, mother;
        let thisId, requestIndex, column;
        let targetDom;
        let fatherTarget = null;
        let originalDiv;
        let finalValue;
        let pastRawData;

        if ((e.type === "keypress" && GeneralJs.confirmKey.includes(e.key)) || e.type === "click" || e.type === "message") {
          grandMother = instance.whiteBox.contentsBox;

          if (this.hasAttribute("dateEventMethod")) {
            mother = this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;
            originalDiv = this.parentNode.parentNode.parentNode.parentNode.parentNode;
          } else {
            mother = this.parentNode.parentNode;
            originalDiv = this.parentNode;
          }

          thisId = grandMother.getAttribute("index");
          requestIndex = grandMother.getAttribute("request");
          column = mother.getAttribute("index");
          for (let dom of document.querySelectorAll('.' + thisId)) {
            if (Number(dom.getAttribute("index")) === thisCase["index"]) {
              for (let ch of dom.children) {
                if (ch.getAttribute("column") === column) {
                  targetDom = ch;
                }
              }
            }
          }

          if (originalDiv.childNodes[0] !== undefined && originalDiv.childNodes[0].nodeType === 3) {
            pastRawData = originalDiv.childNodes[0].data;
          } else {
            pastRawData = '';
          }

          if (e.type === "keypress") {
            finalValue = GeneralJs.vaildValue(column, this.value.replace(/[\&\=]/g, ''), pastRawData);
          } else if (e.type === "click") {
            finalValue = GeneralJs.vaildValue(column, this.getAttribute("buttonValue"), pastRawData);
          } else if (e.type === "message") {
            finalValue = GeneralJs.vaildValue(column, e.data, pastRawData);
          }

          instance.cases[thisCase["index"]][column] = finalValue;
          await GeneralJs.updateValue({
            thisId: thisId,
            requestIndex: requestIndex,
            column: column,
            pastValue: pastRawData,
            value: finalValue,
            index: thisCase["index"],
            thisCase: instance.cases[thisCase["index"]],
          });

          if (instance.totalFather !== null) {
            for (let father of instance.totalFatherChildren) {
              if (Number(father.getAttribute("index")) === thisCase["index"]) {
                if (father.querySelector(".father_" + column) !== null) {
                  fatherTarget = father.querySelector(".father_" + column);
                }
              }
            }
            if (fatherTarget !== null) {
              fatherTarget.textContent = finalValue;
            }
          }
          originalDiv.textContent = finalValue;
          targetDom.textContent = finalValue;

          removeAllEvent();
        }
      }

      let input_clone, cancel_inputBack;
      let style;
      let ea = 'px';
      let paddingBottom;
      let button_clone, button_clone2;
      let svg_clone = {};
      let height;
      let top;
      let width;
      let fontSize;
      let iframe_clone;
      let tempFunction;
      const updateEventMother = this;

      if (this.querySelector("input") === null) {

        cancel_inputBack = GeneralJs.nodes.div.cloneNode(true);
        cancel_inputBack.classList.add("removeTarget");
        style = {
          position: "fixed",
          top: String(0) + ea,
          left: String(0) + ea,
          width: String(100) + "%",
          height: String(100) + "%",
          opacity: String(0.7),
          zIndex: String(3),
        };
        for (let i in style) {
          cancel_inputBack.style[i] = style[i];
        }
        this.appendChild(cancel_inputBack);

        input_clone = GeneralJs.nodes.input.cloneNode(true);
        input_clone.classList.add("removeTarget");
        input_clone.setAttribute("type", "text");
        input_clone.setAttribute("value", this.textContent);

        paddingBottom = 1;

        style = {
          position: "absolute",
          top: String(0) + ea,
          left: String(0) + ea,
          width: String(100) + '%',
          outline: String(0) + ea,
          border: String(0) + ea,
          fontSize: "inherit",
          color: GeneralJs.colorChip.green,
          paddingBottom: String(paddingBottom) + ea,
          zIndex: String(3),
        };
        for (let i in style) {
          input_clone.style[i] = style[i];
        }

        cancel_inputBack.addEventListener("click", cancel_event);
        cancel_inputBack.addEventListener("contextmenu", cancel_event);
        input_clone.addEventListener("keypress", updateValueEvent);

        this.appendChild(input_clone);

        //items
        const map = DataPatch.designerMap();
        const thisMap = map[this.parentNode.getAttribute("index")];

        if (thisMap.type === "date" && e.type === "click") {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          width = 260;
          height = 280;
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = Number(this.style.height.replace((new RegExp(ea, "gi")), '')) * 1.5;

          button_clone = GeneralJs.nodes.div.cloneNode(true);
          button_clone.classList.add("removeTarget");
          style = {
            position: "absolute",
            top: String(top) + ea,
            left: String(0) + ea,
            width: String(width) + ea,
            height: String(260) + ea,
            background: GeneralJs.colorChip.white,
            textAlign: "center",
            fontSize: "inherit",
            color: GeneralJs.colorChip.green,
            zIndex: String(3),
            borderRadius: String(3) + ea,
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0px 2px 11px -6px " + GeneralJs.colorChip.shadow,
            transition: "all 0s ease",
          };
          for (let j in style) {
            button_clone.style[j] = style[j];
          }
          const calendar = instance.mother.makeCalendar((this.textContent === '-' || this.textContent === '' || this.textContent === '예정') ? (new Date()) : this.textContent, updateValueEvent);
          button_clone.appendChild(calendar.calendarBase);
          button_clone.style.height = String(calendar.calendarHeight) + ea;
          this.appendChild(button_clone);

        } else if (thisMap.type !== "object" && thisMap.items !== undefined) {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          height = Number(this.style.height.replace((new RegExp(ea, "gi")), ''));
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = height * 0.5;

          width = GeneralJs.calculationMenuWidth(fontSize, thisMap.items);

          for (let i = 0; i < thisMap.items.length; i++) {
            button_clone = GeneralJs.nodes.div.cloneNode(true);
            button_clone.classList.add("removeTarget");
            button_clone.setAttribute("buttonValue", thisMap.items[i]);
            style = {
              position: "absolute",
              top: String(((height * 2) * (i + 1)) - top) + ea,
              left: String(0) + ea,
              width: String(width) + ea,
              paddingTop: String(height * (GeneralJs.isMac() ? 0.4 : 0.5)) + ea,
              height: String(height * (GeneralJs.isMac() ? 1.4 : 1.3)) + ea,
              background: thisMap.multiple === undefined ? GeneralJs.colorChip.green : GeneralJs.colorChip.gray2,
              textAlign: "center",
              fontSize: "inherit",
              color: GeneralJs.colorChip.whiteBlack,
              zIndex: String(3),
              borderRadius: String(3) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              boxShadow: "0px 2px 11px -6px " + (thisMap.multiple === undefined ? GeneralJs.colorChip.green : GeneralJs.colorChip.gray1),
              cursor: "pointer",
            };
            for (let j in style) {
              button_clone.style[j] = style[j];
            }

            button_clone2 = GeneralJs.nodes.div.cloneNode(true);
            button_clone2.classList.add("hoverDefault");
            style = {
              position: "absolute",
              fontSize: "inherit",
              fontWeight: String(400),
              color: thisMap.multiple === undefined ? GeneralJs.colorChip.whiteBlack : GeneralJs.colorChip.deactive,
              zIndex: String(3),
              textAlign: "center",
              background: "transparent",
              width: "100%",
              height: "calc(100% - " + String(5) + ea + ")",
              left: String(0) + ea,
              top: String(GeneralJs.isMac() ? (height / 2.9) : (height / 2.8)) + ea,
              borderRadius: String(3) + ea,
              border: String(0),
              cursor: "pointer",
            };
            for (let j in style) {
              button_clone2.style[j] = style[j];
            }
            button_clone2.textContent = thisMap.items[i];
            button_clone.appendChild(button_clone2);

            if (thisMap.multiple === undefined) {
              button_clone.addEventListener("click", updateValueEvent);
            } else {
              //multiple select
              if ((new RegExp(thisMap.items[i], "gi")).test(input_clone.value)) {
                button_clone.setAttribute("selected", "true");
                button_clone.style.background = GeneralJs.colorChip.green;
                button_clone.style.boxShadow = GeneralJs.colorChip.green;
                button_clone.firstChild.style.color = GeneralJs.colorChip.white;
              } else {
                button_clone.setAttribute("selected", "false");
              }
              button_clone.addEventListener("click", function (e) {
                if (this.getAttribute("selected") === "false") {
                  this.style.background = GeneralJs.colorChip.green;
                  this.style.boxShadow = GeneralJs.colorChip.green;
                  this.firstChild.style.color = GeneralJs.colorChip.white;
                  this.setAttribute("selected", "true");
                } else {
                  this.style.background = GeneralJs.colorChip.gray2;
                  this.style.boxShadow = GeneralJs.colorChip.gray1;
                  this.firstChild.style.color = GeneralJs.colorChip.deactive;
                  this.setAttribute("selected", "false");
                }
                const children = this.parentNode.children;
                let value;
                value = '';
                for (let dom of children) {
                  if (dom.hasAttribute("selected")) {
                    if (dom.getAttribute("selected") === "true") {
                      value += dom.getAttribute("buttonValue");
                      value += ", ";
                    }
                  }
                }
                value = value.slice(0, -2);
                svg_clone.setAttribute("buttonValue", value);
              });
            }
            this.appendChild(button_clone);
          }

          if (thisMap.multiple !== undefined) {
            svg_clone = SvgTong.stringParsing(instance.mother.returnOk(GeneralJs.colorChip.green));
            svg_clone.classList.add("removeTarget");
            svg_clone.setAttribute("buttonValue", input_clone.value);
            style = {
              position: "absolute",
              top: String(((height * 2) * (thisMap.items.length + 1)) - 5) + ea,
              width: String(18) + ea,
              left: "calc(50% - " + String(18 / 2) + ea + ")",
              zIndex: String(3),
            };
            for (let j in style) {
              svg_clone.style[j] = style[j];
            }
            svg_clone.addEventListener("click", updateValueEvent);
            this.appendChild(svg_clone);
          }

        } else if (thisMap.type !== "object" && thisMap.address !== undefined && e.type === "click") {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";

          this.style.overflow = "";
          height = Number(this.style.height.replace((new RegExp(ea, "gi")), ''));
          fontSize = Number(this.style.fontSize.replace((new RegExp(ea, "gi")), ''));
          top = height * 0.5;
          width = fontSize * 36;

          button_clone = GeneralJs.nodes.div.cloneNode(true);
          button_clone.classList.add("removeTarget");

          style = {
            position: "absolute",
            top: String((height * 1.9) - top) + ea,
            left: "calc(50% - " + String((width / 2) + 0.1) + ea + ")",
            width: String(width) + ea,
            paddingTop: String(height * 0.3) + ea,
            height: String(width * 0.9) + ea,
            background: GeneralJs.colorChip.white,
            zIndex: String(3),
            borderRadius: String(3) + ea,
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0px 2px 11px -6px " + GeneralJs.colorChip.gray5,
          };
          for (let i in style) {
            button_clone.style[i] = style[i];
          }

          iframe_clone = GeneralJs.nodes.iframe.cloneNode(true);
          iframe_clone.setAttribute("src", window.location.protocol + "//" + window.location.host + "/tools/address");
          iframe_clone.setAttribute("width", "100%");
          iframe_clone.setAttribute("height", "100%");
          iframe_clone.style.border = String(0);
          iframe_clone.style.borderRadius = String(3) + ea;
          button_clone.appendChild(iframe_clone);

          GeneralJs.stacks["addressEvent"] = async function (e) {
            updateValueEvent.call(button_clone, e);
            window.removeEventListener('message', GeneralJs.stacks["addressEvent"]);
            GeneralJs.stacks["addressEvent"] = null;
          }
          window.addEventListener('message', GeneralJs.stacks["addressEvent"]);

          this.appendChild(button_clone);

        } else if (thisMap.type === "object" && thisMap.inputFunction !== undefined) {

          cancel_inputBack.style.background = GeneralJs.colorChip.white;
          // cancel_inputBack.style.animation = "justfadeinmiddle 0.3s ease forwards";
          tempFunction = new Function("mother", "input", "callback", thisMap.inputFunction);
          tempFunction(this, input_clone, function () {
            let e = {};
            e.type = "keypress";
            e.key = "Enter";
            updateValueEvent.call(input_clone, e);
            updateEventMother.style.overflow = "hidden";
          });

        } else {

          GeneralJs.timeouts.updateInputTimeout = setTimeout(function () {
            input_clone.focus();
            clearTimeout(GeneralJs.timeouts.updateInputTimeout);
            GeneralJs.timeouts.updateInputTimeout = null;
          }, 200);

        }
      }
    }
  }

  dragstartEventFunction = function (e) {
    e.dataTransfer.setData("dragData", e.target.parentNode.getAttribute("index"));
    const img = new Image();
    e.dataTransfer.setDragImage(img, 1, 1);
  }

  dragendEventFunction = function (e) {
    this.style.opacity = String(1);
    e.preventDefault();
  }

  dragenterEventFunction = function (e) {
    this.style.opacity = String(0.5);
    e.preventDefault();
  }

  dragleaveEventFunction = function (e) {
    this.style.opacity = String(1);
    e.preventDefault();
  }

  dragoverEventFunction = function (e) {
    this.style.opacity = String(0.5);
    e.preventDefault();
  }

  dropEventFunction = function (e) {
    e.preventDefault();
    this.style.opacity = String(1);
    const { info } = DataPatch.designerWhiteViewStandard();
    const movingColumn = e.dataTransfer.getData("dragData");
    const thisColumn = this.parentNode.getAttribute("index");
    let originalColumns, originalColumns_filtered, originalTops;
    let thisStorage;
    let movingColumnIndex, thisColumnIndex;
    let tempObj;
    let infoObj;
    let infoObjKey;

    infoObj = {};
    for (let c of info) {
      infoObj[c.target] = c.name;
    }
    infoObjKey = Object.keys(infoObj);

    originalColumns = [];
    originalColumns_filtered = [];
    originalTops = [];
    thisStorage = [];

    for (let c = 0; c < this.parentNode.parentNode.children.length; c++) {
      if (this.parentNode.parentNode.children[c].getAttribute("index") !== null && this.parentNode.parentNode.children[c].getAttribute("index") !== undefined) {
        if (infoObjKey.includes(this.parentNode.parentNode.children[c].getAttribute("index"))) {
          tempObj = { dom: this.parentNode.parentNode.children[c], name: this.parentNode.parentNode.children[c].getAttribute("index"), top: this.parentNode.parentNode.children[c].style.top };
          originalColumns.push(tempObj);
          originalTops.push(tempObj.top);
          if (tempObj.name === movingColumn) {
            movingColumnIndex = c;
          }
          if (tempObj.name === thisColumn) {
            thisColumnIndex = c;
          }
        }
      }
    }

    for (let c = 0; c < originalColumns.length; c++) {
      if (c !== movingColumnIndex) {
        if (c === thisColumnIndex) {
          originalColumns_filtered.push(originalColumns[movingColumnIndex]);
        }
        originalColumns_filtered.push(originalColumns[c]);
      }
    }

    for (let c = 0; c < originalColumns_filtered.length; c++) {
      originalColumns_filtered[c].dom.style.top = originalTops[c];
      originalColumns_filtered[c].top = originalTops[c];
    }

    originalColumns_filtered.sort((a, b) => {
      return Number(a.top.replace(/[^0-9\.\-]/gi, '')) - Number(b.top.replace(/[^0-9\.\-]/gi, ''));
    });

    for (let c = 0; c < originalColumns_filtered.length; c++) {
      thisStorage.push({ name: infoObj[originalColumns_filtered[c].name], target: originalColumns_filtered[c].name });
      this.parentNode.parentNode.insertBefore(originalColumns_filtered[originalColumns_filtered.length - 1 - c].dom, this.parentNode.parentNode.firstChild);
    }

    window.localStorage.setItem("designer_whiteOrder", JSON.stringify(thisStorage));

    e.stopPropagation();
  }

  div_clone2 = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    width: "100%",
    height: !normalMode ? String(contentsBoxHeight) + ea : GeneralJs.withOut(contentsBoxHeight, ea),
    bottom: String(contentsBoxBottom) + ea,
  };
  for (let i in style) {
    div_clone2.style[i] = style[i];
  }

  //propoerty box
  propertyBox = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    left: String(leftMargin) + ea,
    width: "calc(45% - " + String(leftMargin + 30) + ea + ")",
    height: "100%",
    overflow: "scroll",
    borderBottom: "1px dashed " + GeneralJs.colorChip.gray3,
    display: GeneralJs.returnGet().entire !== "true" ? "block" : "none",
  };
  for (let i in style) {
    propertyBox.style[i] = style[i];
  }

  if (window.localStorage.getItem("designer_whiteOrder") !== null && window.localStorage.getItem("designer_whiteOrder") !== undefined) {
    info = JSON.parse(window.localStorage.getItem("designer_whiteOrder"));
  }

  for (let i = 0; i < info.length; i++) {
    div_clone3 = GeneralJs.nodes.div.cloneNode(true);
    div_clone3.setAttribute("index", info[i].target);
    style = {
      position: "absolute",
      top: String(fontSize * lineHeightRatio * i) + ea,
      left: String(0) + ea,
      width: "100%",
      height: String(16) + ea,
    };
    for (let j in style) {
      div_clone3.style[j] = style[j];
    }

    //column name
    div_clone4 = GeneralJs.nodes.div.cloneNode(true);
    div_clone4.textContent = info[i].name;
    style = {
      display: "inline-block",
      position: "absolute",
      top: String(-0.8 * (fontSize / 15)) + ea,
      left: String(0) + ea,
      width: String(fontSize * 9) + ea,
      height: String(fontSize * (21 / 16)) + ea,
      fontSize: String(fontSize) + ea,
      fontWeight: String(700),
      cursor: "pointer",
    };
    for (let j in style) {
      div_clone4.style[j] = style[j];
    }
    div_clone4.setAttribute("draggable", "true");
    div_clone4.addEventListener("dragstart", dragstartEventFunction);
    div_clone4.addEventListener("dragenter", dragenterEventFunction);
    div_clone4.addEventListener("dragleave", dragleaveEventFunction);
    div_clone4.addEventListener("dragover", dragoverEventFunction);
    div_clone4.addEventListener("drop", dropEventFunction);
    div_clone3.appendChild(div_clone4);

    //value
    div_clone4 = GeneralJs.nodes.div.cloneNode(true);
    div_clone4.textContent = thisCase[info[i].target];
    style = {
      display: "inline-block",
      position: "absolute",
      top: String(-1.6 * (fontSize / 15)) + ea,
      left: String(fontSize * 9) + ea,
      width: "calc(100% - " + String(fontSize * 9) + ea + ")",
      height: String(fontSize * (21 / 16)) + ea,
      overflow: "scroll",
      fontSize: String(fontSize) + ea,
      fontWeight: String(300),
    };
    for (let j in style) {
      div_clone4.style[j] = style[j];
    }
    div_clone4.addEventListener("click", updateEventFunction());
    div_clone4.addEventListener("contextmenu", updateEventFunction());
    div_clone3.appendChild(div_clone4);

    propertyBox.appendChild(div_clone3);
  }

  div_clone2.appendChild(propertyBox);
  this.whiteBox.propertyBox = propertyBox;

  //contents box
  portfolioBox = GeneralJs.nodes.div.cloneNode(true);
  portfolioBox.classList.add("noScrollBar");
  style = {
    position: "absolute",
    height: "100%",
    bottom: String(0) + ea,
    right: String(leftMargin) + ea,
    width: GeneralJs.returnGet().entire !== "true" ? "calc(55% - " + String(leftMargin) + ea + ")" : "calc(100% - " + String(leftMargin * 2) + ea + ")",
    overflow: "scroll",
    borderBottom: "1px solid " + GeneralJs.colorChip.gray3,
  };
  for (let i in style) {
    portfolioBox.style[i] = style[i];
  }

  //contents
  GeneralJs.ajax("noFlat=true&where=" + JSON.stringify({ desid: thisCase[standard[1]] }), "/getContents", async function (data) {
    try {
      const contents = JSON.parse(data);
      let totalTong;
      let div_clone, div_clone2, div_clone3;
      let img_clone;
      let style = {};
      let ea = "px";
      let height, margin, fontSize, titleHeight, totalWidth;
      let tempNumber;
      let ghost;
      let leftArea, rightArea;
      let notYetContents;
      let cliidArr;
      let clients, client;

      for (let obj of contents) {
        obj.name = "개인";
      }

      cliidArr = [ ...(new Set(contents.map((obj) => { return obj.cliid }).filter((c) => { return c !== ''; }))) ].map((cliid) => {
        return { cliid };
      });
      if (cliidArr.length !== 0) {
        clients = await GeneralJs.ajaxJson({
          noFlat: true,
          whereQuery: { $or: cliidArr }
        }, "/getClients", { equal: true });
        for (let obj of contents) {
          client = clients.find((o) => { return o.cliid === obj.cliid });
          if (client !== undefined) {
            obj.name = client.name;
          }
        }
      }

      totalTong = GeneralJs.nodes.div.cloneNode(true);
      style = {
        position: "relative",
      };
      for (let i in style) {
        totalTong.style[i] = style[i];
      }

      height = 200;
      margin = 16;
      fontSize = normalMode ? 13 : 15;
      titleHeight = fontSize + 5;

      ghost = JSON.parse(await GeneralJs.ajaxPromise("noFlat=true&where=" + JSON.stringify({ desid: thisCase[standard[1]] }), "/getDesigners"))[0].setting.ghost;
      notYetContents = JSON.parse(await GeneralJs.ajaxPromise("desid=" + thisCase[standard[1]], "/getDesignerGhost"));
      notYetContents.push(ghost);

      for (let i = 0; i < contents.length + notYetContents.length; i++) {

        //unit tong
        div_clone = GeneralJs.nodes.div.cloneNode(true);
        style = {
          position: "relative",
          width: "100%",
          height: String(height) + ea,
          borderRadius: String(3) + ea,
          marginBottom: String(margin) + ea,
        };
        for (let j in style) {
          div_clone.style[j] = style[j];
        }

        //moving area - left
        leftArea = GeneralJs.nodes.div.cloneNode(true);
        style = {
          position: "absolute",
          bottom: String(0) + ea,
          left: String(0) + ea,
          opacity: String(0),
          height: String(170) + ea,
          width: String(42) + ea,
          zIndex: String(1),
          cursor: "w-resize",
        };
        for (let s in style) {
          leftArea.style[s] = style[s];
        }
        GeneralJs.stacks[thisCase[standard[1]] + "first_boo_left" + String(i)] = true;
        leftArea.addEventListener("mouseover", function (e) {
          const targetNode = this.nextElementSibling.nextElementSibling.nextElementSibling.children[0];
          if (GeneralJs.stacks[thisCase[standard[1]] + "first_boo_left" + String(i)]) {
            GeneralJs.stacks[thisCase[standard[1]] + "first_left" + String(i)] = targetNode.getBoundingClientRect().left;
            GeneralJs.stacks[thisCase[standard[1]] + "first_boo_left" + String(i)] = false;
          }
          GeneralJs.timeouts[thisCase[standard[1]] + "contents_left" + String(i)] = setInterval(function () {
            let left = targetNode.getBoundingClientRect().left;
            targetNode.parentElement.scrollTo({ left: GeneralJs.stacks[thisCase[standard[1]] + "first_left" + String(i)] - left - 100, behavior: "smooth" });
          }, 80);
        });
        leftArea.addEventListener("mouseleave", function (e) {
          clearInterval(GeneralJs.timeouts[thisCase[standard[1]] + "contents_left" + String(i)]);
        });
        div_clone.appendChild(leftArea);

        //moving area - right
        rightArea = GeneralJs.nodes.div.cloneNode(true);
        style = {
          position: "absolute",
          bottom: String(0) + ea,
          right: String(0) + ea,
          opacity: String(0),
          height: String(170) + ea,
          width: String(42) + ea,
          zIndex: String(1),
          cursor: "e-resize",
        };
        for (let s in style) {
          rightArea.style[s] = style[s];
        }
        GeneralJs.stacks[thisCase[standard[1]] + "first_boo_right" + String(i)] = true;
        rightArea.addEventListener("mouseover", function (e) {
          const targetNode = this.nextElementSibling.nextElementSibling.children[0];
          if (GeneralJs.stacks[thisCase[standard[1]] + "first_boo_right" + String(i)]) {
            GeneralJs.stacks[thisCase[standard[1]] + "first_right" + String(i)] = targetNode.getBoundingClientRect().left;
            GeneralJs.stacks[thisCase[standard[1]] + "first_boo_right" + String(i)] = false;
          }
          GeneralJs.timeouts[thisCase[standard[1]] + "contents_right" + String(i)] = setInterval(function () {
            let left = targetNode.getBoundingClientRect().left;
            targetNode.parentElement.scrollTo({ left: GeneralJs.stacks[thisCase[standard[1]] + "first_right" + String(i)] - left + 100, behavior: "smooth" });
          }, 80);
        });
        rightArea.addEventListener("mouseleave", function (e) {
          clearInterval(GeneralJs.timeouts[thisCase[standard[1]] + "contents_right" + String(i)]);
        });
        div_clone.appendChild(rightArea);

        //title
        div_clone2 = GeneralJs.nodes.div.cloneNode(true);
        div_clone2.classList.add("hoverDefault");
        if (i < contents.length) {
          div_clone2.textContent = contents[i].name + "(" + contents[i].contents.portfolio.pid + ") : " + contents[i].contents.portfolio.title.main;
        } else {
          div_clone2.textContent = "기타 미등록 포트폴리오";
        }
        div_clone2.setAttribute("pid", i < contents.length ? contents[i].contents.portfolio.pid : "");
        style = {
          position: "absolute",
          top: String(GeneralJs.isMac() ? 0 : -2) + ea,
          left: String(0) + ea,
          fontSize: String(fontSize) + ea,
          fontWeight: String(600),
          color: GeneralJs.colorChip.black,
          width: "100%",
          height: String(titleHeight) + ea,
          cursor: "pointer",
        };
        for (let j in style) {
          div_clone2.style[j] = style[j];
        }
        if (i < contents.length) {
          div_clone2.addEventListener("click", function (e) {
            const pid = this.getAttribute("pid");
            if (pid !== '' && pid !== null) {
              GeneralJs.blankHref(FRONTHOST + "/portdetail.php?pid=" + pid);
            }
          });
        }
        div_clone.appendChild(div_clone2);

        //picture tong
        div_clone2 = GeneralJs.nodes.div.cloneNode(true);
        div_clone2.classList.add("noScrollBar");
        style = {
          position: "relative",
          top: String(titleHeight + (margin / 2) + (GeneralJs.isMac() ? 0 : -2)) + ea,
          left: String(0) + ea,
          background: GeneralJs.colorChip.gray0,
          borderRadius: String(4) + ea,
          width: "100%",
          height: String(height - (titleHeight + (margin / 2))) + ea,
          overflow: "scroll",
          cursor: "pointer"
        };
        for (let j in style) {
          div_clone2.style[j] = style[j];
        }

        //picture scroll box
        div_clone3 = GeneralJs.nodes.div.cloneNode(true);
        style = {
          position: "relative",
          width: String(5000) + ea,
          height: String(height - (titleHeight + (margin / 2)) - margin) + ea,
          top: String(margin / 2) + ea,
          left: String(margin / 2) + ea,
        };
        for (let j in style) {
          div_clone3.style[j] = style[j];
        }

        //pictures
        totalWidth = 0;
        if (i < contents.length) {

          for (let j = 0; j < contents[i].photos.detail.length; j++) {
            img_clone = GeneralJs.nodes.img.cloneNode(true);
            img_clone.src = S3HOST + "/corePortfolio/listImage/" + contents[i].contents.portfolio.pid + "/t" + String(contents[i].photos.detail[j].index) + contents[i].contents.portfolio.pid + ".jpg";
            img_clone.addEventListener("dblclick", function (e) {
              e.preventDefault();
              window.open(S3HOST + "/corePortfolio/original/" + contents[i].contents.portfolio.pid + "/i" + String(contents[i].photos.detail[j].index) + contents[i].contents.portfolio.pid + ".jpg", "_blank");
            });
            style = {
              display: "inline-block",
              position: "relative",
              height: String(height - (titleHeight + (margin / 2)) - margin) + ea,
              marginRight: String(margin / 2) + ea,
              borderRadius: String(3) + ea,
            };
            if (j === contents[i].photos.detail.length - 1) {
              delete style.marginRight;
            }

            if (contents[i].photos.detail[j].gs === 'g') {
              tempNumber = (height - (titleHeight + (margin / 2)) - margin) * (297 / 210);
              style.width = String(tempNumber) + ea;
            } else {
              tempNumber = (height - (titleHeight + (margin / 2)) - margin) * (210 / 297);
              style.width = String(tempNumber) + ea;
            }
            totalWidth = tempNumber + totalWidth + (margin / 2);

            for (let k in style) {
              img_clone.style[k] = style[k];
            }
            div_clone3.appendChild(img_clone);
          }

        } else {

          for (let j = 0; j < notYetContents[i - contents.length].length; j++) {
            img_clone = GeneralJs.nodes.img.cloneNode(true);
            img_clone.src = S3HOST + notYetContents[i - contents.length][j].link;
            img_clone.addEventListener("dblclick", function (e) {
              e.preventDefault();
              window.open(S3HOST + notYetContents[i - contents.length][j].link, "_blank");
            });
            style = {
              display: "inline-block",
              position: "relative",
              height: String(height - (titleHeight + (margin / 2)) - margin) + ea,
              marginRight: String(margin / 2) + ea,
              borderRadius: String(3) + ea,
            };
            if (j === notYetContents[i - contents.length].length - 1) {
              delete style.marginRight;
            }

            if (notYetContents[i - contents.length][j].sgTrue === 'g') {
              tempNumber = (height - (titleHeight + (margin / 2)) - margin) * (297 / 210);
              style.width = String(tempNumber) + ea;
            } else {
              tempNumber = (height - (titleHeight + (margin / 2)) - margin) * (210 / 297);
              style.width = String(tempNumber) + ea;
            }
            totalWidth = tempNumber + totalWidth + (margin / 2);

            for (let k in style) {
              img_clone.style[k] = style[k];
            }
            div_clone3.appendChild(img_clone);
          }

        }

        div_clone3.style.width = String(totalWidth) + ea;

        div_clone2.appendChild(div_clone3);
        GeneralJs.addScrollXEvent(div_clone2);
        div_clone.appendChild(div_clone2);

        //unit tong end
        totalTong.appendChild(div_clone);
      }
      portfolioBox.appendChild(totalTong);

    } catch (e) {
      GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
      console.log(e);
    }
  });

  div_clone2.appendChild(portfolioBox);
  contentsArea = div_clone2;
  this.whiteBox.portfolioBox = portfolioBox;

  //end ---------------------------------------------
  div_clone.appendChild(contentsArea);
  mother.appendChild(div_clone);
}

DesignerJs.prototype.whiteCancelMaker = function (callback = null, recycle = false) {
  const instance = this;
  return function (e) {

    GeneralJs.stacks.whiteBox = 1;

    //color name
    let domTargets;
    for (let z = 0; z < instance.standardDoms.length; z++) {
      if (z !== 0) {
        domTargets = instance.standardDoms[z].children;
        domTargets[0].style.color = domTargets[1].style.color = GeneralJs.colorChip.black;
      } else {
        domTargets = instance.standardDoms[z].children;
        domTargets[0].style.color = domTargets[1].style.color = GeneralJs.colorChip.green;
      }
    }

    //animation
    if (!recycle) {
      instance.whiteBox.cancelBox.classList.remove("justfadein");
      instance.whiteBox.cancelBox.classList.add("justfadeout");
    }
    instance.whiteBox.contentsBox.classList.remove("fadeup");
    instance.whiteBox.contentsBox.classList.add("fadedown");

    //aspirant search
    if (instance.aspirants_searchInput !== null) {
      instance.aspirants_searchInput.previousElementSibling.style.opacity = String(1);
      instance.aspirants_searchInput.parentNode.removeChild(instance.aspirants_searchInput);
      instance.aspirants_searchInput = null;
    }

    //sse close
    if (instance.whiteSse !== null && instance.whiteSse !== undefined) {
      instance.whiteSse.close();
      instance.whiteSse = null;
    }

    //dom delete
    GeneralJs.timeouts.whiteBox = setTimeout(function () {
      instance.whiteBox.contentsBox.remove();
      if (!recycle) {
        instance.whiteBox.cancelBox.remove();
        instance.whiteBox = null;
      }
      if (callback !== null) {
        callback();
      }
      clearTimeout(GeneralJs.timeouts.whiteBox);
      GeneralJs.timeouts.whiteBox = null;
      GeneralJs.stacks.whiteBox = 0;
    }, 401);
  }
}

DesignerJs.prototype.whiteViewMakerDetail = function (index, recycle = false) {
  const instance = this;
  const { standard, info } = DataPatch.designerWhiteViewStandard();
  const { colorChip, hasQuery, removeQuery, appendQuery } = GeneralJs;
  return function () {
    const thisCase = { ...instance.cases[index], index };
    let div_clone;
    let style;
    let ea = "px";
    let margin;
    let domTargets;
    let motherBoo;
    let indexArr, requestIndex;

    motherBoo = (instance.onView === "mother") ? true : false;

    for (let z = 1; z < instance.standardDoms.length; z++) {
      if (instance.standardDoms[z].firstChild.textContent === thisCase.desid) {
        domTargets = instance.standardDoms[z].children;
        domTargets[0].style.color = domTargets[1].style.color = colorChip.green;
      } else {
        domTargets = instance.standardDoms[z].children;
        domTargets[0].style.color = domTargets[1].style.color = colorChip.gray4;
      }
    }

    margin = 30;

    if (!recycle) {

      instance.whiteBox = {};

      //cancel box
      div_clone = GeneralJs.nodes.div.cloneNode(true);
      div_clone.classList.add("justfadein");
      style = {
        position: "fixed",
        background: colorChip.cancelBlack,
        top: String(0) + ea,
        left: String(motherBoo ? instance.grayBarWidth : 0) + ea,
        width: "calc(100% - " + String(motherBoo ? instance.grayBarWidth : 0) + ea + ")",
        height: "calc(100% - " + String(instance.belowHeight) + ea + ")",
        zIndex: String(2),
      };
      for (let i in style) {
        div_clone.style[i] = style[i];
      }

      div_clone.addEventListener("click", instance.whiteCancelMaker());

      instance.whiteBox.cancelBox = div_clone;
      instance.totalContents.appendChild(div_clone);

    }

    //contents box
    div_clone = GeneralJs.nodes.div.cloneNode(true);
    if (GeneralJs.returnGet().entire !== "true") {
      div_clone.classList.add("fadeup");
    }
    div_clone.classList.add("totalWhite");

    indexArr = [];
    for (let dom of document.querySelectorAll('.' + thisCase["desid"])) {
      indexArr.push(Number(dom.getAttribute("index")));
    }
    indexArr.sort((a, b) => { return a - b; });
    for (let z = 0; z < indexArr.length; z++) {
      if (indexArr[z] === index) {
        requestIndex = z;
      }
    }

    div_clone.setAttribute("index", thisCase["desid"]);
    div_clone.setAttribute("request", String(requestIndex));

    if (GeneralJs.returnGet().entire === "true") {
      style = {
        position: "fixed",
        background: colorChip.white,
        boxShadow: "0 2px 10px -6px " + colorChip.shadow,
        top: String(0) + ea,
        left: String(0) + ea,
        width: String(window.innerWidth) + ea,
        height: String(window.innerHeight) + ea,
        zIndex: String(2),
      };
    } else {
      style = {
        position: "fixed",
        background: colorChip.white,
        top: String(margin) + ea,
        left: String((motherBoo ? instance.grayBarWidth : 0) + margin) + ea,
        borderRadius: String(5) + ea,
        boxShadow: "0 2px 10px -6px " + colorChip.shadow,
        width: String(window.innerWidth - (motherBoo ? instance.grayBarWidth : 0) - (margin * 2)) + ea,
        height: String(window.innerHeight - instance.belowHeight - (margin * 2) - 10) + ea,
        zIndex: String(2),
      };
    }
    for (let i in style) {
      div_clone.style[i] = style[i];
    }

    if (hasQuery("desid")) {
      removeQuery("desid");
    }
    appendQuery({ desid: thisCase[standard[1]] });

    instance.whiteContentsMaker(thisCase, div_clone);
    instance.whiteBox.contentsBox = div_clone;
    instance.whiteBox.index = index;
    instance.whiteBox.id = thisCase[standard[1]];
    instance.totalContents.appendChild(div_clone);
    GeneralJs.stacks.whiteBox = 0;
  }
}

DesignerJs.prototype.whiteViewMaker = function (index) {
  const instance = this;
  return function (e) {
    let tempFunc;
    instance.whiteMatrixA = null;
    instance.whiteMatrixB = null;
    if (GeneralJs.stacks.whiteBox !== 1 && instance.cases[index] !== undefined) {
      if (instance.whiteBox !== null && instance.whiteBox.index !== index) {
        tempFunc = instance.whiteCancelMaker(instance.whiteViewMakerDetail(index, true), true);
        tempFunc();
      } else if (instance.whiteBox === null) {
        tempFunc = instance.whiteViewMakerDetail(index, false);
        tempFunc();
      }
    }
  }
}

DesignerJs.prototype.rowViewMaker = function () {
  const instance = this;
  return function (e) {
    if (instance.totalFather !== null) {
      instance.totalFather.style.zIndex = String(-1);
      instance.totalFather.classList.remove("fadein");
      instance.totalFather.classList.add("fadeout");
    }
    instance.totalMother.classList.remove("justfadeoutoriginal");
    instance.totalMother.classList.add("justfadeinoriginal");
    instance.onView = "mother";
    GeneralJs.timeouts.fadeinTimeout = setTimeout(function () {
      if (instance.totalFather !== null) {
        instance.totalFatherChildren = [];
        instance.totalFather.remove();
      }
      instance.totalFather = null;
      instance.totalMother.classList.remove("justfadeinoriginal");
      clearTimeout(GeneralJs.timeouts.fadeinTimeout);
      GeneralJs.timeouts.fadeinTimeout = null;
    }, 401);
  }
}

DesignerJs.prototype.returnValueEventMaker = function () {
  const instance = this;
  return async function (e) {
    let pastObj;
    let textTargets;
    let mother, nodeArr;
    let targetNode;
    let white;
    let totalWhiteNode;
    let father;
    let targetFatherNode;

    textTargets = [];
    pastObj = await GeneralJs.returnValue();

    //mother
    mother = document.querySelector(".totalMother");
    nodeArr = [];
    for (let node of mother.children[2].children) {
      if (node.className === pastObj.thisId) {
        nodeArr.push(node);
      }
    }
    if (nodeArr.length === 0) {
      return;
    }
    nodeArr.sort((a, b) => { return Number(a.getAttribute("index")) - Number(b.getAttribute("index")); });
    targetNode = nodeArr[Number(pastObj.requestIndex)];
    for (let node of targetNode.children) {
      if (node.getAttribute("column") === pastObj.column) {
        textTargets.push(node);
      }
    }

    //white
    if (document.querySelector(".totalWhite") !== null) {
      totalWhiteNode = instance.whiteBox.propertyBox.children;
      for (let node of totalWhiteNode) {
        if (node.getAttribute("index") === pastObj.column) {
          textTargets.push(node.children[1]);
        }
      }
    }

    //father
    if (document.querySelector(".totalFather") !== null) {
      nodeArr = [];
      for (let node of instance.totalFatherChildren) {
        if (node.getAttribute("desid") === pastObj.thisId) {
          nodeArr.push(node);
        }
      }
      nodeArr.sort((a, b) => { return Number(a.getAttribute("index")) - Number(b.getAttribute("index")) });
      targetFatherNode = nodeArr[Number(pastObj.requestIndex)];
      for (let node of targetFatherNode.children) {
        if (node.className.split("_")[1] === pastObj.column) {
          textTargets.push(node);
        }
      }
    }

    for (let i of textTargets) {
      i.textContent = pastObj.value;
    }
    instance.cases[Number(pastObj.index)][pastObj.column] = pastObj.value;

  }
}

DesignerJs.prototype.reportScrollBox = function (data, motherWidth) {
  const instance = this;
  const { createNode, colorChip, withOut, blankHref, isMac, autoComma, ajaxJson, uniqueValue } = GeneralJs;
  const ea = "px";
  const blank = "&nbsp;&nbsp;&nbsp;";
  const { designers } = data;
  let div_clone;
  let style;
  let entireMargin;
  let margin;
  let scrollBox, boxTop;
  let base;
  let basePaddingTop, basePaddingBottom;
  let divideNumber;
  let tong;
  let area;
  let lineBetween;
  let linePaddingLeft;
  let wordingSize;
  let linePaddingTop, linePaddingBottom;
  let designerSize, desidSize;
  let subTitleLeft, subTitleBottom;
  let matrix, tempArr;

  margin = 12;
  entireMargin = margin * 3;
  boxTop = 90;
  basePaddingTop = 12;
  basePaddingBottom = 8;
  divideNumber = 4;
  lineBetween = 4;
  linePaddingLeft = 20;
  wordingSize = 14;
  linePaddingTop = isMac() ? 14 : 15;
  linePaddingBottom = isMac() ? 16 : 15;
  designerSize = 17;
  desidSize = 11;
  subTitleLeft = 1;
  subTitleBottom = 7;

  //entire scroll box
  scrollBox = GeneralJs.nodes.div.cloneNode(true);
  scrollBox.classList.add("noScrollBar");
  style = {
    position: "relative",
    top: String(boxTop) + ea,
    marginLeft: String(entireMargin) + ea,
    width: withOut(entireMargin * 2, ea),
    height: withOut(boxTop + entireMargin, ea),
    overflow: "scroll",
  };
  for (let z in style) {
    scrollBox.style[z] = style[z];
  }

  matrix = [ [ "디자이너", "제안 횟수", "제안액 누계", "제안액 평균", "평단가 평균", "계약 횟수", "디자인비 누계", "디자인비 평균", "디자인비 평단가", "선금 정산 횟수", "선금 정산 누계", "선금 정산 평균", "잔금 정산 횟수", "잔금 정산 누계", "잔금 정산 평균" ] ];

  for (let designer of designers) {

    tempArr = [];
    tempArr.push(designer.designer);

    designer.proposal = designer.proposal.filter((obj) => { return obj.amount !== 0 });
    designer.process = designer.process.filter((obj) => { return obj.amount !== 0 });
    designer.first = designer.first.filter((obj) => { return obj.amount !== 0 });
    designer.remain = designer.remain.filter((obj) => { return obj.amount !== 0 });

    base = createNode({
      mother: scrollBox,
      style: {
        display: "block",
        position: "relative",
        width: String(100) + '%',
        paddingTop: String(basePaddingTop) + ea,
        paddingBottom: String(basePaddingBottom) + ea,
      }
    });

    createNode({
      mother: base,
      class: [ "hoverDefault_lite" ],
      text: `${designer.designer}&nbsp;&nbsp;<b%${designer.desid}%b>`,
      event: {
        click: (e) => {
          ajaxJson({
            values: matrix,
            newMake: true,
            parentId: "1JcUBOu9bCrFBQfBAG-yXFcD9gqYMRC1c",
            sheetName: "designerReport_" + uniqueValue("hex"),
          }, "/sendSheets").then((res) => {
            const { link } = res;
            blankHref(link);
          }).catch((err) => {
            console.log(err);
          });
          instance.mother.greenAlert("시트 추출이 요청되었습니다. 잠시만 기다려주세요!");
        }
      },
      style: {
        display: "inline-block",
        fontSize: String(designerSize) + ea,
        fontWeight: String(600),
        color: colorChip.black,
        marginLeft: String(subTitleLeft) + ea,
        marginBottom: String(subTitleBottom) + ea,
      },
      bold: {
        fontSize: String(desidSize) + ea,
        fontWeight: String(300),
        color: colorChip.green
      }
    });

    tong = createNode({
      mother: base,
      style: {
        display: "block",
        borderRadius: String(5) + "px",
        border: "1px solid " + colorChip.gray3,
        boxSizing: "border-box",
        width: String(100) + '%',
      }
    });

    for (let i = 0; i < divideNumber; i++) {
      area = createNode({
        mother: tong,
        style: {
          display: "inline-block",
          width: String(100 / divideNumber) + '%',
          borderRight: i === divideNumber - 1 ? "" : "1px dashed " + colorChip.gray3,
          verticalAlign: "top",
          paddingTop: String(linePaddingTop) + ea,
          paddingBottom: String(linePaddingBottom) + ea,
          boxSizing: "border-box",
        }
      });
      if (i === 0) {

        createNode({
          mother: area,
          text: `<b%제안 횟수%b> : ${String(designer.proposal.length)}회`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.proposal.length);

        createNode({
          mother: area,
          text: `<b%제안액 누계%b> : ${autoComma(designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0));

        createNode({
          mother: area,
          text: `<b%제안액 평균%b> : ${designer.proposal.length === 0 ? String(0) : autoComma(Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.proposal.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.proposal.length === 0 ? (0) : (Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.proposal.length) / 1000) * 1000));

        createNode({
          mother: area,
          text: `<b%평단가 평균%b> : ${designer.proposal.length === 0 ? String(0) : autoComma(Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.proposal.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.proposal.length === 0 ? (0) : (Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.proposal.length) / 1000) * 1000));

      } else if (i === 1) {

        createNode({
          mother: area,
          text: `<b%계약 횟수%b> : ${String(designer.process.length)}회`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.process.length);

        createNode({
          mother: area,
          text: `<b%디자인비 누계%b> : ${autoComma(designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0));

        createNode({
          mother: area,
          text: `<b%디자인비 평균%b> : ${designer.process.length === 0 ? String(0) : autoComma(Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.process.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.process.length === 0 ? (0) : (Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.process.length) / 1000) * 1000));

        createNode({
          mother: area,
          text: `<b%디자인비 평단가%b> : ${designer.process.length === 0 ? String(0) : autoComma(Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.process.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.process.length === 0 ? (0) : (Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.process.length) / 1000) * 1000));


      } else if (i === 2) {

        createNode({
          mother: area,
          text: `<b%선금 정산 횟수%b> : ${String(designer.first.length)}회`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.first.length);

        createNode({
          mother: area,
          text: `<b%선금 정산 누계%b> : ${autoComma(designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0));

        createNode({
          mother: area,
          text: `<b%선금 정산 평균%b> : ${designer.first.length === 0 ? String(0) : autoComma(Math.floor((designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.first.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.first.length === 0 ? (0) : (Math.floor((designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.first.length) / 1000) * 1000));

        createNode({
          mother: area,
          text: `<b%평균 평수%b> : ${designer.first.length === 0 ? String(0) : autoComma(Math.floor((designer.first.reduce((acc, curr) => { return acc + curr.pyeong }, 0) / designer.first.length) / 1) * 1)}평`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });

      } else {

        createNode({
          mother: area,
          text: `<b%잔금 정산 횟수%b> : ${String(designer.remain.length)}회`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.remain.length);

        createNode({
          mother: area,
          text: `<b%잔금 정산 누계%b> : ${autoComma(designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0));

        createNode({
          mother: area,
          text: `<b%잔금 정산 평균%b> : ${designer.remain.length === 0 ? String(0) : autoComma(Math.floor((designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.remain.length) / 1000) * 1000)}원`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            marginBottom: String(lineBetween) + ea,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });
        tempArr.push(designer.remain.length === 0 ? (0) : (Math.floor((designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.remain.length) / 1000) * 1000));

        createNode({
          mother: area,
          text: `<b%평균 평수%b> : ${designer.remain.length === 0 ? String(0) : autoComma(Math.floor((designer.remain.reduce((acc, curr) => { return acc + curr.pyeong }, 0) / designer.remain.length) / 1) * 1)}평`,
          style: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(300),
            color: colorChip.black,
            paddingLeft: String(linePaddingLeft) + ea,
          },
          bold: {
            fontSize: String(wordingSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        });

      }
    }

    matrix.push(tempArr);
  }

  return scrollBox;
}

DesignerJs.prototype.reportContents = function (data, mother, loadingIcon) {
  const instance = this;
  const zeroAddition = function (number) {
    if (typeof number === 'string') {
      number = Number(number);
    }
    if (number < 10) {
      return "0" + String(number);
    } else {
      return String(number);
    }
  }
  const vaildValue = function (target) {
    const today = new Date();
    let valueArr0, valueArr1, valueArr2;
    input_clone.style.color = GeneralJs.colorChip.black;
    if (!/[0-9][0-9]\-[0-9][0-9]\-[0-9][0-9] \~ [0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/.test(target.value)) {
      valueArr0 = target.value.split(" ~ ");
      valueArr1 = valueArr0[0].split("-");
      if (valueArr0[1] !== undefined) {
        valueArr2 = valueArr0[1].split("-");
        if (valueArr1.length === 3 && valueArr2.length === 3) {
          target.value = String(valueArr1[0]) + '-' + zeroAddition(valueArr1[1]) + '-' + zeroAddition(valueArr1[2]) + ' ~ ' + String(valueArr2[0]) + '-' + zeroAddition(valueArr2[1]) + '-' + zeroAddition(valueArr2[2]);
        } else {
          target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
        }
      } else {
        target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
      }
    }
    target.value = (/[0-9][0-9]\-[0-9][0-9]\-[0-9][0-9] \~ [0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/.exec(target.value))[0];

    valueArr0 = target.value.split(" ~ ");
    valueArr1 = valueArr0[0].split("-");
    valueArr2 = valueArr0[1].split("-");
    if ((Number(valueArr1[0]) * 12) + Number(valueArr1[1].replace(/^0/, '')) > (Number(valueArr2[0]) * 12) + Number(valueArr2[1].replace(/^0/, ''))) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr1[1].replace(/^0/, '')) > 12 || Number(valueArr1[1].replace(/^0/, '')) < 1) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr2[1].replace(/^0/, '')) > 12 || Number(valueArr2[1].replace(/^0/, '')) < 1) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr1[0]) < 19) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }

    GeneralJs.stacks.reportBoxStartDayInputValue = target.value;
  }
  const response = data;
  const { stringToDate, ajaxJson, dateToString } = GeneralJs;
  const todayString = dateToString(new Date());
  let todayArr = todayString.split('-');
  let todayRange;
  let div_clone, div_clone2, input_clone;
  let style, inputStyle;
  let ea = "px";
  let motherWidth = Number(mother.style.width.replace((new RegExp(ea + '$')), ''));
  const scrollBox = this.reportScrollBox(data, motherWidth);
  let top, height, margin;

  todayRange = dateToString(response.start).slice(2) + " ~ " + dateToString(response.end).slice(2);

  //numbers
  top = 0;
  margin = 36;
  height = 90;

  //search box
  div_clone = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    top: String(top) + ea,
    left: String(margin) + ea,
    width: String(motherWidth - (margin * 2)) + ea,
    height: String(height) + ea,
  };
  for (let i in style) {
    div_clone.style[i] = style[i];
  }

  //start day
  input_clone = GeneralJs.nodes.input.cloneNode(true);
  inputStyle = {
    position: "absolute",
    left: String(0) + ea,
    top: String(40 + (GeneralJs.isMac() ? 0 : 5)) + ea,
    width: String(500) + ea,
    height: String(30) + ea,
    fontSize: String(29) + ea,
    fontWeight: String(200),
    border: String(0) + ea,
    outline: String(0) + ea,
    color: GeneralJs.colorChip.black,
  };
  for (let i in inputStyle) {
    input_clone.style[i] = inputStyle[i];
  }
  input_clone.setAttribute("type", "text");
  input_clone.setAttribute("value", todayRange);
  input_clone.addEventListener("focus", function (e) {
    input_clone.style.color = GeneralJs.colorChip.green;
    GeneralJs.stacks.reportBoxStartDayInputValue = this.value;
  });
  input_clone.addEventListener("blur", function (e) {
    vaildValue(this);
  });
  input_clone.addEventListener("keyup", function (e) {
    if (e.key === "Enter") {
      vaildValue(this);
      const dateArr = this.value.split(" ~ ");
      const startDay = '20' + dateArr[0];
      const endDay = '20' + dateArr[1];
      input_clone.blur();
      mother.removeChild(mother.lastChild);
      loadingIcon.style.animation = "loadingrotate 1.7s linear infinite";
      loadingIcon.style.opacity = "1";

      ajaxJson({
        mode: "designer",
        start: stringToDate(startDay),
        end: stringToDate(endDay),
      }, "/getProjectReport", { equal: true }).then((data) => {
        loadingIcon.style.opacity = "0";
        const scrollBox = instance.reportScrollBox(data, motherWidth);
        mother.appendChild(scrollBox);
      }).catch((err) => {
        console.log(err);
      });

    }
  });

  div_clone.appendChild(input_clone);

  //today box
  div_clone2 = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    fontSize: String(14) + ea,
    fontWeight: String(500) + ea,
    right: String(1) + ea,
    top: String(58) + ea,
    color: GeneralJs.colorChip.green,
  };
  for (let i in style) {
    div_clone2.style[i] = style[i];
  }
  div_clone2.textContent = "today : " + todayString;
  div_clone.appendChild(div_clone2);

  //end
  mother.appendChild(div_clone);

  //scroll box
  mother.appendChild(scrollBox);
}

DesignerJs.prototype.reportViewMakerDetail = function (recycle = false) {
  const instance = this;
  const zeroAddition = function (number) {
    if (number < 10) {
      return "0" + String(number);
    } else {
      return String(number);
    }
  }
  const today = new Date();
  const { stringToDate, ajaxJson, dateToString } = GeneralJs;
  try {
    return function () {
      let div_clone, svg_icon;
      let style;
      let ea = "px";
      let margin;
      let domTargets;
      let motherBoo;
      let width;
      let defaultWeek;
      let ago, agoDate;

      motherBoo = (instance.onView === "mother") ? true : false;

      margin = 30;
      ago = 30;
      agoDate = new Date();
      agoDate.setDate(agoDate.getDate() - ago);

      if (!recycle) {

        instance.whiteBox = {};

        //cancel box
        div_clone = GeneralJs.nodes.div.cloneNode(true);
        div_clone.classList.add("justfadein");
        style = {
          position: "fixed",
          background: GeneralJs.colorChip.cancelBlack,
          top: String(0) + ea,
          left: String(motherBoo ? instance.grayBarWidth : 0) + ea,
          width: "calc(100% - " + String(motherBoo ? instance.grayBarWidth : 0) + ea + ")",
          height: "calc(100% - " + String(instance.belowHeight) + ea + ")",
          zIndex: String(2),
        };
        for (let i in style) {
          div_clone.style[i] = style[i];
        }

        div_clone.addEventListener("click", instance.whiteCancelMaker());

        instance.whiteBox.cancelBox = div_clone;
        instance.totalContents.appendChild(div_clone);

      }

      div_clone = GeneralJs.nodes.div.cloneNode(true);
      div_clone.classList.add("fadeup");
      div_clone.classList.add("totalWhite");
      style = {
        position: "fixed",
        background: GeneralJs.colorChip.white,
        top: String(margin) + ea,
        left: String((motherBoo ? instance.grayBarWidth : 0) + margin) + ea,
        borderRadius: String(5) + ea,
        boxShadow: "0 2px 10px -6px " + GeneralJs.colorChip.shadow,
        width: String(window.innerWidth - (motherBoo ? instance.grayBarWidth : 0) - (margin * 2)) + ea,
        height: String(window.innerHeight - instance.belowHeight - (margin * 2) - 10) + ea,
        zIndex: String(2),
      };
      for (let i in style) {
        div_clone.style[i] = style[i];
      }

      width = 50;

      svg_icon = instance.mother.returnLoadingIcon();
      style = {
        width: String(width) + ea,
        height: String(width) + ea,
        top: 'calc(50% - ' + String(width / 2) + ea + ')',
        left: 'calc(50% - ' + String(width / 2) + ea + ')',
      }
      for (let i in style) {
        svg_icon.style[i] = style[i];
      }
      div_clone.appendChild(svg_icon);

      instance.whiteBox.contentsBox = div_clone;
      instance.totalContents.appendChild(div_clone);

      ajaxJson({
        mode: "designer",
        start: agoDate,
        end: today
      }, "/getProjectReport", { equal: true }).then((data) => {
        svg_icon.style.opacity = "0";
        instance.reportContents(data, div_clone, svg_icon);
      }).catch((err) => {
        console.log(err);
      });

      GeneralJs.stacks.whiteBox = 0;
    }
  } catch (e) {
    GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
    console.log(e);
  }
}

DesignerJs.prototype.reportViewMaker = function () {
  const instance = this;
  return function (e) {
    let tempFunc;
    if (GeneralJs.stacks.whiteBox !== 1) {
      if (instance.whiteBox !== null) {
        if (instance.reportViewMakerDetail !== undefined && instance.reportViewMakerDetail !== null) {
          tempFunc = instance.whiteCancelMaker(instance.reportViewMakerDetail(true), true);
          tempFunc();
        }
      } else {
        if (instance.reportViewMakerDetail !== undefined && instance.reportViewMakerDetail !== null) {
          tempFunc = instance.reportViewMakerDetail(false);
          tempFunc();
        }
      }
    }
  }
}

DesignerJs.prototype.addTransFormEvent = function () {
  const instance = this;
  const { square: { up, down, reportIcon, returnIcon } } = this.mother.belowButtons;
  up.addEventListener("click", this.cardViewMaker());
  down.addEventListener("click", this.rowViewMaker());
  reportIcon.addEventListener("click", this.reportViewMaker());
  returnIcon.addEventListener("click", this.returnValueEventMaker());
}

DesignerJs.prototype.makeSearchEvent = function (search = null) {
  const instance = this;
  return async function (e) {
    if (GeneralJs.confirmKey.includes(e.key)) {

      if (search === null) {
        this.value = this.value.replace(/[ \n]/g, '');
      }

      if (instance.totalFather !== null && instance.totalFather !== undefined) {
        instance.totalFather.style.zIndex = String(-1);
        instance.totalFather.classList.remove("fadein");
        instance.totalFather.classList.add("fadeout");

        instance.totalMother.classList.remove("justfadeoutoriginal");
        instance.totalMother.classList.add("justfadeinoriginal");

        GeneralJs.timeouts.fadeinTimeout = setTimeout(function () {
          instance.totalFatherChildren = [];
          instance.totalFather.remove();
          instance.totalFather = null;
          instance.totalMother.classList.remove("justfadeinoriginal");
          clearTimeout(GeneralJs.timeouts.fadeinTimeout);
          GeneralJs.timeouts.fadeinTimeout = null;
        }, 401);
      }

      let grayOn = false;
      if (GeneralJs.stacks["grayTitle"] !== null) {
        GeneralJs.stacks["grayLeftButton"].setAttribute("set", "second");
        GeneralJs.grayLeftLaunching().call(GeneralJs.stacks["grayLeftButton"], {});
        grayOn = true;
      }

      if (instance.whiteBox !== null) {
        if (instance.whiteBox.cancelBox !== undefined && instance.whiteBox.cancelBox !== null) {
          const cancelFunction = instance.whiteCancelMaker(null, false);
          cancelFunction.call(instance.whiteBox.cancelBox, { type: "click" });
        } else {
          instance.whiteBox === null;
        }
      }
      instance.onView = "mother";

      if (search === null) {
        await instance.spreadData(this.value);
      } else {
        await instance.spreadData(search);
      }

      if (grayOn) {
        GeneralJs.timeouts.grayLeftOnOffTimeout = setTimeout(function () {
          GeneralJs.grayLeftLaunching().call(GeneralJs.stacks["grayLeftButton"], {});
          clearTimeout(GeneralJs.timeouts.grayLeftOnOffTimeout);
          GeneralJs.timeouts.grayLeftOnOffTimeout = null;
        }, 501);
      }

      if (GeneralJs.stacks["dashboardBoxBoo"]) {
        GeneralJs.dashboardBoxLaunching(GeneralJs.stacks["dashboardBox"], true);
      }

    }
  }
}

DesignerJs.prototype.addSearchEvent = function () {
  const instance = this;
  const input = this.searchInput;
  input.addEventListener("keypress", this.makeSearchEvent(null));
}

DesignerJs.prototype.backGrayBar = function () {
  const instance = this;
  let div_clone;
  let style;
  let ea = "px";

  div_clone = GeneralJs.nodes.div.cloneNode(true);
  style = {
    position: "absolute",
    background: GeneralJs.colorChip.gray0,
    width: String(this.grayBarWidth) + ea,
    height: String(100) + "vh",
    top: String(0) + ea,
    left: String(0) + ea,
    zIndex: String(0),
  };
  for (let i in style) {
    div_clone.style[i] = style[i];
  }

  this.totalContents.appendChild(div_clone);
}

DesignerJs.prototype.extractViewMakerDetail = function (recycle = false, link) {
  const instance = this;
  try {
    return function () {
      let div_clone;
      let style;
      let ea = "px";
      let margin;
      let domTargets;
      let motherBoo;
      let width;
      let iframe;
      let whiteArea;

      motherBoo = (instance.onView === "mother") ? true : false;

      margin = 30;

      if (!recycle) {

        instance.whiteBox = {};

        //cancel box
        div_clone = GeneralJs.nodes.div.cloneNode(true);
        div_clone.classList.add("justfadein");
        style = {
          position: "fixed",
          background: GeneralJs.colorChip.cancelBlack,
          top: String(0) + ea,
          left: String(motherBoo ? instance.grayBarWidth : 0) + ea,
          width: "calc(100% - " + String(motherBoo ? instance.grayBarWidth : 0) + ea + ")",
          height: "calc(100% - " + String(instance.belowHeight) + ea + ")",
          zIndex: String(2),
        };
        for (let i in style) {
          div_clone.style[i] = style[i];
        }

        div_clone.addEventListener("click", instance.whiteCancelMaker());

        instance.whiteBox.cancelBox = div_clone;
        instance.totalContents.appendChild(div_clone);

      }

      div_clone = GeneralJs.nodes.div.cloneNode(true);
      div_clone.classList.add("fadeup");
      div_clone.classList.add("totalWhite");
      style = {
        position: "fixed",
        background: GeneralJs.colorChip.white,
        top: String(margin) + ea,
        left: String((motherBoo ? instance.grayBarWidth : 0) + margin) + ea,
        borderRadius: String(5) + ea,
        boxShadow: "0 2px 10px -6px " + GeneralJs.colorChip.shadow,
        width: String(window.innerWidth - (motherBoo ? instance.grayBarWidth : 0) - (margin * 2)) + ea,
        height: String(window.innerHeight - instance.belowHeight - (margin * 2) - 10) + ea,
        zIndex: String(2),
      };
      for (let i in style) {
        div_clone.style[i] = style[i];
      }

      iframe = document.createElement("IFRAME");
      iframe.setAttribute("src", link);
      iframe.setAttribute("width", "90%");
      iframe.setAttribute("height", "90%");
      style = {
        border: 0,
        width: "calc(100% - 50px)",
        height: "calc(100% - 60px)",
        top: "30px",
        left: "25px",
        position: "absolute",
        borderRadius: "5px",
        overflow: "hidden",
      };
      for (let i in style) {
        iframe.style[i] = style[i];
      }
      div_clone.appendChild(iframe);


      whiteArea = document.createElement("A");
      style = {
        border: 0,
        width: "calc(100% - 50px)",
        height: "calc(25% - 60px)",
        top: "30px",
        left: "25px",
        position: "absolute",
        cursor: "pointer",
      };
      for (let i in style) {
        whiteArea.style[i] = style[i];
      }
      whiteArea.setAttribute('href', link);
      whiteArea.setAttribute('target', '_blank');
      div_clone.appendChild(whiteArea);

      instance.whiteBox.contentsBox = div_clone;
      instance.totalContents.appendChild(div_clone);

      GeneralJs.stacks.whiteBox = 0;
    }
  } catch (e) {
    GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
    console.log(e);
  }
}

DesignerJs.prototype.extractViewMaker = function (link) {
  const instance = this;
  return function (e) {
    let tempFunc;
    instance.whiteMatrixA = null;
    instance.whiteMatrixB = null;
    if (GeneralJs.stacks.whiteBox !== 1) {
      if (instance.whiteBox !== null) {
        tempFunc = instance.whiteCancelMaker(instance.extractViewMakerDetail(true, link), true);
        tempFunc();
      } else {
        tempFunc = instance.extractViewMakerDetail(false, link);
        tempFunc();
      }
    }
  }
}

DesignerJs.prototype.addExtractEvent = function () {
  const instance = this;
  const { sub: { extractIcon } } = this.mother.belowButtons;
  let sendEvent;

  sendEvent = async function (e) {
    try {
      const today = new Date();
      const caseCopied = JSON.parse(JSON.stringify(instance.cases));
      caseCopied.shift();
      const parentId = "1JcUBOu9bCrFBQfBAG-yXFcD9gqYMRC1c";
      const map = DataPatch.designerMap();

      let data;
      let valuesArr;
      let temp, temp2;
      let div_clone, svg_clone;
      let style;
      let ea = "px";
      let width;

      valuesArr = [];

      temp2 = Object.keys(caseCopied[0]);
      temp = [];
      for (let i of temp2) {
        if (map[i] === undefined || typeof map[i] !== "object") {
          temp.push("알 수 없음");
        } else {
          temp.push(map[i].name);
        }
      }
      valuesArr.push(temp);

      for (let i = 0; i < caseCopied.length; i++) {
        temp2 = Object.values(caseCopied[i]);
        valuesArr.push(temp2);
      }

      data = '';
      data += "values=";
      data += JSON.stringify(valuesArr).replace(/&/g, '').replace(/=/g, '');
      data += "&newMake=";
      data += "true";
      data += "&parentId=";
      data += parentId;
      data += "&sheetName=";
      data += "fromDB_designer_" + String(today.getFullYear()) + instance.mother.todayMaker();

      div_clone = GeneralJs.nodes.div.cloneNode(true);
      div_clone.classList.add("justfadein");
      style = {
        position: "fixed",
        zIndex: String(2),
        background: GeneralJs.colorChip.black,
        opacity: String(0.2),
        width: "100%",
        height: "100%",
        top: String(0),
        left: String(0),
      };
      for (let i in style) {
        div_clone.style[i] = style[i];
      }
      instance.totalMother.appendChild(div_clone);

      width = 50;
      svg_clone = instance.mother.returnLoadingIcon();
      style = {
        position: "fixed",
        zIndex: String(2),
        width: String(width) + ea,
        height: String(width) + ea,
        top: "calc(50% - " + String((width / 2) + 60) + ea + ")",
        left: "calc(50% - " + String((width / 2)) + ea + ")",
      };
      for (let i in style) {
        svg_clone.style[i] = style[i];
      }
      instance.totalMother.appendChild(svg_clone);

      GeneralJs.ajax(data, "/sendSheets", function (res) {
        const link = JSON.parse(res).link;
        div_clone.classList.remove("justfadein");
        div_clone.classList.add("justfadeout");
        svg_clone.style.opacity = "0";
        GeneralJs.timeouts["extractPendingBack"] = setTimeout(function () {
          let viewFunction;
          instance.totalMother.removeChild(instance.totalMother.lastChild);
          instance.totalMother.removeChild(instance.totalMother.lastChild);
          viewFunction = instance.extractViewMaker(link);
          viewFunction();
          clearTimeout(GeneralJs.timeouts["extractPendingBack"]);
          GeneralJs.timeouts["extractPendingBack"] = null;
        }, 401);
      });

    } catch (e) {
      GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
      console.log(e);
    }
  }

  extractIcon.addEventListener("click", sendEvent);
}

DesignerJs.prototype.makeClipBoardEvent = function (id) {
  const instance = this;
  return async function (e) {
    if (e.cancelable) {
      e.preventDefault();
    }
    try {
      await window.navigator.clipboard.writeText(id);
      instance.mother.greenAlert(`클립보드에 저장되었습니다!`);
    } catch (e) {
      GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
      console.log(e);
    }
  }
}

DesignerJs.prototype.whiteResize = function () {
  const instance = this;
  const { returnGet } = GeneralJs;
  const getObj = returnGet();
  const normalMode = (getObj.dataonly === "true" && getObj.entire === "true" && getObj.normal === "true");
  this.resizeStack = 0;
  this.resizeFrom = 0;
  this.resizePopup = 0;
  const resizeDebounceEvent = function () {
    let timeout;
    const reEvent = function () {
      if (instance.whiteBox !== undefined && instance.whiteBox !== null) {
        if (instance.whiteBox.id !== undefined) {
          console.log(getObj)
          if (normalMode) {
            window.location.search = "desid=" + instance.whiteBox.id + "&mode=general&dataonly=true&entire=true&normal=true";
          } else {
            window.location.search = "desid=" + instance.whiteBox.id + "&mode=general";
          }
        } else {
          window.location.reload();
        };
      }
      instance.resizeStack = 0;
    }
    let immediate = null;
    return function (e) {
      if (instance.resizeStack === 0) {
        instance.resizeStack = 1;
        instance.resizeFrom = window.innerWidth;
      }
      let context = this;
      let args = arguments;
      function later() {
        timeout = null;
        if (!immediate) { reEvent.apply(context, args); };
      }
      let callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, 250);
      if (callNow) { reEvent.apply(context, args); };
    }
  }
  window.addEventListener('resize', resizeDebounceEvent());
}

DesignerJs.prototype.adminDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip, removeByClass } = GeneralJs;
  const memoBaseClassName = "memoBaseClassName";
  const possiblePopupClassName = "possiblePopupClassName";
  let target, pastScrollTop;

  removeByClass(possiblePopupClassName);

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  this.pageHistory.unshift({ path: "admin", status: "list", desid });
  window.history.pushState({ path: "admin", status: "list", desid }, '');

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  target = null;
  for (let i = 0; i < this.standardDoms.length; i++) {
    if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
      if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
        target = i;
      }
    }
  }
  for (let i = 1; i < this.standardDoms.length; i++) {
    if (i !== target) {
      this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
    } else {
      this.standardDoms[i].style.color = colorChip.green;
      if (i !== 1) {
        if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
          standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
        }
      } else {
        standardBar.parentElement.scrollTo({ top: 0 });
      }
    }
  }

  this.adminDetail(desid);
  this.adminIconSet(desid);
  scrollTo(totalMother, pastScrollTop);
  if (callback !== null) {
    if (typeof callback === "function") {
      callback();
    }
  }

  if ([ ...document.querySelectorAll('.' + memoBaseClassName) ].length > 0 && typeof instance.adminMemoSystem === "function") {
    instance.adminMemoSystem(desid).catch((err) => { console.log(err); });
  }
}

DesignerJs.prototype.adminDetail = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const { entireMode, normalMode } = this;
  const matrixButtonConst = "matrixButtons_" + desid;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const mobile = this.media[4];
  const desktop = normalMode ? true : !mobile;
  let designer;
  let information, analytics;
  let margin;
  let baseTong0, baseTong;
  let level1Width, level1Left;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let alphabetWidth;
  let factorHeight, factorWidth;
  let tendencyTop, tendencyHeight;
  let tendencyFactorHeight, tendencyIndent, tendencyWidthIndent;
  let textAreaTop;
  let baseTongMarginBottom;
  let mobileTendencyTop;
  let mobileTendencyVisualMargin;
  let mobileTendencyIntend;
  let baseTongPaddingTop, baseTongPaddingBottom;
  let mobileOuterMargin;
  let marginVisual;

  designer = this.designers.pick(desid);
  information = designer.information;
  analytics = designer.analytics;

  margin = 7;
  marginVisual = 4;
  level1Width = <%% 210, 172, 172, 172, 34 %%>;
  level1Left = <%% 160, 136, 136, 136, 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 11 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 3.5 %%>;

  tendencyTop = <%% 3, 3, 3, 3, 0.8 %%>;
  tendencyHeight = <%% 16, 16, 16, 16, 4 %%>;
  alphabetWidth = <%% 30, 30, 30, 30, 7 %%>;

  factorHeight = <%% 38, 36, 36, 36, 8.2 %%>;
  factorWidth = <%% 210, 172, 172, 172, 210 %%>;
  tendencyFactorHeight = <%% 30, 30, 30, 30, 7 %%>;
  tendencyIndent = <%% 105, 71, 71, 71, 65 %%>;
  tendencyWidthIndent = -135;

  textAreaTop = <%% (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), -0.7 %%>;

  mobileTendencyTop = 8;
  mobileTendencyVisualMargin = 13;
  mobileTendencyIntend = 20;

  baseTongPaddingTop = 1;
  baseTongPaddingBottom = 20;
  mobileOuterMargin = 4;

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String((GeneralJs.returnGet().normal === "true" ? margin * 1.5 : margin * 3)) + ea : (String(0)),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin) - marginVisual) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2) - (marginVisual * 2), ea),
      height: withOut((GeneralJs.returnGet().normal === "true" ? margin * 1.5 : margin * 3), ea),
      animation: "",
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: colorChip.white,
      height: withOut(0, ea),
      overflow: "scroll",
      paddingTop: desktop ? "" : String(baseTongPaddingTop) + ea,
      paddingBottom: desktop ? "" : String(baseTongPaddingBottom) + ea,
    },
    child: {
      mode: "iframe",
      attribute: { src: BACKHOST + "/middle/designerAbout?desid=" + designer.desid + "&entire=true&normal=true" },
      style: {
        position: "relative",
        display: "block",
        top: String(0),
        left: String(0),
        width: withOut(0, ea),
        height: withOut(0, ea),
        border: String(0),
      }
    }
  });

  instance.adminProjectsView(desid, baseTong0).catch((err) => { console.log(err); });
  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.isEmptyString = function (string) {
  const instance = this;
  if (/^[0-9]/.test(string) && /[0-9]$/.test(string) && string.length > 5 && string.replace(/[0-9]/gi, '') === '') {
    return true;
  } else {
    return false;
  }
}

DesignerJs.prototype.adminProjectsView = async function (desid, base) {
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, stringToDate, findByAttribute, setQueue, uniqueValue, sleep, blankHref, scrollTo, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const panClassName = "panClassName";
  try {
    let designer;
    let projects, clients;
    let client;
    let requestNumber;
    let baseTong;
    let thisMother;
    let motherMargin;
    let blockHeight;
    let project;
    let projectTong;
    let basicSize;
    let textTop;
    let state;
    let lineTop;
    let statusWidth;
    let blockMargin;
    let smallSize;
    let smallTextTop;
    let basicMarginLeft, smallMarginLeft;
    let circleWidth;
    let moreWidth;
    let projectDetailTong;
    let checklist;
    let type;
    let key;
    let title;
    let action;
    let typeObj;
    let panContents;
    let innerMargin;
    let panPaddingLeft;
    let panBetween;
    let panPaddingTop;
    let panTitleSize;
    let panTitleWeight;
    let panTitleBottom;
    let subButtonTop;
    let subButtonHeight;
    let subButtonSize;
    let subButtonWeight;
    let subButtonTextPadding;
    let panContentsPaddingTop;
    let panContentsMinHeight;
    let minTotalHeight;
    let divideNumber;
    let photoDivideNumber;
    let blockBetween;
    let blockHeight2;
    let blockSize;
    let blockWeight;
    let linkImageHeight;
    let targetProjectBlock;

    motherMargin = 24;
    blockHeight = 52;
    blockMargin = 4;

    basicSize = 16;
    textTop = (isMac() ? -1 : 1);
    smallSize = 12;
    smallTextTop = (isMac() ? 1 : 3);

    lineTop = 18;
    statusWidth = 100;

    basicMarginLeft = 36;
    smallMarginLeft = 6;

    circleWidth = 6;
    moreWidth = 90;

    innerMargin = 16;
    panBetween = 6;
    panPaddingTop = 15;
    panPaddingLeft = 18;

    panTitleSize = 13;
    panTitleWeight = 700;
    panTitleBottom = 5;

    subButtonTop = 2;
    subButtonHeight = 21;
    subButtonSize = 10;
    subButtonWeight = 800;
    subButtonTextPadding = 8;

    panContentsPaddingTop = 12;
    panContentsMinHeight = 80;

    minTotalHeight = 1400;

    divideNumber = 8;
    photoDivideNumber = 6;
    blockBetween = 5;

    blockHeight2 = 40;
    blockSize = 12;
    blockWeight = 400;

    linkImageHeight = 147;

    typeObj = {};

    designer = this.designers.pick(desid);
    baseTong = base.firstChild;

    projects = await ajaxJson({ whereQuery: { desid } }, SECONDHOST + "/getProjects", { equal: true });
    if (projects.length > 0) {
      clients = await ajaxJson({ whereQuery: { $or: projects.map((obj) => { return { cliid: obj.cliid } }) } }, SECONDHOST + "/getClients", { equal: true });
    } else {
      clients = [];
    }
    for (let project of projects) {
      client = clients.find((obj) => { return obj.cliid === project.cliid });
      requestNumber = 0;
      for (let z = 0; z < client.requests.length; z++) {
        if (client.requests[z].request.timeline.valueOf() <= project.proposal.date.valueOf()) {
          requestNumber = z;
          break;
        }
      }
      project.name = client.name;
      project.timeline = client.requests[requestNumber].request.timeline;
    }
    projects.sort((a, b) => {
      const emptyValue = Math.abs((new Date(1200, 0, 1)).valueOf());
      let aConst, bConst;

      if (/드[랍롭]/gi.test(a.process.status) || /홀[드딩]/gi.test(a.process.status)) {
        aConst = 1;
      } else if (/완료/gi.test(a.process.status)) {
        aConst = 10000;
      } else {
        aConst = 100000000;
      }

      if (/드[랍롭]/gi.test(b.process.status) || /홀[드딩]/gi.test(b.process.status)) {
        bConst = 1;
      } else if (/완료/gi.test(b.process.status)) {
        bConst = 10000;
      } else {
        bConst = 100000000;
      }

      return ((b.process.contract.form.date.from.valueOf() + emptyValue) * bConst) - ((a.process.contract.form.date.from.valueOf() + emptyValue) * aConst);
    });

    checklist = await ajaxJson({}, SECONDHOST + "/getChecklist", { equal: true });

    thisMother = createNode({
      mother: baseTong,
      style: {
        display: "block",
        position: "relative",
        width: String(100) + '%',
        paddingTop: String(motherMargin) + ea,
        paddingBottom: String(motherMargin) + ea,
      },
      child: {
        style: {
          display: "block",
          position: "relative",
          marginLeft: String(motherMargin) + ea,
          marginRight: String(motherMargin) + ea,
          width: withOut(motherMargin * 2, ea),
        }
      }
    }).firstChild;

    this.projectAreas = [];
    this.projectBlocks = [];
    for (let i = 0; i < projects.length; i++) {

      project = projects[i];
      state = 0;
      if (/드[랍롭]/gi.test(project.process.status) || /홀[드딩]/gi.test(project.process.status)) {
        state = 3;
      } else if (/완료/gi.test(project.process.status)) {
        state = 2;
      }

      projectTong = createNode({
        mother: thisMother,
        attribute: {
          proid: project.proid,
          desid: designer.desid,
          cliid: project.cliid,
          name: project.name,
          timeline: dateToString(project.timeline),
          toggle: "off",
        },
        event: {
          click: async function (e) {
            const proid = this.getAttribute("proid");
            const desid = this.getAttribute("desid");
            const cliid = this.getAttribute("cliid");
            const name = this.getAttribute("name");
            const timeline = stringToDate(this.getAttribute("timeline"));
            const targetArea = findByAttribute(instance.projectAreas, "proid", proid);
            const toggle = this.getAttribute("toggle");
            const targetHref = BRIDGEHOST.replace(/\:3000/gi, '') + "/photo/designer" + "/" + desid + "/" + proid;
            const linkTargetKey = [ "productLink" ];
            const preItemMotherKey = "firstPhoto";
            const preItemHex = "070a916ebdea87fae21233050e1b322eb4694980e1bced5012199be287e2e92d";
            const hashConst = "homeliaisonHash";
            const load = targetArea.getAttribute("load");
            const emptyDate = new Date(1800, 0, 1);
            let itemList, indexTong;
            let file, link, memo;
            let image;
            let id;
            let linkTargets;
            let linkContents;
            let preItemList;
            let tempArr;
            let preIndex;
            let preItemHexId;
            let fileItemList;
            let photoItemList;
            let targets;

            try {
              if (toggle === "off") {

                targetArea.style.minHeight = String(minTotalHeight) + ea;
                targetArea.style.height = String(1) + ea;
                setQueue(() => {
                  targetArea.style.height = "auto";
                }, 1001);
                this.setAttribute("toggle", "on");

                if (load === "false") {
                  itemList = await ajaxJson({ target: desid + "/" + proid }, BRIDGEHOST + "/middlePhotoRead", { equal: true });
                  preItemList = await ajaxJson({ cliid }, BRIDGEHOST + "/clientPhoto", { equal: true });

                  linkTargets = itemList.filter((str) => { return linkTargetKey.includes(str.split("_")[0]) });
                  linkContents = await ajaxJson({ links: linkTargets.map((file) => { return { desid, proid, file } }) }, BRIDGEHOST + "/middleLinkParsing", { equal: true });

                  tempArr = [];
                  preIndex = 1;
                  for (let original of preItemList.sitePhoto) {
                    preItemHexId = ((new RegExp("^" + hashConst + "_", "g")).test(original.split("/")[original.split("/").length - 1]) ? original.split("/")[original.split("/").length - 1].split("_")[1] : preItemHex);
                    tempArr.push({
                      fileName: [
                        preItemMotherKey,
                        String(timeline.valueOf()),
                        String(preIndex),
                        preItemHexId + "." + original.split(".")[original.split(".").length - 1],
                      ].join("_"),
                      original,
                    });
                    preIndex++;
                  }
                  itemList = tempArr.concat(itemList);

                  indexTong = {};
                  fileItemList = [];
                  photoItemList = [];
                  itemList.forEach((raw) => {
                    let originalRoot;
                    if (typeof raw !== "string") {
                      originalRoot = raw.original;
                      raw = raw.fileName;
                    } else {
                      originalRoot = targetHref + "/" + raw;
                    }
                    const [ key, timeString, orderString, hex ] = raw.split("_");
                    const [ hexString, exe ] = hex.split(".");
                    const mother = findByAttribute(targetArea.querySelectorAll('.' + panClassName), "key", key);
                    const date = dateToString(new Date(Number(timeString)));

                    id = key + "_" + timeString + "_" + String(orderString) + "_" + hexString;

                    if (indexTong[key] === undefined) {
                      indexTong[key] = 0;
                    } else {
                      indexTong[key] = indexTong[key] + 1;
                    }

                    if (typeObj[key] === "file") {

                      createNode({
                        mother,
                        attribute: {
                          src: originalRoot,
                          link: originalRoot
                        },
                        event: {
                          click: function (e) {
                            const link = this.getAttribute("link");
                            blankHref(link);
                          }
                        },
                        style: {
                          display: "inline-flex",
                          position: "relative",
                          width: "calc(calc(100% - " + String(blockBetween * (divideNumber - 1)) + ea + ") / " + String(divideNumber) + ")",
                          height: String(blockHeight2) + ea,
                          marginRight: String((indexTong[key] % divideNumber === (divideNumber - 1)) ? 0 : blockBetween) + ea,
                          marginBottom: String(blockBetween) + ea,
                          background: colorChip.white,
                          borderRadius: String(5) + "px",
                          flexDirection: "column",
                          alignItems: "center",
                          justifyContent: "center",
                          textAlign: "center",
                          cursor: "pointer",
                        },
                        child: {
                          id,
                          attribute: {
                            exe,
                            date: date.split("-").slice(1).join("/"),
                          },
                          text: (date + "_" + orderString + "." + exe),
                          style: {
                            fontSize: String(blockSize) + ea,
                            fontWeight: String(blockWeight),
                            color: colorChip.black,
                            position: "relative",
                            top: String(isMac() ? -1 : 1) + ea,
                          }
                        }
                      });
                      fileItemList.push({
                        hash: hexString,
                        target: id
                      });

                    } else if (typeObj[key] === "photo") {

                      createNode({
                        mother: [ ...mother.children ][indexTong[key] % photoDivideNumber],
                        style: {
                          display: "block",
                          position: "relative",
                          width: withOut(0, ea),
                          marginBottom: String(blockBetween) + ea,
                          cursor: "pointer",
                        },
                        children: [
                          {
                            mode: "img",
                            attribute: {
                              src: originalRoot,
                              link: originalRoot
                            },
                            event: {
                              click: function (e) {
                                const link = this.getAttribute("link");
                                blankHref(link);
                              }
                            },
                            style: {
                              display: "block",
                              position: "relative",
                              width: withOut(0),
                              borderTopLeftRadius: String(5) + "px",
                              borderTopRightRadius: String(5) + "px",
                            }
                          },
                          {
                            id,
                            attribute: {
                              height: String(blockHeight2) + ea,
                              date: date.split("-").slice(1).join("/"),
                            },
                            style: {
                              display: "flex",
                              justifyContent: "center",
                              alignItems: "center",
                              width: withOut(0, ea),
                              height: String(0),
                              borderBottomLeftRadius: String(5) + "px",
                              borderBottomRightRadius: String(5) + "px",
                              background: desktop ? colorChip.white : colorChip.gray0,
                              textAlign: "center",
                              overflow: "hidden",
                              boxShadow: "0px 1px 8px -6px " + colorChip.shadow,
                              transition: "all 0.3s ease",
                            },
                            child: {
                              text: "",
                              style: {
                                display: "inline-block",
                                position: "relative",
                                top: String(isMac() ? -1 : 1) + ea,
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.black,
                              },
                              bold: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.deactive,
                              }
                            }
                          }
                        ]
                      });
                      photoItemList.push({
                        hash: hexString,
                        target: id
                      });

                    } else if (typeObj[key] === "link") {

                      ({ link, memo } = linkContents.find(({ file }) => { return file === raw }))
                      id = raw.replace(/[\_\-\.]/gi, '');

                      createNode({
                        mother,
                        attribute: {
                          link,
                        },
                        event: {
                          click: function (e) {
                            const link = this.getAttribute("link");
                            blankHref(link);
                          }
                        },
                        style: {
                          display: "inline-flex",
                          position: "relative",
                          width: "calc(calc(100% - " + String(blockBetween * (divideNumber - 1)) + ea + ") / " + String(divideNumber) + ")",
                          marginRight: String((indexTong[key] % divideNumber === (divideNumber - 1)) ? 0 : blockBetween) + ea,
                          marginBottom: String(blockBetween) + ea,
                          flexDirection: "column",
                          textAlign: "center",
                          cursor: "pointer",
                        },
                        children: [
                          {
                            id,
                            style: {
                              display: "block",
                              position: "relative",
                              width: withOut(0, ea),
                              height: String(linkImageHeight) + ea,
                              background: colorChip.white,
                              borderTopLeftRadius: String(5) + "px",
                              borderTopRightRadius: String(5) + "px",
                              backgroundPosition: "50% 50%",
                              backgroundSize: "100% auto",
                              backgroundRepeat: "no-repeat",
                            }
                          },
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              width: withOut(0, ea),
                              height: String(blockHeight2) + ea,
                              background: colorChip.white,
                              borderBottomLeftRadius: String(5) + "px",
                              borderBottomRightRadius: String(5) + "px",
                              flexDirection: "column",
                              alignItems: "center",
                              justifyContent: "center",
                              textAlign: "center",
                            },
                            child: {
                              text: memo + " <b%(" + date.split("-").slice(1).join("/") + ")%b>",
                              style: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.black,
                                position: "relative",
                                top: String(isMac() ? -1 : 1) + ea,
                              },
                              bold: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.deactive,
                              }
                            }
                          }
                        ]
                      });

                      ajaxJson({ mode: "image", url: window.encodeURIComponent(link), target: id }, "/getOpenGraph").then(({ image, target }) => {
                        target = targetArea.querySelector('#' + target);
                        target.style.backgroundImage = "url('" + image + "')";
                      }).catch((err) => {
                        console.log(err);
                      });

                    }
                  });

                  targetArea.setAttribute("load", "true");

                  targets = await ajaxJson({ mode: "decrypto", targets: fileItemList }, SECONDHOST + "/homeliaisonCrypto", { equal: true });
                  for (let { string, target } of targets) {
                    target = targetArea.querySelector('#' + target);
                    if (string.trim() !== "") {
                      target.textContent = "";
                      target.insertAdjacentHTML("beforeend", string + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    }
                  }

                  targets = await ajaxJson({ mode: "decrypto", targets: photoItemList }, SECONDHOST + "/homeliaisonCrypto", { equal: true });
                  for (let { string, target } of targets) {
                    target = targetArea.querySelector('#' + target);
                    target.style.height = target.getAttribute("height");
                    target.firstChild.textContent = "";
                    if (!instance.isEmptyString(string)) {
                      target.firstChild.insertAdjacentHTML("beforeend", string + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    } else {
                      target.firstChild.insertAdjacentHTML("beforeend", "- " + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    }
                  }

                }

              } else {

                targetArea.style.minHeight = String(0) + ea;
                targetArea.style.height = String(0) + ea;
                this.setAttribute("toggle", "off");

              }
            } catch (e) {
              console.log(e);
            }
          }
        },
        style: {
          display: "flex",
          flexDirection: "row",
          position: "relative",
          height: String(blockHeight) + ea,
          width: withOut(0, ea),
          borderRadius: String(5) + "px",
          background: state >= 3 ? colorChip.gray4 : (state === 2 ? colorChip.gray2 : colorChip.gray0),
          alignItems: "center",
          cursor: "pointer",
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          width: String(statusWidth) + ea,
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
        },
        child: {
          text: project.process.status,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(600),
            color: state === 0 ? colorChip.black : colorChip.deactive,
          },
          next: {
            style: {
              position: "absolute",
              right: String(0),
              top: String(lineTop) + ea,
              height: withOut(lineTop * 2, ea),
              borderRight: "1px solid " + colorChip.gray4,
            }
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(basicMarginLeft) + ea,
        },
        child: {
          text: project.name,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(500),
            color: colorChip.black,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(smallMarginLeft) + ea,
        },
        child: {
          text: project.proid,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(smallTextTop) + ea,
            fontSize: String(smallSize) + ea,
            fontWeight: String(300),
            color: colorChip.deactive,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(basicMarginLeft) + ea,
        },
        child: {
          text: "문의 : " + dateToString(project.timeline).slice(2) + "&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;" + dateToString(project.process.contract.form.date.from).slice(2) + " ~ " + dateToString(project.process.contract.form.date.to).slice(2),
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(300),
            color: colorChip.deactive,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "absolute",
          width: String(moreWidth) + ea,
          height: withOut(0, ea),
          right: String(0),
          background: "transparent",
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        children: [
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
            }
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
              marginLeft: String(circleWidth / 2) + ea,
              marginRight: String(circleWidth / 2) + ea,
            }
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
            }
          },
        ]
      });
      this.projectBlocks.push(projectTong);

      // detail area
      projectDetailTong = createNode({
        mother: thisMother,
        attribute: {
          proid: project.proid,
          load: "false",
        },
        display: "flex",
        minHeight: String(0) + ea,
        height: String(0),
        width: withOut(0, ea),
        borderRadius: String(5) + "px",
        background: colorChip.gray4,
        marginBottom: String(blockMargin) + ea,
        transition: "all 1s ease",
        overflow: "hidden",
        flexDirection: "column",
      });
      this.projectAreas.push(projectDetailTong);

      typeObj = {};
      for (let x = 0; x < checklist.length; x++) {
        for (let y = 0; y < checklist[x].children.length; y++) {

          type = checklist[x].children[y].type;
          key = checklist[x].children[y].key;
          title = checklist[x].children[y].title;
          action = checklist[x].children[y].action;
          typeObj[key] = type;

          panContents = createNode({
            mother: projectDetailTong,
            style: {
              display: "block",
              position: "relative",
              marginLeft: String(innerMargin) + ea,
              width: withOut((innerMargin * 2) + (panPaddingLeft * 2), ea),
              borderRadius: String(5) + "px",
              background: colorChip.gray1,
              paddingTop: String(panPaddingTop) + ea,
              paddingLeft: String(panPaddingLeft) + ea,
              paddingRight: String(panPaddingLeft) + ea,
              paddingBottom: String(panPaddingTop) + ea,
              marginTop: (x === 0 && y === 0 ? String(innerMargin) + ea : ""),
              marginBottom: (x === checklist.length - 1 && y === checklist[x].children.length - 1 ? String(innerMargin) + ea : String(panBetween) + ea),
            },
            child: {
              set: "flex",
              style: {
                width: withOut(0, ea),
                flexDirection: "row",
              },
              child: {
                text: title,
                style: {
                  display: "inline-block",
                  position: "relative",
                  fontSize: String(panTitleSize) + ea,
                  fontWeight: String(panTitleWeight),
                  color: colorChip.black,
                  paddingBottom: String(panTitleBottom) + ea,
                  borderBottom: "1px solid " + colorChip.deactive,
                },
                next: {
                  attribute: {
                    key,
                    title,
                    desid: designer.desid,
                    designer: designer.designer,
                    proid: project.proid,
                    name: project.name,
                    phone: designer.information.phone,
                  },
                  event: {
                    click: async function (e) {
                      try {
                        const key = this.getAttribute("key");
                        const title = this.getAttribute("title");
                        const desid = this.getAttribute("desid");
                        const designer = this.getAttribute("designer");
                        const proid = this.getAttribute("proid");
                        const name = this.getAttribute("name");
                        const phone = this.getAttribute("phone");
                        const host = FRONTHOST.replace(/^https\:\/\//gi, '');
                        const path = "process";

                        if (window.confirm(designer + "실장님께 알림톡을 보낼까요?")) {
                          await ajaxJson({
                            method: "pushDesignerFile",
                            name: designer,
                            phone: phone,
                            option: {
                              designer: designer,
                              client: name,
                              file: title,
                              host: host,
                              path: path,
                              proid: proid,
                            }
                          }, BACKHOST + "/alimTalk");
                          window.alert(designer + " 실장님에게 알림톡을 전송하였습니다!");
                        }

                      } catch (e) {
                        console.log(e);
                      }
                    }
                  },
                  style: {
                    display: "inline-flex",
                    position: "absolute",
                    right: String(0),
                    top: String(subButtonTop) + ea,
                    height: String(subButtonHeight) + ea,
                    background: colorChip.black,
                    borderRadius: String(5) + "px",
                    cursor: "pointer",
                    textAlign: "center",
                    justifyContent: "center",
                    alignItems: "center",
                  },
                  child: {
                    text: "디자이너에게 " + title + " 업로드 알림톡",
                    style: {
                      display: "inline-block",
                      position: "relative",
                      top: String(isMac() ? -1 : 1) + ea,
                      fontSize: String(subButtonSize) + ea,
                      fontWeight: String(subButtonWeight),
                      color: colorChip.white,
                      paddingLeft: String(subButtonTextPadding) + ea,
                      paddingRight: String(subButtonTextPadding) + ea,
                    }
                  }
                }
              },
              next: {
                attribute: {
                  key,
                },
                class: [ panClassName ],
                style: {
                  display: "block",
                  paddingTop: String(panContentsPaddingTop) + ea,
                  position: "relative",
                  width: withOut(0, ea),
                  minHeight: String(panContentsMinHeight) + ea,
                }
              }
            }
          });
          if (type === "photo") {
            for (let z = 0; z < photoDivideNumber; z++) {
              createNode({
                mother: panContents.querySelector('.' + panClassName),
                style: {
                  display: "inline-block",
                  position: "relative",
                  verticalAlign: "top",
                  width: "calc(calc(100% - " + String(blockBetween * (photoDivideNumber - 1)) + ea + ") / " + String(photoDivideNumber) + ")",
                  marginRight: String((z === (photoDivideNumber - 1)) ? 0 : blockBetween) + ea,
                }
              });
            }
          }

        }
      }

    }

    if (typeof returnGet().proid === "string") {
      targetProjectBlock = findByAttribute(this.projectBlocks, "proid", returnGet().proid);
      if (targetProjectBlock !== null) {
        scrollTo(totalMother, targetProjectBlock);
        targetProjectBlock.click();
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.adminDesignerMemo = function (desid) {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, media } = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut } = GeneralJs;
  const baseTong = this.mainBaseTong;
  const designer = this.designers.pick(desid);
  const mobile = media[4];
  const desktop = !mobile;
  return async function (e) {
    try {
      if (document.getElementById("memoTong") === null) {

        let memoTong;
        let margin;
        let innerMargin;
        let titleHeight;
        let size;
        let resObj, history, career;
        let nodeArr;
        let mobileBottom, mobileHeight;

        margin = <%% 40, 40, 40, 40, 7 %%>;
        innerMargin = <%% 15, 15, 15, 15, 4 %%>;
        titleHeight = <%% 28, 28, 28, 28, 6.4 %%>;
        size = <%% 16, 16, 16, 16, 4 %%>;

        mobileBottom = 16;
        mobileHeight = 56;

        resObj = await ajaxJson({ method: "designer", property: "history", idArr: [ desid ] }, "/getHistoryTotal");
        if (resObj[desid] === undefined) {
          throw new Error("history error");
        }
        career = resObj[desid].career;

        memoTong = createNode({
          mother: totalMother,
          id: "memoTong",
          events: [
            {
              type: "dblclick",
              event: function (e) {
                e.preventDefault();
                e.stopPropagation();
                totalMother.removeChild(document.getElementById("memoTong"));
              }
            },
            {
              type: "contextmenu",
              event: function (e) {
                e.preventDefault();
                e.stopPropagation();
                totalMother.removeChild(document.getElementById("memoTong"));
              }
            }
          ],
          style: {
            position: "fixed",
            width: desktop ? "calc(calc(calc(100% - " + String(grayBarWidth) + ea + ") / 3) - " + String(margin) + ea + ")" : "calc(100% - " + String(margin * 2) + ea + ")",
            height: desktop ? "calc(calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 3) * 1.5) - " + String(margin) + ea + ")" : String(mobileHeight) + ea,
            bottom: String(desktop ? belowHeight + margin : mobileBottom + margin) + ea,
            right: String(margin) + ea,
            borderRadius: String(3) + "px",
            boxShadow: "0px 5px 18px -9px " + colorChip.shadow,
            animation: "fadeup 0.3s ease forwards",
            background: colorChip.gradientGreen2,
            zIndex: String(3),
          }
        });

        nodeArr = createNodes([
          {
            mother: memoTong,
            text: designer.designer + " 디자이너 상세 경력",
            style: {
              position: "absolute",
              top: String(innerMargin - (desktop ? 1 : 1.2)) + ea,
              left: String(innerMargin + (desktop ? 1 : 0.1)) + ea,
              fontSize: String(size) + ea,
              fontWeight: String(600),
              color: colorChip.white,
            }
          },
          {
            mother: memoTong,
            style: {
              position: "absolute",
              bottom: String(innerMargin) + ea,
              left: String(innerMargin) + ea,
              width: "calc(100% - " + String(innerMargin * 2) + ea + ")",
              height: withOut((innerMargin * 2) + titleHeight, ea),
              background: colorChip.white,
              borderRadius: String(3) + "px",
              opacity: String(0.95),
            }
          },
          {
            mother: -1,
            style: {
              position: "absolute",
              top: String(innerMargin - 2) + ea,
              left: String(innerMargin) + ea,
              width: withOut((innerMargin - 2) * 2, ea),
              height: withOut(innerMargin * 2, ea),
            }
          },
          {
            mother: -1,
            mode: "textarea",
            events: [
              {
                type: "blur",
                event: function (e) {
                  GeneralJs.ajaxPromise({
                    method: "designer",
                    id: desid,
                    column: "career",
                    value: this.value,
                    email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
                  }, "/updateHistory").catch((err) => { console.log(err); });
                }
              },
              {
                type: "keypress",
                event: function (e) {
                  if (e.key === "Enter") {
                    GeneralJs.ajaxPromise({
                      method: "designer",
                      id: desid,
                      column: "career",
                      value: this.value,
                      email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
                    }, "/updateHistory").catch((err) => { console.log(err); });
                  }
                }
              },
              {
                type: "contextmenu",
                event: function (e) {
                  e.stopPropagation();
                }
              }
            ],
            style: {
              position: "relative",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              fontSize: String(size - (desktop ? 1 : 0.2)) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              border: String(0),
              outline: String(0),
              overflow: "scroll",
              height: String(100) + '%',
              lineHeight: String(1.7),
            }
          },
        ]);
        nodeArr[3].value = career;

      } else {
        totalMother.removeChild(document.getElementById("memoTong"));
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.adminIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: GeneralJs.returnGet().dataonly === "true" ? "none" : "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  listIcon.addEventListener("click", function (e) {
    blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
  });

  previousIcon.addEventListener("click", function (e) {
    let previousDesid, boo, thisStandard;
    previousDesid = desid;
    do {
      previousDesid = instance.designers.previous(previousDesid).desid;
      for (let dom of instance.standardDoms) {
        if (dom.getAttribute("desid") === previousDesid) {
          thisStandard = dom;
          boo = (dom.style.display === "none");
        }
      }
    } while (boo);
    if (instance.modes.indexOf(instance.mode) === 0) {
      instance.adminDetailLaunching(previousDesid);
    } else {
      instance.reportDetailLaunching(previousDesid);
    }
  });

  nextIcon.addEventListener("click", function (e) {
    let nextDesid, boo, thisStandard;
    nextDesid = desid;
    do {
      nextDesid = instance.designers.next(nextDesid).desid;
      for (let dom of instance.standardDoms) {
        if (dom.getAttribute("desid") === nextDesid) {
          thisStandard = dom;
          boo = (dom.style.display === "none");
        }
      }
    } while (boo);
    if (instance.modes.indexOf(instance.mode) === 0) {
      instance.adminDetailLaunching(nextDesid);
    } else {
      instance.reportDetailLaunching(nextDesid);
    }
  });

  rInitialIcon.addEventListener("click", function (e) {
    instance.reportDetailLaunching(desid);
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      await instance.adminMemoSystem(desid);
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
      GeneralJs.ajaxJson({
        method: "designerCheckList",
        name: designer.designer,
        phone: designer.information.phone,
        option: {
          desid: designer.desid,
          designer: designer.designer,
          host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
          path: "about",
        }
      }, "/alimTalk").then(() => {
        return GeneralJs.ajaxJson({
          page: "checklist",
          mode: "send",
          who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
          desid: designer.desid,
        }, "/ghostDesigner_updateAnalytics");
      }).then(() => {
        instance.mother.greenAlert("알림톡이 전송되었습니다!");
      }).catch((err) => {
        console.log(err);
      });
    } else {
      instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
    }
  });

}

DesignerJs.prototype.adminMemoSystem = async function (desid) {
  const instance = this;
  const { createNode, withOut, colorChip, ajaxJson, dateToString, cleanChildren } = GeneralJs;
  const { ea, totalContents, belowHeight, grayBarWidth, designers } = this;
  const designer = designers.pick(desid);
  const memoBaseClassName = "memoBaseClassName";
  const memoWhitePopupClassName = "memoWhitePopupClassName";
  const textUpdateTargetClassName = "textUpdateTargetClassName";
  try {
    let memoBase, memoTong;
    let motherMargin;
    let innerMotherMargin;
    let tongBetween;
    let titleLineTop;
    let titleSize, titleWeight;
    let titleWhitePadding;
    let boxContents;
    let boxInnerPaddingLeft;
    let boxInnerPaddingTop;
    let contentsSize, contentsWeight, contentsLineHeight;
    let contentsPaddingBottom;
    let whiteOuterMargin;
    let whiteInnerMargin;
    let whiteTitleHeight;
    let whiteTitleSize;
    let whiteTitleWeight;
    let whiteTitleTextTop;
    let whiteTitleLeftVisual;
    let whiteInnerDescriptionPadding;
    let plusCircleWidth;
    let plusCircleRight;
    let plusCircleBottom;
    let plusSize;
    let plusWeight;
    let plusTextTop;
    let thisDesignerHistory;
    let renderMemo;

    motherMargin = 24;
    innerMotherMargin = 0;
    tongBetween = 16;
    titleLineTop = 10;

    titleSize = 16;
    titleWeight = 700;
    titleWhitePadding = 10;

    boxInnerPaddingLeft = 20;
    boxInnerPaddingTop = 20;

    contentsSize = 14;
    contentsWeight = 400;
    contentsLineHeight = 1.7;
    contentsPaddingBottom = 160;

    whiteOuterMargin = 72;
    whiteInnerMargin = 40;

    whiteTitleHeight = 44;

    whiteTitleSize = 22;
    whiteTitleWeight = 700;
    whiteTitleTextTop = -2;
    whiteTitleLeftVisual = 1;

    whiteInnerDescriptionPadding = 30;

    plusCircleWidth = 45;
    plusCircleRight = 24;
    plusCircleBottom = 21;

    plusSize = 38;
    plusWeight = 500;
    plusTextTop = -3;

    thisDesignerHistory = (await ajaxJson({ method: "designer", idArr: [ desid ] }, "/getHistoryTotal", { equal: true }))[desid];
    boxContents = [
      {
        title: "VOC",
        contents: thisDesignerHistory.history,
        property: "history",
      },
      {
        title: "VOD",
        contents: thisDesignerHistory.issue,
        property: "issue",
      },
      {
        title: "경력 상세",
        contents: thisDesignerHistory.career,
        property: "career",
      },
      {
        title: "자녀 및 반려 동물",
        contents: thisDesignerHistory.family,
        property: "family",
      },
      {
        title: "파트너 시공사 특징",
        contents: thisDesignerHistory.partner,
        property: "partner",
      },
      {
        title: "제작 가구 패브릭",
        contents: thisDesignerHistory.craft,
        property: "craft",
      },
      {
        title: "응대 방식",
        contents: thisDesignerHistory.reception,
        property: "reception",
      },
      {
        title: "디자인 경향",
        contents: thisDesignerHistory.styling,
        property: "styling",
      },
      {
        title: "기타 메모",
        contents: thisDesignerHistory.etc,
        property: "etc",
      }
    ];

    renderMemo = (desid, boxContents) => {
      cleanChildren(document.querySelector('.' + memoBaseClassName).firstChild);
      memoTong = createNode({
        mother: document.querySelector('.' + memoBaseClassName).firstChild,
        style: {
          display: "block",
          position: "relative",
          top: String(motherMargin) + ea,
          marginLeft: String(motherMargin) + ea,
          paddingTop: String(innerMotherMargin) + ea,
          paddingBottom: String(innerMotherMargin - tongBetween) + ea,
          paddingLeft: String(innerMotherMargin) + ea,
          paddingRight: String(innerMotherMargin - tongBetween) + ea,
          width: withOut((motherMargin * 2) + (innerMotherMargin * 2) - tongBetween, ea),
          height: withOut((motherMargin * 2) + (innerMotherMargin * 2) - tongBetween, ea),
        }
      });
      for (let i = 0; i < boxContents.length; i++) {
        createNode({
          mother: memoTong,
          event: {
            mouseenter: function (e) {
              this.children[0].children[0].children[0].style.color = colorChip.black;
              this.children[1].style.color = colorChip.green;
            },
            mouseleave: function (e) {
              this.children[0].children[0].children[0].style.color = colorChip.deactive;
              this.children[1].style.color = colorChip.black;
            }
          },
          style: {
            display: "inline-block",
            position: "relative",
            verticalAlign: "top",
            width: "calc(calc(100% - " + String(tongBetween * 3) + ea + ") / " + String(3) + ")",
            paddingTop: String(titleLineTop) + ea,
            height: "calc(calc(calc(100% - " + String(tongBetween * 3) + ea + ") / " + String(3) + ") - " + String(titleLineTop) + ea + ")",
            marginRight: String(tongBetween) + ea,
            marginBottom: String(tongBetween) + ea,
          },
          children: [
            {
              style: {
                display: "flex",
                position: "relative",
                width: withOut(0),
                height: withOut(0),
                border: "1px solid " + colorChip.gray4,
                boxSizing: "border-box",
                borderRadius: String(5) + "px",
                justifyContent: "center",
                alignItems: "end",
              },
              children: [
                {
                  style: {
                    display: "inline-block",
                    verticalAlign: "top",
                    position: "relative",
                    width: withOut(boxInnerPaddingLeft * 2, ea),
                    height: withOut(boxInnerPaddingTop, ea),
                    overflow: "scroll",
                  },
                  children: [
                    {
                      class: [ textUpdateTargetClassName ],
                      attribute: { index: String(i) },
                      text: boxContents[i].contents,
                      style: {
                        display: "block",
                        position: "relative",
                        fontSize: String(contentsSize) + ea,
                        fontWeight: String(contentsWeight),
                        color: colorChip.deactive,
                        lineHeight: String(contentsLineHeight),
                        paddingBottom: String(contentsPaddingBottom) + ea,
                      }
                    }
                  ]
                }
              ]
            },
            {
              text: boxContents[i].title,
              attribute: {
                index: String(i),
              },
              event: {
                click: function (e) {
                  const index = Number(this.getAttribute("index"));
                  const thisContents = boxContents[index];
                  let cancelBack, whiteBase;

                  cancelBack = createNode({
                    mother: totalContents,
                    class: [ memoWhitePopupClassName ],
                    event: {
                      click: function (e) {
                        const removeTargets = document.querySelectorAll('.' + memoWhitePopupClassName);
                        for (let dom of removeTargets) {
                          dom.remove();
                        }
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(grayBarWidth) + ea,
                      height: withOut(belowHeight, ea),
                      width: withOut(grayBarWidth, ea),
                      zIndex: String(5),
                      background: colorChip.black,
                      opacity: String(0.2),
                    }
                  });

                  whiteBase = createNode({
                    mother: totalContents,
                    attribute: { index: String(index) },
                    class: [ memoWhitePopupClassName ],
                    style: {
                      position: "fixed",
                      top: String(whiteOuterMargin) + ea,
                      left: String(grayBarWidth + whiteOuterMargin) + ea,
                      width: withOut(grayBarWidth + (whiteOuterMargin * 2), ea),
                      height: withOut(belowHeight + (whiteOuterMargin * 2), ea),
                      zIndex: String(5),
                      background: colorChip.white,
                      borderRadius: String(8) + "px",
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                      opacity: String(0),
                      animation: "fadeuplite 0.3s ease forwards",
                    }
                  });

                  createNode({
                    mother: whiteBase,
                    style: {
                      display: "block",
                      position: "relative",
                      paddingTop: String(whiteInnerMargin) + ea,
                      paddingBottom: String(whiteInnerMargin) + ea,
                      height: withOut(whiteInnerMargin * 2, ea),
                      width: withOut(0),
                    },
                    children: [
                      {
                        style: {
                          display: "block",
                          position: "relative",
                          marginLeft: String(whiteInnerMargin) + ea,
                          width: withOut(whiteInnerMargin * 2, ea),
                          height: withOut(0),
                        },
                        children: [
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              justifyContent: "left",
                              alignItems: "start",
                              width: withOut(0),
                              height: String(whiteTitleHeight) + ea,
                            },
                            children: [
                              {
                                text: thisContents.title,
                                style: {
                                  display: "inline-block",
                                  position: "relative",
                                  fontSize: String(whiteTitleSize) + ea,
                                  fontWeight: String(whiteTitleWeight),
                                  color: colorChip.black,
                                  top: String(whiteTitleTextTop) + ea,
                                  left: String(whiteTitleLeftVisual) + ea,
                                }
                              }
                            ]
                          },
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              width: withOut(0),
                              height: withOut(whiteTitleHeight, ea),
                              border: "1px solid " + colorChip.gray3,
                              borderRadius: String(8) + "px",
                              justifyContent: "center",
                              alignItems: "end",
                            },
                            children: [
                              {
                                style: {
                                  display: "inline-block",
                                  position: "relative",
                                  overflow: "scroll",
                                  width: withOut(whiteInnerDescriptionPadding * 2, ea),
                                  height: withOut(whiteInnerDescriptionPadding, ea),
                                },
                                children: [
                                  {
                                    class: [ textUpdateTargetClassName ],
                                    attribute: { index: String(index) },
                                    text: thisContents.contents,
                                    style: {
                                      display: "block",
                                      position: "relative",
                                      fontSize: String(contentsSize) + ea,
                                      fontWeight: String(contentsWeight),
                                      lineHeight: String(contentsLineHeight),
                                      paddingBottom: String(contentsPaddingBottom) + ea,
                                      color: colorChip.black,
                                    }
                                  }
                                ]
                              },
                              {
                                event: {
                                  selectstart: (e) => { e.preventDefault(); },
                                  click: async function (e) {
                                    try {
                                      const index = Number(this.getAttribute("index"));
                                      const baseTarget = this.parentElement.children[0];
                                      let textArea, text;
                                      let areaTarget;
                                      let updateValue;
                                      let updateTargets;
                                      let profile;
                                      let thisMember;

                                      if (baseTarget.querySelector("textarea") === null) {

                                        profile = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
                                        if (profile === null) {
                                          window.alert("허가된 멤버가 아닙니다!");
                                          window.localStorage.clear();
                                          window.location.reload();
                                        }
                                        thisMember = (await ajaxJson({ type: "boo", value: profile.homeliaisonConsoleLoginedEmail }, "/getMembers")).result;

                                        text = "-------- " + dateToString(new Date(), true) + " / " + thisMember.name + " --------";
                                        text += "\n\n";
                                        text += "\n\n";
                                        text += "----------------------------------------------";
                                        text += "\n\n";
                                        text += thisContents.contents;

                                        textArea = createNode({
                                          mother: baseTarget,
                                          mode: "textarea",
                                          attribute: { index: String(index) },
                                          event: {
                                            keydown: function (e) {
                                              if (e.key === "Tab") {
                                                e.preventDefault();
                                              }
                                            },
                                            keyup: async function (e) {
                                              try {
                                                if (e.key === "Tab") {
                                                  const index = Number(this.getAttribute("index"));

                                                  updateValue = this.value.trim();
                                                  await ajaxJson({ id: desid, column: boxContents[index].property, value: updateValue, email: null }, "/updateDesignerHistory");

                                                  boxContents[index].contents = updateValue;
                                                  thisContents.contents = updateValue;

                                                  updateTargets = document.querySelectorAll('.' + textUpdateTargetClassName);
                                                  for (let dom of updateTargets) {
                                                    if (Number(dom.getAttribute("index")) === index) {
                                                      cleanChildren(dom);
                                                      dom.insertAdjacentHTML("beforeend", updateValue.replace(/\n/gi, "<br>"));
                                                    }
                                                  }

                                                  this.remove();

                                                }
                                              } catch (e) {
                                                console.log(e);
                                              }
                                            }
                                          },
                                          text,
                                          style: {
                                            display: "block",
                                            position: "absolute",
                                            top: String(0),
                                            left: String(0),
                                            paddingBottom: String(contentsPaddingBottom) + ea,
                                            width: withOut(0, ea),
                                            height: withOut(0, ea),
                                            background: colorChip.white,
                                            border: String(0),
                                            outline: String(0),
                                            fontSize: String(contentsSize) + ea,
                                            fontWeight: String(contentsWeight),
                                            lineHeight: String(contentsLineHeight),
                                            color: colorChip.green,
                                          }
                                        });

                                        textArea.focus();

                                      } else {

                                        areaTarget = baseTarget.querySelector("textarea");
                                        updateValue = areaTarget.value.trim();
                                        await ajaxJson({ id: desid, column: boxContents[index].property, value: updateValue, email: null }, "/updateDesignerHistory");

                                        boxContents[index].contents = updateValue;
                                        thisContents.contents = updateValue;

                                        updateTargets = document.querySelectorAll('.' + textUpdateTargetClassName);
                                        for (let dom of updateTargets) {
                                          if (Number(dom.getAttribute("index")) === index) {
                                            cleanChildren(dom);
                                            dom.insertAdjacentHTML("beforeend", updateValue.replace(/\n/gi, "<br>"));
                                          }
                                        }

                                        areaTarget.remove();

                                      }

                                    } catch (err) {
                                      console.log(err);
                                    }
                                  }
                                },
                                attribute: { index: String(index) },
                                style: {
                                  display: "inline-flex",
                                  position: "absolute",
                                  width: String(plusCircleWidth) + ea,
                                  height: String(plusCircleWidth) + ea,
                                  borderRadius: String(plusCircleWidth) + ea,
                                  background: colorChip.gradientGreen,
                                  bottom: String(plusCircleBottom) + ea,
                                  right: String(plusCircleRight) + ea,
                                  justifyContent: "center",
                                  alignItems: "center",
                                  cursor: "pointer",
                                },
                                children: [
                                  {
                                    text: "+",
                                    attribute: { index: String(index) },
                                    event: {
                                      selectstart: (e) => { e.preventDefault(); },
                                    },
                                    style: {
                                      fontSize: String(plusSize) + ea,
                                      fontWeight: String(plusWeight),
                                      color: colorChip.white,
                                      fontFamily: "graphik",
                                      position: "relative",
                                      top: String(plusTextTop) + ea,
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  });

                }
              },
              style: {
                display: "inline-block",
                position: "absolute",
                paddingLeft: String(titleWhitePadding) + ea,
                paddingRight: String(titleWhitePadding) + ea,
                background: colorChip.white,
                zIndex: String(1),
                top: String(0),
                left: String(titleWhitePadding) + ea,
                fontSize: String(titleSize) + ea,
                fontWeight: String(titleWeight),
                color: colorChip.black,
                cursor: "pointer",
              }
            }
          ]
        });
      }
    }

    if ([ ...document.querySelectorAll('.' + memoBaseClassName) ].length > 0) {
      if ([ ...document.querySelectorAll('.' + memoWhitePopupClassName) ].length > 0) {
        const removeTargets = document.querySelectorAll('.' + memoWhitePopupClassName);
        for (let dom of removeTargets) {
          dom.remove();
        }
      }
      if (document.querySelector('.' + memoBaseClassName).getAttribute("desid") === desid) {
        document.querySelector('.' + memoBaseClassName).remove();
      } else {
        document.querySelector('.' + memoBaseClassName).setAttribute("desid", desid);
        renderMemo(desid, boxContents);
      }

      return;
    }

    memoBase = createNode({
      mother: totalContents,
      attribute: { desid },
      class: [ memoBaseClassName ],
      style: {
        position: "fixed",
        top: String(0),
        left: String(grayBarWidth) + ea,
        height: withOut(belowHeight, ea),
        width: withOut(grayBarWidth, ea),
        zIndex: String(4),
      },
      children: [
        {
          style: {
            display: "block",
            position: "relative",
            top: String(0),
            left: String(0),
            width: withOut(0),
            height: withOut(0),
            background: colorChip.white,
          }
        }
      ]
    }).children[0];

    renderMemo(desid, boxContents);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.adminView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    if (GeneralJs.returnGet().entire !== "true") {
      this.backGrayBar();
    }
    await this.spreadData(null, true, null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight, media } = this;
    const mobile = media[4];
    const desktop = !mobile;
    const standardBar = totalMother.firstChild;
    const getObj = returnGet();
    const entireMode = (getObj.entire === "true");
    const normalMode = (entireMode && getObj.normal === "true");
    let designers, length;
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;
    let projects, clients;

    if (typeof getObj.desid === "string" && getObj.normal === "true") {
      designers = await ajaxJson({ noFlat: true, whereQuery: { desid: getObj.desid } }, "/getDesigners", { equal: true });
    } else {
      designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    }
    length = designers.length;
    this.designers = new Designers(designers);

    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.modes = [ "admin", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[0];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };
    this.entireMode = entireMode;
    this.normalMode = normalMode;
    if (normalMode) {
      this.ea = "px";
    }

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            document.getElementById("totalcontents").removeChild(document.querySelector(".totalFather"));
            instance.totalFather = null;
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
          }
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.adminDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            searchResult = instance.designers.search(value);
            if (searchResult.length > 0) {
              instance.adminDetailLaunching(searchResult[0].desid);
            }
          }
        }
      });
    }

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.adminDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    if (desktop) {
      window.addEventListener("resize", (e) => {
        window.location.reload();
      });
    }
    window.addEventListener("popstate", (e) => {
      let targets, targetIndex;
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          instance.adminDetailLaunching(instance.pageHistory[1].desid);
          instance.pageHistory.shift();
          instance.pageHistory.shift();
        }
      }
    });

    this.projectAreas = [];
    this.projectBlocks = [];

    //launching
    this.adminDetailLaunching(this.desid);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantDataRender = async function (firstLoad = true) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, asyncProcessText, noticeSendRows } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute } = GeneralJs;
  try {
    const calcMonthDelta = (from, to) => {
      return ((to.getFullYear() * 12) + to.getMonth() + 1) - ((from.getFullYear() * 12) + from.getMonth() + 1) + 1;
    }
    const now = new Date();
    const past = new Date();
    const yearsAgo = new Date();
    const agoDelta = 6;
    const agoYearDelta = 1;
    let columns;
    let values;
    let yearDelta;
    let monthDelta;
    let standards;
    let thisSendRows, thisSendRows2;
    let thisDocumentsSend;
    let thisPortfolioSend;
    let targetMembers;
    let thisSendRows3;
    let thisSettingSend;

    targetMembers = GeneralJs.stacks.members.filter((obj) => { return obj.roles.includes("CX"); }).map((obj) => { return obj.name });

    past.setFullYear(past.getFullYear() - agoYearDelta);
    past.setMonth(0);
    past.setDate(1);
    past.setHours(9);
    past.setMinutes(0);
    past.setSeconds(0);

    yearsAgo.setMonth(yearsAgo.getMonth() - agoDelta);
    yearDelta = now.getFullYear() - past.getFullYear() + 1
    monthDelta = calcMonthDelta(yearsAgo, now);

    standards = {
      columns: [
        {
          title: "아이디",
          width: 96,
          name: "aspid",
          type: "string",
        },
        {
          title: "성함",
          width: 60,
          name: "designer",
          type: "string",
        },
      ],
      values: {},
    }

    columns = [
      {
        title: "신청일",
        width: 100,
        name: "applyDate",
        type: "date",
      },
      {
        title: "담당자",
        width: 80,
        name: "manager",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat(targetMembers.map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 80,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.manager"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.manager = finalValue;  
            }
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "응대 상태",
        width: 100,
        name: "status",
        colorStandard: true,
        colorMap: [
          {
            value: "검토중",
            color: colorChip.red,
          },
          {
            value: "응대중",
            color: colorChip.black,
          },
          {
            value: "추가 필요",
            color: colorChip.purple,
          },
          {
            value: "추가 요청",
            color: colorChip.black,
          },
          {
            value: "등록 요청",
            color: colorChip.black,
          },
          {
            value: "등록 완료",
            color: colorChip.black,
          },
          {
            value: "계약 요청",
            color: colorChip.black,
          },
          {
            value: "계약 완료",
            color: colorChip.green,
          },
          {
            value: "온보딩 완료",
            color: colorChip.green,
          },
          {
            value: "드랍",
            color: colorChip.deactive,
          },
        ],
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat([
          "검토중",
          "응대중",
          "추가 필요",
          "추가 요청",
          "등록 요청",
          "등록 완료",
          "계약 요청",
          "계약 완료",
          "온보딩 완료",
          "드랍",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 80,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["meeting.status"] = value;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.status = value;  
            }
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "1차 통화",
        width: 100,
        name: "responseDate",
        type: "date",
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.date = finalValue;  
            }
            await instance.aspirantColorSync();
          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "1차 판단",
        width: 100,
        name: "firstStatus",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat([
          "검토중",
          "합격",
          "반려",
          "확인",
          "불합격",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 80,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { valueTargetClassName } = this;
            const { ajaxJson, findByAttribute } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;
            let chainValue;
            let targetMembers;
            let chainManager;
            let teamLeader;
            let teamLeaderId;
            let hlBot;
            let chainMessage;
            let ceo, ceoId;

            targetMembers = GeneralJs.stacks.members.filter((obj) => { return obj.roles.includes("CX") && !obj.roles.includes("CEO"); });
            targetMembers.sort((a, b) => { return b.level - a.level });
            hlBot = GeneralJs.stacks.members.find((obj) => { return obj.roles.includes("Bot"); }).name;
            teamLeader = targetMembers[0].name;
            teamLeaderId = targetMembers[0].slack.id;
            ceo = GeneralJs.stacks.members.find((obj) => { return obj.roles.includes("CEO"); });
            ceoId = ceo.slack.id;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.first.status"] = finalValue;

            chainValue = "검토중";
            chainMessage = "";
            if (finalValue === "합격" || finalValue === "확인") {
              chainValue = "응대중";
              chainManager = teamLeader;
              chainMessage = "대표님께서 " + aspirant.designer + " 신청자를 합격으로 설정하셨습니다! 합격 응대를 부탁드리겠습니다!";
            } else if (finalValue === "반려") {
              chainValue = "추가 필요";
              chainManager = teamLeader;
              chainMessage = "대표님께서 " + aspirant.designer + " 신청자를 반려로 설정하셨습니다! 반려 응대를 부탁드리겠습니다!";
            } else if (finalValue === "불합격") {
              chainValue = "드랍";
              chainManager = hlBot;
              chainMessage = "";
            } else {
              chainValue = "검토중";
              chainManager = "박혜연";
              chainMessage =  aspirant.designer + " 신청자님의 상태가 검토중이 되었습니다! 검토를 부탁드리겠습니다! <@" + ceoId + ">";
            }

            updateQuery["meeting.status"] = chainValue;
            updateQuery["response.manager"] = chainManager;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              if (chainMessage !== "") {
                await ajaxJson({ message: chainMessage, channel: "#301_apply", voice: false }, "/sendSlack");
              }
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.first.status = finalValue;
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.status = chainValue;
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.manager = chainManager;
  
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "status").querySelector('.' + valueTargetClassName).textContent = chainValue;
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "manager").querySelector('.' + valueTargetClassName).textContent = chainManager;
  
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "연락처",
        width: 120,
        name: "phone",
        type: "string",
      },
      {
        title: "주요 특징",
        width: 130,
        name: "portfolioCharacter",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat([
          "알 수 없음",
          "리모델링 위주",
          "상공간 위주",
          "유관 경력만",
          "홈퍼니싱 위주",
          "홈스타일링 경험자",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 130,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = /알 수 없음/gi.test(value) ? "" : value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.portfolio.summary"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.portfolio.summary = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "판단 메모",
        width: 400,
        name: "memo",
        type: "string",
        long: true,
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["meeting.memo"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.memo = finalValue;
              await instance.aspirantColorSync();
            }
          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "유출 이유",
        width: 120,
        name: "outreason",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat([
          "해당 없음",
          "연락 안 됨",
          "조건 미달",
          "파트너십 거부",
          "기타 이유",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 100,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = /해당 없음/gi.test(value) ? "" : value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.outreason"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.outreason = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "추가 포폴 요청",
        width: 100,
        name: "portfolioSend",
        type: "date",
      },
      {
        title: "추가 포폴 수신",
        width: 100,
        name: "portfolioPlusDate",
        type: "date",
      },
      {
        title: "서류 요청",
        width: 100,
        name: "documentsSend",
        type: "date",
      },
      {
        title: "서류 제출",
        width: 100,
        name: "documentsBoo",
        type: "date",
      },
      {
        title: "등록비 결제",
        width: 100,
        name: "paymentBoo",
        type: "date",
      },
      {
        title: "공통 교육",
        width: 100,
        name: "commonMeeting",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
            columnOnly: true,
          }
        ].concat([
          "해당 없음",
          "미팅 조율",
          "참석 확정",
          "교육 완료",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        })),
        menuWidth: 100,
        update: async (aspid, value, menu) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = /해당 없음/gi.test(value) ? "" : value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["meeting.common.status"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.common.status = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
        script: (aspid) => {
          return async function (e) {
            e.preventDefault();
            try {
              await instance.aspirantCommonMeetingSetting(aspid);
            } catch (e) {
              console.log(e);
            }
          }
        }
      },
      {
        title: "공통 교육일",
        width: 200,
        name: "commonMeetingDate",
        type: "date",
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["meeting.common.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.common.date = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "세트 포폴 요청",
        width: 100,
        name: "portfolioSet",
        type: "date",
      },
      {
        title: "세트 포폴 수신",
        width: 100,
        name: "portfolioSetPhoto",
        type: "date",
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.portfolio.plus.photo"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.portfolio.plus.photo = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "계약서 서명 1",
        width: 100,
        name: "partnershipContractConfirm",
        type: "date",
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["contract.partnership.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).contract.partnership.date = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "계약서 서명 2",
        width: 100,
        name: "designerContractConfirm",
        type: "date",
        update: async (aspid, value) => {
          try {
            const instance = this;
            const { ajaxJson } = GeneralJs;
            const aspirant = this.aspirants.find((a) => { return a.aspid === aspid });
            const finalValue = value;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["contract.designer.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).contract.designer.date = finalValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        },
      },
      {
        title: "주소",
        width: 400,
        name: "address",
        type: "string",
      },
      {
        title: "성별",
        width: 80,
        name: "gender",
        type: "string",
      },
      {
        title: "생일",
        width: 100,
        name: "birth",
        type: "date",
      },
      {
        title: "이메일",
        width: 200,
        name: "email",
        type: "string",
      },
      {
        title: "사업자 분류",
        width: 200,
        name: "business",
        type: "string",
      },
      {
        title: "회사명",
        width: 150,
        name: "company",
        type: "string",
      },
      {
        title: "등록 번호",
        width: 200,
        name: "numbers",
        type: "string",
      },
      {
        title: "SNS",
        width: 400,
        name: "sns",
        type: "string",
      },
      {
        title: "홈페이지",
        width: 400,
        name: "homepage",
        type: "string",
      },
    ];

    values = {};

    for (let aspirant of instance.aspirants) {

      thisSendRows = noticeSendRows.filter((o) => { return o.type === "documents" }).filter((o) => { return o.aspirant.aspid === aspirant.aspid });
      thisDocumentsSend = new Date(1800, 0, 1);
      if (thisSendRows.length > 0 && thisSendRows[0].history.length > 0) {
        thisDocumentsSend = thisSendRows[0].history[0];
      }

      thisSendRows2 = noticeSendRows.filter((o) => { return o.type === "plus" }).filter((o) => { return o.aspirant.aspid === aspirant.aspid });
      thisPortfolioSend = new Date(1800, 0, 1);
      if (thisSendRows2.length > 0 && thisSendRows2[0].history.length > 0) {
        thisPortfolioSend = thisSendRows2[0].history[0];
      }

      thisSendRows3 = noticeSendRows.filter((o) => { return o.type === "setting" }).filter((o) => { return o.aspirant.aspid === aspirant.aspid });
      thisSettingSend = new Date(1800, 0, 1);
      if (thisSendRows3.length > 0 && thisSendRows3[0].history.length > 0) {
        thisSettingSend = thisSendRows3[0].history[0];
      }

      standards.values[aspirant.aspid] = [
        {
          value: aspirant.aspid,
          name: "aspid",
        },
        {
          value: aspirant.designer,
          name: "designer",
        },
      ];

      values[aspirant.aspid] = [
        {
          value: dateToString(aspirant.submit.partnership.date),
          name: "applyDate",
        },
        {
          value: aspirant.response.manager,
          name: "manager",
        },
        {
          value: aspirant.meeting.status,
          name: "status",
        },
        {
          value: dateToString(aspirant.response.date),
          name: "responseDate",
        },
        {
          value: aspirant.response.first.status,
          name: "firstStatus",
        },
        {
          value: aspirant.phone,
          name: "phone",
        },
        {
          value: aspirant.response.portfolio.summary === "" ? "알 수 없음" : aspirant.response.portfolio.summary,
          name: "portfolioCharacter",
        },
        {
          value: aspirant.meeting.memo.replace(/\n/gi, " "),
          name: "memo",
        },
        {
          value: aspirant.response.outreason === "" ? "해당 없음" : aspirant.response.outreason,
          name: "outreason",
        },
        {
          value: dateToString(thisPortfolioSend),
          name: "portfolioSend",
        },
        {
          value: dateToString(aspirant.response.portfolio.plus.request),
          name: "portfolioPlusDate",
        },
        {
          value: dateToString(thisDocumentsSend),
          name: "documentsSend",
        },
        {
          value: dateToString(aspirant.submit.documents.date),
          name: "documentsBoo",
        },
        {
          value: dateToString(aspirant.submit.registration.date),
          name: "paymentBoo",
        },
        {
          value: aspirant.meeting.common.status === "" ? "해당 없음" : aspirant.meeting.common.status,
          name: "commonMeeting",
        },
        {
          value: dateToString(aspirant.meeting.common.date, true),
          name: "commonMeetingDate",
        },
        {
          value: dateToString(thisSettingSend),
          name: "portfolioSet",
        },
        {
          value: dateToString(aspirant.response.portfolio.plus.photo),
          name: "portfolioSetPhoto",
        },
        {
          value: dateToString(aspirant.contract.partnership.date),
          name: "partnershipContractConfirm",
        },
        {
          value: dateToString(aspirant.contract.designer.date),
          name: "designerContractConfirm",
        },
        {
          value: aspirant.address,
          name: "address",
        },
        {
          value: aspirant.gender,
          name: "gender",
        },
        {
          value: dateToString(aspirant.birth),
          name: "birth",
        },
        {
          value: aspirant.email,
          name: "email",
        },
        {
          value: aspirant.information.company.classification,
          name: "business",
        },
        {
          value: aspirant.information.company.name,
          name: "company",
        },
        {
          value: aspirant.information.company.businessNumber,
          name: "numbers",
        },
        {
          value: aspirant.information.channel.sns.join(", "),
          name: "sns",
        },
        {
          value: aspirant.information.channel.web.join(", "),
          name: "homepage",
        },
      ];

    }

    return { standards, columns, values };

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantWhiteData = async function (aspid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight, valueTargetClassName, noticeSendRows } = this;
  const { createNode, withOut, colorChip, dateToString, ajaxJson, findByAttribute, stringToDate, selfHref } = GeneralJs;
  try {
    const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
    let dataMatrix;
    let careerToBlock;
    let schoolToBlock;
    let thisSendRows;
    let thisDocumentsSend;
    let thisSendRows2;
    let thisPortfolioSend;

    thisSendRows = noticeSendRows.filter((o) => { return o.type === "documents" }).filter((o) => { return o.aspirant.aspid === aspid });
    thisDocumentsSend = new Date(1800, 0, 1);
    if (thisSendRows.length > 0 && thisSendRows[0].history.length > 0) {
      thisDocumentsSend = thisSendRows[0].history[0];
    }

    thisSendRows2 = noticeSendRows.filter((o) => { return o.type === "plus" }).filter((o) => { return o.aspirant.aspid === aspirant.aspid });
    thisPortfolioSend = new Date(1800, 0, 1);
    if (thisSendRows2.length > 0 && thisSendRows2[0].history.length > 0) {
      thisPortfolioSend = thisSendRows2[0].history[0];
    }

    careerToBlock = (aspirant) => {
      const pipe = "&nbsp;&nbsp;<u%|%u>&nbsp;&nbsp;";
      let endMatrix;

      endMatrix = aspirant.information.career.detail.map((obj) => {
        const endDate = (obj.date.end.valueOf() > (new Date(3000, 0, 1)).valueOf()) ? new Date() : obj.date.end;
        const startDate = obj.date.start;
        const startWords = (String(obj.date.start.getFullYear()).slice(2) + "." + String(obj.date.start.getMonth() + 1));
        const endWords = (obj.date.end.valueOf() > (new Date(3000, 0, 1)).valueOf()) ? "재직중" : (String(obj.date.end.getFullYear()).slice(2) + "." + String(obj.date.end.getMonth() + 1));
        const delta = endDate.valueOf() - startDate.valueOf();
        const deltaDates = Math.round((((delta / 1000) / 60) / 60) / 24);
        const rangeWords = String(Math.floor(deltaDates / 365)) + "년 " + String(Math.floor((deltaDates % 365) / 30)) + "개월" + "&nbsp;&nbsp;(" + startWords + " ~ " + endWords + ")";
        return {
          title: [
            "회사",
            "담당 업무",
            "기간",
            "태그",
          ],
          value: [
            obj.company + pipe + obj.team,
            obj.role,
            rangeWords,
            obj.tag,
          ]
        };
      });
      return endMatrix;
    }

    schoolToBlock = (aspirant) => {
      let endMatrix;
      endMatrix = aspirant.information.career.school.map((obj) => {
        return {
          title: [
            "학교",
            "전공",
            "졸업",
          ],
          value: [
            obj.school,
            obj.major,
            ((obj.date.end.valueOf() > (new Date(3000, 0, 1)).valueOf()) ? "재학중" : dateToString(obj.date.end).split("-").slice(0, 2).join("년 ") + "월"),
          ]
        };
      });
      return endMatrix;
    }

    dataMatrix = [
      {
        name: "name",
        type: "string",
        title: "성함",
        value: aspirant.designer,
      },
      {
        name: "phone",
        type: "string",
        title: "연락처",
        value: aspirant.phone,
        script: (aspid) => {
          const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
          return async function (e) {
            try {
              const designer = aspirant.designer;
              const phone = aspirant.phone;
              const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
              if (window.confirm(designer + " 실장님께 전화를 걸까요?")) {
                ajaxJson({
                  who: cookies.homeliaisonConsoleLoginedEmail,
                  phone: phone
                }, BACKHOST + "/callTo").catch((err) => { console.log(err); });
              }
            } catch (e) {
              console.log(e);
            }
          }
        }
      },
      {
        name: "apply",
        type: "date",
        title: "신청일",
        value: dateToString(aspirant.submit.partnership.date, true),
      },
      {
        name: "gender",
        type: "select",
        title: "성별",
        columns: [
          "여성",
          "남성"
        ],
        value: aspirant.gender === "여성" ? [ 1, 0 ] : [ 0, 1 ],
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["gender"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).gender = updateQuery["gender"];
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "birth",
        type: "string",
        title: "생일",
        value: dateToString(aspirant.birth) + " (" + String((new Date()).getFullYear() - aspirant.birth.getFullYear()) + "세)",
        editable: true,
        update: async (aspid, newValue, targetDom) => {
          try {
            const instance = this;
            const { valueTargetClassName } = this;
            const { ajaxJson, dateToString, stringToDate, findByAttribute } = GeneralJs;
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let birthDate;
            let whereQuery, updateQuery;
            try {
              birthDate = stringToDate(newValue);
            } catch (e) {
              window.alert("날짜 형식이 올바르지 않습니다!");
              birthDate = new Date(1800, 0, 1);
            }

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["birth"] = birthDate;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).birth = birthDate;
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "birth").querySelector('.' + valueTargetClassName).textContent = dateToString(birthDate);
              targetDom.textContent = dateToString(birthDate) + " (" + String((new Date()).getFullYear() - birthDate.getFullYear()) + "세)",
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "email",
        type: "string",
        title: "이메일",
        value: aspirant.email,
      },
      {
        name: "address",
        type: "string",
        title: "주소",
        value: aspirant.address,
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "status",
        type: "select",
        columns: [
          "검토중",
          "응대중",
          "추가 필요",
          "추가 요청",
          "등록 요청",
          "등록 완료",
          "계약 요청",
          "계약 완료",
          "온보딩 완료",
          "드랍",
        ],
        title: "상태",
        value: [
          "검토중",
          "응대중",
          "추가 필요",
          "추가 요청",
          "등록 요청",
          "등록 완료",
          "계약 요청",
          "계약 완료",
          "온보딩 완료",
          "드랍",
        ].map((str) => {
          return str === aspirant.meeting.status ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["meeting.status"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).meeting.status = updateQuery["meeting.status"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "status").querySelector('.' + valueTargetClassName).textContent = updateQuery["meeting.status"];
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "firstStatus",
        type: "select",
        columns: [
          "검토중",
          "합격",
          "반려",
          "확인",
          "불합격",
        ],
        title: "1차 판단",
        value: [
          "검토중",
          "합격",
          "반려",
          "확인",
          "불합격",
        ].map((str) => {
          return str === aspirant.response.first.status ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;
            let chainValue;
            let targetMembers;
            let chainManager;
            let teamLeader;
            let teamLeaderId;
            let hlBot;
            let finalValue;
            let chainMessage;
            let ceo, ceoId;

            targetMembers = GeneralJs.stacks.members.filter((obj) => { return obj.roles.includes("CX") && !obj.roles.includes("CEO"); });
            targetMembers.sort((a, b) => { return b.level - a.level });
            hlBot = GeneralJs.stacks.members.find((obj) => { return obj.roles.includes("Bot"); }).name;
            teamLeader = targetMembers[0].name;
            teamLeaderId = targetMembers[0].slack.id;
            ceo = GeneralJs.stacks.members.find((obj) => { return obj.roles.includes("CEO"); });
            ceoId = ceo.slack.id;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["response.first.status"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });
            finalValue = updateQuery["response.first.status"];

            chainValue = "검토중";
            chainMessage = "";
            if (finalValue === "합격" || finalValue === "확인") {
              chainValue = "응대중";
              chainManager = teamLeader;
              chainMessage = "대표님께서 " + aspirant.designer + " 신청자를 합격으로 설정하셨습니다! 응대를 부탁드리겠습니다! <@" + teamLeaderId + ">";
            } else if (finalValue === "반려") {
              chainValue = "추가 필요";
              chainManager = teamLeader;
              chainMessage = "대표님께서 " + aspirant.designer + " 신청자를 반려로 설정하셨습니다! 응대를 부탁드리겠습니다! <@" + teamLeaderId + ">";
            } else if (finalValue === "불합격") {
              chainValue = "드랍";
              chainManager = hlBot;
              chainMessage = "";
            } else {
              chainValue = "검토중";
              chainManager = "박혜연";
              chainMessage =  aspirant.designer + " 신청자님의 상태가 검토중이 되었습니다! 검토를 부탁드리겠습니다! <@" + ceoId + ">";
            }

            updateQuery["meeting.status"] = chainValue;
            updateQuery["response.manager"] = chainManager;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              if (chainMessage !== "") {
                await ajaxJson({ message: chainMessage, channel: "#301_apply", voice: false }, "/sendSlack");
              }
            }

            selfHref(window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid);

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "portfolioCharacter",
        type: "select",
        columns: [
          "알 수 없음",
          "리모델링 위주",
          "상공간 위주",
          "유관 경력만",
          "홈퍼니싱 위주",
          "홈스타일링 경험자",
        ],
        title: "주요 특징",
        value: [
          "",
          "리모델링 위주",
          "상공간 위주",
          "유관 경력만",
          "홈퍼니싱 위주",
          "홈스타일링 경험자",
        ].map((str) => {
          return str === aspirant.response.portfolio.summary ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;
            let textValue;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["response.portfolio.summary"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });

            if (updateQuery["response.portfolio.summary"] === undefined || updateQuery["response.portfolio.summary"] === "알 수 없음") {
              updateQuery["response.portfolio.summary"] = "";
              textValue = "알 수 없음";
            } else {
              textValue = updateQuery["response.portfolio.summary"];
            }

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).response.portfolio.summary = updateQuery["response.portfolio.summary"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "portfolioCharacter").querySelector('.' + valueTargetClassName).textContent = textValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "outreason",
        type: "select",
        columns: [
          "해당 없음",
          "연락 안 됨",
          "조건 미달",
          "파트너십 거부",
          "기타 이유",
        ],
        title: "유출 이유",
        value: [
          "",
          "연락 안 됨",
          "조건 미달",
          "파트너십 거부",
          "기타 이유",
        ].map((str) => {
          return str === aspirant.response.outreason ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;
            let textValue;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["response.outreason"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });

            if (updateQuery["response.outreason"] === undefined || updateQuery["response.outreason"] === "해당 없음") {
              updateQuery["response.outreason"] = "";
              textValue = "해당 없음";
            } else {
              textValue = updateQuery["response.outreason"];
            }

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).response.outreason = updateQuery["response.outreason"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "outreason").querySelector('.' + valueTargetClassName).textContent = textValue;
              await instance.aspirantColorSync();
            }

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "memo",
        type: "long",
        title: "판단 메모",
        long: true,
        value: aspirant.meeting.memo,
        editable: true,
        update: async (newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["meeting.memo"] = newValue.trim();

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).meeting.memo = updateQuery["meeting.memo"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "memo").querySelector('.' + valueTargetClassName).textContent = updateQuery["meeting.memo"];
            }
            
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "responseDate",
        type: "date",
        title: "1차 통화",
        value: dateToString(aspirant.response.date),
        editable: true,
        update: async (aspid, newValue) => {
          try {
            const instance = this;
            const { valueTargetClassName } = this;
            const { ajaxJson, dateToString } = GeneralJs;
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            const finalValue = newValue;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.date = finalValue;
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "responseDate").querySelector('.' + valueTargetClassName).textContent = dateToString(finalValue);  
            }

            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "documentsSend",
        type: "date",
        title: "서류 요청",
        value: dateToString(thisDocumentsSend),
      },
      {
        name: "documentsBoo",
        type: "date",
        title: "서류 제출",
        value: dateToString(aspirant.submit.documents.date),
      },
      {
        name: "paymentBoo",
        type: "date",
        title: "등록비 결제",
        value: dateToString(aspirant.submit.registration.date),
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "classification",
        type: "select",
        title: "사업자 구분",
        columns: [
          "법인(일반)",
          "개인(일반)",
          "개인(간이)",
          "프리랜서",
        ],
        value: (/법인/gi.test(aspirant.information.company.classification) ? [ 1, 0, 0, 0 ] : (/일반/gi.test(aspirant.information.company.classification) ? [ 0, 1, 0, 0 ] : (/간이/gi.test(aspirant.information.company.classification) ? [ 0, 0, 1, 0 ] : [ 0, 0, 0, 1 ]))),
      },
      {
        name: "company",
        type: "string",
        title: "회사명",
        value: aspirant.information.company.name,
      },
      {
        name: "businessNumber",
        type: "string",
        title: "사업자 등록번호",
        value: aspirant.information.company.businessNumber,
      },
      {
        name: "businessStart",
        type: "date",
        title: "사업자 개업일",
        value: dateToString(aspirant.information.company.start),
      },
      {
        name: "representative",
        type: "string",
        title: "대표자 성함",
        value: aspirant.information.company.representative,
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "accountBank",
        type: "string",
        title: "은행명",
        value: aspirant.information.account.bank,
      },
      {
        name: "accountNumber",
        type: "string",
        title: "계좌 번호",
        value: aspirant.information.account.number,
      },
      {
        name: "accountTo",
        type: "string",
        title: "예금주",
        value: aspirant.information.account.to,
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "career",
        type: "block",
        title: "경력",
        value: careerToBlock(aspirant),
      },
      {
        name: "school",
        type: "block",
        title: "학력",
        value: schoolToBlock(aspirant),
      },
      {
        name: "about",
        type: "long",
        title: "자기 소개",
        value: aspirant.information.career.about,
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "homepage",
        type: "array",
        title: "홈페이지",
        value: aspirant.information.channel.web,
      },
      {
        name: "sns",
        type: "array",
        title: "SNS",
        value: aspirant.information.channel.sns,
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "portfolioPlusDate",
        type: "date",
        title: "추가 포폴 전송",
        value: dateToString(aspirant.response.portfolio.plus.request),
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "portfolioSet",
        type: "select",
        columns: [
          "있음",
          "없음",
        ],
        title: "준비된 세트",
        value: [
          "있음",
          "없음",
        ].map((str) => {
          return str === (aspirant.response.portfolio.ready.set ? "있음" : "없음") ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;
            let textValue;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["response.portfolio.ready.set"] = (columns.find((str, index) => {
              return newValue[index] === 1;
            }) === "있음");

            if (updateQuery["response.portfolio.ready.set"]) {
              textValue = "있음";
            } else {
              textValue = "없음"
            }

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).response.portfolio.ready.set = updateQuery["response.portfolio.ready.set"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "portfolioSet").querySelector('.' + valueTargetClassName).textContent = textValue;  
            }

            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "portfolioSetPhoto",
        type: "date",
        title: "세트 촬영",
        value: dateToString(aspirant.response.portfolio.plus.photo),
        editable: true,
        update: async (aspid, newValue) => {
          try {
            const instance = this;
            const { valueTargetClassName } = this;
            const { ajaxJson, dateToString } = GeneralJs;
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            const finalValue = newValue;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["response.portfolio.plus.photo"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).response.portfolio.plus.photo = finalValue;
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "portfolioSetPhoto").querySelector('.' + valueTargetClassName).textContent = dateToString(finalValue);  
            }
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
      {
        name: "commonMeeting",
        type: "select",
        columns: [
          "해당 없음",
          "미팅 조율",
          "참석 확정",
          "교육 완료",
        ],
        title: "공통 교육",
        value: [
          "",
          "미팅 조율",
          "참석 확정",
          "교육 완료",
        ].map((str) => {
          return str === aspirant.meeting.common.status ? 1 : 0;
        }),
        editable: true,
        update: async (columns, newValue, aspid) => {
          try {
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            let whereQuery, updateQuery;
            let textValue;

            whereQuery = {};
            whereQuery["aspid"] = aspid;

            updateQuery = {};
            updateQuery["meeting.common.status"] = columns.find((str, index) => {
              return newValue[index] === 1;
            });

            if (updateQuery["meeting.common.status"] === undefined || updateQuery["meeting.common.status"] === "해당 없음") {
              updateQuery["meeting.common.status"] = "";
              textValue = "해당 없음";
            } else {
              textValue = updateQuery["meeting.common.status"];
            }

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((d) => { return d.aspid === aspid }).meeting.common.status = updateQuery["meeting.common.status"];
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "commonMeeting").querySelector('.' + valueTargetClassName).textContent = textValue;  
            }
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "commonMeetingDate",
        type: "date",
        title: "공통 교육일",
        value: dateToString(aspirant.meeting.common.date),
        editable: true,
        update: async (aspid, newValue) => {
          try {
            const instance = this;
            const { valueTargetClassName } = this;
            const { ajaxJson, dateToString } = GeneralJs;
            const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
            const finalValue = newValue;
            let whereQuery, updateQuery;

            whereQuery = { aspid };
            updateQuery = {};
            updateQuery["meeting.common.date"] = finalValue;

            if (await GeneralJs.nonCxBan()) {
              await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
              instance.aspirants.find((a) => { return a.aspid === aspid }).meeting.common.date = finalValue;
              findByAttribute([ ...document.querySelector('.' + aspid).children ], "name", "commonMeetingDate").querySelector('.' + valueTargetClassName).textContent = dateToString(finalValue);  
            }
            await instance.aspirantColorSync();

          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "margin",
        type: "margin",
        title: "",
        value: "",
      },
    ];

    return dataMatrix;
  } catch (e) {
    console.log(e);
    return [];
  }
}

DesignerJs.prototype.aspirantColorSync = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute } = GeneralJs;
  try {
    let columns;
    let colorStandard;
    let standardDoms, valueDoms;
    let thisValue;
    let thisColor;
    let thisTargets;

    ({ columns } = await this.aspirantDataRender(false));

    colorStandard = columns.find((obj) => { return obj.colorStandard === true });

    standardDoms = [ ...document.querySelectorAll('.' + standardCaseClassName) ];
    valueDoms = [ ...document.querySelectorAll('.' + valueCaseClassName) ];

    for (let i = 0; i < standardDoms.length; i++) {
      thisValue = findByAttribute([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ], "name", colorStandard.name).textContent.trim();
      if (colorStandard.colorMap.find((o) => { return o.value === thisValue }) === undefined) {
        throw new Error("invalid value color match");
      }
      thisColor = colorStandard.colorMap.find((o) => { return o.value === thisValue }).color;
      thisTargets = [ ...standardDoms[i].querySelectorAll('.' + valueTargetClassName) ].concat([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ]);
      for (let dom of thisTargets) {
        dom.style.color = (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor;
        dom.setAttribute("color", (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor);
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantWhiteContents = async function (tong, aspid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, stringToLink, variableArray, downloadFile, uniqueValue, sleep, equalJson, hexaJson } = GeneralJs;
  try {
    const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
    const dataArr = await instance.aspirantWhiteData(aspid);
    const bigPhotoClassName = "bigPhotoClassName";
    const longTextEditClassName = "longTextEditClassName";
    const menuValuePromptClassName = "menuValuePromptClassName";
    const valueTargetClassName = "valueTargetClassName";
    const longEmptyText = "메모를 클릭하여 입력해주세요.";
    const maxColumnsNumber = 10;
    let name;
    let type;
    let title;
    let value;
    let motherBlock;
    let blockHeight;
    let titleWidth;
    let titleArea;
    let titleSize, titleWeight;
    let num;
    let marginPercentage;
    let careerBlockGrayOuterMargin;
    let careerBlockOuterMargin;
    let careerBlockOuterMarginTop;
    let careerBlockOuterMarginBottom;
    let careerBlockInnerMargin;
    let careerBlockInnerMarginSmall;
    let careerBlockSize;
    let blockBottom;
    let portfolioImages;
    let imageTargets;
    let imageTong;
    let imageTongPadding;
    let imagesNumber;
    let imageInnerBetween;
    let imageTongChildren;
    let targetNumber;
    let imageNode;
    let targetNumberArr;
    let downloadButton;
    let buttonWidth, buttonHeight, buttonTextTop, buttonSize, buttonWeight;
    let idList;
    let thisId;
    let bigPhotoEvent;
    let heightRatio;
    let thisWidth;
    let arrowHeight;
    let arrowMargin;
    let motherNum;
    let longMarginBottom;
    let longLineHeight;
    let emptyValueBoo;
    let dateDom;
    let menuVisual;
    let menuBetween;
    let menuTextTop;
    let menuSize;
    let menuWeight;
    let calendarWidth;
    let calendarBoxBetween;
    let calendarBoxHeight;
    let stringDom;
    let longTextWidth;
    let longTextHeight;
    let documentsImages;
    let documentsTong;
    let documentsFactorHeight;
    let documentsFactorTongPaddingTop;
    let documentsFactorTongMarginTop;
    let documentsFactorTongMarginBottom;
    let documentsTitleSize, documentsTitleTextTop, documentsTitleLeft, documentsTitleWeight;
    let documentsTitle;
    let linkTargetRawString;
    let uploadDate;
    let dateCaseTong;
    let imageTimeTong;
    let imageNodes;
    let portfolioTongNum;
    let thisNodesTargets;

    blockHeight = 32;
    titleWidth = 180;

    titleSize = 15;
    titleWeight = 700;

    marginPercentage = 33;
    imageTongPadding = 16;

    buttonWidth = 150;
    buttonHeight = 30;
    buttonTextTop = isMac() ? -1 : 1;
    buttonSize = 13;
    buttonWeight = 700;

    longTextWidth = 240;
    longTextHeight = 36;

    careerBlockGrayOuterMargin = <%% 10, 10, 9, 8, 0 %%>;
    careerBlockOuterMargin = <%% 14, 14, 14, 12, 2.5 %%>;
    careerBlockOuterMarginTop = <%% (isMac() ? 10 : 12), (isMac() ? 10 : 12), (isMac() ? 10 : 12), (isMac() ? 10 : 12), 2 %%>;
    careerBlockOuterMarginBottom = <%% (isMac() ? 12 : 10), (isMac() ? 12 : 10), (isMac() ? 12 : 10), (isMac() ? 12 : 10), 2 %%>;
    careerBlockInnerMargin = <%% 6, 6, 6, 4, 1 %%>;
    careerBlockInnerMarginSmall = <%% 2, 2, 2, 2, 0 %%>;
    careerBlockSize = <%% 13, 13, 13, 13, 2.5 %%>;

    blockBottom = 20;

    imagesNumber = 3;
    imageInnerBetween = 8;

    heightRatio = 0.9;

    arrowHeight = 12;
    arrowMargin = 20;
  
    longMarginBottom = 10;
    longLineHeight = 1.6;

    menuVisual = 4;
    menuBetween = 3;

    menuTextTop = isMac() ? -1 : 1,
    menuSize = 13;
    menuWeight = 600;

    calendarWidth = 260;
    calendarBoxBetween = 4;
    calendarBoxHeight = 32;

    documentsFactorHeight = 120;
    documentsFactorTongPaddingTop = 40;
    documentsFactorTongMarginTop = 4;
    documentsFactorTongMarginBottom = 14;
    documentsTitleSize = 15;
    documentsTitleTextTop = isMac() ? -27 : -26;
    documentsTitleLeft = 1;
    documentsTitleWeight = 700;

    idList = {};

    bigPhotoEvent = function (e) {
      const self = this;
      const gs = this.getAttribute("gs");
      const zIndex = 4;
      let domList;
      let thisIndex;
      let thisHeight;
      let renderPhoto;


      if (gs !== "null") {
        domList = idList.map((id) => { return document.getElementById(id) });
        thisIndex = domList.findIndex((dom) => { return dom === self });

        renderPhoto = (index) => {
          return function (e) {
            removeByClass(bigPhotoClassName);
            createNode({
              mother: totalContents,
              class: [ bigPhotoClassName ],
              event: {
                click: (e) => { removeByClass(bigPhotoClassName) }
              },
              style: {
                display: "block",
                position: "fixed",
                top: String(0),
                left: String(0) + ea,
                width: withOut(0, ea),
                height: withOut(0, ea),
                background: "transparent",
                zIndex: String(zIndex),
              }
            });
            createNode({
              mother: totalContents,
              class: [ bigPhotoClassName ],
              event: {
                click: (e) => { removeByClass(bigPhotoClassName) }
              },
              style: {
                display: "block",
                position: "fixed",
                top: String(0),
                left: String(grayBarWidth) + ea,
                width: withOut(grayBarWidth, ea),
                height: withOut(belowHeight, ea),
                background: colorChip.realBlack,
                opacity: String(0.6),
                zIndex: String(zIndex),
              }
            });
            thisHeight = (window.innerHeight - belowHeight) * heightRatio;
            thisWidth = thisHeight / (Number(domList[index].getAttribute("ratio")));
            createNode({
              mode: "img",
              mother: totalContents,
              class: [ bigPhotoClassName ],
              attribute: {
                src: domList[index].getAttribute("src"),
              },
              style: {
                position: "fixed",
                height: String(thisHeight) + "px",
                zIndex: String(zIndex),
                top: "calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 2) - " + String(thisHeight / 2) + "px" + ")",
                left: "calc(calc(calc(calc(100% - " + String(grayBarWidth) + ea + ") / 2) - " + String(thisWidth / 2) + "px" + ") + " + String(grayBarWidth) + ea + ")",
                borderRadius: String(5) + "px",
              }
            });
            createNode({
              mother: totalContents,
              class: [ bigPhotoClassName ],
              mode: "svg",
              source: instance.mother.returnArrow("left", colorChip.white),
              event: {
                selectstart: (e) => { e.preventDefault(); },
                click: renderPhoto(domList[index - 1] === undefined ? domList.length - 1 : index - 1),
              },
              style: {
                display: "block",
                position: "fixed",
                top: "calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 2) - " + String(arrowHeight / 2) + "px" + ")",
                left: String(grayBarWidth + arrowMargin) + ea,
                width: String(arrowHeight) + ea,
                zIndex: String(zIndex),
                cursor: "pointer",
              }
            });
            createNode({
              mother: totalContents,
              class: [ bigPhotoClassName ],
              mode: "svg",
              source: instance.mother.returnArrow("right", colorChip.white),
              event: {
                selectstart: (e) => { e.preventDefault(); },
                click: renderPhoto(domList[index + 1] === undefined ? 0 : index + 1),
              },
              style: {
                display: "block",
                position: "fixed",
                top: "calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 2) - " + String(arrowHeight / 2) + "px" + ")",
                right: String(arrowMargin) + ea,
                width: String(arrowHeight) + ea,
                zIndex: String(zIndex),
                cursor: "pointer",
              }
            });
          }
        }
        
        renderPhoto(thisIndex)({});

      } else {
        window.alert("잠시만 기다렸다가 다시 시도해주세요!");
      }
    }

    motherNum = 0;
    for (let obj of dataArr) {
      name = obj.name;
      type = obj.type;
      title = obj.title;
      value = obj.value;

      motherBlock = createNode({
        mother: tong,
        style: {
          display: "block",
          position: "relative",
          width: withOut(0, ea),
          "min-height": String(blockHeight) + ea,
        }
      });

      titleArea = createNode({
        mother: motherBlock,
        style: {
          display: "inline-flex",
          verticalAlign: "top",
          position: "relative",
          width: String(titleWidth) + ea,
          height: String(blockHeight) + ea,
          justifyContent: "start",
          alignItems: "start",
          flexDirection: "row",
        },
        child: {
          text: title,
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            fontSize: String(titleSize) + ea,
            fontWeight: String(titleWeight),
            color: colorChip.black,
          }
        }
      })

      if (type === "string") {

        stringDom = createNode({
          mother: motherBlock,
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            width: withOut(titleWidth, ea),
          },
          child: {
            class: [ valueTargetClassName ],
            text: value,
            style: {
              display: "inline-block",
              verticalAlign: "top",
              position: "relative",
              fontSize: String(titleSize) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              cursor: (typeof obj.script === "function") ? "pointer" : "",
            }
          }
        });

        if (obj.editable) {
          stringDom.setAttribute("aspid", aspid);
          stringDom.setAttribute("update", (await hexaJson({ update: obj.update })));
          stringDom.addEventListener("click", async function (e) {
            try {
              const self = this;
              const zIndex = 4;
              const aspid = this.getAttribute("aspid");
              const thisUpdateFunction = (await hexaJson(this.getAttribute("update"))).update.bind(instance);
              let cancelBack, longTextPrompt;                  

              cancelBack = createNode({
                mother: totalContents,
                class: [ menuValuePromptClassName ],
                event: (e) => {
                  self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                  removeByClass(menuValuePromptClassName);
                },
                style: {
                  position: "fixed",
                  top: String(0),
                  left: String(0),
                  width: withOut(0, ea),
                  height: withOut(0, ea),
                  background: "transparent",
                  zIndex: String(zIndex),
                }
              });

              longTextPrompt = createNode({
                mother: totalContents,
                class: [ menuValuePromptClassName ],
                style: {
                  position: "fixed",
                  top: String(e.y + menuVisual) + "px",
                  left: String(e.x + menuVisual) + "px",
                  width: String(longTextWidth) + ea,
                  background: colorChip.white,
                  animation: "fadeuplite 0.3s ease forwards",
                  zIndex: String(zIndex),
                },
                child: {
                  style: {
                    display: "flex",
                    position: "relative",
                    width: String(longTextWidth) + ea,
                    height: String(longTextHeight) + ea,
                    borderRadius: String(5) + "px",
                    background: colorChip.white,
                    boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                    borderRadius: String(5) + "px",
                    marginBottom: String(menuBetween) + ea,
                    justifyContent: "start",
                    alignItems: "center",
                    textAlign: "center",
                    cursor: "pointer",
                    paddingLeft: String(12) + ea,
                  },
                  child: {
                    mode: "input",
                    attribute: {
                      type: "text",
                      value: self.querySelector("." + valueTargetClassName).textContent,
                    },
                    event: {
                      keydown: async function (e) {
                        try {
                          if (e.key === "Enter" || e.key === "Tab") {
                            e.preventDefault();
                          }
                        } catch (e) {
                          console.log(e);
                        }
                      },
                      keyup: async function (e) {
                        try {
                          if (e.key === "Enter" || e.key === "Tab") {
                            e.preventDefault();
                            const thisValue = this.value.trim().replace(/[\&\=\+\/\\\#]/gi, '');
                            self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                            await thisUpdateFunction(aspid, thisValue, self.querySelector("." + valueTargetClassName));
                            removeByClass(menuValuePromptClassName);
                          }
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    style: {
                      position: "relative",
                      top: String(menuTextTop) + ea,
                      fontSize: String(15) + ea,
                      fontWeight: String(300),
                      color: colorChip.green,
                      border: String(0),
                      outline: String(0),
                      width: withOut(0, ea),
                      height: withOut(0, ea),
                    }
                  }
                }
              });
              longTextPrompt.querySelector("input").focus();

              setQueue(() => {
                self.querySelector("." + valueTargetClassName).style.color = colorChip.green;
              });

            } catch (e) {
              console.log(e);
            }
          });
        }

        if (typeof obj.script === "function") {
          stringDom.addEventListener("click", obj.script(aspid));
        }

      } else if (type === "date") {

        dateDom = createNode({
          mother: motherBlock,
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            width: withOut(titleWidth, ea),
          },
          child: {
            class: [ valueTargetClassName ],
            text: value,
            style: {
              display: "inline-block",
              verticalAlign: "top",
              position: "relative",
              fontSize: String(titleSize) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              cursor: obj.editable ? "pointer" : "",
            }
          }
        });

        if (obj.editable) {
          dateDom.setAttribute("aspid", aspid);
          dateDom.setAttribute("update", (await hexaJson({ update: obj.update })));
          dateDom.addEventListener("click", async function (e) {
            try {
              const self = this;
              const zIndex = 4;
              const aspid = this.getAttribute("aspid");
              const thisUpdateFunction = (await hexaJson(this.getAttribute("update"))).update.bind(instance);
              let cancelBack, calendarPrompt;                  
              let calendar;

              cancelBack = createNode({
                mother: totalContents,
                class: [ menuValuePromptClassName ],
                event: (e) => {
                  self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                  removeByClass(menuValuePromptClassName);
                },
                style: {
                  position: "fixed",
                  top: String(0),
                  left: String(0),
                  width: withOut(0, ea),
                  height: withOut(0, ea),
                  background: "transparent",
                  zIndex: String(zIndex),
                }
              });

              calendarPrompt = createNode({
                mother: totalContents,
                class: [ menuValuePromptClassName ],
                style: {
                  position: "fixed",
                  top: String(e.y + menuVisual) + "px",
                  left: String(e.x + menuVisual - (300 / 2)) + "px",
                  paddingTop: String(calendarBoxBetween) + ea,
                  width: String(calendarWidth) + ea,
                  animation: "fadeuplite 0.3s ease forwards",
                  zIndex: String(zIndex),
                },
                children: [
                  {
                    event: {
                      click: async function (e) {
                        try {
                          const thisValue = new Date(1800, 0, 1);
                          self.querySelector("." + valueTargetClassName).textContent = "해당 없음";
                          self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                          await thisUpdateFunction(aspid, thisValue);
                          removeByClass(menuValuePromptClassName);
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    style: {
                      display: "inline-flex",
                      verticalAlign: "top",
                      position: "relative",
                      width: String((calendarWidth - calendarBoxBetween) / 2) + ea,
                      background: colorChip.white,
                      boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                      borderRadius: String(5) + "px",
                      height: String(calendarBoxHeight) + ea,
                      marginBottom: String(calendarBoxBetween) + ea,
                      marginRight: String(calendarBoxBetween) + ea,
                      cursor: "pointer",
                      flexDirection: "column",
                      justifyContent: "center",
                      alignItems: "center",
                    },
                    child: {
                      text: "해당 없음",
                      style: {
                        position: "relative",
                        top: String(menuTextTop) + ea,
                        fontSize: String(menuSize) + ea,
                        fontWeight: String(menuWeight),
                        color: colorChip.black,
                      }
                    }
                  },
                  {
                    event: {
                      click: async function (e) {
                        try {
                          const thisValue = new Date(3800, 0, 1);
                          self.querySelector("." + valueTargetClassName).textContent = "예정";
                          self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                          await thisUpdateFunction(aspid, thisValue);
                          removeByClass(menuValuePromptClassName);
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    style: {
                      display: "inline-flex",
                      verticalAlign: "top",
                      position: "relative",
                      width: String((calendarWidth - calendarBoxBetween) / 2) + ea,
                      background: colorChip.white,
                      boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                      borderRadius: String(5) + "px",
                      height: String(calendarBoxHeight) + ea,
                      marginBottom: String(calendarBoxBetween) + ea,
                      cursor: "pointer",
                      flexDirection: "column",
                      justifyContent: "center",
                      alignItems: "center",
                    },
                    child: {
                      text: "예정",
                      style: {
                        position: "relative",
                        top: String(menuTextTop) + ea,
                        fontSize: String(menuSize) + ea,
                        fontWeight: String(menuWeight),
                        color: colorChip.black,
                      }
                    }
                  },
                  {
                    style: {
                      display: "block",
                      position: "relative",
                      width: String(calendarWidth) + ea,
                      background: colorChip.white,
                      boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                      borderRadius: String(5) + "px",
                    },
                  }
                ]
              });

              calendar = instance.mother.makeCalendar(new Date(), async function (e) {
                try {
                  e.stopPropagation();
                  e.preventDefault();
                  const stringValue = this.getAttribute("buttonValue");
                  const thisValue = stringToDate(stringValue);
                  this.setAttribute("value", stringValue);
                  self.querySelector("." + valueTargetClassName).textContent = stringValue;
                  self.querySelector("." + valueTargetClassName).style.color = colorChip.black;
                  await thisUpdateFunction(aspid, thisValue);
                  removeByClass(menuValuePromptClassName);
                } catch (e) {
                  console.log(e);
                }
              });
              calendarPrompt.lastChild.appendChild(calendar.calendarBase);

              setQueue(() => {
                self.querySelector("." + valueTargetClassName).style.color = colorChip.green;
              });

            } catch (e) {
              console.log(e);
            }
          });
        }

      } else if (type === "select") {
        
        if (obj.editable === true) {
          num = 0;
          for (let str of obj.columns) {
            createNode({
              mother: motherBlock,
              attribute: {
                toggle: value[num] === 1 ? "on" : "off",
                mother: String(motherNum),
                index: String(num),
                aspid: aspid,
              },
              event: {
                click: async function (e) {
                  try {
                    const self = this;
                    const aspid = this.getAttribute("aspid");
                    const mother = Number(this.getAttribute("mother"));
                    const obj = dataArr[mother];
                    const index = Number(this.getAttribute("index"));
                    const pastValue = equalJson(JSON.stringify(obj.value));
                    const length = pastValue.length;
                    const siblings = [ ...this.parentNode.children ].filter((dom) => { return dom.getAttribute("toggle") !== null });
                    let newValue;
  
                    newValue = (new Array(length)).fill(0, 0);
                    newValue[index] = 1;
                    
                    for (let i = 0; i < length; i++) {
                      if (newValue[i] === 1) {
                        siblings[i].firstChild.style.color = colorChip.green;
                        siblings[i].setAttribute("toggle", "on");
                      } else {
                        siblings[i].firstChild.style.color = colorChip.deactive;
                        siblings[i].setAttribute("toggle", "off");
                      }
                    }

                    await obj.update(obj.columns, newValue, aspid);
                    
                  } catch (e) {
                    console.log(e);
                  }
                },
                selectstart: (e) => { e.preventDefault() },
              },
              style: {
                display: "inline-block",
                verticalAlign: "top",
                position: "relative",
                width: "calc(" + withOut(titleWidth, ea) + " / " + String(maxColumnsNumber) + ")",
              },
              child: {
                text: str,
                event: {
                  selectstart: (e) => { e.preventDefault() },
                },
                style: {
                  display: "inline-block",
                  verticalAlign: "top",
                  position: "relative",
                  fontSize: String(titleSize) + ea,
                  fontWeight: String(400),
                  color: value[num] === 1 ? colorChip.green : colorChip.deactive,
                  cursor: "pointer",
                }
              }
            });
            num++;
          }

        } else {

          num = 0;
          for (let str of obj.columns) {
            createNode({
              mother: motherBlock,
              style: {
                display: "inline-block",
                verticalAlign: "top",
                position: "relative",
                width: "calc(" + withOut(titleWidth, ea) + " / " + String(maxColumnsNumber) + ")",
              },
              child: {
                text: str,
                style: {
                  display: "inline-block",
                  verticalAlign: "top",
                  position: "relative",
                  fontSize: String(titleSize) + ea,
                  fontWeight: String(value[num] === 1 ? 400 : 200),
                  color: value[num] === 1 ? colorChip.green : colorChip.deactive,
                }
              }
            });
            num++;
          }

        }

      } else if (type === "block") {
        
        createNode({
          mother: motherBlock,
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            padding: String(careerBlockGrayOuterMargin) + ea,
            width: withOut(titleWidth + (careerBlockGrayOuterMargin * 2), ea),
            borderRadius: String(5) + "px",
            background: colorChip.gray0,
            marginBottom: String(blockBottom) + ea,
          },
          children: value.map((obj, index) => {
            const { title, value: factorValue } = obj;
            const lastBoo = (index === value.length - 1);
            return {
              attribute: {
                index: String(index),
              },
              style: {
                display: "block",
                position: "relative",
                padding: String(careerBlockOuterMargin) + ea,
                paddingTop: String(careerBlockOuterMarginTop) + ea,
                paddingBottom: String(careerBlockOuterMarginBottom) + ea,
                width: withOut(careerBlockOuterMargin * 2, ea),
                borderRadius: String(5) + "px",
                marginBottom: !lastBoo ? String(careerBlockInnerMargin) + ea : "",
                background: colorChip.white,
                boxShadow: "0px 2px 11px -9px " + colorChip.shadow,
              },
              children: factorValue.map((str, index) => {
                const lastBoo = (index === factorValue.length - 1);
                return {
                  text: "<b%" + title[index] + " %b>:" + "&nbsp;&nbsp;&nbsp;" + str,
                  style: {
                    display: "block",
                    position: "relative",
                    fontSize: String(careerBlockSize) + ea,
                    fontWeight: String(400),
                    color: colorChip.black,
                    marginBottom: !lastBoo ? String(careerBlockInnerMarginSmall) + ea : "",
                  },
                  bold: {
                    fontSize: String(careerBlockSize) + ea,
                    fontWeight: String(800),
                    color: colorChip.black,
                  },
                  under: {
                    fontSize: String(careerBlockSize) + ea,
                    fontWeight: String(200),
                    color: colorChip.green,
                  }
                }
              })
            }
          })
        });

      } else if (type === "margin") {

        createNode({
          mother: motherBlock,
          style: {
            display: "block",
            position: "absolute",
            top: String(0),
            left: String(0),
            height: String(marginPercentage) + '%',
            width: withOut(0, ea),
            borderBottom: "1px dashed " + colorChip.gray3,
          }
        })

      } else if (type === "array") {

        if (value.length > 0) {
          createNode({
            mother: motherBlock,
            style: {
              display: "inline-block",
              position: "relative",
              width: withOut(titleWidth, ea),
            },
            child: {
              text: value[0],
              style: {
                display: "inline-block",
                position: "relative",
                fontSize: String(titleSize) + ea,
                fontWeight: String(400),
                color: colorChip.black,
              }
            }
          });
        }

      } else if (type === "long") {

        if (obj.editable === true) {
          emptyValueBoo = (value.trim() === '');
          createNode({
            mother: motherBlock,
            attribute: {
              empty: emptyValueBoo ? "true" : "false",
              value: value.trim(),
              mother: String(motherNum),
              aspid: aspid,
            },
            event: {
              click: async function (e) {
                try {
                  const self = this;
                  const emptyValueBoo = (this.getAttribute("empty") === "true");
                  const value = this.getAttribute("value");
                  const pastValue = value;
                  const box = this.getBoundingClientRect();
                  const motherBox = this.parentNode.getBoundingClientRect();
                  const mother = Number(this.getAttribute("mother"));
                  const obj = dataArr[mother];
                  const aspid = this.getAttribute("aspid");
                  let thisLeft;
                  let thisInput;

                  thisLeft = box.left - motherBox.left;

                  this.firstChild.textContent = "";

                  createNode({
                    mother: this,
                    class: [ longTextEditClassName ],
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        setQueue(() => {
                          self.firstChild.insertAdjacentHTML("beforeend", pastValue.replace(/\n/gi, "<br>"));
                        })
                        removeByClass(longTextEditClassName);
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0) + ea,
                      height: withOut(0, ea),
                      width: withOut(0, ea),
                      background: "trasparent",
                      zIndex: String(1),
                    }
                  });

                  thisInput = createNode({
                    mother: this,
                    class: [ longTextEditClassName ],
                    event: {
                      click: (e) => { e.preventDefault(); e.stopPropagation(); }
                    },
                    style: {
                      display: "inline-block",
                      verticalAlign: "top",
                      position: "relative",
                      top: String(0),
                      width: withOut(titleWidth, ea),
                      height: String(100) + ea,
                      background: colorChip.white,
                      zIndex: String(2),
                    },
                    child: {
                      mode: "textarea",
                      text: value,
                      attribute: {
                        value,
                        aspid,
                        mother: String(mother),
                      },
                      event: {
                        keydown: async function (e) {
                          try {
                            if (e.key === "Tab") {
                              e.preventDefault();
                            }
                          } catch (e) {
                            console.log(e);
                          }
                        },
                        keyup: async function (e) {
                          try {
                            if (e.key === "Tab") {
                              this.blur();
                            }
                          } catch (e) {
                            console.log(e);
                          }
                        },
                        blur: async function (e) {
                          try {
                            this.value = this.value.trim().replace(/[\=\&\+\#\<\>\/\\]/gi, '').replace(/  /gi, ' ');

                            const mother = Number(this.getAttribute("mother"));
                            const obj = dataArr[mother];
                            const aspid = this.getAttribute("aspid");
                            const newValue = this.value;
                            this.parentNode.parentNode.setAttribute("value", newValue);

                            await obj.update(newValue, aspid);

                            setQueue(() => {
                              self.firstChild.insertAdjacentHTML("beforeend", newValue.replace(/\n/gi, "<br>"));
                            })
                            removeByClass(longTextEditClassName);
                          } catch (e) {
                            console.log(e);
                          }
                        },
                      },
                      style: {
                        display: "inline-block",
                        verticalAlign: "top",
                        position: "relative",
                        fontSize: String(titleSize) + ea,
                        fontWeight: String(400),
                        color: colorChip.green,
                        width: withOut(0, ea),
                        height: String(100) + ea,
                        lineHeight: String(longLineHeight),
                        background: colorChip.white,
                        outline: String(0),
                        border: String(0),
                      }
                    }
                  }).firstChild;

                  thisInput.focus();

                } catch (e) {
                  console.log(e);
                }
              }
            },
            style: {
              display: "inline-block",
              verticalAlign: "top",
              position: "relative",
              width: withOut(titleWidth, ea),
            },
            child: {
              text: emptyValueBoo ? longEmptyText : value,
              style: {
                display: "inline-block",
                verticalAlign: "top",
                position: "relative",
                fontSize: String(titleSize) + ea,
                fontWeight: String(400),
                color: emptyValueBoo ? colorChip.deactive : colorChip.black,
                marginBottom: String(longMarginBottom) + ea,
                lineHeight: String(longLineHeight),
              }
            }
          });

        } else {

          createNode({
            mother: motherBlock,
            style: {
              display: "inline-block",
              verticalAlign: "top",
              position: "relative",
              width: withOut(titleWidth, ea),
            },
            child: {
              text: value,
              style: {
                display: "inline-block",
                verticalAlign: "top",
                position: "relative",
                fontSize: String(titleSize) + ea,
                fontWeight: String(400),
                color: colorChip.black,
                marginBottom: String(longMarginBottom) + ea,
                lineHeight: String(longLineHeight),
              }
            }
          });

        }

      }

      motherNum++;
    }
    
    // documents

    documentsImages = await ajaxJson({ aspid }, BRIDGEHOST + "/aspirantDocumentsList", { equal: true });
    documentsImages = {
      account: documentsImages.account.map((str) => { return stringToLink(str) }),
      business: documentsImages.business.map((str) => { return stringToLink(str) }),
      identity: documentsImages.identity.map((str) => { return stringToLink(str) }),
    };
    documentsTitle = {
      account: "통장 사본",
      business: "사업자등록증(주민등록증)",
      identity: "신분증 사본",
    };

    documentsTong = createNode({
      mother: tong,
      style: {
        display: "block",
        position: "relative",
        width: withOut(imageTongPadding + imageTongPadding - imageInnerBetween, ea),
        background: colorChip.gray1,
        padding: String(imageTongPadding) + ea,
        paddingRight: String(imageTongPadding - imageInnerBetween) + ea,
        paddingTop: String(documentsFactorTongPaddingTop) + ea,
        borderRadius: String(5) + "px",
        marginTop: String(documentsFactorTongMarginTop) + ea,
        marginBottom: String(documentsFactorTongMarginBottom) + ea,
      },
      children: [
        {
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            marginRight: String(imageInnerBetween) + ea,
            width: "calc(calc(calc(calc(100% - " + String(imageInnerBetween * (imagesNumber)) + ea + ") - " + String(0) + ea + ") / " + String(imagesNumber) + ") - " + String(imageInnerBetween * 2) + ea + ")",
            "min-height": String(documentsFactorHeight) + ea,
            padding: String(imageInnerBetween) + ea,
            paddingBottom: String(0),
            background: colorChip.gray3,
            borderRadius: String(5) + "px",
          },
          children: [
            {
              text: documentsTitle.account,
              style: {
                display: "inline-block",
                position: "absolute",
                top: String(documentsTitleTextTop) + ea,
                left: String(documentsTitleLeft) + ea,
                fontSize: String(documentsTitleSize) + ea,
                fontWeight: String(documentsTitleWeight),
                color: colorChip.black,
              }
            }
          ].concat(documentsImages.account.map((link) => {
            return {
              mode: "img",
              attribute: {
                src: link,
              },
              event: async function (e) {
                try {
                  const link = this.getAttribute("src");
                  const loading2 = instance.mother.whiteProgressLoading();
                  await downloadFile(link, loading2.progress.firstChild);
                  loading2.remove();
                } catch (e) {
                  console.log(e);
                }
              },
              style: {
                display: "block",
                position: "relative",
                width: withOut(0, ea),
                marginBottom: String(imageInnerBetween) + ea,
                borderRadius: String(5) + "px",
                cursor: "pointer",
              }
            }
          }))
        },
        {
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            marginRight: String(imageInnerBetween) + ea,
            width: "calc(calc(calc(calc(100% - " + String(imageInnerBetween * (imagesNumber)) + ea + ") - " + String(0) + ea + ") / " + String(imagesNumber) + ") - " + String(imageInnerBetween * 2) + ea + ")",
            "min-height": String(documentsFactorHeight) + ea,
            padding: String(imageInnerBetween) + ea,
            paddingBottom: String(0),
            background: colorChip.gray3,
            borderRadius: String(5) + "px",
          },
          children: [
            {
              text: documentsTitle.business,
              style: {
                display: "inline-block",
                position: "absolute",
                top: String(documentsTitleTextTop) + ea,
                left: String(documentsTitleLeft) + ea,
                fontSize: String(documentsTitleSize) + ea,
                fontWeight: String(documentsTitleWeight),
                color: colorChip.black,
              }
            }
          ].concat(documentsImages.business.map((link) => {
            return {
              mode: "img",
              attribute: {
                src: link,
              },
              event: async function (e) {
                try {
                  const link = this.getAttribute("src");
                  const loading2 = instance.mother.whiteProgressLoading();
                  await downloadFile(link, loading2.progress.firstChild);
                  loading2.remove();
                } catch (e) {
                  console.log(e);
                }
              },
              style: {
                display: "block",
                position: "relative",
                width: withOut(0, ea),
                marginBottom: String(imageInnerBetween) + ea,
                borderRadius: String(5) + "px",
                cursor: "pointer",
              }
            }
          }))
        },
        {
          style: {
            display: "inline-block",
            verticalAlign: "top",
            position: "relative",
            marginRight: String(imageInnerBetween) + ea,
            width: "calc(calc(calc(calc(100% - " + String(imageInnerBetween * (imagesNumber)) + ea + ") - " + String(0) + ea + ") / " + String(imagesNumber) + ") - " + String(imageInnerBetween * 2) + ea + ")",
            "min-height": String(documentsFactorHeight) + ea,
            padding: String(imageInnerBetween) + ea,
            paddingBottom: String(0),
            background: colorChip.gray3,
            borderRadius: String(5) + "px",
          },
          children: [
            {
              text: documentsTitle.identity,
              style: {
                display: "inline-block",
                position: "absolute",
                top: String(documentsTitleTextTop) + ea,
                left: String(documentsTitleLeft) + ea,
                fontSize: String(documentsTitleSize) + ea,
                fontWeight: String(documentsTitleWeight),
                color: colorChip.black,
              }
            }
          ].concat(documentsImages.identity.map((link) => {
            return {
              mode: "img",
              attribute: {
                src: link,
              },
              event: async function (e) {
                try {
                  const link = this.getAttribute("src");
                  const loading2 = instance.mother.whiteProgressLoading();
                  await downloadFile(link, loading2.progress.firstChild);
                  loading2.remove();
                } catch (e) {
                  console.log(e);
                }
              },
              style: {
                display: "block",
                position: "relative",
                width: withOut(0, ea),
                marginBottom: String(imageInnerBetween) + ea,
                borderRadius: String(5) + "px",
                cursor: "pointer",
              }
            }
          }))
        },
      ]
    });

    // margin and line

    createNode({
      mother: tong,
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        "min-height": String(blockHeight) + ea,
      },
      child: {
        style: {
          display: "block",
          position: "absolute",
          top: String(0),
          left: String(0),
          height: String(marginPercentage) + '%',
          width: withOut(0, ea),
          borderBottom: "1px dashed " + colorChip.gray3,
        }
      }
    });

    // portfolio

    portfolioImages = await ajaxJson({ aspid }, BRIDGEHOST + "/aspirantPortfolio", { equal: true });
    imageTargets = portfolioImages.link.map((str) => { return stringToLink(str) });

    if (imageTargets.length > 0) {
      downloadButton = createNode({
        mother: tong,
        attribute: {
          aspid
        },
        event: {
          click: async function (e) {
            try {
              const aspid = this.getAttribute("aspid");
              const loading = instance.mother.whiteProgressLoading(null, true);
              const response = await ajaxJson({ aspid, mode: "create" }, BRIDGEHOST + "/aspirantPortfolioDownload", { equal: true });
              loading.remove();
              const loading2 = instance.mother.whiteProgressLoading();
              await downloadFile(stringToLink(response.link), aspid + "_portfolio" + ".zip", loading2.progress.firstChild);
              loading2.remove();
              const fileName = stringToLink(response.link).split("/")[stringToLink(response.link).split("/").length - 1];
              await ajaxJson({ aspid, mode: "delete", file: fileName }, BRIDGEHOST + "/aspirantPortfolioDownload", { equal: true });
            } catch (e) {
              console.log(e);
            }
          }
        },
        style: {
          display: "flex",
          position: "relative",
          width: String(100) + '%',
          height: String(buttonHeight) + ea,
          justifyContent: "end",
          alignItems: "center",
          marginBottom: String(imageInnerBetween) + ea,
          cursor: "pointer",
        },
        child: {
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(buttonWidth) + ea,
            height: String(buttonHeight) + ea,
            background: colorChip.green,
            borderRadius: String(5) + "px",
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            text: "모든 사진 일괄 다운로드",
            style: {
              display: "inline-block",
              position: "relative",
              top: String(buttonTextTop) + ea,
              fontSize: String(buttonSize) + ea,
              fontWeight: String(buttonWeight),
              color: colorChip.white,
            }
          }
        }
      })
    } else {
      downloadButton = null;
    }

    imageTong = createNode({
      mother: tong,
      style: {
        display: "block",
        position: "relative",
        width: withOut(imageTongPadding + imageTongPadding - imageInnerBetween, ea),
        background: colorChip.gray1,
        padding: String(imageTongPadding) + ea,
        paddingRight: String(imageTongPadding - imageInnerBetween) + ea,
        borderRadius: String(5) + "px",
      }
    });

    imageTongChildren = [];
    for (let num of variableArray(imagesNumber)) {
      imageTongChildren.push(createNode({
        mother: imageTong,
        style: {
          display: "inline-block",
          verticalAlign: "top",
          position: "relative",
          marginRight: String(imageInnerBetween) + ea,
          width: "calc(calc(calc(100% - " + String(imageInnerBetween * (imagesNumber)) + ea + ") - " + String(0) + ea + ") / " + String(imagesNumber) + ")",
          borderRadius: String(5) + "px",
        }
      }))
    }

    num = 0;
    idList = [];
    dateCaseTong = [];
    imageNodes = [];
    for (let link of imageTargets) {
      targetNumberArr = imageTongChildren.map((dom, index) => { return { height: dom.getBoundingClientRect().height, index } });
      targetNumberArr.sort((a, b) => { return a.height - b.height });
      targetNumber = targetNumberArr[0].index;
      thisId = aspid + "_" + "portfolio" + "_" + uniqueValue("hex");

      linkTargetRawString = link.split("/")[link.split("/").findIndex((str) => { return str === "aspirant" }) + 1].split("_")[0];
      linkTargetRawString = linkTargetRawString.replace(/[^0-9]/gi, '');
      uploadDate = new Date(
        Number("20" + linkTargetRawString.slice(0, 2)),
        Number(linkTargetRawString.slice(2, 4)) - 1,
        Number(linkTargetRawString.slice(4, 6)),
        Number(linkTargetRawString.slice(6, 8)),
      );

      imageNode = createNode({
        id: thisId,
        mode: "img",
        mother: imageTongChildren[targetNumber],
        attribute: {
          src: link,
          gs: "null",
          date: dateToString(uploadDate, true),
        },
        style: {
          display: "inline-block",
          verticalAlign: "top",
          position: "relative",
          width: withOut(0, ea),
          marginBottom: String(imageInnerBetween) + ea,
          borderRadius: String(5) + "px",
        }
      });

      idList.push(thisId);
      dateCaseTong.push(dateToString(uploadDate, true));
      imageNodes.push(imageNode);

      num++;
    }

    setQueue(async () => {
      try {
        let domList;
        domList = idList.map((id) => { return document.getElementById(id) });
        if (domList.every((dom) => { return dom !== null })) {
          while (domList.some((dom) => { return dom.getBoundingClientRect().height === 0 })) {
            await sleep(100);
            domList = idList.map((id) => { return document.getElementById(id) });
          }
          domList.forEach((dom) => {
            const { width, height } = dom.getBoundingClientRect();
            dom.setAttribute("width", String(width));
            dom.setAttribute("height", String(height));
            dom.setAttribute("gs", (width >= height ? "g" : "s"));
            dom.setAttribute("ratio", String(height / width));
          });
        }

        setQueue(() => {
          dateCaseTong = [ ...new Set(dateCaseTong) ];
          dateCaseTong.sort((a, b) => { return stringToDate(a).valueOf() - stringToDate(b).valueOf() });

          portfolioTongNum = 0;
          for (let dateString of dateCaseTong) {

            imageTimeTong = createNode({
              mother: imageTong,
              style: {
                display: "inline-block",
                verticalAlign: "top",
                position: "relative",
                marginRight: String(imageInnerBetween) + ea,
                width: withOut(imageInnerBetween + (imageInnerBetween * 2), ea),
                "min-height": String(documentsFactorHeight) + ea,
                marginTop: String(portfolioTongNum === 0 ? 24 : 48) + ea,
                padding: String(imageInnerBetween) + ea,
                paddingBottom: String(0),
                background: colorChip.gray3,
                borderRadius: String(5) + "px",
              },
              child: {
                text: (portfolioTongNum === 0 ? "최초" : "추가") + " 포트폴리오 / 전송일 : " + dateString,
                style: {
                  display: "inline-block",
                  position: "absolute",
                  top: String(documentsTitleTextTop) + ea,
                  left: String(documentsTitleLeft) + ea,
                  fontSize: String(documentsTitleSize) + ea,
                  fontWeight: String(documentsTitleWeight),
                  color: portfolioTongNum === 0 ? colorChip.black : colorChip.green,
                }
              }
            });

            imageTongChildren = [];
            for (let num of variableArray(imagesNumber)) {
              imageTongChildren.push(createNode({
                mother: imageTimeTong,
                style: {
                  display: "inline-block",
                  verticalAlign: "top",
                  position: "relative",
                  marginRight: String(num === imagesNumber - 1 ? 0 : imageInnerBetween) + ea,
                  width: "calc(calc(calc(100% - " + String(imageInnerBetween * (imagesNumber - 1)) + ea + ") - " + String(0) + ea + ") / " + String(imagesNumber) + ")",
                  borderRadius: String(5) + "px",
                }
              }))
            }

            thisNodesTargets = imageNodes.filter((dom) => {
              return dom.getAttribute("date") === dateString;
            });

            for (let node of thisNodesTargets) {
              targetNumberArr = imageTongChildren.map((dom, index) => { return { height: dom.getBoundingClientRect().height, index } });
              targetNumberArr.sort((a, b) => { return a.height - b.height });
              targetNumber = targetNumberArr[0].index;
              node.style.width = withOut(0, ea);
              imageTongChildren[targetNumber].appendChild(node);
              node.style.cursor = "pointer";
              node.addEventListener("click", bigPhotoEvent);
            }

            portfolioTongNum++;
          }

          if (downloadButton !== null) {
            createNode({
              mother: downloadButton,
              text: "포트폴리오 전송 횟수 : " + String(dateCaseTong.length) + "회 / 추가 포트폴리오 " + (dateCaseTong.length < 2 ? "전송 안 함" : "전송함"),
              style: {
                display: "inline-block",
                position: "absolute",
                top: String(isMac() ? 5 : 7) + ea,
                right: String(buttonWidth + 12) + ea,
                fontSize: String(buttonSize) + ea,
                fontWeight: String(buttonWeight),
                color: colorChip.black,
              }
            });
          }

        }, 100);

      } catch (e) {
        console.log(e);
      }
    }, 100);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantSettingPortfolioView = async function (aspid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, stringToLink, linkToString, variableArray, downloadFile, uniqueValue, sleep, equalJson, hexaJson } = GeneralJs;
  try {
    const settingPopupClassName = "settingPopupClassName";
    const settingPopupWhiteContentsClassName = "settingPopupWhiteContentsClassName";
    const zIndex = 6;
    const keyKeyword = "imageKey_";
    let cancelBack;
    let whiteBase;
    let whiteWidth, whiteHeight;
    let innerMargin;
    let titleTextTop;
    let titleSize;
    let titleWeight;
    let fontTextTop;
    let fontSize;
    let fontBetween;
    let fontWeight;
    let innerMarginTop;
    let titleAreaHeight;
    let settingList;
    let setting, proposal;
    let imageTargets;
    let linkTargetRawString;
    let uploadDate;
    let keySet;
    let scrollBox;
    let contentsBox;
    let titleString;
    let num;
    let thisTargets;
    let thisGrayBox;
    let linkArr;
    let fileName;
    let whiteBlock;
    let downloadCircleWidth;
    let downloadCirclePadding;
    let downloadIconWidth;
    let downloadIconTop;
    let titleBox;
    let downloadButton;
    let buttonWidth;
    let buttonHeight;
    let buttonTextTop;
    let buttonSize;
    let buttonWeight;

    whiteWidth = 800;
    whiteHeight = 480;

    innerMargin = 24;
    innerMarginTop = 20;

    titleTextTop = isMac() ? 2 : 5;
    titleSize = 17;
    titleWeight = 800;

    fontTextTop = isMac() ? 1 : 3;
    fontSize = 14;
    fontBetween = 8;
    fontWeight = 400;

    titleAreaHeight = 33;

    downloadCircleWidth = 21;
    downloadCirclePadding = 16;
    downloadIconWidth = 9;
    downloadIconTop = 1;
    
    buttonWidth = 120;
    buttonHeight = 24;
    buttonTextTop = isMac() ? -1 : 1;
    buttonSize = 11;
    buttonWeight = 700;

    settingList = await ajaxJson({ aspid }, BRIDGEHOST + "/aspirantSettingList", { equal: true });
    ({ setting, proposal } = settingList);

    imageTargets = setting.map((str) => { return stringToLink(str) });
    imageTargets = imageTargets.map((link) => {
      linkArr = link.split("/");
      fileName = linkArr[linkArr.length - 1];
      fileName = fileName.split(".").map((str) => { return window.decodeURIComponent(str) }).join(".");
      linkTargetRawString = linkArr[linkArr.findIndex((str) => { return str === "aspirant" }) + 1].split("_")[0];
      linkTargetRawString = linkTargetRawString.replace(/[^0-9]/gi, '');
      uploadDate = new Date(
        Number("20" + linkTargetRawString.slice(0, 2)),
        Number(linkTargetRawString.slice(2, 4)) - 1,
        Number(linkTargetRawString.slice(4, 6)),
        Number(linkTargetRawString.slice(6, 8)),
        Number(linkTargetRawString.slice(8, 10)),
      );
      return {
        key: keyKeyword + linkTargetRawString,
        link,
        date: uploadDate,
        name: fileName,
        exe: fileName.split(".")[fileName.split(".").length - 1],
      };
    });
    keySet = [ ...new Set(imageTargets.map(({ key }) => { return key })) ];
    keySet.sort((a, b) => { return Number(a.replace(/[^0-9]/gi, '')) - Number(b.replace(/[^0-9]/gi, '')) });
    keySet = keySet.map((key) => {
      linkTargetRawString = key.replace(/[^0-9]/gi, '');
      uploadDate = new Date(
        Number("20" + linkTargetRawString.slice(0, 2)),
        Number(linkTargetRawString.slice(2, 4)) - 1,
        Number(linkTargetRawString.slice(4, 6)),
        Number(linkTargetRawString.slice(6, 8)),
        Number(linkTargetRawString.slice(8, 10)),
      );
      return { key, date: uploadDate };
    })

    cancelBack = createNode({
      mother: totalContents,
      attribute: {
        aspid: aspid
      },
      class: [ "justfadein", settingPopupClassName ],
      event: (e) => { removeByClass(settingPopupClassName) },
      style: {
        position: "fixed",
        top: String(0),
        left: String(grayBarWidth) + ea,
        width: withOut(grayBarWidth, ea),
        height: withOut(belowHeight, ea),
        background: colorChip.black,
        zIndex: String(zIndex),
      }
    });

    whiteBase = createNode({
      mother: totalContents,
      attribute: {
        aspid: aspid
      },
      class: [ settingPopupWhiteContentsClassName, settingPopupClassName ],
      style: {
        position: "fixed",
        width: String(whiteWidth - innerMargin - innerMargin) + ea,
        height: String(whiteHeight - innerMargin - innerMarginTop) + ea,
        top: "calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 2) - " + String(whiteHeight / 2) + ea + ")",
        left: "calc(calc(calc(calc(100% - " + String(grayBarWidth) + ea + ") / 2) - " + String(whiteWidth / 2) + ea + ") + " + String(grayBarWidth) + ea + ")",
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 2px 10px -6px " + colorChip.shadow,
        overflow: "hidden",
        padding: String(innerMargin) + ea,
        paddingTop: String(innerMarginTop) + ea,
      },
    });
    
    titleBox = createNode({
      mother: whiteBase,
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: String(titleAreaHeight) + ea,
        borderBottom: "1px solid " + colorChip.gray3,
      },
      child: {
        text: "전송된 세트 포트폴리오",
        style: {
          position: "relative",
          top: String(fontTextTop) + ea,
          fontSize: String(titleSize) + ea,
          fontWeight: String(titleWeight),
          color: colorChip.black,
        }
      }
    });

    if (keySet.length > 0) {
      downloadButton = createNode({
        mother: titleBox,
        attribute: {
          aspid
        },
        event: {
          click: async function (e) {
            try {
              const aspid = this.getAttribute("aspid");
              const loading = instance.mother.whiteProgressLoading(null, true);
              const response = await ajaxJson({ aspid, mode: "create" }, BRIDGEHOST + "/aspirantSettingDownload", { equal: true });
              loading.remove();
              const loading2 = instance.mother.whiteProgressLoading();
              await downloadFile(stringToLink(response.link), aspid + "_setting" + ".zip", loading2.progress.firstChild);
              loading2.remove();
              const fileName = stringToLink(response.link).split("/")[stringToLink(response.link).split("/").length - 1];
              await ajaxJson({ aspid, mode: "delete", file: fileName }, BRIDGEHOST + "/aspirantSettingDownload", { equal: true });
            } catch (e) {
              console.log(e);
            }
          }
        },
        style: {
          display: "inline-flex",
          position: "absolute",
          top: String(1) + ea,
          right: String(0) + ea,
          width: String(buttonWidth) + ea,
          height: String(buttonHeight) + ea,
          justifyContent: "end",
          alignItems: "center",
          cursor: "pointer",
        },
        child: {
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(buttonWidth) + ea,
            height: String(buttonHeight) + ea,
            background: colorChip.green,
            borderRadius: String(5) + "px",
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            text: "모든 파일 일괄 다운로드",
            style: {
              display: "inline-block",
              position: "relative",
              top: String(buttonTextTop) + ea,
              fontSize: String(buttonSize) + ea,
              fontWeight: String(buttonWeight),
              color: colorChip.white,
            }
          }
        }
      });
  
      scrollBox = createNode({
        mother: whiteBase,
        style: {
          display: "block",
          position: "relative",
          width: withOut(0, ea),
          height: withOut(titleAreaHeight, ea),
          overflow: "scroll",
        }
      });
  
      contentsBox = createNode({
        mother: scrollBox,
        style: {
          display: "block",
          position: "relative",
          width: withOut(0, ea),
          height: "auto",
        }
      });
  
      num = 1;
      for (let { key, date } of keySet) {
  
        titleString = "세트 포트폴리오 " + String(num) + " <b%- " + dateToString(date, true) + "%b>";
        thisTargets = imageTargets.filter((obj) => {
          return obj.key === key;
        });
  
        createNode({
          mother: contentsBox,
          style: {
            display: "block",
            position: "relative",
            width: withOut(0, ea),
            height: String(24) + ea,
            marginTop: String(16) + ea,
          },
          child: {
            text: titleString,
            style: {
              position: "relative",
              top: String(fontTextTop) + ea,
              fontSize: String(fontSize) + ea,
              fontWeight: String(700),
              color: colorChip.black,
            },
            bold: {
              fontSize: String(fontSize) + ea,
              fontWeight: String(400),
              color: colorChip.deactive,
            }
          }
        });
  
        thisGrayBox = createNode({
          mother: contentsBox,
          style: {
            display: "block",
            position: "relative",
            width: withOut(8 * 2, ea),
            padding: String(8) + ea,
            paddingBottom: String(8 - 4) + ea,
            background: colorChip.gray1,
            borderRadius: String(3) + "px",
          }
        });
  
        for (let obj of thisTargets) {
  
          whiteBlock = createNode({
            mother: thisGrayBox,
            style: {
              display: "flex",
              position: "relative",
              width: withOut(12, ea),
              height: String(36) + ea,
              background: colorChip.white,
              borderRadius: String(3) + "px",
              marginBottom: String(4) + ea,
              alignItems: "start",
              justifyContent: "center",
              flexDirection: "column",
              paddingLeft: String(12) + ea,
            },
            child: {
              style: {
                display: "inline-flex",
                position: "relative",
                width: String(80) + '%',
                height: withOut(0, ea),
                alignItems: "start",
                justifyContent: "center",
                flexDirection: "column",
                overflow: "hidden",
              },
              child: {
                text: obj.name,
                style: {
                  position: "relative",
                  width: String(8000) + ea,
                  top: String(-1) + ea,
                  fontSize: String(13) + ea,
                  fontWeight: String(fontWeight),
                  color: colorChip.black,
                }
              }
            }
          })
  
          createNode({
            mother: whiteBlock,
            attribute: {
              link: obj.link,
            },
            event: {
              click: async function (e) {
                try {
                  const link = this.getAttribute("link");
                  await downloadFile(link);
                  await instance.mother.greenAlert("다운로드가 완료되었습니다!");
                } catch (e) {
                  console.log(e);
                }
              }
            },
            style: {
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              width: String(downloadCircleWidth) + ea,
              height: String(downloadCircleWidth) + ea,
              position: "absolute",
              top: String(8) + ea,
              right: String(10) + ea,
              borderRadius: String(downloadCircleWidth) + ea,
              background: colorChip.gradientGray,
              cursor: "pointer",
            },
            children: [
              {
                mode: "svg",
                source: instance.mother.returnExtract(colorChip.white),
                style: {
                  display: "inline-block",
                  position: "relative",
                  top: String(downloadIconTop) + ea,
                  width: String(downloadIconWidth) + ea,
                  transform: "rotate(180deg)",
                }
              }
            ]
          });
        }
  
        num++;
      }
    } else {
      scrollBox = createNode({
        mother: whiteBase,
        style: {
          display: "flex",
          position: "relative",
          width: withOut(0, ea),
          height: withOut(titleAreaHeight, ea),
          justifyContent: "center",
          alignItems: "center",
        },
        child: {
          text: "세트 포트폴리오 전송 기록 없음",
          style: {
            display: "inline-block",
            position: "relative",
            top: String(isMac() ? -1 : 1) + ea,
            fontSize: String(24) + ea,
            fontWeight: String(200),
            color: colorChip.deactive,
          }
        }
      });
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantProposalPortfolioView = async function (aspid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, stringToLink, linkToString, variableArray, downloadFile, uniqueValue, sleep, equalJson, hexaJson } = GeneralJs;
  try {
    const proposalPopupClassName = "proposalPopupClassName";
    const proposalPopupWhiteContentsClassName = "proposalPopupWhiteContentsClassName";
    const zIndex = 6;
    const keyKeyword = "imageKey_";
    let cancelBack;
    let whiteBase;
    let whiteWidth, whiteHeight;
    let innerMargin;
    let titleTextTop;
    let titleSize;
    let titleWeight;
    let fontTextTop;
    let fontSize;
    let fontBetween;
    let fontWeight;
    let innerMarginTop;
    let titleAreaHeight;
    let settingList;
    let setting, proposal;
    let imageTargets;
    let linkTargetRawString;
    let uploadDate;
    let keySet;
    let scrollBox;
    let contentsBox;
    let titleString;
    let num;
    let thisTargets;
    let thisGrayBox;
    let linkArr;
    let fileName;
    let whiteBlock;
    let downloadCircleWidth;
    let downloadCirclePadding;
    let downloadIconWidth;
    let downloadIconTop;
    let titleBox;
    let downloadButton;
    let buttonWidth;
    let buttonHeight;
    let buttonTextTop;
    let buttonSize;
    let buttonWeight;

    whiteWidth = 800;
    whiteHeight = 480;

    innerMargin = 24;
    innerMarginTop = 20;

    titleTextTop = isMac() ? 2 : 5;
    titleSize = 17;
    titleWeight = 800;

    fontTextTop = isMac() ? 1 : 3;
    fontSize = 14;
    fontBetween = 8;
    fontWeight = 400;

    titleAreaHeight = 33;

    downloadCircleWidth = 21;
    downloadCirclePadding = 16;
    downloadIconWidth = 9;
    downloadIconTop = 1;
    
    buttonWidth = 120;
    buttonHeight = 24;
    buttonTextTop = isMac() ? -1 : 1;
    buttonSize = 11;
    buttonWeight = 700;

    settingList = await ajaxJson({ aspid }, BRIDGEHOST + "/aspirantSettingList", { equal: true });
    ({ setting, proposal } = settingList);

    imageTargets = proposal.map((str) => { return stringToLink(str) });
    imageTargets = imageTargets.map((link) => {
      linkArr = link.split("/");
      fileName = linkArr[linkArr.length - 1];
      fileName = fileName.split(".").map((str) => { return window.decodeURIComponent(str) }).join(".");
      linkTargetRawString = linkArr[linkArr.findIndex((str) => { return str === "aspirant" }) + 1].split("_")[0];
      linkTargetRawString = linkTargetRawString.replace(/[^0-9]/gi, '');
      uploadDate = new Date(
        Number("20" + linkTargetRawString.slice(0, 2)),
        Number(linkTargetRawString.slice(2, 4)) - 1,
        Number(linkTargetRawString.slice(4, 6)),
        Number(linkTargetRawString.slice(6, 8)),
        Number(linkTargetRawString.slice(8, 10)),
      );
      return {
        key: keyKeyword + linkTargetRawString,
        link,
        date: uploadDate,
        name: fileName,
        exe: fileName.split(".")[fileName.split(".").length - 1],
      };
    });
    keySet = [ ...new Set(imageTargets.map(({ key }) => { return key })) ];
    keySet.sort((a, b) => { return Number(a.replace(/[^0-9]/gi, '')) - Number(b.replace(/[^0-9]/gi, '')) });
    keySet = keySet.map((key) => {
      linkTargetRawString = key.replace(/[^0-9]/gi, '');
      uploadDate = new Date(
        Number("20" + linkTargetRawString.slice(0, 2)),
        Number(linkTargetRawString.slice(2, 4)) - 1,
        Number(linkTargetRawString.slice(4, 6)),
        Number(linkTargetRawString.slice(6, 8)),
        Number(linkTargetRawString.slice(8, 10)),
      );
      return { key, date: uploadDate };
    })

    cancelBack = createNode({
      mother: totalContents,
      attribute: {
        aspid: aspid
      },
      class: [ "justfadein", proposalPopupClassName ],
      event: (e) => { removeByClass(proposalPopupClassName) },
      style: {
        position: "fixed",
        top: String(0),
        left: String(grayBarWidth) + ea,
        width: withOut(grayBarWidth, ea),
        height: withOut(belowHeight, ea),
        background: colorChip.black,
        zIndex: String(zIndex),
      }
    });

    whiteBase = createNode({
      mother: totalContents,
      attribute: {
        aspid: aspid
      },
      class: [ proposalPopupWhiteContentsClassName, proposalPopupClassName ],
      style: {
        position: "fixed",
        width: String(whiteWidth - innerMargin - innerMargin) + ea,
        height: String(whiteHeight - innerMargin - innerMarginTop) + ea,
        top: "calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 2) - " + String(whiteHeight / 2) + ea + ")",
        left: "calc(calc(calc(calc(100% - " + String(grayBarWidth) + ea + ") / 2) - " + String(whiteWidth / 2) + ea + ") + " + String(grayBarWidth) + ea + ")",
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 2px 10px -6px " + colorChip.shadow,
        overflow: "hidden",
        padding: String(innerMargin) + ea,
        paddingTop: String(innerMarginTop) + ea,
      },
    });
    
    titleBox = createNode({
      mother: whiteBase,
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: String(titleAreaHeight) + ea,
        borderBottom: "1px solid " + colorChip.gray3,
      },
      child: {
        text: "전송된 추천서용 사진",
        style: {
          position: "relative",
          top: String(fontTextTop) + ea,
          fontSize: String(titleSize) + ea,
          fontWeight: String(titleWeight),
          color: colorChip.black,
        }
      }
    });

    if (keySet.length > 0) {
      downloadButton = createNode({
        mother: titleBox,
        attribute: {
          aspid
        },
        event: {
          click: async function (e) {
            try {
              const aspid = this.getAttribute("aspid");
              const loading = instance.mother.whiteProgressLoading(null, true);
              const response = await ajaxJson({ aspid, mode: "create" }, BRIDGEHOST + "/aspirantProposalDownload", { equal: true });
              loading.remove();
              const loading2 = instance.mother.whiteProgressLoading();
              await downloadFile(stringToLink(response.link), aspid + "_proposal" + ".zip", loading2.progress.firstChild);
              loading2.remove();
              const fileName = stringToLink(response.link).split("/")[stringToLink(response.link).split("/").length - 1];
              await ajaxJson({ aspid, mode: "delete", file: fileName }, BRIDGEHOST + "/aspirantProposalDownload", { equal: true });
            } catch (e) {
              console.log(e);
            }
          }
        },
        style: {
          display: "inline-flex",
          position: "absolute",
          top: String(1) + ea,
          right: String(0) + ea,
          width: String(buttonWidth) + ea,
          height: String(buttonHeight) + ea,
          justifyContent: "end",
          alignItems: "center",
          cursor: "pointer",
        },
        child: {
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(buttonWidth) + ea,
            height: String(buttonHeight) + ea,
            background: colorChip.green,
            borderRadius: String(5) + "px",
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            text: "모든 파일 일괄 다운로드",
            style: {
              display: "inline-block",
              position: "relative",
              top: String(buttonTextTop) + ea,
              fontSize: String(buttonSize) + ea,
              fontWeight: String(buttonWeight),
              color: colorChip.white,
            }
          }
        }
      });
  
      scrollBox = createNode({
        mother: whiteBase,
        style: {
          display: "block",
          position: "relative",
          width: withOut(0, ea),
          height: withOut(titleAreaHeight, ea),
          overflow: "scroll",
        }
      });
  
      contentsBox = createNode({
        mother: scrollBox,
        style: {
          display: "block",
          position: "relative",
          width: withOut(0, ea),
          height: "auto",
        }
      });
  
      num = 1;
      for (let { key, date } of keySet) {
  
        titleString = "추천서용 사진 " + String(num) + " <b%- " + dateToString(date, true) + "%b>";
        thisTargets = imageTargets.filter((obj) => {
          return obj.key === key;
        });
  
        createNode({
          mother: contentsBox,
          style: {
            display: "block",
            position: "relative",
            width: withOut(0, ea),
            height: String(24) + ea,
            marginTop: String(16) + ea,
          },
          child: {
            text: titleString,
            style: {
              position: "relative",
              top: String(fontTextTop) + ea,
              fontSize: String(fontSize) + ea,
              fontWeight: String(700),
              color: colorChip.black,
            },
            bold: {
              fontSize: String(fontSize) + ea,
              fontWeight: String(400),
              color: colorChip.deactive,
            }
          }
        });
  
        thisGrayBox = createNode({
          mother: contentsBox,
          style: {
            display: "block",
            position: "relative",
            width: withOut(8 * 2, ea),
            padding: String(8) + ea,
            paddingBottom: String(8 - 4) + ea,
            background: colorChip.gray1,
            borderRadius: String(3) + "px",
          }
        });
  
        for (let obj of thisTargets) {
  
          whiteBlock = createNode({
            mother: thisGrayBox,
            style: {
              display: "flex",
              position: "relative",
              width: withOut(12, ea),
              height: String(36) + ea,
              background: colorChip.white,
              borderRadius: String(3) + "px",
              marginBottom: String(4) + ea,
              alignItems: "start",
              justifyContent: "center",
              flexDirection: "column",
              paddingLeft: String(12) + ea,
            },
            child: {
              style: {
                display: "inline-flex",
                position: "relative",
                width: String(80) + '%',
                height: withOut(0, ea),
                alignItems: "start",
                justifyContent: "center",
                flexDirection: "column",
                overflow: "hidden",
              },
              child: {
                text: obj.name,
                style: {
                  position: "relative",
                  width: String(8000) + ea,
                  top: String(-1) + ea,
                  fontSize: String(13) + ea,
                  fontWeight: String(fontWeight),
                  color: colorChip.black,
                }
              }
            }
          })
  
          createNode({
            mother: whiteBlock,
            attribute: {
              link: obj.link,
            },
            event: {
              click: async function (e) {
                try {
                  const link = this.getAttribute("link");
                  await downloadFile(link);
                  await instance.mother.greenAlert("다운로드가 완료되었습니다!");
                } catch (e) {
                  console.log(e);
                }
              }
            },
            style: {
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              width: String(downloadCircleWidth) + ea,
              height: String(downloadCircleWidth) + ea,
              position: "absolute",
              top: String(8) + ea,
              right: String(10) + ea,
              borderRadius: String(downloadCircleWidth) + ea,
              background: colorChip.gradientGray,
              cursor: "pointer",
            },
            children: [
              {
                mode: "svg",
                source: instance.mother.returnExtract(colorChip.white),
                style: {
                  display: "inline-block",
                  position: "relative",
                  top: String(downloadIconTop) + ea,
                  width: String(downloadIconWidth) + ea,
                  transform: "rotate(180deg)",
                }
              }
            ]
          });
        }
  
        num++;
      }
    } else {
      scrollBox = createNode({
        mother: whiteBase,
        style: {
          display: "flex",
          position: "relative",
          width: withOut(0, ea),
          height: withOut(titleAreaHeight, ea),
          justifyContent: "center",
          alignItems: "center",
        },
        child: {
          text: "추천서 사진 전송 기록 없음",
          style: {
            display: "inline-block",
            position: "relative",
            top: String(isMac() ? -1 : 1) + ea,
            fontSize: String(24) + ea,
            fontWeight: String(200),
            color: colorChip.deactive,
          }
        }
      });
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantWhiteCard = function (aspid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson } = GeneralJs;
  return async function (e) {
    try {
      const zIndex = 4;
      const blank = "&nbsp;/&nbsp;";
      const aspirant = instance.aspirants.find((d) => { return d.aspid === aspid });
      let cancelBack, whitePrompt;
      let titleWhite;
      let margin;
      let titleHeight;
      let innerMargin;
      let overlap;
      let titleTextTop, titleSize;
      let titleWeight;
      let fontTextTop, fontSize, fontBetween, fontWeight;
      let whiteMaker;
      let innerMarginTop;
      let basePaddingTop;

      margin = 30;
      titleHeight = 50;
      innerMargin = 24;
      innerMarginTop = 20;
      overlap = 12;
      basePaddingTop = 12;

      titleTextTop = isMac() ? 2 : 5;
      titleSize = 21;
      titleWeight = 800;

      fontTextTop = isMac() ? 1 : 3;
      fontSize = 14;
      fontBetween = 8;
      fontWeight = 400;

      whiteMaker = (reload = false) => {

        if (!reload) {
          cancelBack = createNode({
            mother: totalContents,
            attribute: {
              aspid: aspid
            },
            class: [ "justfadein", whiteCardClassName ],
            event: (e) => { removeByClass(whiteCardClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(grayBarWidth) + ea,
              width: withOut(grayBarWidth, ea),
              height: withOut(belowHeight, ea),
              background: colorChip.black,
            }
          });
        } 
  
        whitePrompt = createNode({
          mother: totalContents,
          attribute: {
            aspid: aspid
          },
          class: [ whiteCardClassName, whiteBaseClassName ],
          style: {
            position: "fixed",
            top: String(0 + margin + titleHeight) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth + (innerMargin * 2), ea),
            height: withOut(0 + (margin * 2) + titleHeight + belowHeight + (innerMargin + basePaddingTop), ea),
            background: colorChip.white,
            zIndex: String(zIndex),
            borderBottomLeftRadius: String(5) + "px",
            borderBottomRightRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0 2px 10px -6px " + colorChip.shadow,
            overflow: "hidden",
            padding: String(innerMargin) + ea,
            paddingTop: String(basePaddingTop) + ea,
          },
          child: {
            style: {
              display: "block",
              position: "relative",
              width: withOut(0, ea),
              height: withOut(0, ea),
              overflow: "scroll",
              border: "1px solid " + colorChip.gray3,
              borderRadius: String(5) + "px",
              boxSizing: "border-box",
              padding: String(innerMargin) + ea,
              paddingTop: String(innerMarginTop) + ea,
            },
            child: {
              style: {
                display: "flex",
                position: "relative",
                width: withOut(0, ea),
                flexDirection: "column",
              }
            }
          }
        });
  
        titleWhite = createNode({
          mother: totalContents,
          attribute: {
            aspid: aspid
          },
          class: [ whiteCardClassName ],
          style: {
            display: "flex",
            flexDirection: "column",
            position: "fixed",
            top: String(0 + margin) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth, ea),
            height: String(titleHeight) + ea,
            background: colorChip.white,
            zIndex: String(zIndex),
            borderTopLeftRadius: String(5) + "px",
            borderTopRightRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            overflow: "hidden",
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "end",
          },
          child: {
            style: {
              display: "flex",
              position: "relative",
              flexDirection: "row",
              alignItems: "end",
              justifyContent: "start",
              width: withOut(innerMargin * 2, ea),
            },
            children: [
              {
                attribute: { designer: aspirant.designer, phone: aspirant.phone.replace(/[^0-9]/gi, '') },
                event: {
                  click: function (e) {
                    const designer = this.getAttribute("designer");
                    const phone = this.getAttribute("phone");
                    const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
                    if (window.confirm(designer + " 실장님께 전화를 걸까요?")) {
                      ajaxJson({
                        who: cookies.homeliaisonConsoleLoginedEmail,
                        phone: phone
                      }, BACKHOST + "/callTo").catch((err) => { console.log(err); });
                    }
                  }
                },
                text: aspirant.designer,
                style: {
                  position: "relative",
                  top: String(titleTextTop) + ea,
                  fontSize: String(titleSize) + ea,
                  fontWeight: String(titleWeight),
                  color: colorChip.black,
                  cursor: "pointer",
                }
              },
              {
                attribute: { aspid: aspid },
                event: {
                  click: async function (e) {
                    try {
                      const aspid = this.getAttribute("aspid");
                      await window.navigator.clipboard.writeText(aspid);
                      instance.mother.greenAlert("클립보드에 저장되었습니다!");
                    } catch (e) {
                      console.log(e);
                    }
                  },
                },
                text: aspirant.aspid,
                style: {
                  position: "relative",
                  top: String(fontTextTop) + ea,
                  fontSize: String(fontSize) + ea,
                  marginLeft: String(fontBetween) + ea,
                  fontWeight: String(fontWeight),
                  color: colorChip.green,
                  cursor: "pointer",
                }
              },
              {
                style: {
                  display: "flex",
                  position: "absolute",
                  bottom: String(0),
                  right: String(0),
                  flexDirection: "row",
                  alignItems: "end",
                  justifyContent: "end",
                },
                children: [
                  {
                    class: [ titleButtonsClassName ],
                    text: "세트 포트폴리오",
                    attribute: {
                      aspid: aspid,
                    },
                    event: {
                      click: async function (e) {
                        try {
                          const aspid = this.getAttribute("aspid");
                          await instance.aspirantSettingPortfolioView(aspid);
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: {
                      aspid: aspid,
                    },
                    event: {
                      click: async function (e) {
                        try {
                          const aspid = this.getAttribute("aspid");
                          await instance.aspirantProposalPortfolioView(aspid);
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    text: "추천서용 사진",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                      cursor: "pointer",
                    }
                  },
                ]
              },
            ]
          }
        });

        instance.aspirantWhiteContents(whitePrompt.firstChild.firstChild, aspid).then(() => {
          const targetMother = whitePrompt.firstChild;
          setQueue(() => {
            const memoPopup = createNode({
              mother: targetMother,
              attribute: {
                toggle: "on",
              },
              style: {
                display: "inline-flex",
                position: "fixed",
                bottom: String(45) + ea,
                right: String(45) + ea,
                width: String(480) + ea,
                height: String(320) + ea,
                borderRadius: String(5) + "px",
                background: colorChip.gradientGreen,
                animation: "fadeuplite 0.5s ease forwards",
                flexDirection: "column",
                justifyContent: "end",
                alignItems: "start",
                boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                paddingBottom: String(10) + ea,
                paddingLeft: String(10) + ea,
              },
              children: [
                {
                  event: {
                    click: function (e) {
                      const target = this.parentNode;
                      const toggle = target.getAttribute("toggle");
                      if (toggle === "on") {
                        target.style.height = String(48) + ea;
                        target.style.width = String(100) + ea;
                        target.setAttribute("toggle", "off");
                      } else if (toggle === "off") {
                        target.style.height = String(320) + ea;
                        target.style.width = String(480) + ea;
                        target.setAttribute("toggle", "on");
                      }
                    }
                  },
                  text: "응대 메모",
                  style: {
                    display: "block",
                    width: withOut(10, ea),
                    position: "relative",
                    fontSize: String(14) + ea,
                    fontWeight: String(700),
                    color: colorChip.white,
                    marginBottom: String(7) + ea,
                    top: String(isMac() ? 0 : 2) + ea,
                  },
                  child: {
                    style: {
                      position: "absolute",
                      right: String(0),
                      bottom: String(5) + ea,
                      width: String(12) + ea,
                      height: String(10) + ea,
                      cursor: "pointer",
                      boxSizing: "border-box",
                      borderBottom: "2px solid " + colorChip.white,
                    }
                  }
                },
                {
                  style: {
                    position: "relative",
                    width: withOut(10, ea),
                    height: withOut(33, ea),
                    borderRadius: String(5) + "px",
                    background: colorChip.white,
                    boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                  },
                  child: {
                    mode: "textarea",
                    attribute: {
                      aspid: aspirant.aspid
                    },
                    text: aspirant.response.long,
                    event: {
                      keydown: function (e) {
                        if (e.key === "Tab") {
                          e.preventDefault();
                        }
                      },
                      keyup: async function (e) {
                        try {
                          if (e.key === "Tab") {
                            e.preventDefault();
                            this.blur();
                          }
                        } catch (e) {
                          console.log(e);
                        }
                      },
                      blur: async function (e) {
                        try {
                          const aspid = this.getAttribute("aspid");
                          let whereQuery, updateQuery;

                          this.value = this.value.trim().replace(/[\#\&\=\+\\\/]/gi, '');

                          whereQuery = {};
                          whereQuery["aspid"] = aspid;
                          updateQuery = {};
                          updateQuery["response.long"] = this.value;

                          if (await GeneralJs.nonCxBan()) {
                            await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
                            instance.aspirants.find((a) => { return a.aspid === aspid }).response.long = this.value;  
                          }

                        } catch (e) {
                          console.log(e);
                        }
                      }
                    },
                    style: {
                      position: "absolute",
                      width: withOut(20 * 2, ea),
                      height: withOut(16 * 1, ea),
                      left: String(20) + ea,
                      top: String(16) + ea,
                      fontSize: String(14) + ea,
                      fontWeight: String(400),
                      color: colorChip.black,
                      lineHeight: String(1.6),
                      border: String(0),
                      outline: String(0),
                    }
                  }
                }
              ]
            });
            setQueue(() => {
              memoPopup.firstChild.click();
            }, 500);
          }, 500);
        }).catch((err) => { console.log(err); });
      }

      instance.whiteMaker = whiteMaker;

      if (document.querySelector('.' + whiteCardClassName) === null) {
        whiteMaker(false);
      } else {
        const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
        if (w0 !== undefined) {
          w0.style.animation = "fadedownlite 0.3s ease forwards";
        }
        if (w1 !== undefined) {
          w1.style.animation = "fadedownlite 0.3s ease forwards";
        }
        setQueue(() => {
          if (w0 !== undefined) {
            w0.remove();
          }
          if (w1 !== undefined) {
            w1.remove();
          }
          setQueue(() => {
            whiteMaker(true);
          })
        }, 350);
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.aspirantBase = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText, idNameAreaClassName, valueAreaClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, equalJson, setQueue, hexaJson } = GeneralJs;
  const moveTargetClassName = "moveTarget";
  const menuPromptClassName = "menuPromptClassName";
  const menuValuePromptClassName = "menuValuePromptClassName";
  const importantCircleClassName = "importantCircleClassName";
  const aspirantSubMenuEventFactorClassName = "aspirantSubMenuEventFactorClassName";
  try {
    let totalMother;
    let grayArea, whiteArea;
    let totalPaddingTop;
    let columnAreaHeight;
    let fontSize, fontWeight;
    let idWidth, nameWidth;
    let idNameAreaPaddingTop;
    let idNameArea;
    let idNameHeight;
    let idNamePaddingBottom;
    let maxWidth;
    let valueColumnsAreaPaddingLeft;
    let valueArea;
    let valueWeight;
    let thisTong;
    let columns;
    let values;
    let valueMaxWidth;
    let thisTargets;
    let hoverEvent, hoverOutEvent;
    let standards;
    let menuPromptWidth, menuPromptHeight;
    let menuVisual;
    let menuBetween;
    let menuTextTop, menuSize, menuWeight;
    let columnsMenuEvent;
    let aspirantContentsLoad;
    let circleRight, circleTop;
    let contextIndent;
    let contextButtonOuterMargin;
    let contextButtonInnerMargin;
    let contextButtonWidth;
    let contextButtonHeight;
    let contextButtonSize;
    let contextButtonWeight;
    let contextButtonTextTop;
    let valueDom;
    let menuEventTong;
    let calendarWidth;
    let calendarBoxBetween;
    let calendarBoxHeight;
    let longTextWidth;
    let longTextHeight;
    let aspirantSubMenuEvent;
    let valueLongMaxWidth;
    let thisMaxWidth;

    totalPaddingTop = 38;
    columnAreaHeight = 32;
  
    fontSize = 14;
    fontWeight = 600;
    valueWeight = 500;
  
    idWidth = 96;
    nameWidth = 60;
  
    idNameAreaPaddingTop = 17;
    idNameHeight = 36;
  
    idNamePaddingBottom = 400;
    maxWidth = 8000;
    valueMaxWidth = 1000;
    valueLongMaxWidth = 3000;
  
    valueColumnsAreaPaddingLeft = 20;

    menuPromptWidth = 80;
    menuPromptHeight = 28;
    menuVisual = 4;
    menuBetween = 3;

    menuTextTop = isMac() ? -1 : 1,
    menuSize = 13;
    menuWeight = 600;

    circleRight = 2.5;
    circleTop = isMac() ? 3 : 1;

    contextIndent = 5;
    contextButtonOuterMargin = 8;
    contextButtonInnerMargin = 3;
    contextButtonWidth = 230;
    contextButtonHeight = 28;
    contextButtonSize = 12;
    contextButtonWeight = 700;
    contextButtonTextTop = isMac() ? -1 : 1;

    calendarWidth = 260;
    calendarBoxBetween = 4;
    calendarBoxHeight = 32;

    longTextWidth = 750;
    longTextHeight = 36;

    ({ standards, columns, values } = await this.aspirantDataRender(true));
  
    hoverEvent = () => {
      return function (e) {
        const aspid = this.getAttribute("aspid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "aspid", aspid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = colorChip.green;
        }
      }
    }

    hoverOutEvent = () => {
      return function (e) {
        const aspid = this.getAttribute("aspid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "aspid", aspid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = dom.getAttribute("color") !== null ? dom.getAttribute("color") : colorChip.black;
        }
      }
    }

    menuEventTong = {
      sortEvent: (thisType, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const type = columns[index].type;
            let domMatrix;
            let thisAspid;
            let thisValueDom;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisAspid = idNameDoms[i].getAttribute("aspid");
              thisValueDom = findByAttribute(valueDoms, "aspid", thisAspid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }
  
            domMatrix.sort((a, b) => {
              let aValue, bValue;
              let aSortValue, bSortValue;
              let tempArr;
  
              aValue = findByAttribute([ ...a[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              bValue = findByAttribute([ ...b[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              
              if (type === "string") {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              } else if (type === "number") {
                aValue = aValue.replace(/[^0-9]/gi, '')
                bValue = bValue.replace(/[^0-9]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "percentage") {
                aValue = aValue.replace(/[^0-9\.]/gi, '')
                bValue = bValue.replace(/[^0-9\.]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "date") {
                aSortValue = aValue !== '' ? stringToDate(aValue) : stringToDate("1800-01-01");
                bSortValue = bValue !== '' ? stringToDate(bValue) : stringToDate("1800-01-01");
                aSortValue = aSortValue.valueOf();
                bSortValue = bSortValue.valueOf();
              } else if (type === "during") {
  
                if (/년/gi.test(aValue)) {
                  tempArr = aValue.split('년');
                  if (tempArr.length > 1) {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  aSortValue = Number(aValue.replace(/[^0-9]/gi, ''));
                }
  
                if (/년/gi.test(bValue)) {
                  tempArr = bValue.split('년');
                  if (tempArr.length > 1) {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  bSortValue = Number(bValue.replace(/[^0-9]/gi, ''));
                }
  
              } else {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              }
              
              if (thisType === "down") {
                return bSortValue - aSortValue;
              } else {
                return aSortValue - bSortValue;
              }
            });
  
            for (let [ standard, value ] of domMatrix) {
              idNameArea.appendChild(standard);
              valueArea.appendChild(value);
            }
  
            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
      filterEvent: (thisValue, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const last = "lastfilter";
            const type = columns[index].type;
            let domMatrix;
            let thisAspid;
            let thisValueDom;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisAspid = idNameDoms[i].getAttribute("aspid");
              thisValueDom = findByAttribute(valueDoms, "aspid", thisAspid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }

            if (thisValue === "$all") {
              for (let [ standard, value ] of domMatrix) {
                standard.style.display = "flex";
                value.style.display = "flex";
                standard.setAttribute(last, "none");
                value.setAttribute(last, "none");
              }
            } else {
              for (let [ standard, value ] of domMatrix) {
                if (standard.getAttribute(last) === name) {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    standard.style.display = "flex";
                    value.style.display = "flex";
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                } else {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    if (standard.style.display !== "none") {
                      standard.style.display = "flex";
                      value.style.display = "flex";
                    }
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                }
                standard.setAttribute(last, name);
                value.setAttribute(last, name);
              }
            }

            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
    }

    columnsMenuEvent = (index) => {
      return async function (e) {
        try {
          e.preventDefault();
          const name = this.getAttribute("name");
          const index = Number(this.getAttribute("index"));
          const thisObject = columns[index];
          const zIndex = 4;
          let cancelBack, blackPrompt;
          let thisMenu;
          let thisMenuWidth;

          thisMenu = [
            {
              value: "내림차순",
              functionName: "sortEvent_down",
            },
            {
              value: "오름차순",
              functionName: "sortEvent_up",
            },
          ];

          if (Array.isArray(thisObject.menu)) {
            thisMenu = thisMenu.concat(thisObject.menu);
          }

          if (typeof thisObject.menuWidth === "number") {
            thisMenuWidth = thisObject.menuWidth;
          } else {
            thisMenuWidth = menuPromptWidth;
          }

          cancelBack = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            event: (e) => { removeByClass(menuPromptClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          blackPrompt = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            style: {
              position: "fixed",
              top: String(e.y + menuVisual) + "px",
              left: String(e.x + menuVisual) + "px",
              width: String(thisMenuWidth) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              zIndex: String(zIndex),
            },
            children: thisMenu.map(({ value, functionName }) => {
              const functionOrderArr = functionName.split("_");
              const [ thisFunctionName ] = functionOrderArr;
              let thisArguments;
              if (functionOrderArr.length > 1) {
                thisArguments = functionOrderArr.slice(1).concat([ name, index ]);
              } else {
                thisArguments = [ name, index ];
              }
              return {
                event: {
                  selectstart: (e) => { e.preventDefault() },
                  click: menuEventTong[thisFunctionName](...thisArguments),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(thisMenuWidth) + ea,
                  height: String(menuPromptHeight) + ea,
                  borderRadius: String(5) + "px",
                  background: colorChip.gradientGray,
                  marginBottom: String(menuBetween) + ea,
                  justifyContent: "center",
                  alignItems: "center",
                  textAlign: "center",
                  cursor: "pointer",
                },
                child: {
                  text: value,
                  event: {
                    selectstart: (e) => { e.preventDefault() },
                  },
                  style: {
                    position: "relative",
                    top: String(menuTextTop) + ea,
                    fontSize: String(menuSize) + ea,
                    fontWeight: String(menuWeight),
                    color: colorChip.white,
                  }
                }
              }
            })
          });

        } catch (e) {
          console.log(e);
        }
      }
    }

    aspirantSubMenuEvent = (aspid, designer) => {
      return async function (e) {
        e.preventDefault();
        try {
          const px = "px";
          const zIndex = 4;
          const contextMenu = [
            {
              title: designer + " 실장님 1차 유선 통화 완료",
              func: (aspid) => {
                return async function (e) {
                  try {
                    let whereQuery, updateQuery;

                    whereQuery = {};
                    whereQuery["aspid"] = aspid;
                    updateQuery = {};
                    updateQuery["response.date"] = new Date();

                    if (await GeneralJs.nonCxBan()) {
                      await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
                    }

                    window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 추가 포트폴리오 요청하기",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.aspirantSendNotice("plus", aspid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 등록 서류 요청하기",
              func: (aspid) => {
                return async function (e) {
                  try {
                    instance.aspirantSendDocumentsAndMeetingSetting(aspid).catch((err) => {
                      console.log(err);
                    });
                    removeByClass(aspirantSubMenuEventFactorClassName);
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 등록비 결제 요청하기",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.aspirantSendNotice("payment", aspid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 불합격 통지",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.aspirantSendNotice("fail", aspid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 부재중 알림",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.aspirantSendNotice("pure", aspid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 공통교육 날짜 선택 요청하기",
              func: (aspid) => {
                return async function (e) {
                  try {
                    instance.aspirantCommonMeetingSetting(aspid).catch((err) => {
                      console.log(err);
                    });
                    removeByClass(aspirantSubMenuEventFactorClassName);
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 공통교육 시간 및 장소 안내",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
                    const emptyDate = new Date(2000, 0, 1);
                    if (aspirant.meeting.common.date.valueOf() < emptyDate.valueOf()) {
                      window.alert("공통 교육 날짜 선택이 선행되어야 합니다!");
                    } else {
                      await ajaxJson({ aspid, mode: "guide" }, SECONDHOST + "/noticeAspirantCommon", { equal: true });
                      window.alert("공통 교육 시간과 장소를 안내하였습니다!");
                    }
                    removeByClass(aspirantSubMenuEventFactorClassName);
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 세트 포트폴리오 요청하기",
              func: (aspid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.aspirantSendNotice("setting", aspid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 계약서 보내기",
              func: (aspid) => {
                return async function (e) {
                  const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
                  try {
                    let whereQuery, updateQuery;
                    if (window.confirm(aspirant.designer + " 디자이너님에게 디자이너 파트너십 계약서와 서비스 제휴 계약서를 전송합니다! 확실하십니까?")) {

                      whereQuery = {};
                      whereQuery["aspid"] = aspid;
                      updateQuery = {};
                      updateQuery["meeting.status"] = "계약 요청";
                      if (await GeneralJs.nonCxBan()) {
                        await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
                        const response0 = await ajaxJson({ aspid }, PYTHONHOST + "/createPartnershipContract");
                        const response1 = await ajaxJson({ aspid }, PYTHONHOST + "/createDesignerContract");
                        if (response0.message === "OK" && response1.message === "OK") {
                          window.alert(`계약서 알림톡 요청을 완료하였습니다!`);
                        } else {
                          window.alert(`오류가 발생하였습니다! 다시 시도해주세요!`);
                        }
                      }
                    }
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님 최종 디자이너 등록",
              func: (aspid) => {
                return async function (e) {
                  const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
                  try {
                    await ajaxJson({ aspid }, S3HOST + ":3000/aspirantToDesigner");
                    window.alert("최종 디자이너 등록을 진행합니다! 완료되면 슬렉을 통해 알림이 나옵니다!");
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
          ];
          const thisBox = this.getBoundingClientRect();
          const { x, y } = e;
          let cancelBack, contextBase;

          cancelBack = createNode({
            mother: totalContents,
            class: [ aspirantSubMenuEventFactorClassName ],
            event: {
              click: (e) => { removeByClass(aspirantSubMenuEventFactorClassName) },
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          contextBase = createNode({
            mother: totalContents,
            class: [ aspirantSubMenuEventFactorClassName ],
            style: {
              display: "inline-block",
              position: "fixed",
              top: String(y + contextIndent) + px,
              left: String(x + (contextIndent / 2)) + px,
              padding: String(contextButtonOuterMargin) + ea,
              paddingBottom: String(contextButtonOuterMargin - contextButtonInnerMargin) + ea,
              background: colorChip.white,
              borderRadius: String(5) + px,
              boxShadow: "3px 0px 15px -9px " + colorChip.shadow,
              zIndex: String(zIndex),
              animation: "fadeuplite 0.3s ease forwards",
            }
          })

          for (let obj of contextMenu) {
            createNode({
              mother: contextBase,
              event: {
                click: obj.func(aspid),
              },
              style: {
                display: "flex",
                width: String(contextButtonWidth) + ea,
                height: String(contextButtonHeight) + ea,
                background: colorChip.gradientGray,
                borderRadius: String(5) + px,
                marginBottom: String(contextButtonInnerMargin) + ea,
                justifyContent: "center",
                alignItems: "center",
                flexDirection: "row",
                cursor: "pointer",
              },
              child: {
                text: obj.title,
                style: {
                  fontSize: String(contextButtonSize) + ea,
                  fontWeight: String(contextButtonWeight),
                  color: colorChip.white,
                  position: "relative",
                  display: "inline-block",
                  top: String(contextButtonTextTop) + ea,
                }
              }
            });
          }

        } catch (e) {
          console.log(e);
        }
      }
    }

    totalMother = createNode({
      mother: totalContents,
      class: [ "totalMother" ],
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: withOut(this.belowHeight, ea),
      }
    });
    this.totalMother = totalMother;

    aspirantContentsLoad = async (reload = false) => {
      try {

        if (reload) {
          ({ standards, columns, values } = await instance.aspirantDataRender(true));
        }

        cleanChildren(totalMother);

        createNode({
          mother: totalMother,
          style: {
            position: "absolute",
            top: String(0),
            left: String(0),
            width: String(this.grayBarWidth) + ea,
            height: withOut(0, ea),
            background: colorChip.gray0,
          }
        });
        createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(totalPaddingTop) + ea,
            height: String(columnAreaHeight) + ea,
            borderBottom: "1px dashed " + colorChip.gray3,
          },
          children: [
            {
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                height: withOut(0, ea),
                justifyContent: "center",
                alignItems: "start",
                verticalAlign: "top",
                width: String(this.grayBarWidth) + ea,
              },
              children: standards.columns.map(({ title, width }) => {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(width) + ea,
                    cursor: "pointer",
                  },
                  child: {
                    text: title,
                    style: {
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.green,
                    }
                  }
                }
              })
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                height: withOut(0, ea),
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
              child: {
                class: [ moveTargetClassName ],
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: withOut(0, ea),
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                },
                children: columns.map(({ title, width, name }, index) => {
                  return {
                    attribute: {
                      name: name,
                      index: String(index),
                    },
                    event: {
                      selectstart: (e) => { e.preventDefault() },
                      click: columnsMenuEvent(index),
                      contextmenu: columnsMenuEvent(index),
                    },
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "center",
                      alignItems: "start",
                      width: String(width) + ea,
                      cursor: "pointer",
                    },
                    child: {
                      style: {
                        display: "inline-block",
                        width: String(90) + '%',
                        position: "relative",
                        overflow: "hidden",
                        textAlign: "center",
                      },
                      child: {
                        style: {
                          display: "flex",
                          width: String(valueMaxWidth) + ea,
                          position: "relative",
                          left: withOut(50, valueMaxWidth / 2, ea),
                          textAlign: "center",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: title,
                          style: {
                            fontSize: String(fontSize) + ea,
                            fontWeight: String(fontWeight),
                            color: colorChip.green,
                          }
                        }
                      }
                    }
                  }
                })
              }
            }
          ]
        });
      
        [ idNameArea, valueArea ] = createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(idNameAreaPaddingTop) + ea,
            height: withOut(totalPaddingTop + columnAreaHeight + idNameAreaPaddingTop, ea),
            width: withOut(0, ea),
            overflow: "scroll",
          },
          children: [
            {
              class: [ idNameAreaClassName ],
              style: {
                display: "inline-flex",
                verticalAlign: "top",
                flexDirection: "column",
                position: "relative",
                width: String(this.grayBarWidth) + ea,
                paddingBottom: String(idNamePaddingBottom) + ea,
              }
            },
            {
              class: [ valueAreaClassName ],
              style: {
                display: "inline-block",
                position: "relative",
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
            }
          ]
        }).children;

        for (let aspirant of instance.aspirants) {
      
          createNode({
            mother: idNameArea,
            attribute: { aspid: aspirant.aspid, lastfilter: "none" },
            event: {
              click: instance.aspirantWhiteCard(aspirant.aspid),
              contextmenu: aspirantSubMenuEvent(aspirant.aspid, aspirant.designer),
            },
            class: [ standardCaseClassName ],
            style: {
              display: "flex",
              flexDirection: "row",
              position: "relative",
              height: String(idNameHeight) + ea,
              justifyContent: "center",
              alignItems: "start",
              cursor: "pointer",
            },
            children: standards.values[aspirant.aspid].map(({ value, name }, index) => {
              return {
                style: {
                  display: "inline-flex",
                  flexDirection: "row",
                  position: "relative",
                  justifyContent: "center",
                  alignItems: "start",
                  width: String(standards.columns[index].width) + ea,
                },
                child: {
                  class: [ valueTargetClassName ],
                  attribute: { name },
                  text: value,
                  style: {
                    position: "relative",
                    transition: "all 0.3s ease",
                    fontSize: String(fontSize) + ea,
                    fontWeight: String(fontWeight),
                    color: colorChip.black,
                  },
                  next: {
                    class: [ importantCircleClassName ],
                    mode: "svg",
                    source: instance.mother.returnCircle("", colorChip.red),
                    style: {
                      display: "none",
                      position: "absolute",
                      transform: "scale(0.4)",
                      transformOrigin: "100% 0%",
                      right: String(index === 0 ? 0 : circleRight) + ea,
                      top: String(circleTop) + ea,
                      zIndex: String(0),
                    }
                  }
                }
              }
            })
          });
      
          thisTong = createNode({
            mother: valueArea,
            attribute: { aspid: aspirant.aspid, lastfilter: "none" },
            class: [ moveTargetClassName, valueCaseClassName, aspirant.aspid ],
            // event: {
            //   mouseenter: hoverEvent(),
            //   mouseleave: hoverOutEvent(),
            // },
            style: {
              display: "flex",
              position: "relative",
              width: String(maxWidth) + ea,
              height: String(idNameHeight) + ea,
              flexDirection: "row",
              alignItems: "start",
              justifyContent: "start",
              paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
              cursor: "pointer",
            }
          });
    
          for (let i = 0; i < columns.length; i++) {

            thisMaxWidth = (columns[i].long === true ? valueLongMaxWidth : valueMaxWidth);
            valueDom = createNode({
              mother: thisTong,
              attribute: {
                aspid: aspirant.aspid,
                name: values[aspirant.aspid][i].name,
              },
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                justifyContent: "center",
                alignItems: "start",
                width: String(columns[i].width) + ea,
              },
              child: {
                style: {
                  display: "inline-block",
                  width: String(90) + '%',
                  position: "relative",
                  overflow: "hidden",
                  textAlign: "center",
                },
                child: {
                  style: {
                    display: "flex",
                    width: String(thisMaxWidth) + ea,
                    position: "relative",
                    left: withOut(50, thisMaxWidth / 2, ea),
                    textAlign: "center",
                    justifyContent: "center",
                    alignItems: "center",
                  },
                  child: {
                    attribute: {
                      aspid: aspirant.aspid,
                      name: values[aspirant.aspid][i].name,
                    },
                    class: [ valueTargetClassName ],
                    text: String(values[aspirant.aspid][i].value),
                    style: {
                      position: "relative",
                      transition: "all 0.1s ease",
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(valueWeight),
                      color: (new RegExp(asyncProcessText, "gi")).test(values[aspirant.aspid][i].value) ? colorChip.gray3 : colorChip.black,
                    }
                  }
                }
              }
            });

            if (Array.isArray(columns[i].menu)) {
              valueDom.setAttribute("menu", JSON.stringify(columns[i].menu));
              valueDom.setAttribute("menuwidth", String(columns[i].menuWidth));
              valueDom.setAttribute("update", (await hexaJson({ update: columns[i].update })));
              valueDom.addEventListener("click", async function (e) {
                try {
                  const self = this;
                  const zIndex = 4;
                  const aspid = this.getAttribute("aspid");
                  const menu = equalJson(this.getAttribute("menu"));
                  const menuWidth = Number(this.getAttribute("menuwidth"));
                  const menuTargets = menu.filter((o) => { return (o.columnOnly !== true) });
                  const thisUpdateFunction = (await hexaJson(this.getAttribute("update"))).update.bind(instance);
                  let cancelBack, menuPrompt;                  

                  cancelBack = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    event: (e) => {
                      self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                      removeByClass(menuValuePromptClassName);
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: withOut(0, ea),
                      height: withOut(0, ea),
                      background: "transparent",
                      zIndex: String(zIndex),
                    }
                  });
        
                  menuPrompt = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    style: {
                      position: "fixed",
                      top: String(e.y + menuVisual) + "px",
                      left: String(e.x + menuVisual) + "px",
                      width: String(menuWidth) + ea,
                      animation: "fadeuplite 0.3s ease forwards",
                      zIndex: String(zIndex),
                    },
                    children: menuTargets.map(({ value }) => {
                      return {
                        attribute: {
                          value,
                        },
                        event: {
                          selectstart: (e) => { e.preventDefault() },
                          click: async function (e) {
                            try {
                              const thisValue = this.getAttribute("value");
                              self.querySelector("." + valueTargetClassName).textContent = thisValue;
                              self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                              await thisUpdateFunction(aspid, thisValue, menuTargets);
                              removeByClass(menuValuePromptClassName);
                            } catch (e) {
                              console.log(e);
                            }
                          }
                        },
                        style: {
                          display: "flex",
                          position: "relative",
                          width: String(menuWidth) + ea,
                          height: String(menuPromptHeight) + ea,
                          borderRadius: String(5) + "px",
                          background: colorChip.gradientGreen,
                          marginBottom: String(menuBetween) + ea,
                          justifyContent: "center",
                          alignItems: "center",
                          textAlign: "center",
                          cursor: "pointer",
                        },
                        child: {
                          text: value,
                          event: {
                            selectstart: (e) => { e.preventDefault() },
                          },
                          style: {
                            position: "relative",
                            top: String(menuTextTop) + ea,
                            fontSize: String(menuSize) + ea,
                            fontWeight: String(menuWeight),
                            color: colorChip.white,
                          }
                        }
                      }
                    })
                  });

                  setQueue(() => {
                    self.querySelector("." + valueTargetClassName).style.color = colorChip.green;
                  });

                } catch (e) {
                  console.log(e);
                }
              });
            } else if (columns[i].type === "date" && typeof columns[i].update === "function") {
              valueDom.setAttribute("update", (await hexaJson({ update: columns[i].update })));
              valueDom.addEventListener("click", async function (e) {
                try {
                  const self = this;
                  const zIndex = 4;
                  const aspid = this.getAttribute("aspid");
                  const thisUpdateFunction = (await hexaJson(this.getAttribute("update"))).update.bind(instance);
                  let cancelBack, calendarPrompt;                  
                  let calendar;

                  cancelBack = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    event: (e) => {
                      self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                      removeByClass(menuValuePromptClassName);
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: withOut(0, ea),
                      height: withOut(0, ea),
                      background: "transparent",
                      zIndex: String(zIndex),
                    }
                  });

                  calendarPrompt = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    style: {
                      position: "fixed",
                      top: String(e.y + menuVisual) + "px",
                      left: String(e.x + menuVisual - (300 / 2)) + "px",
                      paddingTop: String(calendarBoxBetween) + ea,
                      width: String(calendarWidth) + ea,
                      animation: "fadeuplite 0.3s ease forwards",
                      zIndex: String(zIndex),
                    },
                    children: [
                      {
                        event: {
                          click: async function (e) {
                            try {
                              const thisValue = new Date(1800, 0, 1);
                              self.querySelector("." + valueTargetClassName).textContent = "해당 없음";
                              self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                              await thisUpdateFunction(aspid, thisValue);
                              removeByClass(menuValuePromptClassName);
                            } catch (e) {
                              console.log(e);
                            }
                          }
                        },
                        style: {
                          display: "inline-flex",
                          verticalAlign: "top",
                          position: "relative",
                          width: String((calendarWidth - calendarBoxBetween) / 2) + ea,
                          background: colorChip.white,
                          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                          borderRadius: String(5) + "px",
                          height: String(calendarBoxHeight) + ea,
                          marginBottom: String(calendarBoxBetween) + ea,
                          marginRight: String(calendarBoxBetween) + ea,
                          cursor: "pointer",
                          flexDirection: "column",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: "해당 없음",
                          style: {
                            position: "relative",
                            top: String(menuTextTop) + ea,
                            fontSize: String(menuSize) + ea,
                            fontWeight: String(menuWeight),
                            color: colorChip.black,
                          }
                        }
                      },
                      {
                        event: {
                          click: async function (e) {
                            try {
                              const thisValue = new Date(3800, 0, 1);
                              self.querySelector("." + valueTargetClassName).textContent = "예정";
                              self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                              await thisUpdateFunction(aspid, thisValue);
                              removeByClass(menuValuePromptClassName);
                            } catch (e) {
                              console.log(e);
                            }
                          }
                        },
                        style: {
                          display: "inline-flex",
                          verticalAlign: "top",
                          position: "relative",
                          width: String((calendarWidth - calendarBoxBetween) / 2) + ea,
                          background: colorChip.white,
                          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                          borderRadius: String(5) + "px",
                          height: String(calendarBoxHeight) + ea,
                          marginBottom: String(calendarBoxBetween) + ea,
                          cursor: "pointer",
                          flexDirection: "column",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: "예정",
                          style: {
                            position: "relative",
                            top: String(menuTextTop) + ea,
                            fontSize: String(menuSize) + ea,
                            fontWeight: String(menuWeight),
                            color: colorChip.black,
                          }
                        }
                      },
                      {
                        style: {
                          display: "block",
                          position: "relative",
                          width: String(calendarWidth) + ea,
                          background: colorChip.white,
                          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                          borderRadius: String(5) + "px",
                        },
                      }
                    ]
                  });

                  calendar = instance.mother.makeCalendar(new Date(), async function (e) {
                    try {
                      e.stopPropagation();
                      e.preventDefault();
                      const stringValue = this.getAttribute("buttonValue");
                      const thisValue = stringToDate(stringValue);
                      this.setAttribute("value", stringValue);
                      self.querySelector("." + valueTargetClassName).textContent = stringValue;
                      self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                      await thisUpdateFunction(aspid, thisValue);
                      removeByClass(menuValuePromptClassName);
                    } catch (e) {
                      console.log(e);
                    }
                  });
                  calendarPrompt.lastChild.appendChild(calendar.calendarBase);

                  setQueue(() => {
                    self.querySelector("." + valueTargetClassName).style.color = colorChip.green;
                  });

                } catch (e) {
                  console.log(e);
                }
              });
            } else if (typeof columns[i].update === "function") {
              valueDom.setAttribute("update", (await hexaJson({ update: columns[i].update })));
              valueDom.addEventListener("click", async function (e) {
                try {
                  const self = this;
                  const zIndex = 4;
                  const aspid = this.getAttribute("aspid");
                  const thisUpdateFunction = (await hexaJson(this.getAttribute("update"))).update.bind(instance);
                  let cancelBack, longTextPrompt;                  

                  cancelBack = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    event: (e) => {
                      self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                      removeByClass(menuValuePromptClassName);
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: withOut(0, ea),
                      height: withOut(0, ea),
                      background: "transparent",
                      zIndex: String(zIndex),
                    }
                  });

                  longTextPrompt = createNode({
                    mother: totalContents,
                    class: [ menuValuePromptClassName ],
                    style: {
                      position: "fixed",
                      top: String(e.y + menuVisual) + "px",
                      left: String(e.x + menuVisual) + "px",
                      width: String(longTextWidth) + ea,
                      background: colorChip.white,
                      animation: "fadeuplite 0.3s ease forwards",
                      zIndex: String(zIndex),
                    },
                    child: {
                      style: {
                        display: "flex",
                        position: "relative",
                        width: String(longTextWidth) + ea,
                        height: String(longTextHeight) + ea,
                        borderRadius: String(5) + "px",
                        background: colorChip.white,
                        boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                        borderRadius: String(5) + "px",
                        marginBottom: String(menuBetween) + ea,
                        justifyContent: "start",
                        alignItems: "center",
                        textAlign: "center",
                        cursor: "pointer",
                        paddingLeft: String(12) + ea,
                      },
                      child: {
                        mode: "input",
                        attribute: {
                          type: "text",
                          value: self.querySelector("." + valueTargetClassName).textContent,
                        },
                        event: {
                          keydown: async function (e) {
                            try {
                              if (e.key === "Enter" || e.key === "Tab") {
                                e.preventDefault();
                              }
                            } catch (e) {
                              console.log(e);
                            }
                          },
                          keyup: async function (e) {
                            try {
                              if (e.key === "Enter" || e.key === "Tab") {
                                e.preventDefault();
                                const thisValue = this.value.trim().replace(/[\&\=\+\/\\\#]/gi, '');
                                self.querySelector("." + valueTargetClassName).textContent = thisValue;
                                self.querySelector("." + valueTargetClassName).style.color = self.querySelector("." + valueTargetClassName).getAttribute("color");
                                await thisUpdateFunction(aspid, thisValue);
                                removeByClass(menuValuePromptClassName);
                              }
                            } catch (e) {
                              console.log(e);
                            }
                          }
                        },
                        style: {
                          position: "relative",
                          top: String(menuTextTop) + ea,
                          fontSize: String(menuSize) + ea,
                          fontWeight: String(menuWeight),
                          color: colorChip.green,
                          border: String(0),
                          outline: String(0),
                          width: withOut(0, ea),
                          height: withOut(0, ea),
                        }
                      }
                    }
                  });
                  longTextPrompt.querySelector("input").focus();

                  setQueue(() => {
                    self.querySelector("." + valueTargetClassName).style.color = colorChip.green;
                  });

                } catch (e) {
                  console.log(e);
                }
              });

            }

            if (typeof columns[i].script === "function") {
              valueDom.addEventListener("contextmenu", columns[i].script(aspirant.aspid));
            }

          }
    
        }
    
        await this.aspirantColorSync();

      } catch (e) {
        console.log(e);
      }
    }

    await aspirantContentsLoad(false);
    this.aspirantContentsLoad = aspirantContentsLoad;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantSearchEvent = async function () {
  const instance = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, setQueue } = GeneralJs;
  try {
    this.searchInput.addEventListener("keypress", async function (e) {
      try {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            instance.totalFather.classList.remove("fadein");
            instance.totalFather.classList.add("fadeout");
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
            setQueue(() => {
              instance.totalFather.remove();
              instance.totalFather = null;
            }, 501);
          }
          if (document.querySelector('.' + whiteBaseClassName) !== null) {
            const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
            cancelBack.style.animation = "justfadeout 0.3s ease forwards";
            if (w0 !== undefined) {
              w0.style.animation = "fadedownlite 0.3s ease forwards";
            }
            if (w1 !== undefined) {
              w1.style.animation = "fadedownlite 0.3s ease forwards";
            }
            setQueue(() => {
              cancelBack.click();
            }, 350);
          }

          const value = this.value.trim().replace(/\&\=\+\\\//gi, '');
          let whereQuery;
          if (value === '') {
            whereQuery = {};
          } else {
            whereQuery = { $or: [
              { designer: { $regex: value } },
              { aspid: { $regex: value } },
            ] };
          }
          const aspirants = await ajaxJson({ noFlat: true, whereQuery }, BACKHOST + "/getAspirants", { equal: true });

          instance.aspirants = aspirants;
          await instance.aspirantContentsLoad(true);
          
          setQueue(async () => {
            try {
              if (instance.aspirants.length === 1) {
                const tempFunc = instance.aspirantWhiteCard(instance.aspirants[0].aspid);
                await tempFunc({});
              }
            } catch (e) {
              console.log(e);
            }
          }, 350);

        }
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantSendNotice = function (method, aspid) {
  const instance = this;
  const { ea, totalContents, aspirants } = this;
  const { ajaxJson } = GeneralJs;

  if (method === "documents") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        let whereQuery, updateQuery;
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        whereQuery = {};
        whereQuery["aspid"] = aspid;
        updateQuery = {};
        updateQuery["meeting.status"] = "등록 요청";
        if (await GeneralJs.nonCxBan()) {
          await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");

          const response = await ajaxJson({
            mode: "send",
            aspid: aspirant.aspid,
            designer: aspirant.designer,
            phone: aspirant.phone,
            type: "documents",
          }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
  
        }
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "payment") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        let whereQuery, updateQuery;
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        if (window.confirm(aspirant.designer + " 실장님께 등록비 결제 알림톡을 전송할까요?")) {

          whereQuery = {};
          whereQuery["aspid"] = aspid;
          updateQuery = {};
          updateQuery["meeting.status"] = "등록 요청";
          if (await GeneralJs.nonCxBan()) {
            await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");

            const response = await ajaxJson({
              mode: "send",
              aspid: aspirant.aspid,
              designer: aspirant.designer,
              phone: aspirant.phone,
              type: "payment",
            }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
            if (response.message === "success") {
              window.alert("전송에 성공하였습니다!");
            } else {
              window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
            }
            window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
  
          }
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "plus") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        let whereQuery, updateQuery;
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        if (window.confirm(aspirant.designer + " 실장님께 추가 포트폴리오 요청 알림톡을 전송할까요?")) {

          whereQuery = {};
          whereQuery["aspid"] = aspid;
          updateQuery = {};
          updateQuery["meeting.status"] = "추가 요청";
          if (await GeneralJs.nonCxBan()) {
            await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");

            const response = await ajaxJson({
              mode: "send",
              aspid: aspirant.aspid,
              designer: aspirant.designer,
              phone: aspirant.phone,
              type: "plus",
            }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
            if (response.message === "success") {
              window.alert("전송에 성공하였습니다!");
            } else {
              window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
            }
            window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
  
          }
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "fail") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        let whereQuery;
        let updateQuery;
        let hlBot;
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        if (window.confirm(aspirant.designer + " 실장님께 불합격 통지를 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            aspid: aspirant.aspid,
            designer: aspirant.designer,
            phone: aspirant.phone,
            type: "fail",
          }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }

          hlBot = GeneralJs.stacks.members.find((obj) => { return obj.roles.includes("Bot"); }).name;

          whereQuery = { aspid: aspirant.aspid };

          updateQuery = {};
          updateQuery["response.first.status"] = "불합격";
          updateQuery["meeting.status"] = "드랍";
          updateQuery["response.manager"] = hlBot;

          if (await GeneralJs.nonCxBan()) {
            await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
          }

          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "pure") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        if (window.confirm(aspirant.designer + " 실장님께 부재중 알림을 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            aspid: aspirant.aspid,
            designer: aspirant.designer,
            phone: aspirant.phone,
            type: "pure",
          }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }

          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "setting") {
    return async function () {
      try {
        const aspirant = aspirants.find((d) => { return d.aspid === aspid });
        let whereQuery, updateQuery;
        if (aspirant === undefined) {
          throw new Error("invalid aspid");
        }

        if (window.confirm(aspirant.designer + " 실장님께 세트 포트폴리오 요청 알림톡을 전송할까요?")) {

          const response = await ajaxJson({
            mode: "send",
            aspid: aspirant.aspid,
            designer: aspirant.designer,
            phone: aspirant.phone,
            type: "setting",
          }, SECONDHOST + "/noticeAspirantConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspirant.aspid;
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  }
}

DesignerJs.prototype.aspirantCommonMeetingSetting = async function (aspid) {
  const instance = this;
  const { ea, totalContents, aspirants, media } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, equalJson, setQueue, hexaJson } = GeneralJs;
  const promptAsideClassName = "promptAsideAspirantClassName";
  const commonMeetingDateValueAsideClassName = "commonMeetingDateValueAsideClassName";
  const mobile = media[4];
  const desktop = !mobile;
  try {
    const zIndex = 899;
    const aspirant = aspirants.find((a) => { return a.aspid === aspid });
    let whiteTongBase;
    let greenBarHeight;
    let whiteTong;
    let whiteWidth;
    let whiteHeight;
    let paddingTop;
    let paddingLeft;
    let paddingBottom;
    let size0;
    let size1;
    let inputSize;
    let buttonSize;
    let marginLeft;
    let bottomVisual;
    let inputBoxHeight;
    let inputIndent;
    let inputBottomVisual;
    let lineHeight;
    let wordingVisual;
    let textTop;
    let buttonBetween;
    let buttonsBaseTongMarginTop;
    let buttonPaddingLeft;
    let grayBoxMarginTop;
    let extractArrowWidth;
    let extractArrowMargin;
    let buttonsBaseTong;
    let firstButton, secondButton, thirdButton, fourthButton;
    let visualTop;
    let dateSelectEvent;
    let finalSendEvent;

    whiteWidth = 320;
    whiteHeight = 150;
    paddingTop = 17;
    paddingLeft = 23;
    paddingBottom = 62;
    size0 = 14;
    size1 = 15;
    inputSize = 13;
    buttonSize = 12;
    marginLeft = 18;
    bottomVisual = 7;
    inputBoxHeight = 42;
    inputIndent = 9;
    inputBottomVisual = 0;
    lineHeight = 1.5;
    wordingVisual = GeneralJs.isMac() ? 0 : 2;
    textTop = GeneralJs.isMac() ? -1 : 1;
    buttonBetween = 4;
    buttonsBaseTongMarginTop = 10;
    buttonPaddingLeft = 10;
    grayBoxMarginTop = 12;
    extractArrowWidth = 14;
    extractArrowMargin = 4;
    visualTop = -12;

    greenBarHeight = document.getElementById("greenBar") !== null ? Number(document.getElementById("greenBar").style.height.replace(/[^0-9\.\-]/gi, '')) : 0;
    if (Number.isNaN(greenBarHeight)) {
      greenBarHeight = 0;
    }

    finalSendEvent = async function (aspid) {
      try {
        const targets = [ ...document.querySelectorAll('.' + commonMeetingDateValueAsideClassName) ];
        if (targets.every((dom) => { return dom.getAttribute("toggle") === "on" })) {
          targets.sort((a, b) => {
            return Number(a.getAttribute("index")) - Number(b.getAttribute("index"));
          });
          const resutObj = targets.map((dom) => {
            return new Date(Number(dom.getAttribute("value")))
          }).map((dateValue) => {
            return dateValue.valueOf();
          });
          await ajaxJson({
            aspid: aspid,
            value: resutObj,
            mode: "send",
          }, SECONDHOST + "/noticeAspirantCommon");

          setQueue(() => {
            window.alert("공통 교육 선택 알림톡을 전송하였습니다!");
            const removeTargets = [ ...document.querySelectorAll('.' + promptAsideClassName) ];
            for (let z = 0; z < removeTargets.length; z++) {
              try {
                removeTargets[z].remove();
              } catch {}
            }
            window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
          }, 500);

        }
      } catch (e) {
        console.log(e);
      }
    }

    dateSelectEvent = (index) => {
      return async function (e) {
        e.preventDefault();
        try {
          const thisDate = await GeneralJs.promptDate("가능한 교육 날짜를 선택해주세요!");
          const aspid = this.getAttribute("aspid");
          if (thisDate !== null) {
            const value = dateToString(thisDate);
            const [ yearString, monthString, dateString ] = value.split("-");
            const year = Number(yearString);
            const month = Number(monthString);
            const date = Number(dateString);
            const hourString = await GeneralJs.promptButtons("공통 교육 시간을 알려주세요!", [
              "10시",
              "11시",
              "14시",
              "15시",
              "16시",
              "17시",
            ]);
            if (hourString !== null) {
              const hour = Number(hourString.replace(/[^0-9]/gi, ''));
              const finalValue = new Date(year, month - 1, date, hour);
              const finalString = `${String(year)}년 ${String(month)}월 ${String(date)}일 ${String(hour)}시`;
              this.firstChild.firstChild.textContent = finalString;
              this.style.background = colorChip.softGreen;
              this.style.border = "1px solid " + colorChip.green;
              this.firstChild.style.color = colorChip.white;
              this.setAttribute("toggle", "on");
              this.setAttribute("value", String(finalValue.valueOf()));

              await finalSendEvent(aspid);
            }
          }
        } catch (e) {
          console.log(e);
        }
      }
    }

    whiteTongBase = createNode({
      mode: "aside",
      mother: document.body,
      class: [ promptAsideClassName ],
      event: {
        contextmenu: (e) => { e.stopPropagation(); },
        dblclick: (e) => { e.stopPropagation(); },
        drop: (e) => { e.stopPropagation(); },
        keyup: (e) => { e.stopPropagation(); },
        keydown: (e) => { e.stopPropagation(); },
        keypress: (e) => { e.stopPropagation(); },
        click: (e) => {
          e.stopPropagation();
          const targets = [ ...document.querySelectorAll('.' + promptAsideClassName) ];
          for (let z = 0; z < targets.length; z++) {
            try {
              targets[z].remove();
            } catch {}
          }
        }
      },
      style: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        position: "fixed",
        top: String(0) + "vh",
        left: String(1) + "vw",
        width: String(98) + "vw",
        height: "calc(100vh - " + String(greenBarHeight) + ea + ")",
        background: "transparent",
        zIndex: String(zIndex)
      }
    });
  
    whiteTong = createNode({
      mother: whiteTongBase,
      event: {
        click: (e) => { e.stopPropagation(); },
      },
      style: {
        display: "block",
        position: "relative",
        top: String(visualTop) + ea,
        width: String(whiteWidth - (paddingLeft * 2)) + ea,
        paddingTop: String(paddingTop) + ea,
        paddingBottom: String(paddingLeft) + ea,
        paddingLeft: String(paddingLeft) + ea,
        paddingRight: String(paddingLeft) + ea,
        borderRadius: String(5) + "px",
        boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
        background: colorChip.white,
        animation: desktop ? "fadeuplite 0.4s ease forwards" : "fadeuplite 0.3s ease forwards",
      }
    });

    createNode({
      mother: whiteTong,
      text: "Q",
      style: {
        fontSize: String(size0) + ea,
        fontWeight: String(400),
        color: colorChip.green,
        fontFamily: "graphik",
        position: "absolute",
        top: String(paddingTop) + ea,
        left: String(paddingLeft) + ea,
        lineHeight: String(lineHeight),
      }
    });
  
    createNode({
      mother: whiteTong,
      text: "공통 교육일이 가능한 날짜를 골라주세요!",
      style: {
        position: "relative",
        marginLeft: String(marginLeft) + ea,
        fontSize: String(size1) + ea,
        fontWeight: String(500),
        color: colorChip.black,
        lineHeight: String(lineHeight),
        top: String(wordingVisual) + ea,
      }
    });
  
    firstButton = createNode({
      mother: whiteTong,
      class: [ commonMeetingDateValueAsideClassName ],
      attribute: {
        aspid: aspid,
        toggle: "off",
        value: String(0),
        index: String(0),
      },
      event: {
        click: dateSelectEvent(0),
        contextmenu: dateSelectEvent(0),
      },
      style: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        left: String(0) + ea,
        width: withOut(0, ea),
        height: String(inputBoxHeight) + ea,
        borderRadius: String(5) + "px",
        background: colorChip.gray1,
        justifyContent: "center",
        alignItems: "center",
        marginTop: String(grayBoxMarginTop) + ea,
        border: "1px dashed " + colorChip.gray4,
      },
      child: {
        text: "클릭하여 첫 번째 날짜를 선택...",
        style: {
          position: "relative",
          fontSize: String(size1) + ea,
          fontWeight: String(400),
          color: colorChip.deactive,
          top: String(wordingVisual) + ea,
        }
      }
    });

    secondButton = createNode({
      mother: whiteTong,
      class: [ commonMeetingDateValueAsideClassName ],
      attribute: {
        aspid: aspid,
        toggle: "off",
        value: String(1),
        index: String(1),
      },
      event: {
        click: dateSelectEvent(1),
        contextmenu: dateSelectEvent(1),
      },
      style: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        left: String(0) + ea,
        width: withOut(0, ea),
        height: String(inputBoxHeight) + ea,
        borderRadius: String(5) + "px",
        background: colorChip.gray1,
        justifyContent: "center",
        alignItems: "center",
        marginTop: String(buttonBetween) + ea,
        border: "1px dashed " + colorChip.gray4,
      },
      child: {
        text: "클릭하여 두 번째 날짜를 선택...",
        style: {
          position: "relative",
          fontSize: String(size1) + ea,
          fontWeight: String(400),
          color: colorChip.deactive,
          top: String(wordingVisual) + ea,
        }
      }
    });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantSendDocumentsAndMeetingSetting = async function (aspid) {
  const instance = this;
  const { ea, totalContents, aspirants, media } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, equalJson, setQueue, hexaJson } = GeneralJs;
  const promptAsideClassName = "promptAsideAspirantClassName";
  const commonMeetingDateValueAsideClassName = "commonMeetingDateValueAsideClassName";
  const mobile = media[4];
  const desktop = !mobile;
  try {
    const zIndex = 899;
    const aspirant = aspirants.find((a) => { return a.aspid === aspid });
    let whiteTongBase;
    let greenBarHeight;
    let whiteTong;
    let whiteWidth;
    let whiteHeight;
    let paddingTop;
    let paddingLeft;
    let paddingBottom;
    let size0;
    let size1;
    let inputSize;
    let buttonSize;
    let marginLeft;
    let bottomVisual;
    let inputBoxHeight;
    let inputIndent;
    let inputBottomVisual;
    let lineHeight;
    let wordingVisual;
    let textTop;
    let buttonBetween;
    let buttonsBaseTongMarginTop;
    let buttonPaddingLeft;
    let grayBoxMarginTop;
    let extractArrowWidth;
    let extractArrowMargin;
    let buttonsBaseTong;
    let firstButton, secondButton, thirdButton, fourthButton;
    let visualTop;
    let dateSelectEvent;
    let finalSendEvent;

    whiteWidth = 320;
    whiteHeight = 150;
    paddingTop = 17;
    paddingLeft = 23;
    paddingBottom = 62;
    size0 = 14;
    size1 = 15;
    inputSize = 13;
    buttonSize = 12;
    marginLeft = 18;
    bottomVisual = 7;
    inputBoxHeight = 42;
    inputIndent = 9;
    inputBottomVisual = 0;
    lineHeight = 1.5;
    wordingVisual = GeneralJs.isMac() ? 0 : 2;
    textTop = GeneralJs.isMac() ? -1 : 1;
    buttonBetween = 4;
    buttonsBaseTongMarginTop = 10;
    buttonPaddingLeft = 10;
    grayBoxMarginTop = 12;
    extractArrowWidth = 14;
    extractArrowMargin = 4;
    visualTop = -12;

    greenBarHeight = document.getElementById("greenBar") !== null ? Number(document.getElementById("greenBar").style.height.replace(/[^0-9\.\-]/gi, '')) : 0;
    if (Number.isNaN(greenBarHeight)) {
      greenBarHeight = 0;
    }

    finalSendEvent = async function (aspid) {
      try {
        const targets = [ ...document.querySelectorAll('.' + commonMeetingDateValueAsideClassName) ];
        if (targets.every((dom) => { return dom.getAttribute("toggle") === "on" })) {
          targets.sort((a, b) => {
            return Number(a.getAttribute("index")) - Number(b.getAttribute("index"));
          });
          const resutObj = targets.map((dom) => {
            return new Date(Number(dom.getAttribute("value")))
          }).map((dateValue) => {
            return dateValue.valueOf();
          });
          await ajaxJson({
            aspid: aspid,
            value: resutObj,
            mode: "store",
          }, SECONDHOST + "/noticeAspirantCommon");
          const sendFunc = instance.aspirantSendNotice("documents", aspid);
          sendFunc().catch((err) => { console.log(err) });
        }
      } catch (e) {
        console.log(e);
      }
    }

    dateSelectEvent = (index) => {
      return async function (e) {
        e.preventDefault();
        try {
          const thisDate = await GeneralJs.promptDate("가능한 교육 날짜를 선택해주세요!");
          const aspid = this.getAttribute("aspid");
          if (thisDate !== null) {
            const value = dateToString(thisDate);
            const [ yearString, monthString, dateString ] = value.split("-");
            const year = Number(yearString);
            const month = Number(monthString);
            const date = Number(dateString);
            const hourString = await GeneralJs.promptButtons("공통 교육 시간을 알려주세요!", [
              "10시",
              "11시",
              "14시",
              "15시",
              "16시",
              "17시",
            ]);
            if (hourString !== null) {
              const hour = Number(hourString.replace(/[^0-9]/gi, ''));
              const finalValue = new Date(year, month - 1, date, hour);
              const finalString = `${String(year)}년 ${String(month)}월 ${String(date)}일 ${String(hour)}시`;
              this.firstChild.firstChild.textContent = finalString;
              this.style.background = colorChip.softGreen;
              this.style.border = "1px solid " + colorChip.green;
              this.firstChild.style.color = colorChip.white;
              this.setAttribute("toggle", "on");
              this.setAttribute("value", String(finalValue.valueOf()));

              await finalSendEvent(aspid);
            }
          }
        } catch (e) {
          console.log(e);
        }
      }
    }

    whiteTongBase = createNode({
      mode: "aside",
      mother: document.body,
      class: [ promptAsideClassName ],
      event: {
        contextmenu: (e) => { e.stopPropagation(); },
        dblclick: (e) => { e.stopPropagation(); },
        drop: (e) => { e.stopPropagation(); },
        keyup: (e) => { e.stopPropagation(); },
        keydown: (e) => { e.stopPropagation(); },
        keypress: (e) => { e.stopPropagation(); },
        click: (e) => {
          e.stopPropagation();
          const targets = [ ...document.querySelectorAll('.' + promptAsideClassName) ];
          for (let z = 0; z < targets.length; z++) {
            try {
              targets[z].remove();
            } catch {}
          }
        }
      },
      style: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        position: "fixed",
        top: String(0) + "vh",
        left: String(1) + "vw",
        width: String(98) + "vw",
        height: "calc(100vh - " + String(greenBarHeight) + ea + ")",
        background: "transparent",
        zIndex: String(zIndex)
      }
    });
  
    whiteTong = createNode({
      mother: whiteTongBase,
      event: {
        click: (e) => { e.stopPropagation(); },
      },
      style: {
        display: "block",
        position: "relative",
        top: String(visualTop) + ea,
        width: String(whiteWidth - (paddingLeft * 2)) + ea,
        paddingTop: String(paddingTop) + ea,
        paddingBottom: String(paddingLeft) + ea,
        paddingLeft: String(paddingLeft) + ea,
        paddingRight: String(paddingLeft) + ea,
        borderRadius: String(5) + "px",
        boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
        background: colorChip.white,
        animation: desktop ? "fadeuplite 0.4s ease forwards" : "fadeuplite 0.3s ease forwards",
      }
    });

    createNode({
      mother: whiteTong,
      text: "Q",
      style: {
        fontSize: String(size0) + ea,
        fontWeight: String(400),
        color: colorChip.green,
        fontFamily: "graphik",
        position: "absolute",
        top: String(paddingTop) + ea,
        left: String(paddingLeft) + ea,
        lineHeight: String(lineHeight),
      }
    });
  
    createNode({
      mother: whiteTong,
      text: "공통 교육일이 가능한 날짜를 골라주세요!",
      style: {
        position: "relative",
        marginLeft: String(marginLeft) + ea,
        fontSize: String(size1) + ea,
        fontWeight: String(500),
        color: colorChip.black,
        lineHeight: String(lineHeight),
        top: String(wordingVisual) + ea,
      }
    });
  
    firstButton = createNode({
      mother: whiteTong,
      class: [ commonMeetingDateValueAsideClassName ],
      attribute: {
        aspid: aspid,
        toggle: "off",
        value: String(0),
        index: String(0),
      },
      event: {
        click: dateSelectEvent(0),
        contextmenu: dateSelectEvent(0),
      },
      style: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        left: String(0) + ea,
        width: withOut(0, ea),
        height: String(inputBoxHeight) + ea,
        borderRadius: String(5) + "px",
        background: colorChip.gray1,
        justifyContent: "center",
        alignItems: "center",
        marginTop: String(grayBoxMarginTop) + ea,
        border: "1px dashed " + colorChip.gray4,
      },
      child: {
        text: "클릭하여 첫 번째 날짜를 선택...",
        style: {
          position: "relative",
          fontSize: String(size1) + ea,
          fontWeight: String(400),
          color: colorChip.deactive,
          top: String(wordingVisual) + ea,
        }
      }
    });

    secondButton = createNode({
      mother: whiteTong,
      class: [ commonMeetingDateValueAsideClassName ],
      attribute: {
        aspid: aspid,
        toggle: "off",
        value: String(1),
        index: String(1),
      },
      event: {
        click: dateSelectEvent(1),
        contextmenu: dateSelectEvent(1),
      },
      style: {
        display: "flex",
        flexDirection: "column",
        position: "relative",
        left: String(0) + ea,
        width: withOut(0, ea),
        height: String(inputBoxHeight) + ea,
        borderRadius: String(5) + "px",
        background: colorChip.gray1,
        justifyContent: "center",
        alignItems: "center",
        marginTop: String(buttonBetween) + ea,
        border: "1px dashed " + colorChip.gray4,
      },
      child: {
        text: "클릭하여 두 번째 날짜를 선택...",
        style: {
          position: "relative",
          fontSize: String(size1) + ea,
          fontWeight: String(400),
          color: colorChip.deactive,
          top: String(wordingVisual) + ea,
        }
      }
    });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.communicationRender = function () {
  const instance = this;
  const { communication } = this.mother;
  const { whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, sleep, blankHref } = GeneralJs;

  communication.setItem([
    () => { return "합격 응대 스트립트 보기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        blankHref("https://docs.google.com/document/d/1GyQ-ptfy1QaM5ciaIi_QZjuQ6hwruTB4WDmscieNxLY/edit?usp=sharing");
      } catch (e) {
        console.log(e);
      }
    }
  ]);

  communication.setItem([
    () => { return "반려 응대 스트립트 보기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        blankHref("https://docs.google.com/document/d/1GyQ-ptfy1QaM5ciaIi_QZjuQ6hwruTB4WDmscieNxLY/edit?usp=sharing");
      } catch (e) {
        console.log(e);
      }
    }
  ]);

  communication.setItem([
    () => { return "확인 응대 스트립트 보기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        blankHref("https://docs.google.com/document/d/1GyQ-ptfy1QaM5ciaIi_QZjuQ6hwruTB4WDmscieNxLY/edit?usp=sharing");
      } catch (e) {
        console.log(e);
      }
    }
  ]);

  communication.setItem([
    () => { return "QnA 보기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        blankHref("https://docs.google.com/document/d/1GyQ-ptfy1QaM5ciaIi_QZjuQ6hwruTB4WDmscieNxLY/edit?usp=sharing");
      } catch (e) {
        console.log(e);
      }
    }
  ]);

  communication.setItem([
    () => { return "1차 유선 통화 완료"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        let whereQuery, updateQuery;

        whereQuery = {};
        whereQuery["aspid"] = aspid;
        updateQuery = {};
        updateQuery["response.date"] = new Date();

        if (await GeneralJs.nonCxBan()) {
          await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");
        }

        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "추가 포트폴리오 요청"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        const sendFunc = instance.aspirantSendNotice("plus", aspid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "등록 서류 요청"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        instance.aspirantSendDocumentsAndMeetingSetting(aspid).catch((err) => {
          console.log(err);
        });
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "부재중 알림"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        const sendFunc = instance.aspirantSendNotice("pure", aspid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "불합격 통지"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        const sendFunc = instance.aspirantSendNotice("fail", aspid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "공통 교육 선택"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        instance.aspirantCommonMeetingSetting(aspid).catch((err) => {
          console.log(err);
        });
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "공통 교육 시간 장소 안내"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
        const emptyDate = new Date(2000, 0, 1);
        if (aspirant.meeting.common.date.valueOf() < emptyDate.valueOf()) {
          window.alert("공통 교육 날짜 선택이 선행되어야 합니다!");
        } else {
          await ajaxJson({ aspid, mode: "guide" }, SECONDHOST + "/noticeAspirantCommon", { equal: true });
          window.alert("공통 교육 시간과 장소를 안내하였습니다!");
        }
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "세트 포트폴리오 요청"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      try {
        const sendFunc = instance.aspirantSendNotice("setting", aspid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "계약서 발송"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
      try {
        let whereQuery, updateQuery;
        if (window.confirm(aspirant.designer + " 디자이너님에게 디자이너 파트너십 계약서와 서비스 제휴 계약서를 전송합니다! 확실하십니까?")) {

          whereQuery = {};
          whereQuery["aspid"] = aspid;
          updateQuery = {};
          updateQuery["meeting.status"] = "계약 요청";

          if (await GeneralJs.nonCxBan()) {
            await ajaxJson({ whereQuery, updateQuery }, BACKHOST + "/rawUpdateAspirant");

            const response0 = await ajaxJson({ aspid }, PYTHONHOST + "/createPartnershipContract");
            const response1 = await ajaxJson({ aspid }, PYTHONHOST + "/createDesignerContract");
            if (response0.message === "OK" && response1.message === "OK") {
              window.alert(`계약서 알림톡 요청을 완료하였습니다!`);
            } else {
              window.alert(`오류가 발생하였습니다! 다시 시도해주세요!`);
            }
          }

        }
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "최종 디자이너 등록"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const aspid = document.querySelector('.' + whiteBaseClassName).getAttribute("aspid");
      const aspirant = instance.aspirants.find((a) => { return a.aspid === aspid });
      try {
        await ajaxJson({ aspid }, S3HOST + ":3000/aspirantToDesigner");
        window.alert("최종 디자이너 등록을 진행합니다! 완료되면 슬렉을 통해 알림이 나옵니다!");
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=aspirant&aspid=" + aspid;
      }
    }
  ]);

  communication.setItem([
    () => { return "신규 컨텐츠 발행"; },
    function () {
      return true;
    },
    async function (e) {
      try {
        let popupFunction;
        popupFunction = instance.rawUploadView();
        await popupFunction();
      } catch (e) {
        console.log(e);
      }
    }
  ]);

}

DesignerJs.prototype.aspirantExtractEvent = async function () {
  const instance = this;
  const { ajaxJson, blankHref } = GeneralJs;
  try {
    const parentId = "1JcUBOu9bCrFBQfBAG-yXFcD9gqYMRC1c";
    this.mother.belowButtons.sub.extractIcon.addEventListener("click", async function (e) {
      try {
        const today = new Date();
        const data = await instance.aspirantDataRender(false);
        let thisName;
        let thisObject;
        let matrix;
        let tempArr;
        let thisDesigner;
  
        matrix = [];
        tempArr = [
          "아이디",
          "이름",
        ];
        for (let obj of data.columns) {
          tempArr.push(obj.title);
        }
        matrix.push(tempArr);
  
        for (let aspid in data.values) {
  
          thisDesigner = instance.aspirants.find((d) => { return d.aspid === aspid });
  
          tempArr = [];
          tempArr.push(aspid);
          tempArr.push(thisDesigner.designer);
  
          for (let obj of data.columns) {
            thisObject = data.values[aspid].find((o) => { return o.name === obj.name });
            tempArr.push(thisObject.value);
          }
          matrix.push(tempArr);
        }
  
        instance.mother.greenAlert("시트 추출이 완료되면 자동으로 열립니다!");
        ajaxJson({
          values: matrix,
          newMake: true,
          parentId: parentId,
          sheetName: "fromDB_aspirant_" + String(today.getFullYear()) + instance.mother.todayMaker()
        }, BACKHOST + "/sendSheets", { equal: true }).then((result) => {
          blankHref(result.link);
        }).catch((err) => {
          console.log(err);
        })
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.aspirantView = async function () {
  const instance = this;
  try {
    const { colorChip, ajaxJson, returnGet } = GeneralJs;
    const getObj = returnGet();
    let loading;
    let aspirants;
    let noticeSendRows;
    let ago;

    loading = await this.mother.loadingRun();
    ago = new Date();
    ago.setMonth(ago.getMonth() - 12);
    aspirants = await ajaxJson({ noFlat: true, whereQuery: { "submit.partnership.date": { $gte: ago } } }, BACKHOST + "/getAspirants", { equal: true });
    noticeSendRows = await ajaxJson({ mode: "get" }, SECONDHOST + "/noticeAspirantConsole", { equal: true });

    this.members = await ajaxJson({ type: "get" }, BACKHOST + "/getMembers", { equal: true });
    GeneralJs.stacks.members = this.members;

    this.aspirants = aspirants;
    this.aspirantMatrix = null;
    this.valueTargetClassName = "valueTargetClassName";
    this.valueCaseClassName = "valueCaseClassName";
    this.standardCaseClassName = "standardCaseClassName";
    this.idNameAreaClassName = "idNameAreaClassName";
    this.valueAreaClassName = "valueAreaClassName";
    this.titleButtonsClassName = "titleButtonsClassName";
    this.whiteCardClassName = "whiteCardClassName";
    this.whiteBaseClassName = "whiteBaseClassName";
    this.processDetailEventClassName = "processDetailEventClassName";
    this.whiteCardMode = "aspirant";
    this.asyncProcessText = "로드중..";
    this.noticeSendRows = noticeSendRows;

    await this.aspirantBase();
    await this.aspirantSearchEvent();
    await this.aspirantExtractEvent();
    this.communicationRender();

    loading.parentNode.removeChild(loading);

    if (getObj.aspid !== undefined) {
      const tempFunction = instance.aspirantWhiteCard(getObj.aspid);
      await tempFunction(new Event("click"));
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.calculationBaseMaker = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip, removeByClass } = GeneralJs;
  let target;

  this.desid = desid;
  this.fixTargets = [];

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
  }

  target = null;
  for (let i = 0; i < this.standardDoms.length; i++) {
    if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
      if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
        target = i;
      }
    }
  }
  for (let i = 1; i < this.standardDoms.length; i++) {
    if (i !== target) {
      this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
    } else {
      this.standardDoms[i].style.color = colorChip.green;
      if (i !== 1) {
        if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
          standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
        }
      } else {
        standardBar.parentElement.scrollTo({ top: 0 });
      }
    }
  }

  this.calculationCareerDetail(desid);
  if (callback !== null) {
    if (typeof callback === "function") {
      callback();
    }
  }

}

DesignerJs.prototype.calculationCareerDetail = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  let margin;
  let baseTong0, baseTong;
  let topMargin, leftMargin, bottomMargin;
  let baseTongMarginBottom;
  let baseTongPaddingTop, baseTongPaddingBottom;
  let mobileOuterMargin;
  let resultAreaWidth;
  let areaBetween;
  let bottomAreaHeight;
  let infoContents;
  let up, down;
  let upLeft, upRight, downLeft, downRight;
  let infoInnerMargin;
  let blockHeight;
  let blockBetween;
  let valueInfoWidth;
  let number;
  let fontSize;
  let nameTextTop;
  let textTop;
  let nameSize;
  let maxWidth;
  let blankMargin;

  margin = 8;
  topMargin = 30;
  leftMargin = 34;
  bottomMargin = 15;
  baseTongMarginBottom = 80;

  bottomAreaHeight = 420;

  resultAreaWidth = 300;
  areaBetween = 16;

  infoInnerMargin = 18;

  blockHeight = 40;
  blockBetween = 3;

  valueInfoWidth = 160;

  fontSize = 14;
  nameSize = 15;
  nameTextTop = -1;
  textTop = isMac() ? -1 : 1;

  maxWidth = 2000;
  blankMargin = 16;

  infoContents = [
    {
      name: "A",
      description: "디자이너로서 홈스타일링 서비스(가구, 패브릭, 소품 등 고객의 요구 사항에 맞게 프로세스가 있는 스타일링)를 제공 한 경우",
      value: 1,
      valueInfo: "100% 경력 인정",
    },
    {
      name: "B",
      description: "디자이너로서 홈스타일링 서비스를 제공하지 않고, 거주 공간 인테리어 시공 관련 서비스만 제공한 경우",
      value: 0.9,
      valueInfo: "90% 경력 인정",
    },
    {
      name: "C",
      description: "기업에 속해있는 디자이너로서 공간 / 인테리어 관련 프로젝트 진행 시, 클라이언트를 직접 응대한 서비스를 제공한 경우",
      value: 0.8,
      valueInfo: "80% 경력 인정",
    },
    {
      name: "D",
      description: "인테리어 연관 직종 1 - 공간을 토대로 하여 인체에 고려된 적합한 사이즈로 가구를 제작하고, 설치, 가구 디자인 제안",
      value: 0.6,
      valueInfo: "60% 경력 인정",
    },
    {
      name: "E",
      description: "인테리어 연관 직종 2 - 제품 디자인, 조명 디자인, 패브릭 디자인 등",
      value: 0.4,
      valueInfo: "40% 경력 인정",
    },
    {
      name: "F",
      description: "관련 전공이나 고객 응대 경력 없이 '수강'만을 통해 홈스타일링의 과정을 인지하고 있는 정도의 디자이너",
      value: 0,
      valueInfo: "경력 인정하지 않음",
    },
  ];

  bottomAreaHeight = ((blockHeight + blockBetween) * infoContents.length) + (infoInnerMargin + infoInnerMargin - blockBetween);

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(margin * 3) + ea : String(0),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2), ea),
      height: "auto",
      animation: "",
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      display: "block",
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: colorChip.white,
      paddingTop: String(topMargin) + ea,
      paddingLeft: String(topMargin) + ea,
      width: withOut(topMargin * 2, ea),
      height: "calc(100vh - " + String(belowHeight) + "px - " + String(margin * 3 * 2) + "px - " + String(topMargin) + ea + ")",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
    }
  });

  this.mainBaseTong = baseTong0;

  up = createNode({
    mother: baseTong,
    style: {
      display: "flex",
      flexDirection: "row",
      position: "relative",
      width: withOut(topMargin, ea),
      height: withOut(bottomAreaHeight + areaBetween + topMargin, ea),
      justifyContent: "start",
      alignItems: "start",
      marginBottom: String(areaBetween) + ea,
    },
    children: [
      {
        style: {
          display: "inline-flex",
          border: "1px solid " + colorChip.gray3,
          flexDirection: "column",
          width: withOut(resultAreaWidth + areaBetween, ea),
          height: withOut(0, ea),
          borderRadius: String(5) + "px",
          boxSizing: "border-box",
        }
      },
      {
        style: {
          display: "inline-flex",
          border: "1px solid " + colorChip.gray3,
          flexDirection: "column",
          width: String(resultAreaWidth) + ea,
          marginLeft: String(areaBetween) + ea,
          height: withOut(0, ea),
          borderRadius: String(5) + "px",
          boxSizing: "border-box",
        }
      }
    ]
  });
  [ upLeft, upRight ] = [ ...up.children ];

  down = createNode({
    mother: baseTong,
    style: {
      display: "flex",
      flexDirection: "row",
      position: "relative",
      width: withOut(topMargin, ea),
      height: String(bottomAreaHeight) + ea,
      justifyContent: "start",
      alignItems: "start",
      marginBottom: String(areaBetween) + ea,
    },
    children: [
      {
        style: {
          display: "inline-flex",
          flexDirection: "column",
          padding: String(infoInnerMargin) + ea,
          paddingBottom: String(infoInnerMargin - blockBetween) + ea,
          width: withOut(resultAreaWidth + areaBetween, ea),
          height: withOut(0, ea),
          borderRadius: String(5) + "px",
          boxSizing: "border-box",
          background: colorChip.gray2,
        }
      },
      {
        style: {
          display: "inline-flex",
          border: "1px solid " + colorChip.gray3,
          flexDirection: "column",
          width: String(resultAreaWidth) + ea,
          marginLeft: String(areaBetween) + ea,
          height: withOut(0, ea),
          borderRadius: String(5) + "px",
          boxSizing: "border-box",
        }
      }
    ]
  });
  [ downLeft, downRight ] = [ ...down.children ];

  number = 0;
  for (let { name, description, value, valueInfo } of infoContents) {

    createNode({
      mother: downLeft,
      style: {
        display: "flex",
        flexDirection: "row",
        position: "relative",
        height: String(blockHeight) + ea,
        marginBottom: String(blockBetween) + ea,
        width: withOut(0, ea),
      },
      children: [
        {
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(blockHeight) + ea,
            height: String(blockHeight) + ea,
            borderRadius: String(1) + "px",
            borderTopLeftRadius: number === 0 ? String(5) + "px" : String(1) + "px",
            borderBottomLeftRadius: number === infoContents.length - 1 ? String(5) + "px" : String(1) + "px",
            background: colorChip.darkDarkShadow,
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            text: name,
            style: {
              display: "inline-block",
              position: "relative",
              fontSize: String(nameSize) + ea,
              fontWeight: String(500),
              color: colorChip.white,
              fontFamily: "graphik",
              top: String(nameTextTop) + ea,
            }
          }
        },
        {
          style: {
            display: "inline-flex",
            position: "relative",
            width: withOut(blockHeight + valueInfoWidth + (blockBetween * 2), ea),
            height: String(blockHeight) + ea,
            background: colorChip.white,
            marginLeft: String(blockBetween) + ea,
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            style: {
              display: "block",
              position: "relative",
              width: withOut(blankMargin * 2, ea),
              height: withOut(0, ea),
              overflow: "scroll",
              textAlign: "center",
            },
            child: {
              style: {
                display: "flex",
                position: "relative",
                width: String(maxWidth) + "px",
                left: withOut(50, maxWidth / 2, "px"),
                height: withOut(0, ea),
                justifyContent: "center",
                alignItems: "center",
              },
              child: {
                text: description,
                style: {
                  display: "inline-block",
                  position: "relative",
                  fontSize: String(fontSize) + ea,
                  fontWeight: String(400),
                  color: colorChip.black,
                  top: String(textTop) + ea,
                }
              }
            }
          }
        },
        {
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(valueInfoWidth) + ea,
            height: String(blockHeight) + ea,
            borderRadius: String(1) + "px",
            borderTopRightRadius: number === 0 ? String(5) + "px" : String(1) + "px",
            borderBottomRightRadius: number === infoContents.length - 1 ? String(5) + "px" : String(1) + "px",
            background: colorChip.white,
            marginLeft: String(blockBetween) + ea,
            justifyContent: "center",
            alignItems: "center",
          },
          child: {
            text: valueInfo,
            style: {
              display: "inline-block",
              position: "relative",
              fontSize: String(fontSize) + ea,
              fontWeight: String(700),
              color: colorChip.green,
              top: String(textTop) + ea,
            }
          }
        },
      ]
    })

    number++;
  }


}

DesignerJs.prototype.calculationView = async function () {
  const instance = this;
  const { ea, belowHeight, grayBarWidth } = this;
  const { colorChip, ajaxJson, sleep, returnGet, withOut } = GeneralJs;
  try {
    const loading = await this.mother.loadingRun();
    const getObj = returnGet();
    const entireMode = getObj.dataonly === "true" && getObj.entire === "true";
    let designers, length;
    let standardBar_mother, style;
    let motherHeight;
    let children, childrenLength;
    let standardBar;
    let totalMother;

    if (!entireMode) {
      this.backGrayBar();
    }
    await this.spreadData(null, true, null);

    designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    length = designers.length;
    this.designers = new Designers(designers);
    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");


    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //standard doms event
    totalMother = this.totalMother;
    standardBar = totalMother.firstChild;
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }

    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.calculationBaseMaker(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    loading.parentNode.removeChild(loading);

    // launching
    this.calculationBaseMaker(this.desid);


  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.calendarBase = function (search = null) {
  const instance = this;
  const { ea, belowHeight } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const { white, green } = colorChip;
  let totalMother;
  let margin;
  let titleHeight;
  let titleArea, contentsArea;
  let titleDesigner, titleProject, titleTime;
  let contentsDesigner, contentsProject, contentsTime;
  let designerWidth, projectWidth;
  let size;
  let borderBack;
  let dashBoardHeight, dashBoardMargin;
  let dashBoard;

  titleHeight = 34;
  margin = 30;
  designerWidth = 110;
  projectWidth = 110;
  size = 18;
  dashBoardHeight = 49;
  dashBoardMargin = 16;

  totalMother = createNode({
    mother: document.getElementById("totalcontents"),
    class: [ "totalMother" ],
    style: {
      position: "fixed",
      top: String(0),
      left: String(0),
      paddingTop: String(margin) + ea,
      paddingLeft: String(margin) + ea,
      paddingRight: String(margin) + ea,
      width: withOut(margin * 2, ea),
      height: withOut(margin + belowHeight, ea),
      opacity: String(0),
    }
  });
  this.totalMother = totalMother;

  [ borderBack, dashBoard, titleArea, contentsArea ] = createNodes([
    {
      mother: totalMother,
      style: {
        position: "absolute",
        top: String(margin + dashBoardHeight + dashBoardMargin + titleHeight) + ea,
        left: String(margin) + ea,
        width: withOut(margin * 2, ea),
        height: withOut(margin + dashBoardHeight + dashBoardMargin + titleHeight, ea),
        border: "1px solid " + colorChip.gray4,
        borderBottom: String(0),
        borderTopLeftRadius: String(5) + "px",
        borderTopRightRadius: String(5) + "px",
        boxSizing: "border-box",
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        height: String(dashBoardHeight) + ea,
        marginBottom: String(dashBoardMargin) + ea,
        background: colorChip.gray1,
        borderRadius: String(3) + "px",
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        height: String(titleHeight) + ea,
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        height: withOut(dashBoardHeight + dashBoardMargin + titleHeight, ea),
      }
    },
    {
      mother: totalMother,
      style: {
        position: "absolute",
        top: String(margin + dashBoardHeight + dashBoardMargin + titleHeight) + ea,
        left: String(margin) + ea,
        width: String(designerWidth + projectWidth + 1) + ea,
        height: withOut(margin + dashBoardHeight + dashBoardMargin + titleHeight, ea),
        border: "1px solid " + colorChip.gray4,
        borderBottom: String(0),
        borderTopLeftRadius: String(5) + "px",
        boxSizing: "border-box",
        zIndex: String(1),
      }
    },
  ]);

  [ titleDesigner, titleProject, titleTime ] = createNodes([
    {
      mother: titleArea,
      style: {
        display: "inline-block",
        position: "relative",
        height: String(100) + '%',
        width: String(designerWidth) + ea,
      }
    },
    {
      mother: titleArea,
      style: {
        display: "inline-block",
        position: "relative",
        height: String(100) + '%',
        width: String(projectWidth) + ea,
      }
    },
    {
      mother: titleArea,
      style: {
        display: "inline-block",
        position: "relative",
        height: String(100) + '%',
        width: withOut(designerWidth + projectWidth, ea),
        overflow: "hidden",
      }
    },
  ]);

  [ contentsTime ] = createNodes([
    {
      mother: contentsArea,
      style: {
        display: "inline-block",
        position: "relative",
        height: String(100) + '%',
        width: withOut(1, ea),
        top: String(1) + ea,
        boxSizing: "border-box",
        overflowY: "scroll",
        overflowX: "hidden",
      }
    },
  ]);

  createNodes([
    {
      mother: titleDesigner,
      text: "D",
      style: {
        position: "absolute",
        fontSize: String(size) + ea,
        fontWeight: String(500),
        fontFamily: "graphik",
        width: String(100) + '%',
        textAlign: "center",
      }
    },
    {
      mother: titleProject,
      text: "P",
      style: {
        position: "absolute",
        fontSize: String(size) + ea,
        fontWeight: String(500),
        fontFamily: "graphik",
        width: String(100) + '%',
        textAlign: "center",
      }
    },
  ]);

  this.calendarSpec.contentsTime = contentsTime;
  this.calendarSpec.designerWidth = designerWidth;
  this.calendarSpec.projectWidth = projectWidth;
  this.calendarDashBoard = dashBoard;

  this.calendarTitleTime(titleTime);
  this.calendarContentsTime(search);
}

DesignerJs.prototype.calendarMatrix = function () {
  const instance = this;
  const { getDateMatrix } = GeneralJs;
  const zeroAddition = function (num) {
    if (num < 10) {
      return `0${String(num)}`;
    } else {
      return String(num);
    }
  }
  class CalendarMatrixFactor {
    getEntireWidth(width, margin) {
      if (typeof width === "number" && typeof margin === "number") {
        return ((width * this.children.length) + (margin * (this.children.length - 1)) + (margin * 3));
      } else {
        throw new Error("invaild arguments");
      }
    }
  }
  class CalendarMatrix extends Array {
    constructor() {
      super();
      this.today = new Date();
      this.year = this.today.getFullYear();
      this.month = this.today.getMonth() + 1;
      this.date = this.today.getDate();
      this.day = this.today.getDay();
      const firstDate = new Date(this.year, this.month - 1, 1);
      const day = firstDate.getDay();
      const add = day !== 0 ? day - 1 : 6;
      this.weekOrder = Math.ceil((add + this.date) / 7);
    }
    getEntireWidth(width, margin) {
      if (typeof width === "number" && typeof margin === "number") {
        let total;
        total = 0;
        for (let i of this) {
          total += i.getEntireWidth(width, margin);
        }
        return total;
      } else {
        throw new Error("invaild arguments");
      }
    }
  }
  const length = 18;
  let past, future;
  let date, week;
  let dateMatrix;
  let tempArr, tempObj;
  let today;
  let complex;
  let final;
  let pastMonth;

  today = new Date();
  past = today.valueOf();
  today.setMonth(today.getMonth() + length);
  future = today.valueOf();

  date = (((((future - past) / 1000) / 60) / 60) / 24);
  week = Math.floor(date / 7);

  today = new Date();
  dateMatrix = [];
  for (let i = 0; i < week; i++) {
    tempArr = [];
    tempArr.push([ today.getFullYear(), today.getMonth() + 1, today.getDate() ]);
    if (i === 0) {
      if (today.getDay() !== 1) {
        if (today.getDay() !== 0) {
          today.setDate(today.getDate() + 7 - today.getDay());
        }
      } else {
        today.setDate(today.getDate() + 6);
      }
    } else {
      today.setDate(today.getDate() + 6);
    }
    tempArr.push([ today.getFullYear(), today.getMonth() + 1, today.getDate() ]);
    today.setDate(today.getDate() + 1);
    dateMatrix.push(tempArr);
  }

  complex = [];
  for (let i = 0; i < dateMatrix.length; i++) {
    tempObj = {};
    if (dateMatrix[i][0][1] === dateMatrix[i][1][1]) {
      tempObj.year = dateMatrix[i][0][0];
      tempObj.month = dateMatrix[i][0][1];
    } else {
      if (dateMatrix[i][1][2] > 3) {
        tempObj.year = dateMatrix[i][1][0];
        tempObj.month = dateMatrix[i][1][1];
      } else {
        tempObj.year = dateMatrix[i][0][0];
        tempObj.month = dateMatrix[i][0][1];
      }
    }
    tempObj.start = `${String(dateMatrix[i][0][0])}-${zeroAddition(dateMatrix[i][0][1])}-${zeroAddition(dateMatrix[i][0][2])}`;
    tempObj.end = `${String(dateMatrix[i][1][0])}-${zeroAddition(dateMatrix[i][1][1])}-${zeroAddition(dateMatrix[i][1][2])}`;

    complex.push(tempObj);
  }

  final = new CalendarMatrix();
  pastMonth = null;
  tempObj = new CalendarMatrixFactor();
  for (let i = 0; i < complex.length; i++) {
    if (pastMonth === complex[i].month) {
      tempObj.children.push(complex[i]);
    } else {
      tempObj = new CalendarMatrixFactor();
      tempObj.year = complex[i].year;
      tempObj.month = complex[i].month;
      tempObj.children = [];
      tempObj.children.push(complex[i]);
      final.push(tempObj);
    }
    pastMonth = complex[i].month;
  }

  return final;
}

DesignerJs.prototype.calendarTitleTime = function (mother) {
  const instance = this;
  const { ea, designers } = this;
  const { width, margin, height } = this.moduleBox;
  const { createNode, createNodes, colorChip, ajaxJson, withOut } = GeneralJs;
  const matrix = this.matrix;
  let nodeArr;
  let size;
  let totalWidth;
  let tempObj;
  let entireTong;

  size = 18;

  totalWidth = matrix.getEntireWidth(width, margin);

  entireTong = createNode({
    mother,
    class: [ "moveTarget" ],
    style: {
      position: "relative",
      width: String(totalWidth) + ea,
      height: String(height) + ea,
      marginLeft: String((margin * 4) - 1) + ea,
      borderRadius: String(3) + "px",
    }
  });
  nodeArr = [];
  this.calendarMonthY = {};
  for (let i = 0; i < matrix.length; i++) {
    tempObj = {
      mother: entireTong,
      class: [ "hoverDefault" ],
      attribute: [
        { query: "y" + String(matrix[i].year) + "m" + String(matrix[i].month) }
      ],
      events: [
        {
          type: "click",
          event: function (e) {
            e.preventDefault();
            e.stopPropagation();
            const thisQuery = this.getAttribute("query");
            const tong = instance.calendarMonthY;
            const on = String(1);
            const off = String(0.3);
            let boo, arr;

            boo = false;
            for (let i in tong) {
              if (tong[i] === "off") {
                boo = true;
                break;
              }
            }

            if (!boo) {
              for (let i in tong) {
                if (i !== thisQuery) {
                  tong[i] = "off";
                  arr = document.querySelectorAll('.' + i);
                  for (let j of arr) {
                    j.style.opacity = off;
                  }
                } else {
                  tong[i] = "on";
                }
              }
            } else {
              if (tong[thisQuery] === "off") {
                arr = document.querySelectorAll('.' + thisQuery);
                for (let j of arr) {
                  j.style.opacity = on;
                }
                tong[thisQuery] = "on";
              } else {
                arr = document.querySelectorAll('.' + thisQuery);
                for (let j of arr) {
                  j.style.opacity = off;
                }
                tong[thisQuery] = "off";
              }
            }

          }
        },
        {
          type: "contextmenu",
          event: function (e) {
            e.preventDefault();
            e.stopPropagation();
            const tong = instance.calendarMonthY;
            const on = String(1);
            for (let i in tong) {
              tong[i] = "on";
              arr = document.querySelectorAll('.' + i);
              for (let j of arr) {
                j.style.opacity = on;
              }
            }
          }
        }
      ],
      style: {
        display: "inline-block",
        position: "relative",
        width: String(matrix[i].getEntireWidth(width, margin)) + ea,
        height: String(height) + ea,
      }
    };
    nodeArr.push(tempObj);
    tempObj = {
      mother: -1,
      text: String(matrix[i].month),
      style: {
        position: "absolute",
        top: String(0) + ea,
        left: String(1) + ea,
        fontSize: String(size) + ea,
        fontFamily: "graphik",
        fontWeight: String(500),
      }
    };
    nodeArr.push(tempObj);
    this.calendarMonthY["y" + String(matrix[i].year) + "m" + String(matrix[i].month)] = "on";
  }
  createNodes(nodeArr);
}

DesignerJs.prototype.calendarMonthYSearch = function (arr) {
  if (!Array.isArray(arr)) {
    throw new Error("invaild input");
  }
  const instance = this;
  const tong = this.calendarMonthY;
  let targetMonth;
  let tempArr;

  targetMonth = [];
  for (let i of arr) {
    if ((i.trim() !== '') && !Number.isNaN(Number(i.replace(/[^0-9]/g, '')))) {
      targetMonth.push(Number(i.replace(/[^0-9]/g, '')));
    }
  }

  if (targetMonth.includes(0)) {
    for (let i in tong) {
      tong[i] = "on";
    }
  } else {
    for (let i in tong) {
      tempArr = i.split('m');
      if (tempArr.length !== 2) {
        throw new Error("tong error");
      }
      if (targetMonth.includes(Number(tempArr[1].replace(/[^0-9]/g, '')))) {
        tong[i] = "on";
      } else {
        tong[i] = "off";
      }
    }
  }
}

DesignerJs.prototype.calendarContentsTime = async function (search = null, loadingIcon = null) {
  const instance = this;
  const { ea } = this;
  const { createNode, createNodes, colorChip, ajaxJson, withOut, cleanChildren, isMac } = GeneralJs;
  const { contentsTime: mother, designerWidth: box0Width, projectWidth: box1Width } = this.calendarSpec;
  const { DateX, DesignerDate, DesignerDates } = this.calendarDateClass;
  let designers;
  try {
    if (mother.firstChild !== null && mother.firstChild !== undefined) {
      cleanChildren(mother);
    }
    if (search === null || search === undefined) {
      designers = this.designers;
    } else if (typeof search === "string") {
      if (/^d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]$/i.test(search.trim())) {
        designers = this.designers.search(search);
      } else {
        this.calendarPastQueries.push(search);
        if (search !== '0') {
          // if (/^[0-9]+$/.test(search.replace(/[\,\.\/ ]/g, '').trim())) {
          //   if (this.calendarPastQueries.length > 1) {
          //     search = this.calendarPastQueries[this.calendarPastQueries.length - 2].replace(/0/g, '') + ',' + search;
          //   }
          // }
        }
        if (/[0-9]/g.test(search)) {
          this.calendarMonthYSearch([ ...search.replace(/[^0-9\,]/g, '').split(',') ]);
          search = search.replace(/[0-9]/g, '');
        }
        designers = this.designers.search(search);
      }
    } else {
      throw new Error("invaild search");
    }

    const { width, margin, height } = this.moduleBox;
    const { classNameX, classNameY, classNameXY, classNameTextY, classNameDesid, classDesignerBox, classCalendarBarName } = this.calendarClass;
    const matrix = this.matrix;
    const stringToDate = function (str) {
      if (!/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$/.test(str)) {
        throw new Error("invaild input");
      }
      const arr = str.split('-');
      return new Date(Number(arr[0]), Number(arr[1].replace(/^0/, '')) - 1, Number(arr[2].replace(/^0/, '')));
    }
    this.detailTimeEvent = function (e) {
      const that = this;
      const { ea } = instance;
      const x = Number(this.getAttribute('x'));
      const y = Number(this.getAttribute('y'));
      const text = this.getAttribute("value");
      const meeting = this.getAttribute("meeting");
      const possibleTimes = (this.getAttribute("possible") === "true");
      const start = this.getAttribute("start");
      const end = this.getAttribute("end");
      const spot = this.getAttribute("spot");
      const { createNodes, colorChip, withOut, isMac } = GeneralJs;
      let width, height, outerMargin, margin;
      let doms;
      let nodeArr;
      let topMargin, leftMargin, bottomMargin;
      let size;

      width = 218;
      height = meeting !== "on" ? (isMac() ? 82 : 80) : 58;
      outerMargin = 10;
      margin = 5;

      size = 17;
      topMargin = isMac() ? 10 : 13;
      leftMargin = 18;
      bottomMargin = 7;

      if (this.getAttribute("memo") !== "on") {

        nodeArr = [
          {
            mother: this,
            mode: "aside",
            events: [
              {
                type: "click",
                event: function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                }
              },
              {
                type: "contextmenu",
                event: function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  const doms = that.querySelectorAll("aside");
                  for (let dom of doms) {
                    that.removeChild(dom);
                  }
                  that.setAttribute("memo", "off");
                }
              },
            ],
            style: {
              position: y < 0 ? "fixed" : "absolute",
              width: String(width) + ea,
              height: String(height) + ea,
              top: String(y < 0 ? this.getBoundingClientRect().top - height - outerMargin : -1 * (height + outerMargin)) + ea,
              left: y < 0 ? String(this.getBoundingClientRect().left + (this.getBoundingClientRect().width / 2) - (width / 2)) + ea : withOut(50, width / 2, ea),
              background: meeting === "on" ? colorChip.red : (!possibleTimes ? colorChip.gradientGreen : colorChip.yellow),
              borderRadius: String(3) + "px",
              zIndex: String(3),
              opacity: String(0.95),
              boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
            }
          },
          {
            mother: -1,
            style: {
              position: "absolute",
              width: withOut(margin * 2, ea),
              height: withOut(margin * 2, ea),
              top: String(margin) + ea,
              left: String(margin) + ea,
              borderRadius: String(3) + "px",
              background: colorChip.white,
            }
          }
        ];

        nodeArr.push({
          mother: -1,
          text: "시작 날짜 : ",
          style: {
            position: "absolute",
            top: String(topMargin) + ea,
            left: String(leftMargin) + ea,
            fontSize: String(size) + ea,
            fontWeight: String(600),
          }
        });
        nodeArr.push({
          mother: -2,
          mode: "input",
          attribute: [
            { value: /_/g.test(spot) ? (spot.split('_')[0] !== "null" ? spot.split('_')[0] : start.split('_')[0]) : (spot !== "null" ? spot : start) },
            { type: "text" },
          ],
          events: [
            {
              type: "blur",
              event: function (e) {
                if (/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$/.test(this.value.trim())) {
                  const desid = that.getAttribute("desid");
                  const proid = that.getAttribute("proid");
                  const x = /_/g.test(that.getAttribute("x")) ? that.getAttribute("x").split('_')[0] : that.getAttribute("x");
                  const y = that.getAttribute("y");
                  const target = document.getElementById(classNameDesid + '-' + desid + '-' + proid + '-' + x);
                  const startDate = stringToDate(target.getAttribute("start"));
                  const endDate = stringToDate(target.getAttribute("end"));
                  const thisDate = stringToDate(this.value.trim());
                  if (thisDate.valueOf() >= startDate.valueOf() && thisDate.valueOf() <= endDate.valueOf()) {
                    target.setAttribute("spot", this.value.trim());
                    if (/_/g.test(spot)) {
                      that.setAttribute("spot", this.value.trim() + '_' + spot.split('_')[1]);
                    }
                    instance.calendarData.updateByDoms(document.querySelectorAll('.' + instance.calendarClass.classNameY + '_' + y), x, e.type, e.altKey).then((resultNumber) => {
                      if (resultNumber !== 1) {
                        throw new Error("update error");
                      }
                    }).catch((err) => {
                      console.log(err);
                    });
                  } else {
                    this.value = (/_/g.test(spot) ? (spot.split('_')[0] !== "null" ? spot.split('_')[0] : start.split('_')[0]) : (spot !== "null" ? spot : start));
                  }
                } else {
                  this.value = (/_/g.test(spot) ? (spot.split('_')[0] !== "null" ? spot.split('_')[0] : start.split('_')[0]) : (spot !== "null" ? spot : start));
                }
              }
            }
          ],
          style: {
            position: "absolute",
            top: String(topMargin) + ea,
            right: String(leftMargin + 1) + ea,
            fontSize: String(size) + ea,
            border: String(0),
            outline: String(0),
            width: String(98) + ea,
            textAlign: "right",
            fontWeight: String(200),
          }
        });

        if (meeting !== "on") {
          nodeArr.push({
            mother: -3,
            text: "종료 날짜 : ",
            style: {
              position: "absolute",
              top: String(size + bottomMargin + topMargin) + ea,
              left: String(leftMargin) + ea,
              fontSize: String(size) + ea,
              fontWeight: String(600),
            }
          });
          nodeArr.push({
            mother: -4,
            mode: "input",
            attribute: [
              { value: /_/g.test(spot) ? (spot.split('_')[1] !== "null" ? spot.split('_')[1] : end.split('_')[1]) : (spot !== "null" ? spot : end) },
              { type: "text" },
            ],
            events: [
              {
                type: "blur",
                event: function (e) {
                  if (/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$/.test(this.value.trim())) {
                    const desid = that.getAttribute("desid");
                    const proid = that.getAttribute("proid");
                    const x = /_/g.test(that.getAttribute("x")) ? that.getAttribute("x").split('_')[1] : that.getAttribute("x");
                    const y = that.getAttribute("y");
                    const target = document.getElementById(classNameDesid + '-' + desid + '-' + proid + '-' + x);
                    const startDate = stringToDate(target.getAttribute("start"));
                    const endDate = stringToDate(target.getAttribute("end"));
                    const thisDate = stringToDate(this.value.trim());
                    if (thisDate.valueOf() >= startDate.valueOf() && thisDate.valueOf() <= endDate.valueOf()) {
                      target.setAttribute("spot", this.value.trim());
                      if (/_/g.test(spot)) {
                        that.setAttribute("spot", spot.split('_')[1] + '_' + this.value.trim());
                      }
                      instance.calendarData.updateByDoms(document.querySelectorAll('.' + instance.calendarClass.classNameY + '_' + y), x, e.type, e.altKey).then((resultNumber) => {
                        if (resultNumber !== 1) {
                          throw new Error("update error");
                        }
                      }).catch((err) => {
                        console.log(err);
                      });
                    } else {
                      this.value = (/_/g.test(spot) ? (spot.split('_')[1] !== "null" ? spot.split('_')[1] : end.split('_')[1]) : (spot !== "null" ? spot : end));
                    }
                  } else {
                    this.value = (/_/g.test(spot) ? (spot.split('_')[1] !== "null" ? spot.split('_')[1] : end.split('_')[1]) : (spot !== "null" ? spot : end));
                  }
                }
              }
            ],
            style: {
              position: "absolute",
              top: String(size + bottomMargin + topMargin) + ea,
              right: String(leftMargin + 1) + ea,
              fontSize: String(size) + ea,
              border: String(0),
              outline: String(0),
              width: String(98) + ea,
              textAlign: "right",
              fontWeight: String(200),
            }
          });
        }

        createNodes(nodeArr);
        this.setAttribute("memo", "on");

      } else {
        doms = this.querySelectorAll("aside");
        for (let dom of doms) {
          this.removeChild(dom);
        }
        this.setAttribute("memo", "off");
      }

    }
    this.moduleEvent = function (e) {
      if (e.cancelable) {
        e.preventDefault();
      }
      e.stopPropagation();
      const that = this;
      const { createNode, cleanChildren, colorChip, isMac } = GeneralJs;
      const x = Number(this.getAttribute('x'));
      const y = Number(this.getAttribute('y'));
      const toggle = this.getAttribute("toggle");
      const text = this.getAttribute("value");
      const possibleTimes = (this.getAttribute("possible") === "true");
      const lineDoms = document.querySelectorAll('.' + classNameY + '_' + y);
      let num, domX;
      let tempArr, tempDom;
      let textDom;
      let firstDom, lastDom;
      let directNum;
      let linkFirstNum, linkLastNum;
      let size0, size1;
      let textTop0, textTop1;
      let calendarBar;
      let updateBoo;

      size0 = 16;
      size1 = 17;
      textTop0 = isMac() ? 6 : 8;
      textTop1 = 3;

      if (toggle === "off") {
        updateBoo = true;
        num = 0;
        directNum = 0;
        for (let dom of lineDoms) {
          if (dom.getAttribute("toggle") === "on") {
            num = num + 1;
            if (dom.getAttribute("link") !== "on" && dom.getAttribute("meeting") !== "on") {
              domX = Number(dom.getAttribute('x'));
            }
          }
          if (dom.getAttribute("direct") === "on") {
            directNum = directNum + 1;
          }
        }
        if (directNum % 2 === 0 || (e.type === "contextmenu" && !possibleTimes)) {
          this.style.background = !possibleTimes ? (e.type === "click" ? colorChip.gradientGreen4 : colorChip.red) : colorChip.yellow;
          this.setAttribute("toggle", "on");
          if (!possibleTimes) {
            if (e.type === "click") {
              this.setAttribute("direct", "on");
            } else {
              this.setAttribute("meeting", "on");
            }
          } else {
            this.setAttribute("direct", "on");
          }

        } else if (directNum % 2 === 1) {
          tempArr = [];
          tempArr.push(x);
          tempArr.push(domX);
          tempArr.sort((a, b) => { return a - b; });
          for (let i = tempArr[0]; i < tempArr[1] + 1; i++) {
            tempDom = document.querySelector('.' + classNameXY + '_' + String(i) + '_' + String(y));
            tempDom.style.background = !possibleTimes ? colorChip.gradientGreen4 : colorChip.yellow;
            tempDom.setAttribute("toggle", "on");
            tempDom.setAttribute("link", "on");
            if (i === tempArr[0]) {
              firstDom = tempDom;
            }
            if (i === tempArr[1]) {
              lastDom = tempDom;
            }
            if (i !== tempArr[0] && i !== tempArr[1] && possibleTimes) {
              createNode({
                mother: tempDom,
                attribute: [ { value: text } ],
                text: "가능",
                style: {
                  position: "absolute",
                  width: String(width) + ea,
                  textAlign: "center",
                  fontSize: String(size0) + ea,
                  top: String(textTop0) + ea,
                  fontWeight: String(300),
                  color: colorChip.white,
                  zIndex: String(2),
                }
              });
            }
          }
          firstDom.setAttribute("direct", "on");
          lastDom.setAttribute("direct", "on");
          if (!possibleTimes) {
            calendarBar = createNode({
              mother: firstDom,
              class: [ classCalendarBarName ],
              attribute: [
                { value: text },
                { start: firstDom.getAttribute("start") + "_" + lastDom.getAttribute("start") },
                { end: firstDom.getAttribute("end") + "_" + lastDom.getAttribute("end") },
                { spot: firstDom.getAttribute("spot") + "_" + lastDom.getAttribute("spot") },
                { x: firstDom.getAttribute("x") + "_" + lastDom.getAttribute("x") },
                { y: firstDom.getAttribute("y") },
                { desid: firstDom.getAttribute("desid") },
                { proid: firstDom.getAttribute("proid") }
              ],
              events: [
                {
                  type: "click",
                  event: function (e) {
                    if (e.cancelable) {
                      e.preventDefault();
                    }
                    if (this.getAttribute("memo") === "on") {
                      e.stopPropagation();
                      instance.detailTimeEvent.call(this, e);
                    }
                  }
                },
                {
                  type: "contextmenu",
                  event: function (e) {
                    if (e.cancelable) {
                      e.preventDefault();
                    }
                    e.stopPropagation();
                    instance.detailTimeEvent.call(this, e);
                  }
                },
              ],
              style: {
                position: "absolute",
                width: String(lastDom.getBoundingClientRect().left - firstDom.getBoundingClientRect().left + width) + ea,
                top: String(0) + ea,
                left: String(0) + ea,
                height: String(100) + '%',
                background: colorChip.gradientGreen4,
                borderRadius: String(3) + "px",
                zIndex: String(2),
              }
            });
            firstDom.appendChild(firstDom.firstChild);
          }
        }

        if (!possibleTimes) {
          textDom = createNode({
            mother: this,
            attribute: [ { value: text } ],
            text: e.type === "click" ? text : "미팅",
            style: {
              position: "absolute",
              width: String(width) + ea,
              textAlign: "center",
              fontSize: String(e.type === "click" ? size1 : size0) + ea,
              top: String(e.type === "click" ? textTop1 : textTop0) + ea,
              fontFamily: e.type === "click" ? "graphik" : "",
              fontWeight: String(300),
              color: colorChip.whiteBlack,
              zIndex: String(2),
            }
          });
          textDom.style.wordSpacing = String(-4) + ea;
        } else {
          createNode({
            mother: this,
            attribute: [ { value: text } ],
            text: "가능",
            style: {
              position: "absolute",
              width: String(width) + ea,
              textAlign: "center",
              fontSize: String(size0) + ea,
              top: String(textTop0) + ea,
              fontWeight: String(300),
              color: colorChip.white,
              zIndex: String(2),
            }
          });
        }

      } else {

        updateBoo = false;

        if (e.type === "click" && this.getAttribute("memo") !== "on") {

          if (e.altKey) {
            updateBoo = true;
            if (this.getAttribute("link") === "off") {
              this.style.background = !possibleTimes ? colorChip.gray2 : colorChip.gray3;
              this.setAttribute("toggle", "off");
              this.setAttribute("direct", "off");
              this.setAttribute("link", "off");
              this.setAttribute("meeting", "off");
              cleanChildren(this);
            } else {
              num = x;
              do {
                linkFirstNum = num;
                num = num - 1;
              } while (lineDoms[num] !== undefined && lineDoms[num].getAttribute("link") === "on");
              num = x;
              do {
                linkLastNum = num;
                num = num + 1;
              } while (lineDoms[num] !== undefined && lineDoms[num].getAttribute("link") === "on");
              for (let i = linkFirstNum; i < linkLastNum + 1; i++) {
                lineDoms[i].style.background = !possibleTimes ? colorChip.gray2 : colorChip.gray3;
                lineDoms[i].setAttribute("toggle", "off");
                lineDoms[i].setAttribute("direct", "off");
                lineDoms[i].setAttribute("link", "off");
                lineDoms[i].setAttribute("meeting", "off");
                cleanChildren(lineDoms[i]);
              }
            }
          } else {
            if (this.querySelector('.' + classCalendarBarName) !== null) {
              instance.detailTimeEvent.call(this.querySelector('.' + classCalendarBarName), e);
            } else {
              if (this.getAttribute("link") === "off") {
                instance.detailTimeEvent.call(this, e);
              }
            }
          }

        } else {
          instance.detailTimeEvent.call(this, e);
        }

      }

      if (updateBoo) {
        if (!e.ctrlKey) {
          instance.calendarData.updateByDoms(lineDoms, x, e.type, e.altKey).then((resultNumber) => {
            if (resultNumber !== 1) {
              throw new Error("update error");
            }
          }).catch((err) => {
            console.log(err);
          });
        }
      }

    }
    this.countEvent = function (e) {
      e.preventDefault();
      e.stopPropagation();
      if (e.altKey) {
        const x = this.getAttribute('x');
        const y = this.getAttribute('y');
        const desid = this.getAttribute('desid');
        const proid = this.getAttribute('proid');
        const { classNameDesid } = instance.calendarClass;
        const lineDoms = document.querySelectorAll('.' + classNameDesid + "-" + desid + "-" + proid);
        let thisValue = Number(this.firstChild.textContent);
        if (e.type === "click") {
          thisValue = thisValue + 1;
        } else {
          thisValue = thisValue - 1;
        }
        this.firstChild.textContent = String(thisValue);
        this.setAttribute("value", String(thisValue));
        if (!e.ctrlKey) {
          instance.calendarData.updateByDoms(lineDoms, x, e.type, e.altKey).then((resultNumber) => {
            if (resultNumber !== 1) {
              throw new Error("update error");
            }
          }).catch((err) => {
            console.log(err);
          });
        }
      }
    }
    let designerBox;
    let pastTop;
    let boxHeight;
    let nodeArr;
    let size;
    let textTop;
    let y;
    let designerNameBox, designerNameBox_clone;

    size = 16;
    pastTop = 0;
    textTop = isMac() ? 14 : 16;
    y = 0;

    setTimeout(async () => {
      for (let i = 0; i < designers.length; i++) {
        boxHeight = (margin * 5) + ((height + (margin * 1)) * (designers[i].projects.length + 2));

        nodeArr = [
          {
            mother,
            attribute: [
              { desid: designers[i].desid },
            ],
            style: {
              display: "block",
              position: "absolute",
              width: String(box0Width) + ea,
              top: String(pastTop) + ea,
              left: String(0) + ea,
              height: String(boxHeight) + ea,
              borderBottom: "1px solid " + colorChip.gray4,
              background: colorChip.white,
              zIndex: String(1),
            }
          },
          {
            mother: -1,
            text: designers[i].designer,
            attribute: [
              { desid: designers[i].desid },
            ],
            class: [ classNameTextY + "_" + String(y), classDesignerBox ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontWeight: String(600),
              width: String(100) + '%',
              textAlign: "center",
              top: String(textTop) + ea,
            }
          },
          {
            mother,
            style: {
              display: "block",
              position: "absolute",
              width: String(box1Width) + ea,
              top: String(pastTop) + ea,
              left: String(box0Width) + ea,
              height: String(boxHeight) + ea,
              borderBottom: "1px solid " + colorChip.gray4,
              borderLeft: "1px solid " + colorChip.gray4,
              background: colorChip.white,
              zIndex: String(1),
            }
          },
          {
            mother: -1,
            text: "가능 개수",
            class: [ classNameTextY + "_" + String(y) ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontWeight: String(300),
              width: String(100) + '%',
              textAlign: "center",
              top: String(textTop) + ea,
            }
          },
          {
            mother: -2,
            text: "가능 시간",
            class: [ classNameTextY + "_" + String(y + 1) ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontWeight: String(300),
              width: String(100) + '%',
              textAlign: "center",
              top: String(textTop + height + margin) + ea,
            }
          },
        ];

        for (let j = 0; j < designers[i].projects.length; j++) {
          nodeArr.push({
            mother: -1 + (-1 * (j + 2)),
            text: designers[i].projects[j].name,
            attribute: [ { color: /^대/i.test(designers[i].projects[j].process.status) ? colorChip.red : (/^홀/.test(designers[i].projects[j].process.status) ? colorChip.purple : colorChip.black) } ],
            class: [ classNameTextY + "_" + String(y + (j + 2)) ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontWeight: String(300),
              width: String(100) + '%',
              textAlign: "center",
              top: String(textTop + ((height + (margin * 1)) * (j + 2))) + ea,
              color: /^대/i.test(designers[i].projects[j].process.status) ? colorChip.red : (/^홀/.test(designers[i].projects[j].process.status) ? colorChip.purple : colorChip.black),
            }
          });
          nodeArr[nodeArr.length - 1 - 2 + (-1 * (j + 2))].class.push(classNameTextY + "_" + String(y + (j + 2)));
        }

        [ designerNameBox ] = createNodes(nodeArr);
        designerNameBox_clone = designerNameBox.cloneNode(false);
        designerNameBox_clone.style.background = "transparent";
        designerNameBox_clone.style.border = String(0);
        designerNameBox_clone.style.zIndex = String(3);
        designerNameBox_clone.style.height = String(Number(designerNameBox_clone.style.height.replace(/[^0-9\-\.]/gi, '')) / 2) + ea;
        designerNameBox_clone.classList.add("hoverDefault");
        designerNameBox_clone.addEventListener("click", function (e) {
          const desid = this.getAttribute("desid");
          window.location.href = window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=possible&desid=" + desid;
        });
        mother.appendChild(designerNameBox_clone);

        pastTop += boxHeight + 1;

        designerBox = createNode({
          mother,
          style: {
            display: "block",
            position: "relative",
            left: String(box0Width + box1Width) + ea,
            width: withOut(box0Width + box1Width, ea),
            paddingTop: String(margin * 2) + ea,
            paddingBottom: String(margin * 3) + ea,
            borderBottom: "1px solid " + colorChip.gray4,
            marginBottom: (i === designers.length - 1) ? String(window.innerHeight / 2) + ea : "",
          }
        });
        for (let j = 0; j < designers[i].projects.length + 2; j++) {
          let mother, desid, proid, barHeight, possibleTimes;
          let totalWidth;
          let nodeArr;
          let tempObj;
          let entireTong;
          let x;
          let countMode;

          mother = designerBox;
          desid = designers[i].desid;
          proid = (j > 1 ? designers[i].projects[j - 2].proid : (j === 1 ? "possible" : "count"));
          barHeight = height;
          possibleTimes = j;

          if (possibleTimes === 0) {
            countMode = true;
            possibleTimes = false;
          } else if (possibleTimes === 1) {
            countMode = false;
            possibleTimes = true;
          } else {
            countMode = false;
            possibleTimes = false;
          }

          totalWidth = matrix.getEntireWidth(width, margin);

          entireTong = createNode({
            mother,
            attribute: [
              { y },
            ],
            class: [ "moveTarget" ],
            events: [
              {
                type: "mouseover",
                event: function (e) {
                  const y = Number(this.getAttribute('y'));
                  const targets = document.querySelectorAll('.' + classNameTextY + '_' + y);
                  for (let dom of targets) {
                    dom.style.color = colorChip.green;
                  }
                }
              },
              {
                type: "mouseleave",
                event: function (e) {
                  const y = Number(this.getAttribute('y'));
                  const targets = document.querySelectorAll('.' + classNameTextY + '_' + y);
                  for (let dom of targets) {
                    if (dom.getAttribute("color") !== null) {
                      dom.style.color = dom.getAttribute("color");
                    } else {
                      dom.style.color = colorChip.black;
                    }
                  }
                }
              },
            ],
            style: {
              position: "relative",
              opacity: String(0),
              width: String(totalWidth) + ea,
              height: String(barHeight) + ea,
              marginTop: String(margin * 1) + ea,
              marginLeft: String((margin * 4) - 1) + ea,
              borderRadius: String(3) + "px",
              transform: instance.calendarPastTranslate,
              transition: "all 0.3s ease",
            }
          });

          GeneralJs.setTimeout(() => {
            entireTong.style.opacity = String(1);
          }, 300);

          if (!countMode) {
            nodeArr = [];
            x = 0;
            if (instance.calendarX === null) {
              instance.calendarX = [];
            }
            for (let i = 0; i < matrix.length; i++) {
              tempObj = {
                mother: entireTong,
                class: [ 'y' + String(matrix[i].year) + 'm' + String(matrix[i].month) ],
                style: {
                  display: "inline-block",
                  position: "relative",
                  width: String(matrix[i].getEntireWidth(width, margin)) + ea,
                  height: String(barHeight) + ea,
                  opacity: instance.calendarMonthY['y' + String(matrix[i].year) + 'm' + String(matrix[i].month)] === "on" ? String(1) : String(0.3),
                }
              };
              nodeArr.push(tempObj);
              for (let j = 0; j < matrix[i].children.length; j++) {
                tempObj = {
                  mother: -1 * ((1 * j) + 1),
                  id: classNameDesid + "-" + desid + "-" + proid + '-' + String(x),
                  attribute: [
                    { x: String(x) },
                    { y: String(y) },
                    { toggle: "off" },
                    { direct: "off" },
                    { link: "off" },
                    { meeting: "off" },
                    { value: String(matrix[i].month) + ' - ' + String((i === 0 ? instance.matrix.weekOrder : 1) + j) },
                    { start: matrix[i].children[j].start },
                    { end: matrix[i].children[j].end },
                    { spot: "null" },
                    { possible: possibleTimes ? "true" : "false" },
                    { desid },
                    { proid },
                  ],
                  events: [
                    {
                      type: "click",
                      event: instance.moduleEvent
                    },
                    // {
                    //   type: "contextmenu",
                    //   event: instance.moduleEvent
                    // },
                  ],
                  class: [
                    classNameX + "_" + String(x),
                    classNameY + "_" + String(y),
                    classNameXY + "_" + String(x) + '_' + String(y),
                    classNameDesid + "-" + desid + "-" + proid,
                  ],
                  style: {
                    display: "inline-block",
                    position: "relative",
                    width: String(width) + ea,
                    height: withOut(0, ea),
                    marginRight: String(margin) + ea,
                    background: !possibleTimes ? colorChip.gray2 : colorChip.gray3,
                    borderRadius: String(3) + "px",
                    cursor: "pointer",
                    transition: "all 0s ease",
                  }
                };
                nodeArr.push(tempObj);

                if (instance.calendarX.break !== true) {
                  instance.calendarX.push({
                    start: matrix[i].children[j].start,
                    end: matrix[i].children[j].end
                  });
                }
                x++;
              }
            }
            if (instance.calendarX.break !== true) {
              instance.calendarX.break = true;
            }
            createNodes(nodeArr);
          } else {
            nodeArr = [];
            x = 0;
            for (let i = 0; i < matrix.length; i++) {
              tempObj = {
                mother: entireTong,
                class: [ 'y' + String(matrix[i].year) + 'm' + String(matrix[i].month) ],
                style: {
                  display: "inline-block",
                  position: "relative",
                  width: String(matrix[i].getEntireWidth(width, margin)) + ea,
                  height: String(barHeight) + ea,
                  opacity: instance.calendarMonthY['y' + String(matrix[i].year) + 'm' + String(matrix[i].month)] === "on" ? String(1) : String(0.3),
                }
              };
              nodeArr.push(tempObj);
              tempObj = {
                mother: -1,
                id: classNameDesid + "-" + desid + "-" + proid + '-' + String(x),
                attribute: [
                  { x: String(x) },
                  { y: String(y) },
                  { value: String(5) },
                  { start: matrix[i].children[0].start },
                  { end: matrix[i].children[matrix[i].children.length - 1].end },
                  { desid },
                  { proid },
                  { year: String(matrix[i].year) },
                  { month: String(matrix[i].month) }
                ],
                class: [
                  classNameY + "_" + String(y),
                  classNameXY + "_" + String(x) + '_' + String(y),
                  classNameDesid + "-" + desid + "-" + proid,
                  desid + '-' + proid + '-' + 'y' + String(matrix[i].year) + 'm' + String(matrix[i].month),
                ],
                events: [
                  {
                    type: "click",
                    event: instance.countEvent
                  },
                  {
                    type: "contextmenu",
                    event: instance.countEvent
                  }
                ],
                style: {
                  display: "inline-block",
                  position: "relative",
                  width: String((width * matrix[i].children.length) + (margin * (matrix[i].children.length - 1))) + ea,
                  height: withOut(0, ea),
                  marginRight: String(margin) + ea,
                  background: colorChip.gray2,
                  borderRadius: String(3) + "px",
                  cursor: "pointer",
                  transition: "all 0s ease",
                }
              };
              nodeArr.push(tempObj);
              tempObj = {
                mother: -1,
                text: String(5),
                events: [
                  {
                    type: "selectstart",
                    event: function (e) {
                      e.preventDefault();
                      return false;
                    }
                  }
                ],
                style: {
                  position: "absolute",
                  width: String(100) + '%',
                  textAlign: "center",
                  fontSize: String(17) + ea,
                  top: String(3) + ea,
                  fontFamily: "graphik",
                  fontWeight: String(500),
                  color: colorChip.deactive,
                  zIndex: String(2),
                }
              };
              nodeArr.push(tempObj);
              x = x + matrix[i].children.length;
            }
            createNodes(nodeArr);
          }

          y++;
        }

      }
      if (loadingIcon !== null) {
        loadingIcon.parentElement.removeChild(loadingIcon);
      }
      instance.calendarDashBoardLaunching();
      if (instance.calendarX.constructor.name !== "DateX") {
        instance.calendarX = new DateX(instance.calendarX);
      }
      instance.calendarData.render();
    }, 0);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.calendarDashBoardLaunching = function () {
  const instance = this;
  const { ea, calendarDashBoard } = this;
  const { createNodes, colorChip, withOut, cleanChildren, isMac } = GeneralJs;
  const { classNameX, classNameY, classNameXY, classNameTextY, classNameDesid, classDesignerBox } = this.calendarClass;
  const firstDoms = document.querySelectorAll('.' + classNameX + '_' + String(0));
  const today = new Date();
  let order;
  let dateText, designerText, projectText;
  let size;
  let width, height;
  let topMargin, leftMargin;
  let designers;
  let desidArr;
  let tempDom, temp;
  let num;

  size = 16;
  width = 400;
  height = isMac() ? 24 : 21;
  topMargin = isMac() ? 12 : 15;
  leftMargin = 20;

  cleanChildren(calendarDashBoard);

  if (firstDoms.length !== 0) {
    order = Number(firstDoms[0].getAttribute("value").split('-')[1].trim()) - 1;
    dateText = `${String(today.getFullYear())}년 ${String(today.getMonth() + 1)}월 ${String(today.getDate())}일 (${String(today.getMonth() + 1)}월 ${([ '첫', '둘', '셋', '넷', '다섯', '여섯' ])[order]}째주)`;

    desidArr = [];
    designers = document.querySelectorAll('.' + classDesignerBox);
    for (let designer of designers) {
      desidArr.push(designer.getAttribute("desid"));
    }

    num = 0;
    for (let desid of desidArr) {
      tempDom = document.getElementById(classNameDesid + '-' + desid + '-' + "possible" + '-' + String(0));
      if (tempDom.getAttribute("toggle") === "on") {
        num = num + 1;
      }
    }
    designerText = `${String(num)}명`;

    num = 0;
    for (let desid of desidArr) {
      temp = this.designers.getProjectsByDesid(desid);
      num = num + temp.length;
    }
    projectText = `${String(num)}개`;

    createNodes([
      {
        mother: calendarDashBoard,
        style: {
          position: "absolute",
          top: String(topMargin) + ea,
          left: String(leftMargin) + ea,
          width: withOut(leftMargin * 2, ea),
          height: String(height) + ea,
        }
      },
      {
        mother: -1,
        text: "현재 시간 : ",
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(600),
          left: String(0)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: -2,
        text: dateText,
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          marginLeft: String(10)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: -3,
        text: "가용 디자이너 : ",
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(600),
          marginLeft: String(20)+ ea,
          left: String(0)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: -4,
        text: designerText,
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          marginLeft: String(10)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: -5,
        text: "진행중 프로젝트 : ",
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(600),
          marginLeft: String(20)+ ea,
          left: String(0)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: -6,
        text: projectText,
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          marginLeft: String(10)+ ea,
          top: String(0) + ea
        }
      },
      {
        mother: calendarDashBoard,
        mode: "svg",
        source: this.mother.returnRinitial(colorChip.black),
        class: [ "hoverDefault_lite" ],
        events: [
          {
            type: "click",
            event: function (e) {
              window.location.href = window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general" + (GeneralJs.returnGet().desid === undefined ? "" : "&desid=" + GeneralJs.returnGet().desid);
            }
          }
        ],
        style: {
          position: "absolute",
          top: String(topMargin + 5) + ea,
          right: String(leftMargin) + ea,
          height: String(size - 3) + ea,
        }
      },
      {
        mother: calendarDashBoard,
        mode: "svg",
        source: this.mother.returnHamburger(colorChip.black),
        class: [ "hoverDefault_lite" ],
        events: [
          {
            type: "click",
            event: function (e) {
              instance.calendarContentsTime('0');
            }
          }
        ],
        style: {
          position: "absolute",
          top: String(topMargin + 5.5) + ea,
          right: String(leftMargin + 16) + ea,
          height: String(size - 5) + ea,
        }
      },
    ]);

  }

}

DesignerJs.prototype.calendarSearchEvent = function () {
  const instance = this;
  const { ea } = this;
  const input = this.searchInput;
  let width;

  width = 800;

  input.parentNode.style.width = String(width) + ea;
  input.parentNode.style.left = GeneralJs.withOut(50, width / 2, ea);
  input.addEventListener("keypress", async function (e) {
    try {
      const value = this.value.trim();
      if (e.key === "Enter") {
        instance.mother.loadingRun().then((loading) => {
          return instance.calendarContentsTime(value, loading);
        }).catch((err) => {
          console.log(err);
        });
      }
    } catch (e) {
      console.log(e);
    }
  });
}

DesignerJs.prototype.calendarModuleClickDetail = function (mode, alt, desid, proid, x) {
  const instance = this;
  const { classNameDesid } = this.calendarClass;
  if (this.moduleEvent === null || this.countEvent === null) {
    throw new Error("event ready first");
  }
  if (mode !== "click" && mode !== "contextmenu") {
    throw new Error("mode must be String: 'click' or String: 'contextmenu'")
  }
  if (typeof alt !== "number" && typeof desid !== "string" && typeof proid !== "string" && typeof x !== "number") {
    throw new Error("invaild input");
  }

  const id = classNameDesid + "-" + desid + "-" + proid + '-' + String(x);
  const target = document.getElementById(id);
  let clickObj, contenxtObj;
  let eventObj;

  if (target !== null) {
    clickObj = {
      type: "click",
      cancelable: false,
      preventDefault: function () {},
      stopPropagation: function () {},
      altKey: (alt === 1),
      ctrlKey: true,
    };

    contenxtObj = {
      type: "contextmenu",
      cancelable: false,
      preventDefault: function () {},
      stopPropagation: function () {},
      altKey: (alt === 1),
      ctrlKey: true,
    };

    eventObj = (mode === "click") ? clickObj : contenxtObj;

    if (proid === "count") {
      this.countEvent.call(target, eventObj);
    } else {
      //fix this
      eventObj.type = "click";
      this.moduleEvent.call(target, eventObj);
    }
  }
}

DesignerJs.prototype.calendarModuleClick = function (arr) {
  const instance = this;
  if (!Array.isArray(arr)) {
    throw new Error("must be array");
  }
  for (let obj of arr) {
    if (obj.who !== this.cookiesWho) {
      this.calendarModuleClickDetail(obj.mode, obj.alt, obj.desid, obj.proid, obj.x);
    }
  }
}

DesignerJs.prototype.calendarFixUp = function () {
  const instance = this;
  const { ea, totalMother } = this;
  const { calendarBase, calendarHeight } = this.mother.makeCalendar(new Date, function (e) {});
  const { colorChip, createNode, withOut } = GeneralJs;
  let mother, style, calendarBox;
  let width, height;

  width = Number(calendarBase.style.width.replace(/[^0-9\-\.]/g, ''));
  height = Number(calendarBase.style.width.replace(/[^0-9\-\.]/g, ''));

  calendarBox = createNode({
    mother: totalMother,
    events: [
      {
        type: "contextmenu",
        event: function (e) {
          e.preventDefault();
          this.parentElement.removeChild(this);
        }
      }
    ],
    style: {
      position: "absolute",
      width: String(width) + ea,
      height: String(height) + ea,
      top: withOut(100, this.mother.belowHeight + 205, ea),
      right: String(42) + ea,
      transition: "all 0s ease",
      animation: "fadeup 0.3s ease forwards",
    }
  });

  style = {
    position: "absolute",
    background: colorChip.white,
    boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
    transition: "all 0s ease",
    borderRadius: String(3) + "px",
    opacity: String(0.95),
  };
  for (let i in style) {
    calendarBase.style[i] = style[i];
  }
  calendarBox.appendChild(calendarBase);

}

DesignerJs.prototype.calendarView = async function () {
  const instance = this;
  try {
    const { createNodes, colorChip, ajaxJson, sleep, returnGet, equalJson } = GeneralJs;
    const getObj = returnGet();
    let designers, projects, clients;
    let desidArr, cliidArr;
    let desidArr_raw;
    let loading;

    loading = await this.mother.loadingRun();

    this.moduleBox = {
      width: 58,
      height: 34,
      margin: 3,
    };
    this.calendarSpec = {};
    this.calendarClass = {
      classNameX: "calendarModuleX",
      classNameY: "calendarModuleY",
      classNameXY: "calendarModuleXY",
      classNameTextY: "calendarTextY",
      classNameDesid: "calendar",
      classDesignerBox: "designerBox",
      classCalendarBarName: "calendar_bar"
    };
    this.calendarDashBoard = null;
    this.calendarX = null;
    this.moduleEvent = null;
    this.countEvent = null;
    this.detailTimeEvent = null;
    this.calendarData = null;
    this.calendarMonthY = {};
    this.calendarPastQueries = [];
    this.calendarPastTranslate = "translateX(0px)";
    this.cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
    this.cookiesWho = this.cookies.homeliaisonConsoleLoginedName;

    this.mother.belowButtons.arrow.right.addEventListener("click", (e) => { instance.calendarPastTranslate = document.querySelector(".moveTarget").style.transform; });
    this.mother.belowButtons.arrow.left.addEventListener("click", (e) => { instance.calendarPastTranslate = document.querySelector(".moveTarget").style.transform; });

    class DateX extends Array {
      constructor(arr) {
        super();
        let tempArr0, tempArr1;
        let startDate, endDate;
        for (let obj of arr) {
          tempArr0 = obj.start.split('-');
          tempArr1 = obj.end.split('-');
          startDate = new Date(Number(tempArr0[0]), Number(tempArr0[1]) - 1, Number(tempArr0[2]));
          endDate = new Date(Number(tempArr1[0]), Number(tempArr1[1]) - 1, Number(tempArr1[2]));
          endDate.setDate(endDate.getDate() + 1);
          this.push({ start: startDate, end: endDate });
        }
        this.break = true;
      }
      firstDate() {
        if (this.length > 0) {
          return this[0].start;
        } else {
          return null;
        }
      }
      endDate() {
        if (this.length > 0) {
          return this[this.length - 1].end;
        } else {
          return null;
        }
      }
      dateToX(dateObj) {
        if (!(dateObj instanceof Date)) {
          throw new Error("must be date object");
        }
        let value, x;
        x = null;
        for (let i = 0; i < this.length; i++) {
          value = dateObj.valueOf();
          if ((this[i].start.valueOf() <= value) && (value < this[i].end.valueOf())) {
            x = i;
            break;
          }
        }
        return x;
      }
      dateToDom(desid, proid, dateObj, x = null) {
        if (!(dateObj instanceof Date)) {
          throw new Error("must be date object");
        }
        if (desid === undefined || proid === undefined) {
          throw new Error("invaild input");
        }
        if (x === null || x === undefined) {
          x = this.dateToX(dateObj);
        }
        if (x === null) {
          return null;
        } else {
          return document.getElementById(instance.calendarClass.classNameDesid + '-' + desid + '-' + proid + '-' + String(x));
        }
      }
      dateToDomX(desid, proid, dateObj) {
        if (!(dateObj instanceof Date)) {
          throw new Error("must be date object");
        }
        const x = this.dateToX(dateObj);
        const dom = this.dateToDom(desid, proid, dateObj, x);
        return { x, dom };
      }
    }
    class DesignerDate {
      constructor(obj) {
        this.desid = obj.desid;
        this.count = obj.count;
        this.possible = obj.possible;
        this.projects = obj.projects;
      }
      render() {
        const { desid, count, possible, projects } = this;
        const calendarX = instance.calendarX;
        if (instance.moduleEvent === null || instance.detailTimeEvent === null) {
          throw new Error("event definition first");
        }
        const firstDate = calendarX.firstDate();
        const endDate = calendarX.endDate();
        const zeroAddition = (num) => { return (num < 10) ? `0${String(num)}` : String(num); }
        const dateToString = (dateObj) => { return `${String(dateObj.getFullYear())}-${zeroAddition(dateObj.getMonth() + 1)}-${zeroAddition(dateObj.getDate())}`; }
        let clickObj, tempObj, tempDom, contenxtObj;
        let startObj, startDom;
        let x0, x1;

        clickObj = {
          type: "click",
          cancelable: false,
          preventDefault: function () {},
          stopPropagation: function () {},
          altKey: false,
          ctrlKey: true,
        };

        contenxtObj = {
          type: "contextmenu",
          cancelable: false,
          preventDefault: function () {},
          stopPropagation: function () {},
          altKey: false,
          ctrlKey: true,
        };

        for (let { start, end } of possible) {
          tempObj = calendarX.dateToDomX(desid, "possible", start);
          tempDom = tempObj.dom;
          x0 = tempObj.x;
          if (tempDom !== null) {
            tempDom.setAttribute("spot", dateToString(start));
            if (tempDom.getAttribute("toggle") === "off") {
              instance.moduleEvent.call(tempDom, clickObj);
            }
          }
          tempObj = calendarX.dateToDomX(desid, "possible", end);
          tempDom = tempObj.dom;
          x1 = tempObj.x;
          if (x0 !== x1) {
            if (tempDom !== null) {
              if (x0 === null && x1 !== null && start.valueOf() <= firstDate.valueOf()) {
                startDom = calendarX.dateToDom(desid, "possible", start, 0);
                if (startDom !== null) {
                  startDom.setAttribute("spot", dateToString(start));
                  if (tempDom.getAttribute("toggle") === "off") {
                    instance.moduleEvent.call(startDom, clickObj);
                  }
                }
                if (x1 !== 0) {
                  tempDom.setAttribute("spot", dateToString(end));
                  if (tempDom.getAttribute("toggle") === "off") {
                    instance.moduleEvent.call(tempDom, clickObj);
                  }
                }
              } else {
                tempDom.setAttribute("spot", dateToString(end));
                if (tempDom.getAttribute("toggle") === "off") {
                  instance.moduleEvent.call(tempDom, clickObj);
                }
              }
            }
          }
        }
        for (let { proid, meeting, project } of projects) {
          // for (let time of meeting) {
          //   tempObj = calendarX.dateToDomX(desid, proid, time);
          //   tempDom = tempObj.dom;
          //   if (tempDom !== null) {
          //     tempDom.setAttribute("spot", dateToString(time));
          //     // if (tempDom.getAttribute("toggle") === "off") {
          //       instance.moduleEvent.call(tempDom, contenxtObj);
          //     // }
          //   }
          // }
          for (let { start, end } of project) {
            tempObj = calendarX.dateToDomX(desid, proid, start);
            tempDom = tempObj.dom;
            x0 = tempObj.x;
            if (tempDom !== null) {
              tempDom.setAttribute("spot", dateToString(start));
              if (tempDom.getAttribute("toggle") === "off") {
                instance.moduleEvent.call(tempDom, clickObj);
              }
            }
            tempObj = calendarX.dateToDomX(desid, proid, end);
            tempDom = tempObj.dom;
            x1 = tempObj.x;
            if (x0 !== x1) {
              if (tempDom !== null) {
                if (x0 === null && x1 !== null && start.valueOf() <= firstDate.valueOf()) {
                  startDom = calendarX.dateToDom(desid, proid, start, 0);
                  if (startDom !== null) {
                    startDom.setAttribute("spot", dateToString(start));
                    if (tempDom.getAttribute("toggle") === "off") {
                      instance.moduleEvent.call(startDom, clickObj);
                    }
                  }
                  if (x1 !== 0) {
                    tempDom.setAttribute("spot", dateToString(end));
                    if (tempDom.getAttribute("toggle") === "off") {
                      instance.moduleEvent.call(tempDom, clickObj);
                    }
                  }
                } else {
                  tempDom.setAttribute("spot", dateToString(end));
                  if (tempDom.getAttribute("toggle") === "off") {
                    instance.moduleEvent.call(tempDom, clickObj);
                  }
                }
              }
            }
          }
        }
        for (let ym in count) {
          tempDom = document.querySelector('.' + desid + '-' + "count" + '-' + ym);
          if (tempDom !== null) {
            tempDom.firstChild.textContent = String(count[ym]);
            tempDom.setAttribute("value", String(count[ym]));
          }
        }
      }
      projectConvert(projectObj) {
        if (typeof projectObj !== "object") {
          throw new Error("invaild input");
        }
        if (projectObj.proid === undefined) {
          throw new Error("invaild input");
        }
        const { proid } = projectObj;
        let index;

        index = null;
        for (let i = 0; i < this.projects.length; i++) {
          if (this.projects[i].proid === proid) {
            index = i;
            break;
          }
        }

        if (index !== null) {
          this.projects.splice(index, 1, projectObj);
        } else {
          this.projects.push(projectObj);
        }
      }
      projectPick(proid, returnModel = false) {
        if (proid === undefined) {
          throw new Error("must be proid");
        }
        let model;
        let target;

        target = null;
        model = function (proid) {
          return {
            proid,
            meeting: [],
            project: []
          };
        }

        if (returnModel) {
          return model(proid);
        }

        for (let p of this.projects) {
          if (p.proid === proid) {
            target = p;
            break;
          }
        }
        if (target === null) {
          target = model(proid);
          this.projects.push(target);
        }
        return target;
      }
    }
    class DesignerDates extends Array {
      constructor(arr) {
        super();
        for (let i of arr) {
          this.push(new DesignerDate(i));
        }
      }
      pick(desid) {
        if (desid === undefined) {
          throw new Error("invaild input");
        }
        let target = null;
        for (let i of this) {
          if (i.desid === desid) {
            target = i;
            break;
          }
        }
        if (target === null) {
          if (/^d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]$/i.test(desid)) {
            target = new DesignerDate({ desid, count: {}, possible: [], projects: [] });
            this.push(target);
          } else {
            throw new Error("invaild desid");
          }
        }
        return target;
      }
      render() {
        for (let i of this) {
          i.render();
        }
      }
      async updateByDoms(doms, x = 0, type = "click", alt = false) {
        const length = doms.length;
        const stringToDate = (str) => {
          if (typeof str !== "string") {
            throw new Error("invaild input");
          }
          let tempArr = str.split('-');
          if (tempArr.length !== 3) {
            throw new Error("invaild input");
          }
          return new Date(Number(tempArr[0]), Number(tempArr[1]) - 1, Number(tempArr[2]));
        }

        let desid, proid;
        let id;
        let tempArr;
        let toggle, meeting;
        let pastBoo;
        let startPoint, endPoint;
        let model, modelFiltered;
        let updateData, url;
        let thisDesigner;
        let original;
        let premiereStart, premiereEnd;
        let rescueTong_project, rescueTong_meeting;
        let indexTong;

        if (length === 0) {
          throw new Error("length error");
          return 0;
        }

        premiereStart = stringToDate(doms[0].getAttribute("start")).valueOf();
        premiereEnd = stringToDate(doms[0].getAttribute("end")).valueOf();

        id = null;
        for (let dom of doms) {
          if (dom.id !== "" && dom.id !== null && dom.id !== undefined) {
            id = dom.id;
            break;
          }
        }
        if (id === null) {
          throw new Error("id error");
          return 0;
        }
        tempArr = id.split('-');
        if (tempArr.length !== 4) {
          throw new Error("id error 2");
          return 0;
        }
        desid = tempArr[1];
        proid = tempArr[2];
        thisDesigner = this.pick(desid);

        if (proid !== "possible" && proid !== "count") {

          toggle = [];
          meeting = [];
          for (let dom of doms) {
            toggle.push(dom.getAttribute("toggle") === "on" ? true : false);
            meeting.push(dom.getAttribute("meeting") === "on" ? true : false);
          }

          pastBoo = false;
          startPoint = [];
          endPoint = [];
          original = thisDesigner.projectPick(proid, false);
          model = thisDesigner.projectPick(proid, true);
          for (let i = 0; i < length; i++) {
            if (!pastBoo && toggle[i]) {
              if (!meeting[i]) {
                startPoint.push(i);
              }
            }
            if (pastBoo && !toggle[i]) {
              endPoint.push(i - 1);
            }
            if (!pastBoo) {
              if (!meeting[i]) {
                pastBoo = toggle[i];
              }
            } else {
              pastBoo = toggle[i];
            }
            if (meeting[i]) {
              model.meeting.push(stringToDate((doms[i].getAttribute("spot") !== null && doms[i].getAttribute("spot") !== "null") ? doms[i].getAttribute("spot") : doms[i].getAttribute("start")));
            }
          }
          if (startPoint.length !== endPoint.length) {
            endPoint.push(length - 1);
          }

          for (let i = 0; i < startPoint.length; i++) {
            model.project.push({
              start: stringToDate((doms[startPoint[i]].getAttribute("spot") !== null && doms[startPoint[i]].getAttribute("spot") !== "null") ? doms[startPoint[i]].getAttribute("spot") : doms[startPoint[i]].getAttribute("start")),
              end: stringToDate((doms[endPoint[i]].getAttribute("spot") !== null && doms[endPoint[i]].getAttribute("spot") !== "null") ?  doms[endPoint[i]].getAttribute("spot") :  doms[endPoint[i]].getAttribute("end"))
            });
          }

          rescueTong_project = [];
          for (let obj of original.project) {
            if (obj.start.valueOf() < premiereStart && obj.end.valueOf() < premiereStart) {
              rescueTong_project.push(obj);
            } else if (obj.start.valueOf() < premiereStart && obj.end.valueOf() >= premiereStart) {
              for (let obj2 of model.project) {
                if (premiereStart <= obj2.start.valueOf() && obj2.start.valueOf() <= premiereEnd) {
                  obj.end = obj2.end;
                  rescueTong_project.push(obj);
                }
              }
            }
          }
          indexTong = [];
          for (let i = 0; i < model.project.length; i++) {
            if (premiereStart <= model.project[i].start.valueOf() && model.project[i].start.valueOf() <= premiereEnd) {
              for (let { end } of rescueTong_project) {
                if (end.valueOf() === model.project[i].end.valueOf()) {
                  indexTong.push(i);
                }
              }
            }
          }
          modelFiltered = [];
          for (let i = 0; i < model.project.length; i++) {
            if (!indexTong.includes(i)) {
              modelFiltered.push(model.project[i]);
            }
          }
          model.project = rescueTong_project.concat(modelFiltered);

          rescueTong_meeting = [];
          for (let date of original.meeting) {
            if (date.valueOf() < premiereStart) {
              rescueTong_meeting.push(date);
            }
          }
          model.meeting = rescueTong_meeting.concat(model.meeting);

          thisDesigner.projectConvert(model);

        } else if (proid === "possible") {

          toggle = [];
          for (let dom of doms) {
            toggle.push(dom.getAttribute("toggle") === "on");
          }

          pastBoo = false;
          startPoint = [];
          endPoint = [];
          model = [];
          for (let i = 0; i < length; i++) {
            if (!pastBoo && toggle[i]) {
              startPoint.push(i);
            }
            if (pastBoo && !toggle[i]) {
              endPoint.push(i - 1);
            }
            pastBoo = toggle[i];
          }

          if (startPoint.length !== endPoint.length) {
            endPoint.push(length - 1);
          }

          for (let i = 0; i < startPoint.length; i++) {
            model.push({
              start: stringToDate((doms[startPoint[i]].getAttribute("spot") !== null && doms[startPoint[i]].getAttribute("spot") !== "null") ? doms[startPoint[i]].getAttribute("spot") : doms[startPoint[i]].getAttribute("start")),
              end: stringToDate((doms[endPoint[i]].getAttribute("spot") !== null && doms[endPoint[i]].getAttribute("spot") !== "null") ?  doms[endPoint[i]].getAttribute("spot") :  doms[endPoint[i]].getAttribute("end"))
            });
          }

          thisDesigner.possible = model;

        } else {
          for (let dom of doms) {
            thisDesigner.count['y' + dom.getAttribute("year") + 'm' + dom.getAttribute("month")] = Number(dom.getAttribute("value"));
          }
        }

        url = "/generalMongo";
        updateData = {
          mode: "update",
          db: "console",
          collection: "realtimeDesigner",
          whereQuery: { desid },
          updateQuery: thisDesigner
        };
        await GeneralJs.ajaxJson(updateData, url);

        if (type !== "blur") {
          url = "/generalMongo";
          updateData = {
            mode: "sse",
            db: "console",
            collection: "sse_realtimeDesigner",
            updateQuery: {
              mode: type,
              alt: alt ? 1 : 0,
              desid,
              proid,
              x: String(x),
              who: instance.cookiesWho,
            }
          };
          await GeneralJs.ajaxJson(updateData, url);
        }

        return 1;
      }

      mergeProjects(projects) {
        const emptyDateValue = (new Date(2000, 0, 1)).valueOf();
        if (projects === undefined) {
          throw new Error("invaild input");
        }
        let temp, tempTarget;
        for (let project of projects) {
          if (project.process.contract.form.date.from.valueOf() > emptyDateValue && project.process.contract.form.date.to.valueOf() > emptyDateValue) {
            temp = this.pick(project.desid);
            tempTarget = null;
            for (let obj of temp.projects) {
              if (obj.proid === project.proid) {
                tempTarget = obj;
              }
            }
            if (tempTarget === null) {
              temp.projects.push({ proid: project.proid, meeting: [], project: [ { start: project.process.contract.form.date.from, end: project.process.contract.form.date.to } ] });
            } else {
              tempTarget.project = [ { start: project.process.contract.form.date.from, end: project.process.contract.form.date.to } ];
            }
          }
          if (project.process.contract.meeting.date.valueOf() > emptyDateValue) {
            temp = this.pick(project.desid);
            tempTarget = null;
            for (let obj of temp.projects) {
              if (obj.proid === project.proid) {
                tempTarget = obj;
              }
            }
            if (tempTarget === null) {
              temp.projects.push({ proid: project.proid, meeting: [ project.process.contract.meeting.date ], project: [] });
            } else {
              tempTarget.meeting = [ project.process.contract.meeting.date ];
            }
          }
        }
      }

      async updateThisState() {
        const url = "/generalMongo";
        let updateData;
        for (let obj of this) {
          updateData = {
            mode: "update",
            db: "console",
            collection: "realtimeDesigner",
            whereQuery: { desid: obj.desid },
            updateQuery: obj
          };
          await GeneralJs.ajaxJson(updateData, url);
        }
      }

    }

    this.calendarDateClass = {
      DateX: DateX,
      DesignerDate: DesignerDate,
      DesignerDates: DesignerDates,
    };

    projects = await ajaxJson({
      noFlat: true,
      whereQuery: {
        $and: [
          { desid: { $regex: "^d" } },
          { "process.status": { $regex: "^[대진홀]" } }
        ]
      }
    }, "/getProjects", { equal: true });
    desidArr_raw = [];
    for (let project of projects) {
      desidArr_raw.push(project.desid);
    }
    desidArr_raw = Array.from(new Set(desidArr_raw));
    desidArr = [];
    for (let desid of desidArr_raw) {
      desidArr.push({ desid });
    }
    cliidArr = [];
    for (let project of projects) {
      cliidArr.push({ cliid: project.cliid });
    }

    designers = await ajaxJson({
      noFlat: true,
      whereQuery: {
        $or: [
          { $or: desidArr },
          { "information.contract.status": { $regex: "완료" } }
        ]
      }
    }, "/getDesigners");

    clients = await ajaxJson({
      noFlat: true,
      whereQuery: {
        $or: cliidArr
      }
    }, "/getClients");

    this.calendarData = new DesignerDates(await ajaxJson({
      mode: "read",
      db: "console",
      collection: "realtimeDesigner",
      whereQuery: {},
    }, "/generalMongo", { equal: true }));

    // this.calendarData.mergeProjects(projects);
    // await this.calendarData.updateThisState();

    this.designers = new Designers(designers);
    this.designers.setProjects(projects);
    this.designers.setClients(clients);

    this.matrix = this.calendarMatrix();
    this.calendarBase(getObj.desid === undefined ? null : getObj.desid);
    this.calendarSearchEvent();

    await sleep(500);

    loading.parentNode.removeChild(loading);
    this.totalMother.style.animation = "fadeup 0.3s ease forwards";

    await sleep(500);

    this.calendarFixUp();

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.checkListData = function (factorHeight = 0, factorWidth = 0, tendencyIndent = 0, tendencyWidthIndent = 0, tendencyFactorHeight = 0, mobileTendencyVisualMargin = 0) {
  const instance = this;
  const { ea, media, totalContents, belowHeight, grayBarWidth } = this;
  const { createNode, colorChip, withOut, removeByClass } = GeneralJs;
  const { entireMode, normalMode } = this;
  const mobile = media[4];
  const desktop = !mobile;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const zIndex = 4;
  const possiblePopupClassName = "possiblePopupClassName";
  let checkListData;
  let margin;

  margin = 30;

  checkListData = [
    {
      name: "일반",
      children: [
        {
          name: "성함",
          script: function (mother, designer) {
            if (window.confirm(designer.designer + " 실장님께 전화를 걸까요?")) {
              GeneralJs.ajaxJson({
                who: cookies.homeliaisonConsoleLoginedEmail,
                phone: designer.information.phone.replace(/[^0-9]/gi, '')
              }, "/callTo").catch((err) => { console.log(err); });
            }
          },
          value: function (designer) {
            return designer.designer;
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "아이디",
          script: function (mother, designer) {
            window.navigator.clipboard.writeText(designer.desid).then(() => {
              instance.mother.greenAlert(`클립보드에 저장되었습니다!`);
            }).catch((err) => { console.log(err) });
          },
          value: function (designer) {
            return designer.desid;
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "연락처",
          script: function (mother, designer) {
            if (window.confirm(designer.designer + " 실장님께 전화를 걸까요?")) {
              GeneralJs.ajaxJson({
                who: cookies.homeliaisonConsoleLoginedEmail,
                phone: designer.information.phone.replace(/[^0-9]/gi, '')
              }, "/callTo").catch((err) => { console.log(err); });
            }
          },
          value: function (designer) {
            return designer.information.phone;
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "이메일",
          value: function (designer) {
            return designer.information.email;
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "생일",
          value: function (designer) {
            return `${String(designer.information.birth.getFullYear())}년 ${String(designer.information.birth.getMonth() + 1)}월 ${String(designer.information.birth.getDate())}일`;
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let year, month, date;
            let rawArr;

            updateQuery = {};

            if (!/년/gi.test(text)) {
              return errorObj;
            }
            if (!/월/gi.test(text)) {
              return errorObj;
            }
            if (!/일/gi.test(text)) {
              return errorObj;
            }
            rawArr = text.split(/[년월]/gi);

            if (rawArr.length !== 3) {
              return errorObj;
            }

            [ year, month, date ] = rawArr.map((str) => { return Number(str.trim().replace(/[^0-9]/gi, '')) });
            month = month - 1;

            if (year < 1000) {
              return errorObj;
            }

            updateQuery["information.birth"] = new Date(year, month, date);

            return { updateQuery, text: `${String(year)}년 ${String(month + 1)}월 ${String(date)}일` };
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "웹페이지",
          value: function (designer) {
            return (designer.information.personalSystem.webPage.length === 0) ? "웹페이지 없음" : designer.information.personalSystem.webPage[0];
          },
          script: function (mother, designer) {
            const text = mother.textContent.trim();
            if (/^http/gi.test(text)) {
              GeneralJs.blankHref(text);
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "인스타",
          value: function (designer) {
            const sns = designer.information.personalSystem.sns;
            let target;
            target = "인스타그램 없음";
            for (let { kind, href } of sns) {
              if (/insta/gi.test(kind)) {
                target = href;
              }
            }
            return target;
          },
          script: function (mother, designer) {
            const text = mother.textContent.trim();
            if (/^http/gi.test(text)) {
              GeneralJs.blankHref(text);
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "블로그",
          value: function (designer) {
            const sns = designer.information.personalSystem.sns;
            let target;
            target = "블로그 없음";
            for (let { kind, href } of sns) {
              if (/naver/gi.test(kind)) {
                target = href;
              }
            }
            return target;
          },
          script: function (mother, designer) {
            const text = mother.textContent.trim();
            if (/^http/gi.test(text)) {
              GeneralJs.blankHref(text);
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "계약 상태",
          value: function (designer) {
            let contents, value;
            contents = [
              "협약 완료",
              "협약 휴직",
              "협약 해지",
              "신청 대기",
            ];
            value = [];
            for (let i of contents) {
              if (i === designer.information.contract.status) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "협약 완료",
              "협약 휴직",
              "협약 해지",
              "신청 대기",
            ];
            target = null;
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
              }
            }
            if (target === null) {
              target = contents[3];
            }
            return { "information.contract.status": target };
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "메인 디자이너",
          value: function (designer) {
            let contents, value;
            contents = [
              "신규",
              "일반",
              "메인"
            ];
            value = [
              (designer.analytics.grade === -1) ? 1 : 0,
              (designer.analytics.grade === 0) ? 1 : 0,
              (designer.analytics.grade === 1) ? 1 : 0,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "신규",
              "일반",
              "메인"
            ];
            target = null;
            for (let i = 0; i < value.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
                break;
              }
            }
            if (target === null) {
              target = contents[1];
            }
            return { "analytics.grade": contents.findIndex((str) => { return str === target }) - 1 };
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
      ]
    },
    {
      name: "업무",
      children: [
        {
          name: "일정",
          script: function (mother, designer) {
            let cancelBack, whitePrompt;

            if (!normalMode) {
              cancelBack = createNode({
                mother: totalContents,
                class: [ possiblePopupClassName ],
                event: {
                  click: (e) => {
                    removeByClass(possiblePopupClassName);
                  }
                },
                style: {
                  position: "fixed",
                  top: String(0),
                  left: String(grayBarWidth) + ea,
                  width: withOut(grayBarWidth, ea),
                  height: withOut(belowHeight, ea),
                  background: colorChip.black,
                  opacity: String(0.3),
                  zIndex: String(zIndex),
                }
              });
  
              whitePrompt = createNode({
                mother: totalContents,
                class: [ possiblePopupClassName ],
                style: {
                  position: "fixed",
                  top: String(margin) + ea,
                  left: String(margin + grayBarWidth) + ea,
                  width: withOut((margin * 2) + grayBarWidth, ea),
                  height: withOut((margin * 2) + belowHeight, ea),
                  background: colorChip.white,
                  borderRadius: String(5) + "px",
                  animation: "fadeuplite 0.3s ease forwards",
                  boxShadow: "0 2px 10px -6px " + colorChip.shadow,
                  overflow: "hidden",
                  zIndex: String(zIndex),
                },
                child: {
                  mode: "iframe",
                  attribute: {
                    src: BACKHOST + "/middle/designerPossible?desid=" + designer.desid + "&entire=true",
                  },
                  style: {
                    position: "absolute",
                    display: "block",
                    top: String(0),
                    left: String(0),
                    width: withOut(0, ea),
                    height: withOut(0, ea),
                    border: String(0),
                  }
                }
              });
            } else {
              window.parent.postMessage(JSON.stringify({ type: "whiteConverting", desid: designer.desid, mode: "possible" }), "*");
            }

          },
          value: function (designer) {
            return "일정 관리";
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "경력",
          value: async function (nodeArr, designer) {
            try {
              const [ abc, title, mother ] = nodeArr;
              const { ajaxJson, colorChip, createNode, createNodes, cleanChildren } = GeneralJs;
              const { information } = designer;
              const { relatedY, relatedM, startY, startM } = information.business.career;
              const desid = designer.desid;
              let h;
              let margin;
              let totalWidth;

              h = document.createDocumentFragment();
              margin = 15;
              totalWidth = 800;

              createNode({
                mother: h,
                text: `유관 경력 : ${String(relatedY)}년 ${String(relatedM)}개월`,
                events: [
                  {
                    type: "click",
                    event: function (e) {
                      e.stopPropagation();
                      if (/div/gi.test(e.target.nodeName)) {
                        const [ cancelBox, inputBox ] = createNodes([
                          {
                            mother: this,
                            mode: "aside",
                            events: [
                              {
                                type: "click",
                                event: function (e) {
                                  this.parentElement.removeChild(this.parentElement.querySelector("input"));
                                  this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                                }
                              }
                            ],
                            style: {
                              position: "fixed",
                              top: String(0) + ea,
                              left: String(0) + ea,
                              width: String(100) + '%',
                              height: String(100) + '%',
                              background: "transparent",
                              zIndex: String(1),
                            }
                          },
                          {
                            mother: this,
                            mode: "input",
                            attribute: [
                              { type: "text" },
                              { value: this.textContent },
                              { past: this.textContent },
                            ],
                            events: [
                              {
                                type: "keypress",
                                event: async function (e) {
                                  try {
                                    if (e.key === "Enter") {
                                      const designer = instance.designers.pick(desid);
                                      const whereQuery = { desid };
                                      let updateQuery;
                                      let text;
                                      let relatedY, relatedM;
                                      let tempArr;
                                      let confirm;
                                      if (/년/g.test(this.value)) {
                                        tempArr = this.value.split('년');
                                        if (tempArr.length !== 2) {
                                          text = this.getAttribute("past");
                                          this.value = text;
                                        } else {
                                          relatedY = Number(tempArr[0].replace(/[^0-9]/g, ''));
                                          relatedM = Number(tempArr[1].replace(/[^0-9]/g, ''));
                                          if (Number.isNaN(relatedY) || Number.isNaN(relatedM)) {
                                            text = this.getAttribute("past");
                                            this.value = text;
                                          } else {
                                            updateQuery = {};
                                            updateQuery["information.business.career.relatedY"] = relatedY;
                                            updateQuery["information.business.career.relatedM"] = relatedM;
                                            text = `유관 경력 : ${String(relatedY)}년 ${String(relatedM)}개월`;

                                            if (window.confirm("수정이 확실합니까?")) {
                                              await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                                              await ajaxJson({
                                                mode: "sse",
                                                db: "console",
                                                collection: "sse_checklistDesigner",
                                                log: true,
                                                who: (cookies.homeliaisonConsoleLoginedEmail),
                                                updateQuery: {
                                                  desid,
                                                  type: "async__function__{ mother.querySelectorAll('div')[0].textContent __equal__ value; }",
                                                  value: text,
                                                  position: { x: 1, y: 0, class: "dom_" + String(1) + "_" + String(0) },
                                                  update: { whereQuery, updateQuery }
                                                }
                                              }, "/generalMongo");
                                              await ajaxJson({
                                                page: "checklist",
                                                mode: "update",
                                                who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                                                update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                                                desid,
                                              }, "/ghostDesigner_updateAnalytics");
                                              instance.designers.update([ whereQuery, updateQuery ]);
                                              if (typeof window.parent.postMessage === "function") {
                                                window.parent.postMessage(JSON.stringify({
                                                  type: "checklistUpdate",
                                                  desid: desid,
                                                  updateQuery,
                                                }), "*");
                                              }
                                            } else {
                                              text = this.getAttribute("past");
                                              this.value = text;
                                            }
                                          }
                                        }
                                      } else {
                                        text = this.getAttribute("past");
                                        this.value = text;
                                      }
                                      this.parentElement.removeChild(this.parentElement.firstChild);
                                      this.parentElement.insertAdjacentHTML("beforeend", text);
                                      this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                                      this.parentElement.removeChild(this.parentElement.querySelector("input"));
                                    }
                                  } catch (err) {
                                    console.log(err);
                                  }
                                }
                              }
                            ],
                            style: {
                              display: "block",
                              position: "absolute",
                              fontSize: "inherit",
                              fontWeight: String(400),
                              top: String(0),
                              left: String(0),
                              color: colorChip.green,
                              background: colorChip.white,
                              border: String(0),
                              outline: String(0),
                              width: String(this.getBoundingClientRect().width) + ea,
                              zIndex: String(1),
                            }
                          }
                        ]);
                        inputBox.focus();
                      }
                    }
                  }
                ],
                style: {
                  display: desktop ? "inline-block" : "block",
                  position: "relative",
                  fontSize: "inherit",
                  fontWeight: "inherit",
                  color: colorChip.black,
                  marginRight: String(margin) + ea,
                  width: desktop ? "auto" : String(100) + '%',
                  marginBottom: String(desktop ? 0 : 1.5) + ea,
                }
              });
              createNode({
                mother: h,
                text: '|',
                style: {
                  display: desktop ? "inline-block" : "none",
                  position: "relative",
                  fontSize: "inherit",
                  fontWeight: String(200),
                  color: colorChip.gray4,
                  marginRight: String(margin) + ea,
                }
              });
              createNode({
                mother: h,
                text: `스타일링 시작일 : ${String(startY)}년 ${String(startM)}월`,
                events: [
                  {
                    type: "click",
                    event: function (e) {
                      e.stopPropagation();
                      if (/div/gi.test(e.target.nodeName)) {
                        const [ cancelBox, inputBox ] = createNodes([
                          {
                            mother: this,
                            mode: "aside",
                            events: [
                              {
                                type: "click",
                                event: function (e) {
                                  this.parentElement.removeChild(this.parentElement.querySelector("input"));
                                  this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                                }
                              }
                            ],
                            style: {
                              position: "fixed",
                              top: String(0) + ea,
                              left: String(0) + ea,
                              width: String(100) + '%',
                              height: String(100) + '%',
                              background: "transparent",
                              zIndex: String(1),
                            }
                          },
                          {
                            mother: this,
                            mode: "input",
                            attribute: [
                              { type: "text" },
                              { value: this.textContent },
                              { past: this.textContent },
                            ],
                            events: [
                              {
                                type: "keypress",
                                event: async function (e) {
                                  try {
                                    if (e.key === "Enter") {
                                      const designer = instance.designers.pick(desid);
                                      const whereQuery = { desid };
                                      let updateQuery;
                                      let text;
                                      let startY, startM;
                                      let tempArr;
                                      if (/년/g.test(this.value)) {
                                        tempArr = this.value.split('년');
                                        if (tempArr.length !== 2) {
                                          text = this.getAttribute("past");
                                          this.value = text;
                                        } else {
                                          startY = Number(tempArr[0].replace(/[^0-9]/g, ''));
                                          startM = Number(tempArr[1].replace(/[^0-9]/g, ''));
                                          if (Number.isNaN(startY) || Number.isNaN(startM)) {
                                            text = this.getAttribute("past");
                                            this.value = text;
                                          } else {
                                            updateQuery = {};
                                            updateQuery["information.business.career.startY"] = startY;
                                            updateQuery["information.business.career.startM"] = startM;
                                            text = `스타일링 시작일 : ${String(startY)}년 ${String(startM)}월`;
                                            if (window.confirm("수정이 확실합니까?")) {
                                              await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                                              await ajaxJson({
                                                mode: "sse",
                                                db: "console",
                                                collection: "sse_checklistDesigner",
                                                log: true,
                                                who: (cookies.homeliaisonConsoleLoginedEmail),
                                                updateQuery: {
                                                  desid,
                                                  type: "async__function__{ mother.querySelectorAll('div')[2].textContent __equal__ value; }",
                                                  value: text,
                                                  position: { x: 1, y: 0, class: "dom_" + String(1) + "_" + String(0) },
                                                  update: { whereQuery, updateQuery }
                                                }
                                              }, "/generalMongo");
                                              await ajaxJson({
                                                page: "checklist",
                                                mode: "update",
                                                who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                                                update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                                                desid,
                                              }, "/ghostDesigner_updateAnalytics");
                                              instance.designers.update([ whereQuery, updateQuery ]);
                                              if (typeof window.parent.postMessage === "function") {
                                                window.parent.postMessage(JSON.stringify({
                                                  type: "checklistUpdate",
                                                  desid: desid,
                                                  updateQuery,
                                                }), "*");
                                              }
                                            } else {
                                              text = this.getAttribute("past");
                                              this.value = text;
                                            }
                                          }
                                        }
                                      } else {
                                        text = this.getAttribute("past");
                                        this.value = text;
                                      }
                                      this.parentElement.removeChild(this.parentElement.firstChild);
                                      this.parentElement.insertAdjacentHTML("beforeend", text);
                                      this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                                      this.parentElement.removeChild(this.parentElement.querySelector("input"));
                                    }
                                  } catch (err) {
                                    console.log(err);
                                  }
                                }
                              }
                            ],
                            style: {
                              display: "block",
                              position: "absolute",
                              fontSize: "inherit",
                              fontWeight: String(400),
                              top: String(0),
                              left: String(0),
                              color: colorChip.green,
                              background: colorChip.white,
                              border: String(0),
                              outline: String(0),
                              width: String(this.getBoundingClientRect().width) + ea,
                              zIndex: String(1),
                            }
                          }
                        ]);
                        inputBox.focus();
                      }
                    }
                  }
                ],
                style: {
                  display: desktop ? "inline-block" : "block",
                  position: "relative",
                  fontSize: "inherit",
                  fontWeight: "inherit",
                  color: colorChip.black,
                  marginRight: String(margin) + ea,
                  width: desktop ? "auto" : String(100) + '%',
                }
              });

              cleanChildren(mother);
              mother.appendChild(h);
              mother.style.overflow = "hidden";
              mother.style.width = desktop ? (String(totalWidth) + ea) : String(100) + '%';
              mother.style.fontWeight = String(400);

            } catch (e) {
              console.log(e);
            }
          },
          height: (desktop ? factorHeight : factorHeight * 1.75),
          search: function (designer, z = null) {
            let contents, tempArr;
            contents = [
              "1년 이하",
              "1년 - 3년",
              "3년 - 5년",
              "5년 - 7년",
              "7년 - 10년",
              "10년 이상"
            ];
            if (z === null) {
              return { contents };
            } else if (typeof z === "number") {
              const today = new Date();
              const { information } = designer;
              const { startY, startM } = information.business.career;
              const thisMonth = ((today.getFullYear() * 12) + today.getMonth()) - ((startY * 12) + startM);
              tempArr = contents[z].split(" - ");
              if (tempArr.length === 1) {
                if (/이상/gi.test(contents[z])) {
                  return { result: ((Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) <= thisMonth) };
                } else {
                  return { result: ((Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) >= thisMonth) };
                }
              } else {
                return { result: ((Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) <= thisMonth && (Number(tempArr[1].replace(/[^0-9]/gi, '')) * 12) > thisMonth) };
              }
            }
          },
          type: "async",
        },
        {
          name: "경력 상세",
          value: function (designer) {
            return "팝업 보기";
          },
          script: function (mother, designer) {
            if (document.getElementById("memoTong") === null) {
              mother.textContent = "팝업 제거";
            } else {
              mother.textContent = "팝업 보기";
            }
            instance.checkListDesignerMemo(designer.desid).call(instance.totalMother, { preventDefault: () => {}, stopPropagation: () => {} });
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "포트폴리오",
          value: function (designer) {
            return "포트폴리오 보기";
          },
          script: function (mother, designer) {
            let cancelBack, whitePrompt;

            if (!normalMode) {
              cancelBack = createNode({
                mother: totalContents,
                class: [ possiblePopupClassName ],
                event: {
                  click: (e) => {
                    removeByClass(possiblePopupClassName);
                  }
                },
                style: {
                  position: "fixed",
                  top: String(0),
                  left: String(grayBarWidth) + ea,
                  width: withOut(grayBarWidth, ea),
                  height: withOut(belowHeight, ea),
                  background: colorChip.black,
                  opacity: String(0.3),
                  zIndex: String(zIndex),
                }
              });
  
              whitePrompt = createNode({
                mother: totalContents,
                class: [ possiblePopupClassName ],
                style: {
                  position: "fixed",
                  top: String(margin) + ea,
                  left: String(margin + grayBarWidth) + ea,
                  width: withOut((margin * 2) + grayBarWidth, ea),
                  height: withOut((margin * 2) + belowHeight, ea),
                  background: colorChip.white,
                  borderRadius: String(5) + "px",
                  animation: "fadeuplite 0.3s ease forwards",
                  boxShadow: "0 2px 10px -6px " + colorChip.shadow,
                  overflow: "hidden",
                  zIndex: String(zIndex),
                },
                child: {
                  mode: "iframe",
                  attribute: {
                    src: window.location.protocol + "//" + window.location.host + "/designer?mode=general&desid=" + designer.desid + "&dataonly=true&entire=true",
                  },
                  style: {
                    position: "absolute",
                    display: "block",
                    top: String(0),
                    left: String(0),
                    width: withOut(0, ea),
                    height: withOut(0, ea),
                    border: String(0),
                  }
                }
              });
            } else {
              window.parent.postMessage(JSON.stringify({ type: "whiteConverting", desid: designer.desid, mode: "portfolio" }), "*");
            }
          },
          height: factorHeight,
          type: "string",
          middle: true,
        },
        {
          name: "계좌번호",
          value: function (designer) {
            return (designer.information.business.account.length === 0) ? "계좌 없음" : designer.information.business.account[0].bankName + " " + designer.information.business.account[0].accountNumber;
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let divText;
            let tempArr, tempObj;
            updateQuery = {};
            divText = "";
            updateQuery["information.business.account"] = [];
            if (/없음/gi.test(text)) {
              return { updateQuery: { "information.business.account": [] }, text: "계좌 없음" };
            } else if (!/ /gi.test(text)) {
              return errorObj;
            } else {
              tempArr = text.split(' ');
              if (tempArr.length !== 2) {
                return errorObj;
              } else {
                if (tempArr[1].replace(/[0-9\-]/g, '') === '') {
                  tempObj = {};
                  tempObj.bankName = tempArr[0].trim();
                  tempObj.accountNumber = tempArr[1].trim().replace(/[^0-9\-]/g, '');
                  updateQuery["information.business.account"].push(tempObj);
                  divText = tempObj.bankName + " " + tempObj.accountNumber;
                } else {
                  return errorObj;
                }
              }
            }
            return { updateQuery, text: divText };
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "사업자",
          value: function (designer) {
            let contents, value;
            contents = [ "프리랜서", "개인사업자(간이)", "개인사업자(일반)", "법인사업자(간이)", "법인사업자(일반)" ];
            value = [];
            for (let i of contents) {
              if (i === designer.information.business.businessInfo.classification) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [ "프리랜서", "개인사업자(간이)", "개인사업자(일반)", "법인사업자(간이)", "법인사업자(일반)" ];
            target = null;
            for (let i = 0; i < value.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
                break;
              }
            }
            if (target === null) {
              target = contents[0];
            }
            return { "information.business.businessInfo.classification": target };
          },
          height: desktop ? factorHeight * 2.1 : factorHeight * 4.7,
          width: factorWidth,
          totalWidth: factorWidth * 3,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "등록번호",
          value: function (designer) {
            return (designer.information.business.businessInfo.businessNumber === '') ? "사업자 등록번호 없음" : designer.information.business.businessInfo.businessNumber;
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let divText;
            let tempArr, tempObj;
            updateQuery = {};
            divText = "";
            if (/없음/gi.test(text)) {
              return { updateQuery: { "information.business.businessInfo.businessNumber": "" }, text: "사업자 등록번호 없음" };
            } else if (text.replace(/[0-9\-]/g, '') === '') {
              updateQuery["information.business.businessInfo.businessNumber"] = text.replace(/[^0-9\-]/g, '');
              divText = text.replace(/[^0-9\-]/g, '');
            } else {
              return errorObj;
            }
            return { updateQuery, text: divText };
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "수수료",
          value: function (designer) {
            const dateToString = (date) => { return String(date.getFullYear()).slice(2) + '.' + String(date.getMonth() + 1) + '.' + String(date.getDate()); }
            const history = designer.information.business.service.cost.percentageHistory;
            const token = "&nbsp;/&nbsp;";
            let str;
            let tempArr, tempArr2;
            str = String(designer.information.business.service.cost.percentage) + " (현재)";
            for (let { date: { start, end }, percentage } of history) {
              str += token;
              str += String(percentage);
              str += " (";
              str += dateToString(start);
              str += "-";
              str += dateToString(end);
              str += ")";
            }
            if (/\//g.test(str)) {
              if (str.split("/").length > 5) {
                tempArr = str.split("/");
                tempArr2 = [];
                for (let i = 0; i < 5; i++) {
                  tempArr2.push(tempArr[i].trim());
                }
                str = tempArr2.join(token);
              }
            }
            return str;
          },
          update: function (text, designer) {
            const dateToString = (date) => { return String(date.getFullYear()).slice(2) + '.' + String(date.getMonth() + 1) + '.' + String(date.getDate()); }
            const errorObj = { updateQuery: "error", text: "error" };
            const token = "&nbsp;/&nbsp;";
            let updateQuery;
            let divText;
            let tempArr, tempArr2;
            let past, history, contractDate, startDate, endDate;
            let str;

            updateQuery = {};
            divText = "";

            past = designer.information.business.service.cost.percentage;
            history = designer.information.business.service.cost.percentageHistory;
            contractDate = designer.information.contract.date;

            tempArr = text.split(' ');
            if (tempArr.length === 0) {
              return errorObj;
            }
            text = tempArr[0];

            if (/[^0-9]/g.test(text)) {
              return errorObj;
            } else {
              if (Number.isNaN(Number(text.replace(/[^0-9]/g, '')))) {
                return errorObj;
              } else {
                endDate = new Date();
                if (history.length === 0) {
                  startDate = contractDate;
                } else {
                  startDate = history[0].date.end;
                }
                history.unshift({ date: { start: startDate, end: endDate }, percentage: past });
                updateQuery["information.business.service.cost.percentage"] = Number(text.replace(/[^0-9]/g, ''));
                updateQuery["information.business.service.cost.percentageHistory"] = history;

                str = String(text) + " (현재)";
                for (let { date: { start, end }, percentage } of history) {
                  str += token;
                  str += String(percentage);
                  str += " (";
                  str += dateToString(start);
                  str += "-";
                  str += dateToString(end);
                  str += ")";
                }

                if (/\//g.test(str)) {
                  if (str.split("/").length > 5) {
                    tempArr = str.split("/");
                    tempArr2 = [];
                    for (let i = 0; i < 5; i++) {
                      tempArr2.push(tempArr[i].trim());
                    }
                    str = tempArr2.join(token);
                  }
                }
                divText = str;
              }
            }
            return { updateQuery, text: divText };
          },
          height: factorHeight * 1.1,
          type: "string",
          middle: true,
        },
      ]
    },
    {
      name: "공간",
      children: [
        {
          name: "주소",
          value: function (designer) {
            return designer.information.address;
          },
          update: function (value, designer) {
            const position = "information.address";
            const error = "error";
            let updateQuery, tempArr, tempArr2, text;
            updateQuery = {};
            tempArr = value.split('\n');
            tempArr2 = [];
            for (let words of tempArr) {
              if (words.trim().replace(/ /gi, '') !== '') {
                text = words.trim();
                tempArr2.push(words.trim());
              }
            }
            updateQuery[position] = tempArr2;
            return updateQuery;
          },
          textHeight: desktop ? 14 : 6.5,
          height: desktop ? factorHeight : factorHeight * 1.8,
          type: "longtext",
        },
        {
          name: "유효 범위",
          value: function (designer) {
            return String(designer.analytics.region.range) + "km";
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let divText;
            let tempArr, tempObj;
            updateQuery = {};
            divText = "";
            text = Number(text.replace(/[^0-9]/gi, ''));
            updateQuery["analytics.region.range"] = text;
            divText = String(text) + "km";
            if (Number.isNaN(text)) {
              return errorObj;
            } else {
              return { updateQuery, text: divText };
            }
          },
          search: function (designer, z = null) {
            let contents;
            contents = [
              "40km 미만",
              "40km - 60km",
              "60km - 80km",
              "80km - 100km",
              "100km - 120km",
              "120km 이상"
            ];
            if (z === null) {
              return { contents };
            } else if (typeof z === "number") {
              tempArr = contents[z].split(" - ");
              if (tempArr.length === 1) {
                if (/이상/gi.test(contents[z])) {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.range) };
                } else {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) > designer.analytics.region.range) };
                }
              } else {
                return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.range && Number(tempArr[1].replace(/[^0-9]/gi, '')) > designer.analytics.region.range) };
              }
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "한계 범위",
          value: function (designer) {
            return String(designer.analytics.region.expenses) + "km";
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let divText;
            let tempArr, tempObj;
            updateQuery = {};
            divText = "";
            text = Number(text.replace(/[^0-9]/gi, ''));
            updateQuery["analytics.region.expenses"] = text;
            divText = String(text) + "km";
            if (Number.isNaN(text)) {
              return errorObj;
            } else {
              return { updateQuery, text: divText };
            }
          },
          search: function (designer, z = null) {
            let contents;
            contents = [
              "40km 미만",
              "40km - 60km",
              "60km - 80km",
              "80km - 100km",
              "100km - 120km",
              "120km 이상"
            ];
            if (z === null) {
              return { contents };
            } else if (typeof z === "number") {
              tempArr = contents[z].split(" - ");
              if (tempArr.length === 1) {
                if (/이상/gi.test(contents[z])) {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.expenses) };
                } else {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) > designer.analytics.region.expenses) };
                }
              } else {
                return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.expenses && Number(tempArr[1].replace(/[^0-9]/gi, '')) > designer.analytics.region.expenses) };
              }
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "시공 한계 범위",
          value: function (designer) {
            return String(designer.analytics.region.construct) + "km";
          },
          update: function (text, designer) {
            const errorObj = { updateQuery: "error", text: "error" };
            let updateQuery;
            let divText;
            let tempArr, tempObj;
            updateQuery = {};
            divText = "";
            text = Number(text.replace(/[^0-9]/gi, ''));
            updateQuery["analytics.region.construct"] = text;
            divText = String(text) + "km";
            if (Number.isNaN(text)) {
              return errorObj;
            } else {
              return { updateQuery, text: divText };
            }
          },
          search: function (designer, z = null) {
            let contents;
            contents = [
              "40km 미만",
              "40km - 60km",
              "60km - 80km",
              "80km - 100km",
              "100km - 120km",
              "120km 이상"
            ];
            if (z === null) {
              return { contents };
            } else if (typeof z === "number") {
              tempArr = contents[z].split(" - ");
              if (tempArr.length === 1) {
                if (/이상/gi.test(contents[z])) {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.construct) };
                } else {
                  return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) > designer.analytics.region.construct) };
                }
              } else {
                return { result: (Number(tempArr[0].replace(/[^0-9]/gi, '')) <= designer.analytics.region.construct && Number(tempArr[1].replace(/[^0-9]/gi, '')) > designer.analytics.region.construct) };
              }
            }
          },
          height: factorHeight,
          type: "string",
        },
        {
          name: "이동 수단",
          value: function (designer) {
            let contents, value;
            contents = [
              "대중교통",
              "자동차"
            ];
            value = [
              (/대중/.test(designer.analytics.region.transportation)) ? 1 : 0,
              (/대중/.test(designer.analytics.region.transportation)) ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "대중교통",
              "자동차"
            ];
            target = null;
            for (let i = 0; i < value.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
                break;
              }
            }
            if (target === null) {
              target = contents[0];
            }
            return { "analytics.region.transportation": target };
          },
          height: factorHeight * 1.1,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
      ]
    },
    {
      name: "작업",
      children: [
        {
          name: "활동 범위",
          value: function (designer) {
            const { matrix } = designer.analytics.project;
            let contents, value;
            contents = [
              "홈퍼니싱 프리미엄",
              "홈스타일링 프리미엄",
              "토탈 스타일링 프리미엄",
              "설계 변경 프리미엄",
              "홈퍼니싱 일반",
              "홈스타일링 일반",
              "토탈 스타일링 일반",
              "설계 변경 일반",
            ];
            value = [
              matrix[0][2],
              matrix[1][2],
              matrix[2][2],
              matrix[3][2],
              matrix[0][1],
              matrix[1][1],
              matrix[2][1],
              matrix[3][1],
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            let xy, updateQuery;
            const positionConst = "analytics.project.matrix.";
            xy = [
              '0.2',
              '1.2',
              '2.2',
              '3.2',
              '0.1',
              '1.1',
              '2.1',
              '3.1',
            ];
            updateQuery = {};
            for (let i = 0; i < value.length; i++) {
              updateQuery[positionConst + xy[i]] = value[i];
            }
            return updateQuery;
          },
          height: desktop ? factorHeight * 2 : factorHeight * 7.3,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
          middle: true,
        },
        {
          name: "부분 공간",
          value: function (designer) {
            const { matrix } = designer.analytics.project;
            let contents, value;
            contents = [
              "홈퍼니싱 부분 공간",
              "홈스타일링 부분 공간",
              "토탈 스타일링 부분 공간",
              "설계 변경 부분 공간",
            ];
            value = [
              matrix[0][0],
              matrix[1][0],
              matrix[2][0],
              matrix[3][0],
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            let xy, updateQuery;
            const positionConst = "analytics.project.matrix.";
            xy = [
              '0.0',
              '1.0',
              '2.0',
              '3.0'
            ];
            updateQuery = {};
            for (let i = 0; i < value.length; i++) {
              updateQuery[positionConst + xy[i]] = value[i];
            }
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
          middle: true,
        },
        {
          name: "온라인",
          value: function (designer) {
            let contents, value;
            contents = [
              "가능",
              "불가능"
            ];
            value = [
              designer.analytics.project.online ? 1 : 0,
              designer.analytics.project.online ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.project.online";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "거주중",
          value: function (designer) {
            let contents, value;
            contents = [
              "가능",
              "불가능"
            ];
            value = [
              designer.analytics.project.living ? 1 : 0,
              designer.analytics.project.living ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.project.living";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        /*
        {
          name: "고객 예산 범위",
          value: function (designer) {
            let { min, max } = designer.analytics.project.operationBudget;
            let contentsValues;
            let tempArr;
            let contents, value;

            min = min / 10000;
            max = max / 10000;

            contents = [
              "0 - 500",
              "500 - 1000",
              "1000 - 2000",
              "2000 - 5000",
              "5000 -",
            ];

            contentsValues = [];
            for (let i = 0; i < contents.length; i++) {
              tempArr = contents[i].split(' - ');
              if (tempArr.length === 1) {
                tempArr.push("10000");
              }
              for (let j = 0; j < tempArr.length; j++) {
                tempArr[j] = Number(tempArr[j].replace(/[^0-9]/g, ''));
              }
              if (tempArr.length !== 2) {
                throw new Error("range error");
              }
              contentsValues.push(tempArr);
            }
            value = [];
            for (let i = 0; i < contents.length; i++) {
              value.push((min <= contentsValues[i][0] && contentsValues[i][1] <= max) ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents;
            let min = null, max = null;
            contents = [
              [ 0, 500 ],
              [ 500, 1000 ],
              [ 1000, 2000 ],
              [ 2000, 5000 ],
              [ 5000, 10000 ],
            ];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                min = i;
                break;
              }
            }
            for (let i = contents.length - 1; i > -1; i--) {
              if (value[i] === 1) {
                max = i;
                break;
              }
            }
            if (min === null || max === null) {
              min = 0;
              max = 0;
            }
            return { "analytics.project.operationBudget": { min: (contents[min][0] * 10000), max: (contents[max][1] * 10000) } };
          },
          height: desktop ? factorHeight : factorHeight * 4.6,
          width: factorWidth,
          totalWidth: factorWidth * 5,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
          middle: true,
        },
        */
        {
          name: "1차 제안 시간",
          value: function (designer) {
            let contents, value;
            contents = [
              "1주일 이내",
              "2주일 이내",
              "3주일 이내",
              "3주 이상"
            ];
            value = [];
            for (let i = 0; i < contents.length; i++) {
              if (designer.analytics.project.time.first === ((i + 1) * 7)) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              7,
              14,
              21,
              28
            ];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = i;
              }
            }
            return { "analytics.project.time.first": contents[target] };
          },
          height: desktop ? factorHeight : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "페이퍼 워크",
          value: function (designer) {
            let contents, value;
            contents = [
              "도면",
              "3D",
              "컨셉 제안",
              "마감재 제안",
              "제품 리스트",
              "제품 이미지",
              "콜라주",
            ];
            value = [];
            for (let i of contents) {
              value.push(designer.analytics.project.paperWork.includes(i) ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "도면",
              "3D",
              "컨셉 제안",
              "마감재 제안",
              "제품 리스트",
              "제품 이미지",
              "콜라주",
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            return { "analytics.project.paperWork": target };
          },
          height: desktop ? factorHeight * 2.1 : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
          half: true
        },
      ]
    },
    {
      name: "시공",
      children: [
        {
          name: "시공 유형",
          value: function (designer) {
            let contents, value;
            contents = [ "N", "F", "J", "S" ];
            value = [ 0, 0, 0, 0 ];
            if (value[designer.analytics.construct.level] === undefined) {
              throw new Error("level error");
            }
            value[designer.analytics.construct.level] = 1;
            return { contents, value };
          },
          update: function (value, designer) {
            let target;
            target = null;
            for (let i = 0; i < value.length; i++) {
              if (value[i] === 1) {
                target = i;
              }
            }
            if (target === null) {
              target = 1;
            }
            return { "analytics.construct.level": target };
          },
          height: desktop ? factorHeight : factorHeight * 1.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
          half: true,
        },
        {
          name: "시공 감리",
          value: function (designer) {
            let contents, value;
            contents = [
              "가능",
              "불가능"
            ];
            value = [
              designer.analytics.construct.possible.supervision ? 1 : 0,
              designer.analytics.construct.possible.supervision ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.possible.supervision";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        // {
        //   name: "시공 방식 (S)",
        //   value: function (designer) {
        //     const constructCase = designer.analytics.construct.case;
        //     if (!Array.isArray(constructCase)) {
        //       throw new Error("invaild value");
        //     }
        //     if (constructCase.length !== 3) {
        //       throw new Error("invaild value");
        //     }
        //     let contents, value;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     value = [];
        //     for (let i of contents) {
        //       value.push(constructCase[0].contract.includes(i) ? 1 : 0);
        //     }
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     const position = "analytics.construct.case.0.contract";
        //     let contents, updateQuery, target;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     target = [];
        //     for (let i = 0; i < contents.length; i++) {
        //       if (value[i] === 1) {
        //         target.push(contents[i]);
        //       }
        //     }
        //     updateQuery = {};
        //     updateQuery[position] = target;
        //     return updateQuery;
        //   },
        //   height: desktop ? factorHeight : factorHeight * 3.8,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        //   multiple: true,
        // },
        {
          name: "시공 가능 (S)",
          value: function (designer) {
            const constructCase = designer.analytics.construct.case;
            if (!Array.isArray(constructCase)) {
              throw new Error("invaild value");
            }
            if (constructCase.length !== 3) {
              throw new Error("invaild value");
            }
            let contents, value;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            value = [];
            for (let i of contents) {
              value.push(constructCase[0].possible.includes(i) ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.case.0.possible";
            let contents, updateQuery, target;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            updateQuery = {};
            updateQuery[position] = target;
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 2.9,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
        },
        // {
        //   name: "시공 방식 (T)",
        //   value: function (designer) {
        //     const constructCase = designer.analytics.construct.case;
        //     if (!Array.isArray(constructCase)) {
        //       throw new Error("invaild value");
        //     }
        //     if (constructCase.length !== 3) {
        //       throw new Error("invaild value");
        //     }
        //     let contents, value;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     value = [];
        //     for (let i of contents) {
        //       value.push(constructCase[1].contract.includes(i) ? 1 : 0);
        //     }
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     const position = "analytics.construct.case.1.contract";
        //     let contents, updateQuery, target;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     target = [];
        //     for (let i = 0; i < contents.length; i++) {
        //       if (value[i] === 1) {
        //         target.push(contents[i]);
        //       }
        //     }
        //     updateQuery = {};
        //     updateQuery[position] = target;
        //     return updateQuery;
        //   },
        //   height: desktop ? factorHeight : factorHeight * 3.8,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        //   multiple: true,
        // },
        {
          name: "시공 가능 (T)",
          value: function (designer) {
            const constructCase = designer.analytics.construct.case;
            if (!Array.isArray(constructCase)) {
              throw new Error("invaild value");
            }
            if (constructCase.length !== 3) {
              throw new Error("invaild value");
            }
            let contents, value;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            value = [];
            for (let i of contents) {
              value.push(constructCase[1].possible.includes(i) ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.case.1.possible";
            let contents, updateQuery, target;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            updateQuery = {};
            updateQuery[position] = target;
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 2.9,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
        },
        // {
        //   name: "시공 방식 (XT)",
        //   value: function (designer) {
        //     const constructCase = designer.analytics.construct.case;
        //     if (!Array.isArray(constructCase)) {
        //       throw new Error("invaild value");
        //     }
        //     if (constructCase.length !== 3) {
        //       throw new Error("invaild value");
        //     }
        //     let contents, value;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     value = [];
        //     for (let i of contents) {
        //       value.push(constructCase[2].contract.includes(i) ? 1 : 0);
        //     }
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     const position = "analytics.construct.case.2.contract";
        //     let contents, updateQuery, target;
        //     contents = [
        //       "직접 계약, 직접 감리",
        //       "직접 계약, 외주 감리",
        //       "협업사 계약",
        //       "공정별 연결"
        //     ];
        //     target = [];
        //     for (let i = 0; i < contents.length; i++) {
        //       if (value[i] === 1) {
        //         target.push(contents[i]);
        //       }
        //     }
        //     updateQuery = {};
        //     updateQuery[position] = target;
        //     return updateQuery;
        //   },
        //   height: desktop ? factorHeight : factorHeight * 3.8,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        //   multiple: true,
        // },
        {
          name: "시공 가능 (XT)",
          value: function (designer) {
            const constructCase = designer.analytics.construct.case;
            if (!Array.isArray(constructCase)) {
              throw new Error("invaild value");
            }
            if (constructCase.length !== 3) {
              throw new Error("invaild value");
            }
            let contents, value;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            value = [];
            for (let i of contents) {
              value.push(constructCase[2].possible.includes(i) ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.case.2.possible";
            let contents, updateQuery, target;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            updateQuery = {};
            updateQuery[position] = target;
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
        },
        {
          name: "파트너 시공사",
          value: function (designer) {
            let contents, value;
            contents = [
              "있음",
              "없음"
            ];
            value = [
              designer.analytics.construct.partner ? 1 : 0,
              designer.analytics.construct.partner ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.partner";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "파트너 가능 범위",
          value: function (designer) {
            let contents, value;
            contents = [
              "홈스타일링",
              "토탈 스타일링",
              "엑스트라 스타일링",
            ];
            value = [];
            for (let i = 0; i < contents.length; i++) {
              value.push(designer.analytics.construct.range - 2 === i ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.range";
            let contents, updateQuery, target;
            contents = [
              "홈스타일링",
              "토탈 스타일링",
              "엑스트라 스타일링",
            ];
            target = null;
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = i + 2;
              }
            }
            if (target === null) {
              target = 0 + 2;
            }
            updateQuery = {};
            updateQuery[position] = target;
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },

        {
          name: "주 이용 시공사",
          value: function (designer) {
            let contents, value;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            value = [];
            for (let i of contents) {
              value.push(designer.analytics.construct.major === i ? 1 : 0);
            }
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.construct.major";
            let contents, updateQuery, target;
            contents = [
              "고객 시공사",
              "홈리에종 시공사",
              "디자이너 시공사",
            ];
            target = null;
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
              }
            }
            if (target === null) {
              target = contents[1];
            }
            updateQuery = {};
            updateQuery[position] = target;
            return updateQuery;
          },
          height: desktop ? factorHeight : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
      ]
    },
    {
      name: "스타일링",
      children: [
        {
          name: "스타일링 유형",
          value: function (designer) {
            let contents, value;
            contents = [ "N", "F", "J", "S" ];
            value = [ 0, 0, 0, 0 ];
            if (value[designer.analytics.styling.level] === undefined) {
              throw new Error("level error");
            }
            value[designer.analytics.styling.level] = 1;
            return { contents, value };
          },
          update: function (value, designer) {
            let target;
            target = null;
            for (let i = 0; i < value.length; i++) {
              if (value[i] === 1) {
                target = i;
              }
            }
            if (target === null) {
              target = 1;
            }
            return { "analytics.styling.level": target };
          },
          height: desktop ? factorHeight : factorHeight * 1.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
          half: true,
        },
        {
          name: "제안 방식",
          value: function (designer) {
            let contents, value;
            contents = [
              "순차 제안",
              "한번에 제안"
            ];
            value = [];
            for (let i of contents) {
              if (i === designer.analytics.styling.method) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "순차 제안",
              "한번에 제안"
            ];
            target = null;
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
              }
            }
            if (target === null) {
              target = contents[0];
            }
            return { "analytics.styling.method": target };
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 3,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "빌트인 제작",
          value: function (designer) {
            let contents, value;
            contents = [
              "가능",
              "불가능"
            ];
            value = [
              designer.analytics.styling.furniture.builtin ? 1 : 0,
              designer.analytics.styling.furniture.builtin ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.styling.furniture.builtin";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        // {
        //   name: "빌트인 상세",
        //   value: function (designer) {
        //     let contents, value;
        //     contents = [
        //       "도면",
        //       "3D",
        //       "AS 가능"
        //     ];
        //     value = [];
        //     for (let i of contents) {
        //       value.push(designer.analytics.styling.furniture.builtinDetail.includes(i) ? 1 : 0);
        //     }
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     let contents, target;
        //     contents = [
        //       "도면",
        //       "3D",
        //       "AS 가능"
        //     ];
        //     target = [];
        //     for (let i = 0; i < contents.length; i++) {
        //       if (value[i] === 1) {
        //         target.push(contents[i]);
        //       }
        //     }
        //     return { "analytics.styling.furniture.builtinDetail": target };
        //   },
        //   height: factorHeight,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        //   multiple: true,
        //   half: true
        // },
        {
          name: "가구 제작",
          value: function (designer) {
            let contents, value;
            contents = [
              "가능",
              "불가능"
            ];
            value = [
              designer.analytics.styling.furniture.design ? 1 : 0,
              designer.analytics.styling.furniture.design ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.styling.furniture.design";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        // {
        //   name: "가구 상세",
        //   value: function (designer) {
        //     let contents, value;
        //     contents = [
        //       "도면",
        //       "3D",
        //       "AS 가능"
        //     ];
        //     value = [];
        //     for (let i of contents) {
        //       value.push(designer.analytics.styling.furniture.designDetail.includes(i) ? 1 : 0);
        //     }
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     let contents, target;
        //     contents = [
        //       "도면",
        //       "3D",
        //       "AS 가능"
        //     ];
        //     target = [];
        //     for (let i = 0; i < contents.length; i++) {
        //       if (value[i] === 1) {
        //         target.push(contents[i]);
        //       }
        //     }
        //     return { "analytics.styling.furniture.designDetail": target };
        //   },
        //   height: factorHeight,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        //   multiple: true,
        //   half: true
        // },
        {
          name: "커튼 패브릭",
          value: function (designer) {
            let contents, value;
            contents = [
              "업체 연결",
              "기성 제품 추천",
              "직접 제작"
            ];
            value = [];
            for (let i of contents) {
              if (designer.analytics.styling.fabric.curtain.includes(i)) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "업체 연결",
              "기성 제품 추천",
              "직접 제작"
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            if (target.length === 0) {
              target = [ contents[0] ];
            }
            return { "analytics.styling.fabric.curtain": target };
          },
          height: desktop ? factorHeight : factorHeight * 2.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
        },
        {
          name: "베딩 패브릭",
          value: function (designer) {
            let contents, value;
            contents = [
              "업체 연결",
              "기성 제품 추천",
              "직접 제작"
            ];
            value = [];
            for (let i of contents) {
              if (designer.analytics.styling.fabric.bedding.includes(i)) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "업체 연결",
              "기성 제품 추천",
              "직접 제작"
            ];
            target = [];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target.push(contents[i]);
              }
            }
            if (target.length === 0) {
              target = [ contents[0] ];
            }
            return { "analytics.styling.fabric.bedding": target };
          },
          height: desktop ? factorHeight * 1.5 : factorHeight * 2.9,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          multiple: true,
        },
        {
          name: "스타일 경향성",
          value: function (designer) {
            let contents, contentsKey, contentsMother, value;
            contentsKey = [
              "modern",
              "classic",
              "natural",
              "mixmatch",
              "scandinavian",
              "vintage",
              "oriental",
              "exotic",
            ];
            contentsMother = {
              modern: "모던",
              classic: "클래식",
              natural: "내추럴",
              mixmatch: "믹스매치",
              scandinavian: "북유럽",
              vintage: "빈티지",
              oriental: "오리엔탈",
              exotic: "이그저틱",
            };
            contents = [];
            for (let i of contentsKey) {
              contents.push(contentsMother[i]);
            }
            value = [];
            for (let i of contentsKey) {
              value.push(designer.analytics.styling.tendency.style[i] - 1);
            }
            return { contents, value };
          },
          update: function (z, t, designer) {
            const position = "analytics.styling.tendency.style.";
            let contents, updateQuery;
            contents = [
              "modern",
              "classic",
              "natural",
              "mixmatch",
              "scandinavian",
              "vintage",
              "oriental",
              "exotic",
            ];
            updateQuery = {};
            updateQuery[position + contents[z]] = t + 1;
            return updateQuery;
          },
          height: (tendencyFactorHeight * 8) + (desktop ? factorHeight * 0.7 : mobileTendencyVisualMargin),
          width: factorWidth - tendencyIndent,
          totalWidth: (factorWidth * 4) + tendencyWidthIndent,
          factorHeight: tendencyFactorHeight,
          type: "tendency",
        },
        {
          name: "텍스처 경향성",
          value: function (designer) {
            let contents, contentsKey, contentsMother, value;
            contentsKey = [
              "darkWood",
              "whiteWood",
              "coating",
              "metal",
            ];
            contentsMother = {
              darkWood: "진한 우드",
              whiteWood: "연한 우드",
              coating: "도장",
              metal: "금속",
            };
            contents = [];
            for (let i of contentsKey) {
              contents.push(contentsMother[i]);
            }
            value = [];
            for (let i of contentsKey) {
              value.push(designer.analytics.styling.tendency.texture[i] - 1);
            }
            return { contents, value };
          },
          update: function (z, t, designer) {
            const position = "analytics.styling.tendency.texture.";
            let contents, updateQuery;
            contents = [
              "darkWood",
              "whiteWood",
              "coating",
              "metal",
            ];
            updateQuery = {};
            updateQuery[position + contents[z]] = t + 1;
            return updateQuery;
          },
          height: (tendencyFactorHeight * 4) + (desktop ? factorHeight * 0.7 : mobileTendencyVisualMargin),
          width: factorWidth - tendencyIndent,
          totalWidth: (factorWidth * 4) + tendencyWidthIndent,
          factorHeight: tendencyFactorHeight,
          type: "tendency",
        },
        {
          name: "컬러톤 경향성",
          value: function (designer) {
            let contents, contentsKey, contentsMother, value;
            contentsKey = [
              "darkWood",
              "whiteWood",
              "highContrast",
              "vivid",
              "white",
              "mono",
              "bright",
              "dark",
            ];
            contentsMother = {
              darkWood: "다크 우드",
              whiteWood: "밝은 우드",
              highContrast: "고대비",
              vivid: "비비드",
              white: "화이트",
              mono: "모노톤",
              bright: "밝은톤",
              dark: "어두운톤",
            };
            contents = [];
            for (let i of contentsKey) {
              contents.push(contentsMother[i]);
            }
            value = [];
            for (let i of contentsKey) {
              value.push(designer.analytics.styling.tendency.color[i] - 1);
            }
            return { contents, value };
          },
          update: function (z, t, designer) {
            const position = "analytics.styling.tendency.color.";
            let contents, updateQuery;
            contents = [
              "darkWood",
              "whiteWood",
              "highContrast",
              "vivid",
              "white",
              "mono",
              "bright",
              "dark",
            ];
            updateQuery = {};
            updateQuery[position + contents[z]] = t + 1;
            return updateQuery;
          },
          height: (tendencyFactorHeight * 8) + (desktop ? factorHeight * 0.7 : mobileTendencyVisualMargin),
          width: factorWidth - tendencyIndent,
          totalWidth: (factorWidth * 4) + tendencyWidthIndent,
          factorHeight: tendencyFactorHeight,
          type: "tendency",
        },
        {
          name: "밀도 경향성",
          value: function (designer) {
            let contents, contentsKey, contentsMother, value;
            contentsKey = [
              "maximun",
              "minimum",
            ];
            contentsMother = {
              maximun: "맥시멈",
              minimum: "미니멈",
            };
            contents = [];
            for (let i of contentsKey) {
              contents.push(contentsMother[i]);
            }
            value = [];
            for (let i of contentsKey) {
              value.push(designer.analytics.styling.tendency.density[i] - 1);
            }
            return { contents, value };
          },
          update: function (z, t, designer) {
            const position = "analytics.styling.tendency.density.";
            let contents, updateQuery;
            contents = [
              "maximun",
              "minimum",
            ];
            updateQuery = {};
            updateQuery[position + contents[z]] = t + 1;
            updateQuery[position + contents[1 - z]] = 10 - (t + 1);
            return updateQuery;
          },
          height: (tendencyFactorHeight * 2) + (desktop ? factorHeight * 0.5 : mobileTendencyVisualMargin),
          width: factorWidth - tendencyIndent,
          totalWidth: (factorWidth * 4) + tendencyWidthIndent,
          factorHeight: tendencyFactorHeight,
          type: "tendency",
          opposite: true,
        },
      ]
    },
    {
      name: "구매",
      children: [
        // {
        //   name: "구매 대행",
        //   value: function (designer) {
        //     let contents, value;
        //     contents = [
        //       "가능",
        //       "불가능"
        //     ];
        //     value = [
        //       designer.analytics.purchase.agencies ? 1 : 0,
        //       designer.analytics.purchase.agencies ? 0 : 1,
        //     ];
        //     return { contents, value };
        //   },
        //   update: function (value, designer) {
        //     const position = "analytics.purchase.agencies";
        //     let updateQuery;
        //     updateQuery = {};
        //     updateQuery[position] = (value[0] === 1);
        //     return updateQuery;
        //   },
        //   height: factorHeight,
        //   width: factorWidth,
        //   totalWidth: factorWidth * 4,
        //   factorHeight: factorHeight,
        //   type: "matrix",
        // },
        {
          name: "설치 서비스",
          value: function (designer) {
            let contents, value;
            contents = [
              "직접",
              "연결"
            ];
            value = [
              designer.analytics.purchase.setting.install ? 1 : 0,
              designer.analytics.purchase.setting.install ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.purchase.setting.install";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
        {
          name: "정리 수납",
          value: function (designer) {
            let contents, value;
            contents = [
              "연결",
              "미제공"
            ];
            value = [
              designer.analytics.purchase.setting.storage ? 1 : 0,
              designer.analytics.purchase.setting.storage ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.purchase.setting.storage";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight * 1.1,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
        },
      ]
    },
    {
      name: "성향",
      children: [
        {
          name: "미팅 준비성",
          value: function (designer) {
            let contents, value;
            contents = [
              "높음",
              "낮음"
            ];
            value = [
              designer.analytics.etc.personality[0].value ? 1 : 0,
              designer.analytics.etc.personality[0].value ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.etc.personality.0.value";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "응대 적극성",
          value: function (designer) {
            let contents, value;
            contents = [
              "높음",
              "낮음"
            ];
            value = [
              designer.analytics.etc.personality[1].value ? 1 : 0,
              designer.analytics.etc.personality[1].value ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.etc.personality.1.value";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "마감 기한",
          value: function (designer) {
            let contents, value;
            contents = [
              "정확",
              "지연"
            ];
            value = [
              designer.analytics.etc.personality[2].value ? 1 : 0,
              designer.analytics.etc.personality[2].value ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.etc.personality.2.value";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "진행 스타일",
          value: function (designer) {
            let contents, value;
            contents = [
              "리드",
              "순응"
            ];
            value = [
              designer.analytics.etc.personality[3].value ? 1 : 0,
              designer.analytics.etc.personality[3].value ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.etc.personality.3.value";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "문제 해결력",
          value: function (designer) {
            let contents, value;
            contents = [
              "높음",
              "낮음"
            ];
            value = [
              designer.analytics.etc.personality[4].value ? 1 : 0,
              designer.analytics.etc.personality[4].value ? 0 : 1,
            ];
            return { contents, value };
          },
          update: function (value, designer) {
            const position = "analytics.etc.personality.4.value";
            let updateQuery;
            updateQuery = {};
            updateQuery[position] = (value[0] === 1);
            return updateQuery;
          },
          height: factorHeight,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
        {
          name: "홈리에종 관계",
          value: function (designer) {
            let contents, value;
            contents = [
              "지속가능성 높음",
              "그냥 평범",
              "확인중",
              "좋지 않음"
            ];
            value = [];
            for (let i of contents) {
              if (i === designer.analytics.etc.relation) {
                value.push(1);
              } else {
                value.push(0);
              }
            }
            return { contents, value };
          },
          update: function (value, designer) {
            let contents, target;
            contents = [
              "지속가능성 높음",
              "그냥 평범",
              "확인중",
              "좋지 않음"
            ];
            for (let i = 0; i < contents.length; i++) {
              if (value[i] === 1) {
                target = contents[i];
              }
            }
            return { "analytics.etc.relation": target };
          },
          height: desktop ? factorHeight * 1.1 : factorHeight * 3.8,
          width: factorWidth,
          totalWidth: factorWidth * 4,
          factorHeight: factorHeight,
          type: "matrix",
          middle: true,
        },
      ]
    },
    /*
    {
      name: "세팅",
      children: [
        {
          name: "제안서 설명",
          value: function (designer) {
            return designer.setting.description;
          },
          update: function (value, designer) {
            const position = "setting.description";
            const error = "error";
            let updateQuery, tempArr, tempArr2, text;
            updateQuery = {};
            tempArr = value.split('\n');
            tempArr2 = [];
            for (let words of tempArr) {
              if (words.trim().replace(/ /gi, '') !== '') {
                text = words.trim();
                if (text.length >= 56) {
                  return error;
                }
                if (text.length < 20) {
                  return error;
                }
                tempArr2.push(words.trim());
              }
            }
            updateQuery[position] = tempArr2;
            return updateQuery;
          },
          height: (factorHeight * 2) + 24,
          textHeight: 14,
          factorHeight: factorHeight,
          type: "longtext",
        },
        {
          name: "웹 설명",
          value: function (designer) {
            return designer.setting.front.introduction.desktop;
          },
          update: function (value, designer) {
            const position = "setting.front.introduction.desktop";
            const error = "error";
            let updateQuery, tempArr, tempArr2, text;
            updateQuery = {};
            tempArr = value.split('\n');
            tempArr2 = [];
            for (let words of tempArr) {
              if (words.trim().replace(/ /gi, '') !== '') {
                text = words.trim();
                if (text.length >= 38) {
                  return error;
                }
                if (text.length < 12) {
                  return error;
                }
                tempArr2.push(words.trim());
              }
            }
            updateQuery[position] = tempArr2;
            return updateQuery;
          },
          height: (factorHeight * 3) + 11,
          textHeight: 3,
          factorHeight: factorHeight,
          type: "longtext",
        },
      ]
    }
    */
  ];

  return checkListData;
}

DesignerJs.prototype.checkListDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip, removeByClass } = GeneralJs;
  const memoBaseClassName = "memoBaseClassName";
  const possiblePopupClassName = "possiblePopupClassName";
  let target, pastScrollTop;

  removeByClass(possiblePopupClassName);

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  this.pageHistory.unshift({ path: "checklist", status: "list", desid });
  window.history.pushState({ path: "checklist", status: "list", desid }, '');

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  target = null;
  for (let i = 0; i < this.standardDoms.length; i++) {
    if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
      if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
        target = i;
      }
    }
  }
  for (let i = 1; i < this.standardDoms.length; i++) {
    if (i !== target) {
      this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
    } else {
      this.standardDoms[i].style.color = colorChip.green;
      if (i !== 1) {
        if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
          standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
        }
      } else {
        standardBar.parentElement.scrollTo({ top: 0 });
      }
    }
  }

  this.checkListDetail(desid);
  this.checkListIconSet(desid);
  scrollTo(totalMother, pastScrollTop);
  if (callback !== null) {
    if (typeof callback === "function") {
      callback();
    }
  }

  if ([ ...document.querySelectorAll('.' + memoBaseClassName) ].length > 0 && typeof instance.checklistMemoSystem === "function") {
    instance.checklistMemoSystem(desid).catch((err) => { console.log(err); });
  }
}

DesignerJs.prototype.checkListDetail = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const { entireMode, normalMode } = this;
  const matrixButtonConst = "matrixButtons_" + desid;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const mobile = this.media[4];
  const desktop = normalMode ? true : !mobile;
  let designer;
  let information, analytics;
  let margin;
  let baseTong0, baseTong;
  let matrix;
  let tempArr;
  let tempObj, nodeArr, subNodeArr;
  let eachTotalTong, eachNameTong, eachValueTong;
  let level1Width, level1Left;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let tempMatrix;
  let alphabetWidth;
  let temp;
  let factorHeight, factorWidth;
  let tendencyTop, tendencyHeight;
  let tendencyFactorHeight, tendencyIndent, tendencyWidthIndent;
  let textAreaTop;
  let baseTongMarginBottom;
  let checkListData;
  let middleAdjustTong;
  let mobileTendencyTop;
  let mobileTendencyVisualMargin;
  let mobileTendencyIntend;
  let baseTongPaddingTop, baseTongPaddingBottom;
  let allHideIndex, safeNum;
  let mobileOuterMargin;

  designer = this.designers.pick(desid);
  information = designer.information;
  analytics = designer.analytics;

  margin = 8;
  level1Width = <%% 210, 172, 172, 172, 34 %%>;
  level1Left = <%% 160, 136, 136, 136, 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 11 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 3.5 %%>;

  tendencyTop = <%% 3, 3, 3, 3, 0.8 %%>;
  tendencyHeight = <%% 16, 16, 16, 16, 4 %%>;
  alphabetWidth = <%% 30, 30, 30, 30, 7 %%>;

  factorHeight = <%% 38, 36, 36, 36, 8.2 %%>;
  factorWidth = <%% 210, 172, 172, 172, 210 %%>;
  tendencyFactorHeight = <%% 30, 30, 30, 30, 7 %%>;
  tendencyIndent = <%% 105, 71, 71, 71, 65 %%>;
  tendencyWidthIndent = -135;

  textAreaTop = <%% (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), -0.7 %%>;

  mobileTendencyTop = 8;
  mobileTendencyVisualMargin = 13;
  mobileTendencyIntend = 20;

  baseTongPaddingTop = 1;
  baseTongPaddingBottom = 20;
  mobileOuterMargin = 4;

  checkListData = this.checkListData(factorHeight, factorWidth, tendencyIndent, tendencyWidthIndent, tendencyFactorHeight, mobileTendencyVisualMargin);

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String((GeneralJs.returnGet().normal === "true" ? margin * 1.5 : margin * 3)) + ea : (String(0)),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2), ea),
      height: "auto",
      animation: "",
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: colorChip.white,
      height: "auto",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingTop: desktop ? "" : String(baseTongPaddingTop) + ea,
      paddingBottom: desktop ? "" : String(baseTongPaddingBottom) + ea,
    }
  });

  for (let i = 0; i < checkListData.length; i++) {
    nodeArr = createNodes([
      {
        mother: baseTong,
        style: {
          position: "relative",
          width: String(100) + '%',
          borderBottom: (desktop ? (i !== checkListData.length - 1 ? "1px solid " + colorChip.gray4 : "") : ""),
        }
      },
      {
        mother: -1,
        text: checkListData[i].name,
        style: {
          position: "absolute",
          fontSize: String(size + (mobile ? 0.5 : 0)) + ea,
          fontWeight: String(600),
          color: colorChip.black,
          top: String(topMargin + 1) + ea,
          left: String(leftMargin) + ea,
          background: colorChip.white,
          paddingRight: String(desktop ? 0 : 3) + ea,
          zIndex: String(desktop ? 0 : 1),
        }
      },
      {
        mother: -2,
        style: {
          position: "absolute",
          width: String(level1Width) + ea,
          top: String(desktop ? 0 : size + 1.2 + (topMargin * 1.2)) + ea,
          left: String(desktop ? level1Left : leftMargin) + ea,
          paddingTop: String(topMargin) + ea,
        }
      },
      {
        mother: -3,
        style: {
          position: "relative",
          width: withOut((desktop ? level1Width + level1Left : (leftMargin * 2) + level1Width), ea),
          top: String(desktop ? 0 : size + 1.2 + (topMargin * 1.2)) + ea,
          left: String(desktop ? level1Width + level1Left : leftMargin + level1Width) + ea,
          height: String(100) + '%',
          paddingTop: String(topMargin) + ea,
          paddingBottom: String(bottomMargin) + ea,
        }
      },
      {
        mother: -4,
        text: String.fromCharCode(65 + i),
        style: {
          display: desktop ? "block" : "none",
          position: "absolute",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          color: colorChip.green,
          bottom: String(desktop ? topMargin + (isMac() ? 0 : -3) : (topMargin * 1.2) - 4) + ea,
          right: String(leftMargin) + ea,
          zIndex: String(2),
        }
      },
    ]);

    eachTotalTong = nodeArr[0];
    eachNameTong = nodeArr[2];
    eachValueTong = nodeArr[3];

    for (let j = 0; j < checkListData[i].children.length; j++) {
      tempArr = [];
      tempObj = {
        mother: eachNameTong,
        text: String.fromCharCode(65 + i) + String(j + 1),
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          color: colorChip.green,
          height: String(checkListData[i].children[j].height) + ea,
          width: String(alphabetWidth) + ea,
          verticalAlign: "top",
        }
      };
      tempArr.push(tempObj);
      tempObj = {
        mother: eachNameTong,
        text: checkListData[i].children[j].name,
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: String(size) + ea,
          fontWeight: String(desktop ? 500 : 600),
          color: colorChip.black,
          height: String(checkListData[i].children[j].height) + ea,
          width: withOut(alphabetWidth, ea),
          verticalAlign: "top",
        }
      };
      tempArr.push(tempObj);

      if (checkListData[i].children[j].type === "string") {

        tempObj = {
          mother: eachValueTong,
          text: (typeof checkListData[i].children[j].value === "function") ? checkListData[i].children[j].value(designer) : "NULL",
          class: [ "dom_" + String(i) + "_" + String(j) ],
          attribute: [
            { x: String(i) },
            { y: String(j) },
          ],
          events: [
            {
              type: "click",
              event: function (e) {
                e.stopPropagation();
                if (/div/gi.test(e.target.nodeName)) {
                  const x = Number(this.getAttribute('x'));
                  const y = Number(this.getAttribute('y'));
                  if (typeof checkListData[x].children[y].update === "function") {
                    const [ cancelBox, inputBox ] = createNodes([
                      {
                        mother: this,
                        mode: "aside",
                        events: [
                          {
                            type: "click",
                            event: function (e) {
                              this.parentElement.removeChild(this.parentElement.querySelector("input"));
                              this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                            }
                          }
                        ],
                        style: {
                          position: "fixed",
                          top: String(0) + ea,
                          left: String(0) + ea,
                          width: String(100) + '%',
                          height: String(100) + '%',
                          background: "transparent",
                          zIndex: String(1),
                        }
                      },
                      {
                        mother: this,
                        mode: "input",
                        attribute: [
                          { type: "text" },
                          { value: this.textContent },
                          { past: this.textContent },
                        ],
                        events: [
                          {
                            type: "keypress",
                            event: async function (e) {
                              try {
                                if (e.key === "Enter") {
                                  const designer = instance.designers.pick(desid);
                                  const whereQuery = { desid };
                                  const { updateQuery, text } = checkListData[x].children[y].update(this.value, designer);
                                  const confirm = window.confirm("수정이 확실합니까?");
                                  if (updateQuery === "error" || !confirm) {
                                    this.value = this.getAttribute("past");
                                  } else {
                                    if (this.parentElement !== null) {
                                      this.parentElement.removeChild(this.parentElement.firstChild);
                                      this.parentElement.insertAdjacentHTML("beforeend", text);
                                    }
                                    await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                                    await ajaxJson({
                                      mode: "sse",
                                      db: "console",
                                      collection: "sse_checklistDesigner",
                                      log: true,
                                      who: (cookies.homeliaisonConsoleLoginedEmail),
                                      updateQuery: { desid, type: checkListData[x].children[y].type, value: text, position: { x, y, class: "dom_" + String(x) + "_" + String(y) },
                                      update: { whereQuery, updateQuery } } }, "/generalMongo");
                                    await ajaxJson({
                                      page: "checklist",
                                      mode: "update",
                                      who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                                      update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                                      desid,
                                    }, "/ghostDesigner_updateAnalytics");
                                    instance.designers.update([ whereQuery, updateQuery ]);
                                  }
                                  if (this.parentElement !== null) {
                                    this.parentElement.removeChild(this.parentElement.querySelector("aside"));
                                  }
                                  if (this.parentElement !== null) {
                                    this.parentElement.removeChild(this.parentElement.querySelector("input"));
                                  }
                                  if (typeof window.parent.postMessage === "function") {
                                    window.parent.postMessage(JSON.stringify({
                                      type: "checklistUpdate",
                                      desid: desid,
                                      updateQuery,
                                    }), "*");
                                  }
                                }
                              } catch (err) {
                                console.log(err);
                              }
                            }
                          }
                        ],
                        style: {
                          display: "block",
                          position: "absolute",
                          fontSize: String(size) + ea,
                          fontWeight: String(400),
                          top: String(0),
                          left: String(0),
                          color: colorChip.green,
                          background: colorChip.white,
                          border: String(0),
                          outline: String(0),
                          width: desktop ? String(this.getBoundingClientRect().width) + ea : String(100) + '%',
                          zIndex: String(1),
                        }
                      }
                    ]);
                    inputBox.focus();
                  }
                  if (typeof checkListData[x].children[y].script === "function") {
                    checkListData[x].children[y].script(this, designer);
                  }
                }
              }
            }
          ],
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            height: String(checkListData[i].children[j].height) + ea,
            cursor: "pointer",
            verticalAlign: "top",
          }
        };
        tempArr.push(tempObj);

      } else if (checkListData[i].children[j].type === "matrix") {

        tempMatrix = checkListData[i].children[j].value(designer);

        tempObj = {
          mother: eachValueTong,
          class: [ "dom_" + String(i) + "_" + String(j) ],
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            width: desktop ? String(checkListData[i].children[j].totalWidth) + ea : String(100) + '%',
            height: String(checkListData[i].children[j].height) + ea,
            verticalAlign: "top",
          }
        };
        tempArr.push(tempObj);

        for (let k = 0; k < tempMatrix.contents.length; k++) {
          tempObj = {
            mother: -1 + (k * -1),
            text: tempMatrix.contents[k],
            attribute: [
              { x: String(i) },
              { y: String(j) },
              { z: String(k) },
              { toggle: String(tempMatrix.value[k]) },
            ],
            events: [
              {
                type: "click",
                event: async function (e) {
                  try {
                    const x = Number(this.getAttribute('x'));
                    const y = Number(this.getAttribute('y'));
                    const z = Number(this.getAttribute('z'));
                    const toggle = Number(this.getAttribute('toggle'));
                    const multiple = checkListData[x].children[y].multiple === true;
                    const thisButtons = document.querySelectorAll('.' + matrixButtonConst + String(x) + String(y));
                    const designer = instance.designers.pick(desid);
                    let anothers, resultArr;
                    let whereQuery, updateQuery;

                    if (window.confirm("수정이 확실합니까?")) {
                      anothers = [];
                      for (let dom of thisButtons) {
                        if (this !== dom) {
                          anothers.push(dom);
                        }
                      }
                      if (toggle === 0) {
                        if (!multiple) {
                          for (let dom of anothers) {
                            dom.style.color = colorChip.gray4;
                            dom.setAttribute("toggle", String(0));
                          }
                        }
                        this.style.color = colorChip.green;
                        this.setAttribute("toggle", String(1));
                      } else {
                        this.style.color = colorChip.gray4;
                        this.setAttribute("toggle", String(0));
                      }

                      resultArr = [];
                      for (let dom of thisButtons) {
                        resultArr.push(Number(dom.getAttribute("toggle")));
                      }
                      updateQuery = checkListData[x].children[y].update(resultArr, designer);
                      whereQuery = { desid };

                      await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                      await ajaxJson({
                        mode: "sse",
                        db: "console",
                        collection: "sse_checklistDesigner",
                        log: true,
                        who: (cookies.homeliaisonConsoleLoginedEmail),
                        updateQuery: { desid, type: checkListData[x].children[y].type, value: resultArr, position: { x, y, class: "dom_" + String(x) + "_" + String(y) },
                        update: { whereQuery, updateQuery } } }, "/generalMongo");
                      await ajaxJson({
                        page: "checklist",
                        mode: "update",
                        who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                        update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                        desid,
                      }, "/ghostDesigner_updateAnalytics");
                      instance.designers.update([ whereQuery, updateQuery ]);
                      if (typeof window.parent.postMessage === "function") {
                        window.parent.postMessage(JSON.stringify({
                          type: "checklistUpdate",
                          desid: desid,
                          updateQuery,
                        }), "*");
                      }
                    }

                  } catch (err) {
                    console.log(err);
                  }
                }
              }
            ],
            class: [ "hoverDefault_lite", matrixButtonConst + String(i) + String(j), matrixButtonConst + String(i) + String(j) + String(k) ],
            style: {
              display: desktop ? "inline-block" : ((tempMatrix.contents.length <= 2 || checkListData[i].children[j].half === true) ? "inline-block" : "block"),
              position: "relative",
              top: desktop ? "" : String(0.1) + ea,
              fontSize: String(size) + ea,
              fontWeight: String(300),
              width: desktop ? String(checkListData[i].children[j].width) + ea : String((tempMatrix.contents.length <= 2 || checkListData[i].children[j].half === true) ? 45 : 100) + '%',
              color: colorChip[tempMatrix.value[k] === 1 ? "green" : "gray4"],
              height: String(checkListData[i].children[j].factorHeight * (desktop ? 1 : 0.9)) + ea,
              transition: "all 0.1s ease",
            }
          };
          tempArr.push(tempObj);
        }

      } else if (checkListData[i].children[j].type === "tendency") {

        tempMatrix = checkListData[i].children[j].value(designer);
        tempObj = {
          mother: eachValueTong,
          class: [ "dom_" + String(i) + "_" + String(j) ],
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            width: String(desktop ? checkListData[i].children[j].totalWidth : 100 - (mobileOuterMargin * 2) - (leftMargin * 2)) + ea,
            height: String(checkListData[i].children[j].height - (desktop ? 0 : mobileTendencyTop)) + ea,
            paddingTop: desktop ? "" : String(mobileTendencyTop) + ea,
            left: desktop ? "" : String(0 - level1Width) + ea,
            verticalAlign: "top",
          }
        };
        tempArr.push(tempObj);

        for (let k = 0; k < tempMatrix.contents.length; k++) {
          tempObj = {
            mother: -1 + (k * -11),
            text: tempMatrix.contents[k],
            class: [ (desktop ? "hoverDefault_lite" : "tendencyMother") ],
            style: {
              display: "block",
              position: "relative",
              fontSize: String(size) + ea,
              fontWeight: String(300),
              width: String(desktop ? checkListData[i].children[j].totalWidth : 100 - (mobileOuterMargin * 2) - (leftMargin * 2)) + ea,
              color: colorChip.black,
              height: String(checkListData[i].children[j].factorHeight) + ea,
            }
          };
          tempArr.push(tempObj);
          for (let l = 0; l < 10; l++) {
            if (desktop) {
              temp = (checkListData[i].children[j].totalWidth - checkListData[i].children[j].width) / 10;
            } else {
              temp = (100 - (mobileOuterMargin * 2) - (leftMargin * 2) - mobileTendencyIntend) / 10;
            }
            tempObj = {
              mother: -1 + (l * -1),
              attribute: [
                { x: String(i) },
                { y: String(j) },
                { z: String(k) },
                { t: String(l) },
                { toggle: String(l <= tempMatrix.value[k] ? 1 : 0) },
              ],
              events: [
                {
                  type: "click",
                  event: async function (e) {
                    try {
                      const x = Number(this.getAttribute('x'));
                      const y = Number(this.getAttribute('y'));
                      const z = Number(this.getAttribute('z'));
                      const t = Number(this.getAttribute('t'));
                      const thisButtons = document.querySelectorAll('.' + matrixButtonConst + String(x) + String(y) + String(z));
                      const designer = instance.designers.pick(desid);
                      let whereQuery, updateQuery;

                      if (window.confirm("수정이 확실합니까?")) {
                        for (let i = 0; i < thisButtons.length; i++) {
                          if (i <= t) {
                            thisButtons[i].setAttribute("toggle", String(1));
                            thisButtons[i].style.background = colorChip.green;
                          } else {
                            thisButtons[i].setAttribute("toggle", String(0));
                            thisButtons[i].style.background = colorChip.gray2;
                          }
                        }

                        if (checkListData[x].children[y].opposite === true) {
                          const oppositeButtons = document.querySelectorAll('.' + matrixButtonConst + String(x) + String(y) + String(1 - z));
                          for (let i = 0; i < oppositeButtons.length; i++) {
                            if (i < oppositeButtons.length - t - 1) {
                              oppositeButtons[i].setAttribute("toggle", String(1));
                              oppositeButtons[i].style.background = colorChip.green;
                            } else {
                              oppositeButtons[i].setAttribute("toggle", String(0));
                              oppositeButtons[i].style.background = colorChip.gray2;
                            }
                          }
                        }

                        whereQuery = { desid };
                        updateQuery = checkListData[x].children[y].update(z, t, designer);

                        await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                        await ajaxJson({
                          mode: "sse",
                          db: "console",
                          collection: "sse_checklistDesigner",
                          log: true,
                          who: (cookies.homeliaisonConsoleLoginedEmail),
                          updateQuery: { desid, type: checkListData[x].children[y].type, value: [ z, t, (checkListData[x].children[y].opposite === true), matrixButtonConst ], position: { x, y, class: "dom_" + String(x) + "_" + String(y) },
                          update: { whereQuery, updateQuery } } }, "/generalMongo");
                        await ajaxJson({
                          page: "checklist",
                          mode: "update",
                          who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                          update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                          desid,
                        }, "/ghostDesigner_updateAnalytics");
                        instance.designers.update([ whereQuery, updateQuery ]);
                        if (typeof window.parent.postMessage === "function") {
                          window.parent.postMessage(JSON.stringify({
                            type: "checklistUpdate",
                            desid: desid,
                            updateQuery,
                          }), "*");
                        }
                      }

                    } catch (err) {
                      console.log(err);
                    }
                  }
                }
              ],
              class: [ (desktop ? "hoverDefault_lite" : "tendencyDetail"), matrixButtonConst + String(i) + String(j) + String(k) ],
              style: {
                position: "absolute",
                width: String(temp) + ea,
                left: String((desktop ? checkListData[i].children[j].width : mobileTendencyIntend) + (temp * l)) + ea,
                background: colorChip[l <= tempMatrix.value[k] ? "green" : "gray2"],
                top: String(tendencyTop) + ea,
                height: String(tendencyHeight) + ea,
                transition: "all 0.1s ease",
              }
            };
            if (l === 0) {
              tempObj.style.borderTopLeftRadius = tempObj.style.borderBottomLeftRadius = String(3) + "px";
            }
            if (l === 10 - 1) {
              tempObj.style.borderTopRightRadius = tempObj.style.borderBottomRightRadius = String(3) + "px";
            }
            tempArr.push(tempObj);
          }
        }
      } else if (checkListData[i].children[j].type === "longtext") {

        tempObj = {
          mother: eachValueTong,
          class: [ "dom_" + String(i) + "_" + String(j) ],
          attribute: [
            { x: String(i) },
            { y: String(j) },
          ],
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            height: String(checkListData[i].children[j].height) + ea,
            cursor: "pointer",
            overflow: "scroll",
            verticalAlign: "top",
          }
        };
        tempArr.push(tempObj);
        tempObj = {
          mother: -1,
          mode: "textarea",
          text: (typeof checkListData[i].children[j].value === "function") ? checkListData[i].children[j].value(designer).join("\n") : "NULL",
          attribute: [
            { x: String(i) },
            { y: String(j) },
            { value: ((typeof checkListData[i].children[j].value === "function") ? checkListData[i].children[j].value(designer).join("\n") : "NULL") },
            { past: ((typeof checkListData[i].children[j].value === "function") ? checkListData[i].children[j].value(designer).join("\n") : "NULL") }
          ],
          events: [
            {
              type: "focus",
              event: function (e) {
                this.style.color = colorChip.green;
              }
            },
            {
              type: "keydown",
              event: function (e) {
                if (e.key === "Enter" || e.key === "Tab") {
                  e.preventDefault();
                  this.blur();
                }
              }
            },
            {
              type: "blur",
              event: async function (e) {
                try {
                  this.value = this.value.trim().replace(/^\n/g, '').replace(/\n$/g, '').trim().replace(/^\n/g, '').replace(/\n$/g, '').trim().replace(/^\n/g, '').replace(/\n$/g, '').trim().replace(/^\n/g, '').replace(/\n$/g, '');
                  if (this.value !== this.getAttribute("past")) {
                    const x = Number(this.getAttribute('x'));
                    const y = Number(this.getAttribute('y'));
                    if (typeof checkListData[x].children[y].update === "function") {
                      const designer = instance.designers.pick(desid);
                      const updateQuery = checkListData[x].children[y].update(this.value.trim(), designer);
                      const whereQuery = { desid };
                      const confirm = window.confirm("수정이 확실합니까?");
                      if (updateQuery === "error" || !confirm) {
                        this.value = this.getAttribute("past");
                      } else {
                        await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner");
                        await ajaxJson({
                          mode: "sse",
                          db: "console",
                          collection: "sse_checklistDesigner",
                          log: true,
                          who: (cookies.homeliaisonConsoleLoginedEmail),
                          updateQuery: { desid, type: checkListData[x].children[y].type, value: this.value.trim(), position: { x, y, class: "dom_" + String(x) + "_" + String(y) },
                          update: { whereQuery, updateQuery } } }, "/generalMongo");
                        await ajaxJson({
                          page: "checklist",
                          mode: "update",
                          who: (JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
                          update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
                          desid,
                        }, "/ghostDesigner_updateAnalytics");
                        instance.designers.update([ whereQuery, updateQuery ]);
                        if (typeof window.parent.postMessage === "function") {
                          window.parent.postMessage(JSON.stringify({
                            type: "checklistUpdate",
                            desid: desid,
                            updateQuery,
                          }), "*");
                        }
                      }
                    }
                  }
                  this.style.color = colorChip.black;
                } catch (e) {
                  console.log(e);
                }
              }
            },
          ],
          style: {
            display: "block",
            position: "absolute",
            width: String(100) + '%',
            height: desktop ? withOut(checkListData[i].children[j].textHeight, ea) : String(checkListData[i].children[j].textHeight * checkListData[i].children[j].value(designer).length * 2) + ea,
            top: String(textAreaTop) + ea,
            left: String(0),
            fontSize: String(size) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            border: String(0),
            outline: String(0),
            lineHeight: String(1.7),
          }
        };
        tempArr.push(tempObj);

      } else if (checkListData[i].children[j].type === "async") {
        tempObj = {
          mother: eachValueTong,
          text: "로드중...",
          class: [ "dom_" + String(i) + "_" + String(j) ],
          attribute: [
            { x: String(i) },
            { y: String(j) },
          ],
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size) + ea,
            fontWeight: String(300),
            color: colorChip.gray4,
            height: String(checkListData[i].children[j].height) + ea,
            cursor: "pointer",
            verticalAlign: "top",
          }
        };
        tempArr.push(tempObj);
      }

      subNodeArr = createNodes(tempArr);
      if (checkListData[i].children[j].type === "async") {
        if (typeof checkListData[i].children[j].value === "function") {
          checkListData[i].children[j].value(subNodeArr, designer).catch((err) => {
            console.log(err);
          });
        }
      }
    }

  }

  instance.checkListProjectsView(desid, baseTong0).catch((err) => { console.log(err); });
  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.isEmptyString = function (string) {
  const instance = this;
  if (/^[0-9]/.test(string) && /[0-9]$/.test(string) && string.length > 5 && string.replace(/[0-9]/gi, '') === '') {
    return true;
  } else {
    return false;
  }
}

DesignerJs.prototype.checkListProjectsView = async function (desid, base) {
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, stringToDate, findByAttribute, setQueue, uniqueValue, sleep, blankHref, scrollTo, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const panClassName = "panClassName";
  try {
    let designer;
    let projects, clients;
    let client;
    let requestNumber;
    let baseTong;
    let thisMother;
    let motherMargin;
    let blockHeight;
    let project;
    let projectTong;
    let basicSize;
    let textTop;
    let state;
    let lineTop;
    let statusWidth;
    let blockMargin;
    let smallSize;
    let smallTextTop;
    let basicMarginLeft, smallMarginLeft;
    let circleWidth;
    let moreWidth;
    let projectDetailTong;
    let checklist;
    let type;
    let key;
    let title;
    let action;
    let typeObj;
    let panContents;
    let innerMargin;
    let panPaddingLeft;
    let panBetween;
    let panPaddingTop;
    let panTitleSize;
    let panTitleWeight;
    let panTitleBottom;
    let subButtonTop;
    let subButtonHeight;
    let subButtonSize;
    let subButtonWeight;
    let subButtonTextPadding;
    let panContentsPaddingTop;
    let panContentsMinHeight;
    let minTotalHeight;
    let divideNumber;
    let photoDivideNumber;
    let blockBetween;
    let blockHeight2;
    let blockSize;
    let blockWeight;
    let linkImageHeight;
    let targetProjectBlock;

    motherMargin = 34;
    blockHeight = 52;
    blockMargin = 4;

    basicSize = 16;
    textTop = (isMac() ? -1 : 1);
    smallSize = 12;
    smallTextTop = (isMac() ? 1 : 3);

    lineTop = 18;
    statusWidth = 100;

    basicMarginLeft = 36;
    smallMarginLeft = 6;

    circleWidth = 6;
    moreWidth = 90;

    innerMargin = 16;
    panBetween = 6;
    panPaddingTop = 15;
    panPaddingLeft = 18;

    panTitleSize = 13;
    panTitleWeight = 700;
    panTitleBottom = 5;

    subButtonTop = 2;
    subButtonHeight = 21;
    subButtonSize = 10;
    subButtonWeight = 800;
    subButtonTextPadding = 8;

    panContentsPaddingTop = 12;
    panContentsMinHeight = 80;

    minTotalHeight = 1400;

    divideNumber = 8;
    photoDivideNumber = 6;
    blockBetween = 5;

    blockHeight2 = 40;
    blockSize = 12;
    blockWeight = 400;

    linkImageHeight = 147;

    typeObj = {};

    designer = this.designers.pick(desid);
    baseTong = base.firstChild;

    projects = await ajaxJson({ whereQuery: { desid } }, SECONDHOST + "/getProjects", { equal: true });
    if (projects.length > 0) {
      clients = await ajaxJson({ whereQuery: { $or: projects.map((obj) => { return { cliid: obj.cliid } }) } }, SECONDHOST + "/getClients", { equal: true });
    } else {
      clients = [];
    }
    for (let project of projects) {
      client = clients.find((obj) => { return obj.cliid === project.cliid });
      requestNumber = 0;
      for (let z = 0; z < client.requests.length; z++) {
        if (client.requests[z].request.timeline.valueOf() <= project.proposal.date.valueOf()) {
          requestNumber = z;
          break;
        }
      }
      project.name = client.name;
      project.timeline = client.requests[requestNumber].request.timeline;
    }
    projects.sort((a, b) => {
      const emptyValue = Math.abs((new Date(1200, 0, 1)).valueOf());
      let aConst, bConst;

      if (/드[랍롭]/gi.test(a.process.status) || /홀[드딩]/gi.test(a.process.status)) {
        aConst = 1;
      } else if (/완료/gi.test(a.process.status)) {
        aConst = 10000;
      } else {
        aConst = 100000000;
      }

      if (/드[랍롭]/gi.test(b.process.status) || /홀[드딩]/gi.test(b.process.status)) {
        bConst = 1;
      } else if (/완료/gi.test(b.process.status)) {
        bConst = 10000;
      } else {
        bConst = 100000000;
      }

      return ((b.process.contract.form.date.from.valueOf() + emptyValue) * bConst) - ((a.process.contract.form.date.from.valueOf() + emptyValue) * aConst);
    });

    checklist = await ajaxJson({}, SECONDHOST + "/getChecklist", { equal: true });

    thisMother = createNode({
      mother: baseTong,
      style: {
        display: "block",
        position: "relative",
        width: String(100) + '%',
        borderTop: "1px solid " + colorChip.gray4,
        paddingTop: String(motherMargin) + ea,
        paddingBottom: String(motherMargin) + ea,
      },
      child: {
        style: {
          display: "block",
          position: "relative",
          marginLeft: String(motherMargin) + ea,
          marginRight: String(motherMargin) + ea,
          width: withOut(motherMargin * 2, ea),
        }
      }
    }).firstChild;

    this.projectAreas = [];
    this.projectBlocks = [];
    for (let i = 0; i < projects.length; i++) {

      project = projects[i];
      state = 0;
      if (/드[랍롭]/gi.test(project.process.status) || /홀[드딩]/gi.test(project.process.status)) {
        state = 3;
      } else if (/완료/gi.test(project.process.status)) {
        state = 2;
      }

      projectTong = createNode({
        mother: thisMother,
        attribute: {
          proid: project.proid,
          desid: designer.desid,
          cliid: project.cliid,
          name: project.name,
          timeline: dateToString(project.timeline),
          toggle: "off",
        },
        event: {
          click: async function (e) {
            const proid = this.getAttribute("proid");
            const desid = this.getAttribute("desid");
            const cliid = this.getAttribute("cliid");
            const name = this.getAttribute("name");
            const timeline = stringToDate(this.getAttribute("timeline"));
            const targetArea = findByAttribute(instance.projectAreas, "proid", proid);
            const toggle = this.getAttribute("toggle");
            const targetHref = BRIDGEHOST.replace(/\:3000/gi, '') + "/photo/designer" + "/" + desid + "/" + proid;
            const linkTargetKey = [ "productLink" ];
            const preItemMotherKey = "firstPhoto";
            const preItemHex = "070a916ebdea87fae21233050e1b322eb4694980e1bced5012199be287e2e92d";
            const hashConst = "homeliaisonHash";
            const load = targetArea.getAttribute("load");
            const emptyDate = new Date(1800, 0, 1);
            let itemList, indexTong;
            let file, link, memo;
            let image;
            let id;
            let linkTargets;
            let linkContents;
            let preItemList;
            let tempArr;
            let preIndex;
            let preItemHexId;
            let fileItemList;
            let photoItemList;
            let targets;

            try {
              if (toggle === "off") {

                targetArea.style.minHeight = String(minTotalHeight) + ea;
                targetArea.style.height = String(1) + ea;
                setQueue(() => {
                  targetArea.style.height = "auto";
                }, 1001);
                this.setAttribute("toggle", "on");

                if (load === "false") {
                  itemList = await ajaxJson({ target: desid + "/" + proid }, BRIDGEHOST + "/middlePhotoRead", { equal: true });
                  preItemList = await ajaxJson({ cliid }, BRIDGEHOST + "/clientPhoto", { equal: true });

                  linkTargets = itemList.filter((str) => { return linkTargetKey.includes(str.split("_")[0]) });
                  linkContents = await ajaxJson({ links: linkTargets.map((file) => { return { desid, proid, file } }) }, BRIDGEHOST + "/middleLinkParsing", { equal: true });

                  tempArr = [];
                  preIndex = 1;
                  for (let original of preItemList.sitePhoto) {
                    preItemHexId = ((new RegExp("^" + hashConst + "_", "g")).test(original.split("/")[original.split("/").length - 1]) ? original.split("/")[original.split("/").length - 1].split("_")[1] : preItemHex);
                    tempArr.push({
                      fileName: [
                        preItemMotherKey,
                        String(timeline.valueOf()),
                        String(preIndex),
                        preItemHexId + "." + original.split(".")[original.split(".").length - 1],
                      ].join("_"),
                      original,
                    });
                    preIndex++;
                  }
                  itemList = tempArr.concat(itemList);

                  indexTong = {};
                  fileItemList = [];
                  photoItemList = [];
                  itemList.forEach((raw) => {
                    let originalRoot;
                    if (typeof raw !== "string") {
                      originalRoot = raw.original;
                      raw = raw.fileName;
                    } else {
                      originalRoot = targetHref + "/" + raw;
                    }
                    const [ key, timeString, orderString, hex ] = raw.split("_");
                    const [ hexString, exe ] = hex.split(".");
                    const mother = findByAttribute(targetArea.querySelectorAll('.' + panClassName), "key", key);
                    const date = dateToString(new Date(Number(timeString)));

                    id = key + "_" + timeString + "_" + String(orderString) + "_" + hexString;

                    if (indexTong[key] === undefined) {
                      indexTong[key] = 0;
                    } else {
                      indexTong[key] = indexTong[key] + 1;
                    }

                    if (typeObj[key] === "file") {

                      createNode({
                        mother,
                        attribute: {
                          src: originalRoot,
                          link: originalRoot
                        },
                        event: {
                          click: function (e) {
                            const link = this.getAttribute("link");
                            blankHref(link);
                          }
                        },
                        style: {
                          display: "inline-flex",
                          position: "relative",
                          width: "calc(calc(100% - " + String(blockBetween * (divideNumber - 1)) + ea + ") / " + String(divideNumber) + ")",
                          height: String(blockHeight2) + ea,
                          marginRight: String((indexTong[key] % divideNumber === (divideNumber - 1)) ? 0 : blockBetween) + ea,
                          marginBottom: String(blockBetween) + ea,
                          background: colorChip.white,
                          borderRadius: String(5) + "px",
                          flexDirection: "column",
                          alignItems: "center",
                          justifyContent: "center",
                          textAlign: "center",
                          cursor: "pointer",
                        },
                        child: {
                          id,
                          attribute: {
                            exe,
                            date: date.split("-").slice(1).join("/"),
                          },
                          text: (date + "_" + orderString + "." + exe),
                          style: {
                            fontSize: String(blockSize) + ea,
                            fontWeight: String(blockWeight),
                            color: colorChip.black,
                            position: "relative",
                            top: String(isMac() ? -1 : 1) + ea,
                          }
                        }
                      });
                      fileItemList.push({
                        hash: hexString,
                        target: id
                      });

                    } else if (typeObj[key] === "photo") {

                      createNode({
                        mother: [ ...mother.children ][indexTong[key] % photoDivideNumber],
                        style: {
                          display: "block",
                          position: "relative",
                          width: withOut(0, ea),
                          marginBottom: String(blockBetween) + ea,
                          cursor: "pointer",
                        },
                        children: [
                          {
                            mode: "img",
                            attribute: {
                              src: originalRoot,
                              link: originalRoot
                            },
                            event: {
                              click: function (e) {
                                const link = this.getAttribute("link");
                                blankHref(link);
                              }
                            },
                            style: {
                              display: "block",
                              position: "relative",
                              width: withOut(0),
                              borderTopLeftRadius: String(5) + "px",
                              borderTopRightRadius: String(5) + "px",
                            }
                          },
                          {
                            id,
                            attribute: {
                              height: String(blockHeight2) + ea,
                              date: date.split("-").slice(1).join("/"),
                            },
                            style: {
                              display: "flex",
                              justifyContent: "center",
                              alignItems: "center",
                              width: withOut(0, ea),
                              height: String(0),
                              borderBottomLeftRadius: String(5) + "px",
                              borderBottomRightRadius: String(5) + "px",
                              background: desktop ? colorChip.white : colorChip.gray0,
                              textAlign: "center",
                              overflow: "hidden",
                              boxShadow: "0px 1px 8px -6px " + colorChip.shadow,
                              transition: "all 0.3s ease",
                            },
                            child: {
                              text: "",
                              style: {
                                display: "inline-block",
                                position: "relative",
                                top: String(isMac() ? -1 : 1) + ea,
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.black,
                              },
                              bold: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.deactive,
                              }
                            }
                          }
                        ]
                      });
                      photoItemList.push({
                        hash: hexString,
                        target: id
                      });

                    } else if (typeObj[key] === "link") {

                      ({ link, memo } = linkContents.find(({ file }) => { return file === raw }))
                      id = raw.replace(/[\_\-\.]/gi, '');

                      createNode({
                        mother,
                        attribute: {
                          link,
                        },
                        event: {
                          click: function (e) {
                            const link = this.getAttribute("link");
                            blankHref(link);
                          }
                        },
                        style: {
                          display: "inline-flex",
                          position: "relative",
                          width: "calc(calc(100% - " + String(blockBetween * (divideNumber - 1)) + ea + ") / " + String(divideNumber) + ")",
                          marginRight: String((indexTong[key] % divideNumber === (divideNumber - 1)) ? 0 : blockBetween) + ea,
                          marginBottom: String(blockBetween) + ea,
                          flexDirection: "column",
                          textAlign: "center",
                          cursor: "pointer",
                        },
                        children: [
                          {
                            id,
                            style: {
                              display: "block",
                              position: "relative",
                              width: withOut(0, ea),
                              height: String(linkImageHeight) + ea,
                              background: colorChip.white,
                              borderTopLeftRadius: String(5) + "px",
                              borderTopRightRadius: String(5) + "px",
                              backgroundPosition: "50% 50%",
                              backgroundSize: "100% auto",
                              backgroundRepeat: "no-repeat",
                            }
                          },
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              width: withOut(0, ea),
                              height: String(blockHeight2) + ea,
                              background: colorChip.white,
                              borderBottomLeftRadius: String(5) + "px",
                              borderBottomRightRadius: String(5) + "px",
                              flexDirection: "column",
                              alignItems: "center",
                              justifyContent: "center",
                              textAlign: "center",
                            },
                            child: {
                              text: memo + " <b%(" + date.split("-").slice(1).join("/") + ")%b>",
                              style: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.black,
                                position: "relative",
                                top: String(isMac() ? -1 : 1) + ea,
                              },
                              bold: {
                                fontSize: String(blockSize) + ea,
                                fontWeight: String(blockWeight),
                                color: colorChip.deactive,
                              }
                            }
                          }
                        ]
                      });

                      ajaxJson({ mode: "image", url: window.encodeURIComponent(link), target: id }, "/getOpenGraph").then(({ image, target }) => {
                        target = targetArea.querySelector('#' + target);
                        target.style.backgroundImage = "url('" + image + "')";
                      }).catch((err) => {
                        console.log(err);
                      });

                    }
                  });

                  targetArea.setAttribute("load", "true");

                  targets = await ajaxJson({ mode: "decrypto", targets: fileItemList }, SECONDHOST + "/homeliaisonCrypto", { equal: true });
                  for (let { string, target } of targets) {
                    target = targetArea.querySelector('#' + target);
                    if (string.trim() !== "") {
                      target.textContent = "";
                      target.insertAdjacentHTML("beforeend", string + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    }
                  }

                  targets = await ajaxJson({ mode: "decrypto", targets: photoItemList }, SECONDHOST + "/homeliaisonCrypto", { equal: true });
                  for (let { string, target } of targets) {
                    target = targetArea.querySelector('#' + target);
                    target.style.height = target.getAttribute("height");
                    target.firstChild.textContent = "";
                    if (!instance.isEmptyString(string)) {
                      target.firstChild.insertAdjacentHTML("beforeend", string + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    } else {
                      target.firstChild.insertAdjacentHTML("beforeend", "- " + " <b style=\"color: " + colorChip.deactive + ";font-weight: " + String(blockWeight) + "\">(" + target.getAttribute("date") + ")</b>");
                    }
                  }

                }

              } else {

                targetArea.style.minHeight = String(0) + ea;
                targetArea.style.height = String(0) + ea;
                this.setAttribute("toggle", "off");

              }
            } catch (e) {
              console.log(e);
            }
          }
        },
        style: {
          display: "flex",
          flexDirection: "row",
          position: "relative",
          height: String(blockHeight) + ea,
          width: withOut(0, ea),
          borderRadius: String(5) + "px",
          background: state >= 3 ? colorChip.gray4 : (state === 2 ? colorChip.gray2 : colorChip.gray0),
          alignItems: "center",
          cursor: "pointer",
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          width: String(statusWidth) + ea,
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
        },
        child: {
          text: project.process.status,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(600),
            color: state === 0 ? colorChip.black : colorChip.deactive,
          },
          next: {
            style: {
              position: "absolute",
              right: String(0),
              top: String(lineTop) + ea,
              height: withOut(lineTop * 2, ea),
              borderRight: "1px solid " + colorChip.gray4,
            }
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(basicMarginLeft) + ea,
        },
        child: {
          text: project.name,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(500),
            color: colorChip.black,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(smallMarginLeft) + ea,
        },
        child: {
          text: project.proid,
          style: {
            display: "inline-block",
            position: "relative",
            top: String(smallTextTop) + ea,
            fontSize: String(smallSize) + ea,
            fontWeight: String(300),
            color: colorChip.deactive,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "relative",
          height: withOut(0, ea),
          flexDirection: "column",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "left",
          marginLeft: String(basicMarginLeft) + ea,
        },
        child: {
          text: "문의 : " + dateToString(project.timeline).slice(2) + "&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;" + dateToString(project.process.contract.form.date.from).slice(2) + " ~ " + dateToString(project.process.contract.form.date.to).slice(2),
          style: {
            display: "inline-block",
            position: "relative",
            top: String(textTop) + ea,
            fontSize: String(basicSize) + ea,
            fontWeight: String(300),
            color: colorChip.deactive,
          }
        }
      });
      createNode({
        mother: projectTong,
        style: {
          display: "inline-flex",
          position: "absolute",
          width: String(moreWidth) + ea,
          height: withOut(0, ea),
          right: String(0),
          background: "transparent",
          flexDirection: "row",
          alignItems: "center",
          justifyContent: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        children: [
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
            }
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
              marginLeft: String(circleWidth / 2) + ea,
              marginRight: String(circleWidth / 2) + ea,
            }
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String(circleWidth) + ea,
              height: String(circleWidth) + ea,
              borderRadius: String(circleWidth) + ea,
              background: colorChip.darkShadow,
            }
          },
        ]
      });
      this.projectBlocks.push(projectTong);

      // detail area
      projectDetailTong = createNode({
        mother: thisMother,
        attribute: {
          proid: project.proid,
          load: "false",
        },
        display: "flex",
        minHeight: String(0) + ea,
        height: String(0),
        width: withOut(0, ea),
        borderRadius: String(5) + "px",
        background: colorChip.gray4,
        marginBottom: String(blockMargin) + ea,
        transition: "all 1s ease",
        overflow: "hidden",
        flexDirection: "column",
      });
      this.projectAreas.push(projectDetailTong);

      typeObj = {};
      for (let x = 0; x < checklist.length; x++) {
        for (let y = 0; y < checklist[x].children.length; y++) {

          type = checklist[x].children[y].type;
          key = checklist[x].children[y].key;
          title = checklist[x].children[y].title;
          action = checklist[x].children[y].action;
          typeObj[key] = type;

          panContents = createNode({
            mother: projectDetailTong,
            style: {
              display: "block",
              position: "relative",
              marginLeft: String(innerMargin) + ea,
              width: withOut((innerMargin * 2) + (panPaddingLeft * 2), ea),
              borderRadius: String(5) + "px",
              background: colorChip.gray1,
              paddingTop: String(panPaddingTop) + ea,
              paddingLeft: String(panPaddingLeft) + ea,
              paddingRight: String(panPaddingLeft) + ea,
              paddingBottom: String(panPaddingTop) + ea,
              marginTop: (x === 0 && y === 0 ? String(innerMargin) + ea : ""),
              marginBottom: (x === checklist.length - 1 && y === checklist[x].children.length - 1 ? String(innerMargin) + ea : String(panBetween) + ea),
            },
            child: {
              set: "flex",
              style: {
                width: withOut(0, ea),
                flexDirection: "row",
              },
              child: {
                text: title,
                style: {
                  display: "inline-block",
                  position: "relative",
                  fontSize: String(panTitleSize) + ea,
                  fontWeight: String(panTitleWeight),
                  color: colorChip.black,
                  paddingBottom: String(panTitleBottom) + ea,
                  borderBottom: "1px solid " + colorChip.deactive,
                },
                next: {
                  attribute: {
                    key,
                    title,
                    desid: designer.desid,
                    designer: designer.designer,
                    proid: project.proid,
                    name: project.name,
                    phone: designer.information.phone,
                  },
                  event: {
                    click: async function (e) {
                      try {
                        const key = this.getAttribute("key");
                        const title = this.getAttribute("title");
                        const desid = this.getAttribute("desid");
                        const designer = this.getAttribute("designer");
                        const proid = this.getAttribute("proid");
                        const name = this.getAttribute("name");
                        const phone = this.getAttribute("phone");
                        const host = FRONTHOST.replace(/^https\:\/\//gi, '');
                        const path = "process";

                        if (window.confirm(designer + "실장님께 알림톡을 보낼까요?")) {
                          await ajaxJson({
                            method: "pushDesignerFile",
                            name: designer,
                            phone: phone,
                            option: {
                              designer: designer,
                              client: name,
                              file: title,
                              host: host,
                              path: path,
                              proid: proid,
                            }
                          }, BACKHOST + "/alimTalk");
                          window.alert(designer + " 실장님에게 알림톡을 전송하였습니다!");
                        }

                      } catch (e) {
                        console.log(e);
                      }
                    }
                  },
                  style: {
                    display: "inline-flex",
                    position: "absolute",
                    right: String(0),
                    top: String(subButtonTop) + ea,
                    height: String(subButtonHeight) + ea,
                    background: colorChip.black,
                    borderRadius: String(5) + "px",
                    cursor: "pointer",
                    textAlign: "center",
                    justifyContent: "center",
                    alignItems: "center",
                  },
                  child: {
                    text: "디자이너에게 " + title + " 업로드 알림톡",
                    style: {
                      display: "inline-block",
                      position: "relative",
                      top: String(isMac() ? -1 : 1) + ea,
                      fontSize: String(subButtonSize) + ea,
                      fontWeight: String(subButtonWeight),
                      color: colorChip.white,
                      paddingLeft: String(subButtonTextPadding) + ea,
                      paddingRight: String(subButtonTextPadding) + ea,
                    }
                  }
                }
              },
              next: {
                attribute: {
                  key,
                },
                class: [ panClassName ],
                style: {
                  display: "block",
                  paddingTop: String(panContentsPaddingTop) + ea,
                  position: "relative",
                  width: withOut(0, ea),
                  minHeight: String(panContentsMinHeight) + ea,
                }
              }
            }
          });
          if (type === "photo") {
            for (let z = 0; z < photoDivideNumber; z++) {
              createNode({
                mother: panContents.querySelector('.' + panClassName),
                style: {
                  display: "inline-block",
                  position: "relative",
                  verticalAlign: "top",
                  width: "calc(calc(100% - " + String(blockBetween * (photoDivideNumber - 1)) + ea + ") / " + String(photoDivideNumber) + ")",
                  marginRight: String((z === (photoDivideNumber - 1)) ? 0 : blockBetween) + ea,
                }
              });
            }
          }


        }
      }

    }

    if (typeof returnGet().proid === "string") {
      targetProjectBlock = findByAttribute(this.projectBlocks, "proid", returnGet().proid);
      if (targetProjectBlock !== null) {
        scrollTo(totalMother, targetProjectBlock);
        targetProjectBlock.click();
      }
    }

    // dev
    // await instance.checkListPaperView(desid, base, projects, clients, checklist);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.checkListPaperView = async function (desid, base, projects, clients, checklist) {
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, stringToDate, findByAttribute, setQueue, uniqueValue, sleep, blankHref, scrollTo, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  try {
    let thisMother;
    let motherMargin;
    let designer;
    let baseTong;
    let blockHeight;
    let blockMargin;
    let basicSize;
    let textTop;
    let smallSize;
    let smallTextTop;
    let lineTop;
    let statusWidth;
    let basicMarginLeft;
    let smallMarginLeft;
    let typeObj;
    let type;
    let key;
    let title;
    let action;
    let panContents;
    let circleWidth;
    let moreWidth;

    motherMargin = 34;
    blockHeight = 52;
    blockMargin = 4;

    basicSize = 16;
    textTop = (isMac() ? -1 : 1);
    smallSize = 12;
    smallTextTop = (isMac() ? 1 : 3);

    lineTop = 18;
    statusWidth = 100;

    basicMarginLeft = 36;
    smallMarginLeft = 6;

    circleWidth = 6;
    moreWidth = 90;

    designer = this.designers.pick(desid);
    baseTong = base.firstChild;

    thisMother = createNode({
      mother: baseTong,
      style: {
        display: "block",
        position: "relative",
        width: String(100) + '%',
        borderTop: "1px solid " + colorChip.gray4,
        paddingTop: String(motherMargin) + ea,
        paddingBottom: String(motherMargin) + ea,
      },
      child: {
        style: {
          display: "block",
          position: "relative",
          marginLeft: String(motherMargin) + ea,
          marginRight: String(motherMargin) + ea,
          width: withOut(motherMargin * 2, ea),
        }
      }
    }).firstChild;


    typeObj = {};
    for (let x = 0; x < checklist.length; x++) {
      for (let y = 0; y < checklist[x].children.length; y++) {

        type = checklist[x].children[y].type;
        key = checklist[x].children[y].key;
        title = checklist[x].children[y].title;
        action = checklist[x].children[y].action;
        typeObj[key] = type;

        panContents = createNode({
          mother: thisMother,
          style: {
            display: "flex",
            flexDirection: "row",
            position: "relative",
            height: String(blockHeight) + ea,
            width: withOut(0, ea),
            borderRadius: String(5) + "px",
            background: type === "photo" ? colorChip.gray2 : colorChip.gray0,
            marginBottom: String(blockMargin) + ea,
            alignItems: "center",
            cursor: "pointer",
          },
        });
        createNode({
          mother: panContents,
          style: {
            display: "inline-flex",
            position: "relative",
            width: String(statusWidth) + ea,
            height: withOut(0, ea),
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
          },
          child: {
            text: String(x + 1) + " - " + String(y + 1),
            style: {
              display: "inline-block",
              position: "relative",
              top: String(textTop) + ea,
              fontSize: String(basicSize) + ea,
              fontWeight: String(600),
              color: colorChip.deactive,
            },
            next: {
              style: {
                position: "absolute",
                right: String(0),
                top: String(lineTop) + ea,
                height: withOut(lineTop * 2, ea),
                borderRight: "1px solid " + colorChip.gray4,
              }
            }
          }
        });
        createNode({
          mother: panContents,
          style: {
            display: "inline-flex",
            position: "relative",
            height: withOut(0, ea),
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "left",
            marginLeft: String(basicMarginLeft) + ea,
          },
          child: {
            text: title,
            style: {
              display: "inline-block",
              position: "relative",
              top: String(textTop) + ea,
              fontSize: String(basicSize) + ea,
              fontWeight: String(500),
              color: colorChip.black,
            }
          }
        });
        createNode({
          mother: panContents,
          style: {
            display: "inline-flex",
            position: "relative",
            height: withOut(0, ea),
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "left",
            marginLeft: String(smallMarginLeft) + ea,
          },
          child: {
            text: (type === "photo" ? "사진" : (type === "file" ? "파일" : "링크")),
            style: {
              display: "inline-block",
              position: "relative",
              top: String(smallTextTop) + ea,
              fontSize: String(smallSize) + ea,
              fontWeight: String(300),
              color: colorChip.deactive,
            }
          }
        });
        createNode({
          mother: panContents,
          style: {
            display: "inline-flex",
            position: "absolute",
            width: String(moreWidth) + ea,
            height: withOut(0, ea),
            right: String(0),
            background: "transparent",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            textAlign: "center",
            cursor: "pointer",
          },
          children: [
            {
              style: {
                display: "inline-block",
                position: "relative",
                width: String(circleWidth) + ea,
                height: String(circleWidth) + ea,
                borderRadius: String(circleWidth) + ea,
                background: colorChip.darkShadow,
              }
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                width: String(circleWidth) + ea,
                height: String(circleWidth) + ea,
                borderRadius: String(circleWidth) + ea,
                background: colorChip.darkShadow,
                marginLeft: String(circleWidth / 2) + ea,
                marginRight: String(circleWidth / 2) + ea,
              }
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                width: String(circleWidth) + ea,
                height: String(circleWidth) + ea,
                borderRadius: String(circleWidth) + ea,
                background: colorChip.darkShadow,
              }
            },
          ]
        });

      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.checkListDesignerMemo = function (desid) {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, media } = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut } = GeneralJs;
  const baseTong = this.mainBaseTong;
  const designer = this.designers.pick(desid);
  const mobile = media[4];
  const desktop = !mobile;
  return async function (e) {
    try {
      if (document.getElementById("memoTong") === null) {

        let memoTong;
        let margin;
        let innerMargin;
        let titleHeight;
        let size;
        let resObj, history, career;
        let nodeArr;
        let mobileBottom, mobileHeight;

        margin = <%% 40, 40, 40, 40, 7 %%>;
        innerMargin = <%% 15, 15, 15, 15, 4 %%>;
        titleHeight = <%% 28, 28, 28, 28, 6.4 %%>;
        size = <%% 16, 16, 16, 16, 4 %%>;

        mobileBottom = 16;
        mobileHeight = 56;

        resObj = await ajaxJson({ method: "designer", property: "history", idArr: [ desid ] }, "/getHistoryTotal");
        if (resObj[desid] === undefined) {
          throw new Error("history error");
        }
        career = resObj[desid].career;

        memoTong = createNode({
          mother: totalMother,
          id: "memoTong",
          events: [
            {
              type: "dblclick",
              event: function (e) {
                e.preventDefault();
                e.stopPropagation();
                totalMother.removeChild(document.getElementById("memoTong"));
              }
            },
            {
              type: "contextmenu",
              event: function (e) {
                e.preventDefault();
                e.stopPropagation();
                totalMother.removeChild(document.getElementById("memoTong"));
              }
            }
          ],
          style: {
            position: "fixed",
            width: desktop ? "calc(calc(calc(100% - " + String(grayBarWidth) + ea + ") / 3) - " + String(margin) + ea + ")" : "calc(100% - " + String(margin * 2) + ea + ")",
            height: desktop ? "calc(calc(calc(calc(100% - " + String(belowHeight) + ea + ") / 3) * 1.5) - " + String(margin) + ea + ")" : String(mobileHeight) + ea,
            bottom: String(desktop ? belowHeight + margin : mobileBottom + margin) + ea,
            right: String(margin) + ea,
            borderRadius: String(3) + "px",
            boxShadow: "0px 5px 18px -9px " + colorChip.shadow,
            animation: "fadeup 0.3s ease forwards",
            background: colorChip.gradientGreen2,
            zIndex: String(3),
          }
        });

        nodeArr = createNodes([
          {
            mother: memoTong,
            text: designer.designer + " 디자이너 상세 경력",
            style: {
              position: "absolute",
              top: String(innerMargin - (desktop ? 1 : 1.2)) + ea,
              left: String(innerMargin + (desktop ? 1 : 0.1)) + ea,
              fontSize: String(size) + ea,
              fontWeight: String(600),
              color: colorChip.white,
            }
          },
          {
            mother: memoTong,
            style: {
              position: "absolute",
              bottom: String(innerMargin) + ea,
              left: String(innerMargin) + ea,
              width: "calc(100% - " + String(innerMargin * 2) + ea + ")",
              height: withOut((innerMargin * 2) + titleHeight, ea),
              background: colorChip.white,
              borderRadius: String(3) + "px",
              opacity: String(0.95),
            }
          },
          {
            mother: -1,
            style: {
              position: "absolute",
              top: String(innerMargin - 2) + ea,
              left: String(innerMargin) + ea,
              width: withOut((innerMargin - 2) * 2, ea),
              height: withOut(innerMargin * 2, ea),
            }
          },
          {
            mother: -1,
            mode: "textarea",
            events: [
              {
                type: "blur",
                event: function (e) {
                  GeneralJs.ajaxPromise({
                    method: "designer",
                    id: desid,
                    column: "career",
                    value: this.value,
                    email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
                  }, "/updateHistory").catch((err) => { console.log(err); });
                }
              },
              {
                type: "keypress",
                event: function (e) {
                  if (e.key === "Enter") {
                    GeneralJs.ajaxPromise({
                      method: "designer",
                      id: desid,
                      column: "career",
                      value: this.value,
                      email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
                    }, "/updateHistory").catch((err) => { console.log(err); });
                  }
                }
              },
              {
                type: "contextmenu",
                event: function (e) {
                  e.stopPropagation();
                }
              }
            ],
            style: {
              position: "relative",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              fontSize: String(size - (desktop ? 1 : 0.2)) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              border: String(0),
              outline: String(0),
              overflow: "scroll",
              height: String(100) + '%',
              lineHeight: String(1.7),
            }
          },
        ]);
        nodeArr[3].value = career;

      } else {
        totalMother.removeChild(document.getElementById("memoTong"));
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.checkListIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: GeneralJs.returnGet().dataonly === "true" ? "none" : "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: "block",
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  listIcon.addEventListener("click", function (e) {
    blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
  });

  previousIcon.addEventListener("click", function (e) {
    let previousDesid, boo, thisStandard;
    previousDesid = desid;
    do {
      previousDesid = instance.designers.previous(previousDesid).desid;
      for (let dom of instance.standardDoms) {
        if (dom.getAttribute("desid") === previousDesid) {
          thisStandard = dom;
          boo = (dom.style.display === "none");
        }
      }
    } while (boo);
    if (instance.modes.indexOf(instance.mode) === 0) {
      instance.checkListDetailLaunching(previousDesid);
    } else {
      instance.reportDetailLaunching(previousDesid);
    }
  });

  nextIcon.addEventListener("click", function (e) {
    let nextDesid, boo, thisStandard;
    nextDesid = desid;
    do {
      nextDesid = instance.designers.next(nextDesid).desid;
      for (let dom of instance.standardDoms) {
        if (dom.getAttribute("desid") === nextDesid) {
          thisStandard = dom;
          boo = (dom.style.display === "none");
        }
      }
    } while (boo);
    if (instance.modes.indexOf(instance.mode) === 0) {
      instance.checkListDetailLaunching(nextDesid);
    } else {
      instance.reportDetailLaunching(nextDesid);
    }
  });

  rInitialIcon.addEventListener("click", function (e) {
    instance.reportDetailLaunching(desid);
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      await instance.checklistMemoSystem(desid);
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
      GeneralJs.ajaxJson({
        method: "designerCheckList",
        name: designer.designer,
        phone: designer.information.phone,
        option: {
          desid: designer.desid,
          designer: designer.designer,
          host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
          path: "about",
        }
      }, "/alimTalk").then(() => {
        return GeneralJs.ajaxJson({
          page: "checklist",
          mode: "send",
          who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
          desid: designer.desid,
        }, "/ghostDesigner_updateAnalytics");
      }).then(() => {
        instance.mother.greenAlert("알림톡이 전송되었습니다!");
      }).catch((err) => {
        console.log(err);
      });
    } else {
      instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
    }
  });

}

DesignerJs.prototype.checkListSseParsing = function (orders) {
  const instance = this;
  const { ea } = this;
  const { colorChip } = GeneralJs;
  if (!Array.isArray(orders)) {
    throw new Error("invaild input");
  }
  if (orders.length > 0) {
    for (let obj of orders) {
      if (obj.desid === undefined || obj.position === undefined || obj.type === undefined || obj.update === undefined || obj.value === undefined) {
        throw new Error("invaild input");
      }
      const { desid, position, type, update, value } = obj;
      if (instance.desid === desid) {
        if (update.whereQuery === undefined || update.updateQuery === undefined) {
          throw new Error("invaild input");
        }
        const { whereQuery, updateQuery } = update;
        const targetDom = document.querySelector('.' + position.class);
        let tempFunction, tempArr, tempString;

        instance.designers.update([ whereQuery, updateQuery ]);

        if (targetDom !== null && targetDom !== undefined) {
          if (type === "string") {
            targetDom.removeChild(targetDom.firstChild);
            targetDom.textContent = "";
            targetDom.insertAdjacentHTML("beforeend", value);
          } else if (type === "matrix") {
            const children = targetDom.children;
            const length = children.length;
            for (let z = 0; z < length; z++) {
              if (value[z] === 1) {
                children[z].style.color = colorChip.green;
                children[z].setAttribute("toggle", String(1));
              } else {
                children[z].style.color = colorChip.gray4;
                children[z].setAttribute("toggle", String(0));
              }
            }
          } else if (type === "tendency") {
            const children = targetDom.children;
            const [ z, t, opposite, matrixButtonConst ] = value;
            const factors = children[z].querySelectorAll("div");
            const length = factors.length;
            for (let i = 0; i < length; i++) {
              if (i <= t) {
                factors[i].setAttribute("toggle", String(1));
                factors[i].style.background = colorChip.green;
              } else {
                factors[i].setAttribute("toggle", String(0));
                factors[i].style.background = colorChip.gray2;
              }
            }
            if (opposite) {
              const oppositeButtons = document.querySelectorAll('.' + matrixButtonConst + String(position.x) + String(position.y) + String(1 - z));
              for (let i = 0; i < oppositeButtons.length; i++) {
                if (i < oppositeButtons.length - t - 1) {
                  oppositeButtons[i].setAttribute("toggle", String(1));
                  oppositeButtons[i].style.background = colorChip.green;
                } else {
                  oppositeButtons[i].setAttribute("toggle", String(0));
                  oppositeButtons[i].style.background = colorChip.gray2;
                }
              }
            }
          } else if (type === "longtext") {
            targetDom.querySelector("textarea").value = value;
          } else if (/^async/.test(type) && /__function__/g.test(type)) {
            tempArr = type.split("__function__");
            if (tempArr.length === 2) {
              tempString = tempArr[1].trim().replace(/^\{/, '').replace(/\}$/, '').trim().replace(/__equal__/gi, '=').replace(/__ampersand__/gi, '&').replace(/__plus__/gi, '+');
              tempFunction = new Function("mother", "value", tempString);
              tempFunction(targetDom, value);
            }
          }
        }

      }
    }
  }
}

DesignerJs.prototype.checkListDetailSearchBox = function () {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, searchCondition } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const className = "searchConditionBack";
  return function (e) {
    e.stopPropagation();
    e.preventDefault();
    if (document.querySelector('.' + className) === null) {
      let cancelBox, whiteBox, scrollBox, scrollBase;
      let margin, innerMargin;
      let paddingTop, paddingBottom;

      innerMargin = 48;
      margin = 100;
      paddingTop = 63;
      paddingBottom = 160;

      cancelBox = createNode({
        mother: totalMother,
        class: [ className ],
        style: {
          position: "fixed",
          top: String(0),
          left: String(grayBarWidth) + ea,
          width: withOut(grayBarWidth, ea),
          height: withOut(belowHeight, ea),
          background: colorChip.black,
          animation: "justfadein 0.3s ease forwards",
          zIndex: String(2),
          cursor: "pointer",
        },
        events: [
          {
            type: [ "click", "contextmenu" ],
            event: function (e) {
              e.preventDefault();
              e.stopPropagation();
              instance.checkListDetailSearchParsing();
              totalMother.removeChild(totalMother.lastChild);
              totalMother.removeChild(totalMother.lastChild);
            }
          }
        ]
      });
      whiteBox = createNode({
        mother: totalMother,
        style: {
          position: "fixed",
          top: String(margin) + ea,
          left: String(grayBarWidth + margin) + ea,
          width: withOut(grayBarWidth + (margin * 2), ea),
          height: withOut(belowHeight + (margin * 2), ea),
          background: colorChip.white,
          borderRadius: String(5) + "px",
          boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
          animation: "fadeup 0.3s ease forwards",
          zIndex: String(2),
        }
      });
      scrollBox = createNode({
        mother: whiteBox,
        style: {
          position: "absolute",
          top: String(innerMargin) + ea,
          left: String(innerMargin) + ea,
          width: withOut(innerMargin * 2, ea),
          height: withOut(innerMargin, ea),
          overflow: "scroll",
        }
      });
      scrollBase = createNode({
        mother: scrollBox,
        style: {
          position: "relative",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          paddingTop: String(paddingTop) + ea,
          paddingBottom: String(paddingBottom) + ea,
        }
      });
      instance.checkListDetailSearchContents(scrollBase);
    }
  }
}

DesignerJs.prototype.checkListDetailSearchContents = function (mother) {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, searchCondition } = this;
  const { createNode, createNodes, colorChip, withOut, isMac } = GeneralJs;
  const innerMargin = Number(mother.parentNode.style.top.replace(/[^0-9\-\.]/gi, ''));
  const checkListData = this.checkListData();
  const designer = this.designers[this.designers.length - 1];
  const token = "_";
  let domTong;
  let titleSize, size;
  let titleHeight;
  let block, title, contents;
  let titleWidth;
  let tempResult;
  let factorWidth, factorHeight;
  let radius;
  let circleMargin, circleVisual;
  let obj;
  let modeTop, modeRight;
  let modeWidth, modeMargin;
  let modeCircleTop;

  titleSize = 25;
  titleHeight = 48;
  size = 15;
  titleWidth = 160;
  factorWidth = 172;
  factorHeight = 30;
  radius = 3;
  circleMargin = 6;
  circleVisual = 1.5;
  modeTop = isMac() ? 15 : 17;
  modeRight = 62;
  modeWidth = 36.34;
  modeMargin = 5;
  modeCircleTop = isMac() ? 7 : 5;

  createNode({
    mother,
    style: {
      position: "fixed",
      width: withOut(100, innerMargin * 2, ea),
      height: String(titleHeight) + ea,
      background: colorChip.white,
      top: String(innerMargin * (5 / 6)) + ea,
      left: String(innerMargin) + ea,
      zIndex: String(1),
      borderBottom: "1px solid " + colorChip.gray2,
    },
    children: [
      {
        text: "디자이너 조건 검색",
        style: {
          position: "absolute",
          top: String(isMac() ? 0 : 3) + ea,
          left: String(-1) + ea,
          fontSize: String(titleSize) + ea,
          fontWeight: String(500),
          color: colorChip.black
        }
      },
      {
        style: {
          position: "absolute",
          top: String(modeTop + modeCircleTop) + ea,
          right: String((modeRight * 2) + modeWidth + modeMargin) + ea,
          background: colorChip.black,
          width: String((radius - 1) * 2) + ea,
          height: String((radius - 1) * 2) + ea,
          borderRadius: String((radius - 1) * 2) + ea,
        }
      },
      {
        text: "초기화",
        class: [ "hoverDefault_lite" ],
        style: {
          position: "absolute",
          top: String(modeTop) + ea,
          right: String(modeRight * 2) + ea,
          fontSize: String(size - 1) + ea,
          fontWeight: String(500),
          color: colorChip.black,
        },
        events: [
          {
            type: "click",
            event: function (e) {
              let targetTongs;
              let children;
              targetTongs = [];
              for (let b of searchCondition.blocks) {
                children = b.querySelectorAll(".hoverDefault_lite");
                for (let c of children) {
                  targetTongs.push(c);
                }
              }
              for (let dom of targetTongs) {
                dom.setAttribute("toggle", "off");
                dom.firstChild.style.background = colorChip.gray2;
                dom.lastChild.style.color = colorChip.black;
              }
              searchCondition.conditions = [];
            }
          }
        ]
      },
      {
        style: {
          position: "absolute",
          top: String(modeTop + modeCircleTop) + ea,
          right: String(modeRight + modeWidth + modeMargin) + ea,
          background: searchCondition.mode === "and" ? colorChip.green : colorChip.deactive,
          width: String((radius - 1) * 2) + ea,
          height: String((radius - 1) * 2) + ea,
          borderRadius: String((radius - 1) * 2) + ea,
        }
      },
      {
        text: "교집합",
        class: [ "hoverDefault_lite" ],
        style: {
          position: "absolute",
          top: String(modeTop) + ea,
          right: String(modeRight) + ea,
          fontSize: String(size - 1) + ea,
          fontWeight: String(500),
          color: searchCondition.mode === "and" ? colorChip.green : colorChip.deactive,
        },
        events: [
          {
            type: "click",
            event: function (e) {
              if (searchCondition.mode === "and") {
                searchCondition.mode = "or";
                this.style.color = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 4].style.background = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 2].style.background = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 1].style.color = colorChip.green;
              } else {
                searchCondition.mode = "and";
                this.style.color = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 4].style.background = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 2].style.background = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 1].style.color = colorChip.deactive;
              }
            }
          }
        ]
      },
      {
        style: {
          position: "absolute",
          top: String(modeTop + modeCircleTop) + ea,
          right: String(0 + modeWidth + modeMargin) + ea,
          background: searchCondition.mode === "and" ? colorChip.deactive : colorChip.green,
          width: String((radius - 1) * 2) + ea,
          height: String((radius - 1) * 2) + ea,
          borderRadius: String((radius - 1) * 2) + ea,
        }
      },
      {
        text: "합집합",
        class: [ "hoverDefault_lite" ],
        style: {
          position: "absolute",
          top: String(modeTop) + ea,
          right: String(0) + ea,
          fontSize: String(size - 1) + ea,
          fontWeight: String(500),
          color: searchCondition.mode === "and" ? colorChip.deactive : colorChip.green,
        },
        events: [
          {
            type: "click",
            event: function (e) {
              if (searchCondition.mode === "and") {
                searchCondition.mode = "or";
                this.style.color = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 2].style.background = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 4].style.background = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 3].style.color = colorChip.deactive;
              } else {
                searchCondition.mode = "and";
                this.style.color = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 2].style.background = colorChip.deactive;
                this.parentNode.children[this.parentNode.children.length - 4].style.background = colorChip.green;
                this.parentNode.children[this.parentNode.children.length - 3].style.color = colorChip.green;
              }
            }
          }
        ]
      },
    ]
  });

  domTong = [];
  for (let i = 0; i < checkListData.length; i++) {
    for (let j = 0; j < checkListData[i].children.length; j++) {
      obj = checkListData[i].children[j];
      if (obj.type === "matrix" || typeof obj.search === "function") {

        block = createNode({
          mother,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            height: "auto",
            fontSize: String(size) + ea,
          },
          children: [
            {
              style: {
                position: "absolute",
                width: String(titleWidth) + ea,
                height: String(100) + '%',
                fontSize: "inherit",
              }
            },
            {
              style: {
                position: "relative",
                display: "block",
                left: String(titleWidth) + ea,
                width: withOut(titleWidth, ea),
                fontSize: "inherit",
              }
            }
          ]
        });

        title = block.firstChild;
        contents = block.lastChild;

        createNode({
          mother: title,
          style: {
            position: "relative",
            display: "inline-block",
            width: String(factorWidth) + ea,
            height: String(factorHeight) + ea,
            fontSize: "inherit",
          },
          children: [
            {
              text: obj.name,
              style: {
                position: "absolute",
                top: String(isMac() ? 0 : 1) + ea,
                left: String(0) + ea,
                fontSize: "inherit",
                fontWeight: String(600),
              }
            }
          ]
        });

        if (obj.type === "matrix") {
          tempResult = obj.value(designer);
        } else {
          tempResult = obj.search(designer);
        }
        for (let k = 0; k < tempResult.contents.length; k++) {
          createNode({
            mother: contents,
            class: [ "hoverDefault_lite" ],
            attribute: [
              { toggle: (searchCondition.conditions.includes(String(i) + token + String(j) + token + String(k)) ? "on" : "off") },
              { x: String(i) },
              { y: String(j) },
              { z: String(k) },
            ],
            events: [
              {
                type: [ "click", "contextmenu" ],
                event: function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  const x = Number(this.getAttribute('x'));
                  const y = Number(this.getAttribute('y'));
                  const z = Number(this.getAttribute('z'));
                  const toggle = this.getAttribute("toggle");
                  const value = ([ String(x), String(y), String(z) ]).join(token);
                  let tempArr, targetIndex;
                  if (toggle === "off") {
                    searchCondition.conditions.push(value);
                    this.lastChild.style.color = colorChip.green;
                    this.firstChild.style.background = colorChip.green;
                    this.setAttribute("toggle", "on");
                  } else {
                    for (let i = 0; i < searchCondition.conditions.length; i++) {
                      tempArr = searchCondition.conditions[i].split(token);
                      if (tempArr.length !== 3) {
                        throw new Error("invaild value");
                      }
                      if (Number(tempArr[0]) === x && Number(tempArr[1]) === y && Number(tempArr[2]) === z) {
                        targetIndex = i;
                        break;
                      }
                    }
                    searchCondition.conditions.splice(targetIndex, 1);
                    this.lastChild.style.color = colorChip.black;
                    this.firstChild.style.background = colorChip.gray2;
                    this.setAttribute("toggle", "off");
                  }
                }
              }
            ],
            style: {
              position: "relative",
              display: "inline-block",
              width: String(factorWidth) + ea,
              height: String(factorHeight) + ea,
              fontSize: "inherit",
              fontWeight: String(300),
            },
            children: [
              {
                style: {
                  position: "absolute",
                  fontSize: "inherit",
                  fontWeight: "inherit",
                  top: String((size / 2) - radius + circleVisual) + ea,
                  left: String(0),
                  width: String(radius * 2) + ea,
                  height: String(radius * 2) + ea,
                  borderRadius: String(radius * 2) + ea,
                  background: searchCondition.conditions.includes(String(i) + token + String(j) + token + String(k)) ? colorChip.green : colorChip.gray2,
                }
              },
              {
                text: tempResult.contents[k],
                style: {
                  position: "absolute",
                  fontSize: "inherit",
                  fontWeight: "inherit",
                  color: searchCondition.conditions.includes(String(i) + token + String(j) + token + String(k)) ? colorChip.green : colorChip.black,
                  top: String(isMac() ? 0 : 1) + ea,
                  left: String((radius * 2) + circleMargin) + ea,
                  width: withOut((radius * 2) + circleMargin, ea),
                  height: String(100) + '%',
                },
              },
            ]
          });
        }

        domTong.push(block);
      }
    }
  }
  searchCondition.blocks = domTong;

  createNode({
    mother,
    style: {
      position: "fixed",
      width: withOut(100, innerMargin * 2, ea),
      height: String(titleHeight) + ea,
      background: colorChip.white,
      bottom: String(0) + ea,
      left: String(innerMargin) + ea,
      zIndex: String(1),
      borderTop: "1px solid " + colorChip.gray2,
    },
  });

}

DesignerJs.prototype.checkListDetailSearchParsing = function () {
  const instance = this;
  const { searchCondition, standardDoms, designers } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const checkListData = this.checkListData();
  const token = "_";
  let tempArr, tempObj;
  let x, y, z;
  let desidArr, desidArr2;
  let blocks;

  Set.prototype.union = function (setB) {
    let union = new Set(this);
    for (let elem of setB) {
      union.add(elem);
    }
    return union;
  }

  Set.prototype.intersection = function (setB) {
    let intersection = new Set();
    for (let elem of setB) {
      if (this.has(elem)) {
        intersection.add(elem);
      }
    }
    return intersection;
  }

  class SetArray extends Array {
    union() {
      let finalSet;
      finalSet = new Set([]);
      for (let set of this) {
        finalSet = finalSet.union(set);
      }
      return Array.from(finalSet);
    }
    intersection() {
      let finalSet;
      if (this.length === 0) {
        return [];
      } else {
        finalSet = this[0];
        if (this.length > 1) {
          for (let i = 1; i < this.length; i++) {
            finalSet = finalSet.intersection(this[i]);
          }
          return Array.from(finalSet);
        } else {
          return Array.from(finalSet);
        }
      }
    }
  }

  if (searchCondition.conditions.length === 0) {
    desidArr = [];
    for (let { desid } of designers) {
      desidArr.push(desid);
    }
  } else {
    desidArr = new SetArray();
    for (let order of searchCondition.conditions) {
      tempArr = order.split(token);
      if (tempArr.length !== 3) {
        throw new Error("invaild order");
      }
      x = Number(tempArr[0]);
      y = Number(tempArr[1]);
      z = Number(tempArr[2]);

      desidArr2 = [];
      for (let designer of designers) {
        if (checkListData[x].children[y].type === "matrix") {
          tempObj = checkListData[x].children[y].value(designer);
          tempObj.result = (tempObj.value[z] === 1);
        } else {
          tempObj = checkListData[x].children[y].search(designer, z);
        }
        if (tempObj.result) {
          desidArr2.push(designer.desid);
        }
      }
      desidArr.push(new Set(desidArr2));
    }
    if (searchCondition.mode === "and") {
      desidArr = desidArr.intersection();
    } else {
      desidArr = desidArr.union();
    }
  }

  blocks = [];
  for (let i = 1; i < standardDoms.length; i++) {
    if (desidArr.includes(standardDoms[i].getAttribute("desid"))) {
      standardDoms[i].style.display = "block";
      blocks.push(standardDoms[i]);
    } else {
      standardDoms[i].style.display = "none";
    }
  }

  if (blocks.length > 0) {
    setTimeout(() => {
      blocks[0].click();
    }, 0);
  }

}

DesignerJs.prototype.checklistMemoSystem = async function (desid) {
  const instance = this;
  const { createNode, withOut, colorChip, ajaxJson, dateToString, cleanChildren } = GeneralJs;
  const { ea, totalContents, belowHeight, grayBarWidth, designers } = this;
  const designer = designers.pick(desid);
  const memoBaseClassName = "memoBaseClassName";
  const memoWhitePopupClassName = "memoWhitePopupClassName";
  const textUpdateTargetClassName = "textUpdateTargetClassName";
  try {
    let memoBase, memoTong;
    let motherMargin;
    let innerMotherMargin;
    let tongBetween;
    let titleLineTop;
    let titleSize, titleWeight;
    let titleWhitePadding;
    let boxContents;
    let boxInnerPaddingLeft;
    let boxInnerPaddingTop;
    let contentsSize, contentsWeight, contentsLineHeight;
    let contentsPaddingBottom;
    let whiteOuterMargin;
    let whiteInnerMargin;
    let whiteTitleHeight;
    let whiteTitleSize;
    let whiteTitleWeight;
    let whiteTitleTextTop;
    let whiteTitleLeftVisual;
    let whiteInnerDescriptionPadding;
    let plusCircleWidth;
    let plusCircleRight;
    let plusCircleBottom;
    let plusSize;
    let plusWeight;
    let plusTextTop;
    let thisDesignerHistory;
    let renderMemo;

    motherMargin = 24;
    innerMotherMargin = 0;
    tongBetween = 16;
    titleLineTop = 10;

    titleSize = 16;
    titleWeight = 700;
    titleWhitePadding = 10;

    boxInnerPaddingLeft = 20;
    boxInnerPaddingTop = 20;

    contentsSize = 14;
    contentsWeight = 400;
    contentsLineHeight = 1.7;
    contentsPaddingBottom = 160;

    whiteOuterMargin = 72;
    whiteInnerMargin = 40;

    whiteTitleHeight = 44;

    whiteTitleSize = 22;
    whiteTitleWeight = 700;
    whiteTitleTextTop = -2;
    whiteTitleLeftVisual = 1;

    whiteInnerDescriptionPadding = 30;

    plusCircleWidth = 45;
    plusCircleRight = 24;
    plusCircleBottom = 21;

    plusSize = 38;
    plusWeight = 500;
    plusTextTop = -3;

    thisDesignerHistory = (await ajaxJson({ method: "designer", idArr: [ desid ] }, "/getHistoryTotal", { equal: true }))[desid];
    boxContents = [
      {
        title: "VOC",
        contents: thisDesignerHistory.history,
        property: "history",
      },
      {
        title: "VOD",
        contents: thisDesignerHistory.issue,
        property: "issue",
      },
      {
        title: "경력 상세",
        contents: thisDesignerHistory.career,
        property: "career",
      },
      {
        title: "자녀 및 반려 동물",
        contents: thisDesignerHistory.family,
        property: "family",
      },
      {
        title: "파트너 시공사 특징",
        contents: thisDesignerHistory.partner,
        property: "partner",
      },
      {
        title: "제작 가구 패브릭",
        contents: thisDesignerHistory.craft,
        property: "craft",
      },
      {
        title: "응대 방식",
        contents: thisDesignerHistory.reception,
        property: "reception",
      },
      {
        title: "디자인 경향",
        contents: thisDesignerHistory.styling,
        property: "styling",
      },
      {
        title: "기타 메모",
        contents: thisDesignerHistory.etc,
        property: "etc",
      }
    ];

    renderMemo = (desid, boxContents) => {
      cleanChildren(document.querySelector('.' + memoBaseClassName).firstChild);
      memoTong = createNode({
        mother: document.querySelector('.' + memoBaseClassName).firstChild,
        style: {
          display: "block",
          position: "relative",
          top: String(motherMargin) + ea,
          marginLeft: String(motherMargin) + ea,
          paddingTop: String(innerMotherMargin) + ea,
          paddingBottom: String(innerMotherMargin - tongBetween) + ea,
          paddingLeft: String(innerMotherMargin) + ea,
          paddingRight: String(innerMotherMargin - tongBetween) + ea,
          width: withOut((motherMargin * 2) + (innerMotherMargin * 2) - tongBetween, ea),
          height: withOut((motherMargin * 2) + (innerMotherMargin * 2) - tongBetween, ea),
        }
      });
      for (let i = 0; i < boxContents.length; i++) {
        createNode({
          mother: memoTong,
          event: {
            mouseenter: function (e) {
              this.children[0].children[0].children[0].style.color = colorChip.black;
              this.children[1].style.color = colorChip.green;
            },
            mouseleave: function (e) {
              this.children[0].children[0].children[0].style.color = colorChip.deactive;
              this.children[1].style.color = colorChip.black;
            }
          },
          style: {
            display: "inline-block",
            position: "relative",
            verticalAlign: "top",
            width: "calc(calc(100% - " + String(tongBetween * 3) + ea + ") / " + String(3) + ")",
            paddingTop: String(titleLineTop) + ea,
            height: "calc(calc(calc(100% - " + String(tongBetween * 3) + ea + ") / " + String(3) + ") - " + String(titleLineTop) + ea + ")",
            marginRight: String(tongBetween) + ea,
            marginBottom: String(tongBetween) + ea,
          },
          children: [
            {
              style: {
                display: "flex",
                position: "relative",
                width: withOut(0),
                height: withOut(0),
                border: "1px solid " + colorChip.gray4,
                boxSizing: "border-box",
                borderRadius: String(5) + "px",
                justifyContent: "center",
                alignItems: "end",
              },
              children: [
                {
                  style: {
                    display: "inline-block",
                    verticalAlign: "top",
                    position: "relative",
                    width: withOut(boxInnerPaddingLeft * 2, ea),
                    height: withOut(boxInnerPaddingTop, ea),
                    overflow: "scroll",
                  },
                  children: [
                    {
                      class: [ textUpdateTargetClassName ],
                      attribute: { index: String(i) },
                      text: boxContents[i].contents,
                      style: {
                        display: "block",
                        position: "relative",
                        fontSize: String(contentsSize) + ea,
                        fontWeight: String(contentsWeight),
                        color: colorChip.deactive,
                        lineHeight: String(contentsLineHeight),
                        paddingBottom: String(contentsPaddingBottom) + ea,
                      }
                    }
                  ]
                }
              ]
            },
            {
              text: boxContents[i].title,
              attribute: {
                index: String(i),
              },
              event: {
                click: function (e) {
                  const index = Number(this.getAttribute("index"));
                  const thisContents = boxContents[index];
                  let cancelBack, whiteBase;

                  cancelBack = createNode({
                    mother: totalContents,
                    class: [ memoWhitePopupClassName ],
                    event: {
                      click: function (e) {
                        const removeTargets = document.querySelectorAll('.' + memoWhitePopupClassName);
                        for (let dom of removeTargets) {
                          dom.remove();
                        }
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(grayBarWidth) + ea,
                      height: withOut(belowHeight, ea),
                      width: withOut(grayBarWidth, ea),
                      zIndex: String(5),
                      background: colorChip.black,
                      opacity: String(0.2),
                    }
                  });

                  whiteBase = createNode({
                    mother: totalContents,
                    attribute: { index: String(index) },
                    class: [ memoWhitePopupClassName ],
                    style: {
                      position: "fixed",
                      top: String(whiteOuterMargin) + ea,
                      left: String(grayBarWidth + whiteOuterMargin) + ea,
                      width: withOut(grayBarWidth + (whiteOuterMargin * 2), ea),
                      height: withOut(belowHeight + (whiteOuterMargin * 2), ea),
                      zIndex: String(5),
                      background: colorChip.white,
                      borderRadius: String(8) + "px",
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                      opacity: String(0),
                      animation: "fadeuplite 0.3s ease forwards",
                    }
                  });

                  createNode({
                    mother: whiteBase,
                    style: {
                      display: "block",
                      position: "relative",
                      paddingTop: String(whiteInnerMargin) + ea,
                      paddingBottom: String(whiteInnerMargin) + ea,
                      height: withOut(whiteInnerMargin * 2, ea),
                      width: withOut(0),
                    },
                    children: [
                      {
                        style: {
                          display: "block",
                          position: "relative",
                          marginLeft: String(whiteInnerMargin) + ea,
                          width: withOut(whiteInnerMargin * 2, ea),
                          height: withOut(0),
                        },
                        children: [
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              justifyContent: "left",
                              alignItems: "start",
                              width: withOut(0),
                              height: String(whiteTitleHeight) + ea,
                            },
                            children: [
                              {
                                text: thisContents.title,
                                style: {
                                  display: "inline-block",
                                  position: "relative",
                                  fontSize: String(whiteTitleSize) + ea,
                                  fontWeight: String(whiteTitleWeight),
                                  color: colorChip.black,
                                  top: String(whiteTitleTextTop) + ea,
                                  left: String(whiteTitleLeftVisual) + ea,
                                }
                              }
                            ]
                          },
                          {
                            style: {
                              display: "flex",
                              position: "relative",
                              width: withOut(0),
                              height: withOut(whiteTitleHeight, ea),
                              border: "1px solid " + colorChip.gray3,
                              borderRadius: String(8) + "px",
                              justifyContent: "center",
                              alignItems: "end",
                            },
                            children: [
                              {
                                style: {
                                  display: "inline-block",
                                  position: "relative",
                                  overflow: "scroll",
                                  width: withOut(whiteInnerDescriptionPadding * 2, ea),
                                  height: withOut(whiteInnerDescriptionPadding, ea),
                                },
                                children: [
                                  {
                                    class: [ textUpdateTargetClassName ],
                                    attribute: { index: String(index) },
                                    text: thisContents.contents,
                                    style: {
                                      display: "block",
                                      position: "relative",
                                      fontSize: String(contentsSize) + ea,
                                      fontWeight: String(contentsWeight),
                                      lineHeight: String(contentsLineHeight),
                                      paddingBottom: String(contentsPaddingBottom) + ea,
                                      color: colorChip.black,
                                    }
                                  }
                                ]
                              },
                              {
                                event: {
                                  selectstart: (e) => { e.preventDefault(); },
                                  click: async function (e) {
                                    try {
                                      const index = Number(this.getAttribute("index"));
                                      const baseTarget = this.parentElement.children[0];
                                      let textArea, text;
                                      let areaTarget;
                                      let updateValue;
                                      let updateTargets;
                                      let profile;
                                      let thisMember;

                                      if (baseTarget.querySelector("textarea") === null) {

                                        profile = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
                                        if (profile === null) {
                                          window.alert("허가된 멤버가 아닙니다!");
                                          window.localStorage.clear();
                                          window.location.reload();
                                        }
                                        thisMember = (await ajaxJson({ type: "boo", value: profile.homeliaisonConsoleLoginedEmail }, "/getMembers")).result;

                                        text = "-------- " + dateToString(new Date(), true) + " / " + thisMember.name + " --------";
                                        text += "\n\n";
                                        text += "\n\n";
                                        text += "----------------------------------------------";
                                        text += "\n\n";
                                        text += thisContents.contents;

                                        textArea = createNode({
                                          mother: baseTarget,
                                          mode: "textarea",
                                          attribute: { index: String(index) },
                                          event: {
                                            keydown: function (e) {
                                              if (e.key === "Tab") {
                                                e.preventDefault();
                                              }
                                            },
                                            keyup: async function (e) {
                                              try {
                                                if (e.key === "Tab") {
                                                  const index = Number(this.getAttribute("index"));

                                                  updateValue = this.value.trim();
                                                  await ajaxJson({ id: desid, column: boxContents[index].property, value: updateValue, email: null }, "/updateDesignerHistory");

                                                  boxContents[index].contents = updateValue;
                                                  thisContents.contents = updateValue;

                                                  updateTargets = document.querySelectorAll('.' + textUpdateTargetClassName);
                                                  for (let dom of updateTargets) {
                                                    if (Number(dom.getAttribute("index")) === index) {
                                                      cleanChildren(dom);
                                                      dom.insertAdjacentHTML("beforeend", updateValue.replace(/\n/gi, "<br>"));
                                                    }
                                                  }

                                                  this.remove();

                                                }
                                              } catch (e) {
                                                console.log(e);
                                              }
                                            }
                                          },
                                          text,
                                          style: {
                                            display: "block",
                                            position: "absolute",
                                            top: String(0),
                                            left: String(0),
                                            paddingBottom: String(contentsPaddingBottom) + ea,
                                            width: withOut(0, ea),
                                            height: withOut(0, ea),
                                            background: colorChip.white,
                                            border: String(0),
                                            outline: String(0),
                                            fontSize: String(contentsSize) + ea,
                                            fontWeight: String(contentsWeight),
                                            lineHeight: String(contentsLineHeight),
                                            color: colorChip.green,
                                          }
                                        });

                                        textArea.focus();

                                      } else {

                                        areaTarget = baseTarget.querySelector("textarea");
                                        updateValue = areaTarget.value.trim();
                                        await ajaxJson({ id: desid, column: boxContents[index].property, value: updateValue, email: null }, "/updateDesignerHistory");

                                        boxContents[index].contents = updateValue;
                                        thisContents.contents = updateValue;

                                        updateTargets = document.querySelectorAll('.' + textUpdateTargetClassName);
                                        for (let dom of updateTargets) {
                                          if (Number(dom.getAttribute("index")) === index) {
                                            cleanChildren(dom);
                                            dom.insertAdjacentHTML("beforeend", updateValue.replace(/\n/gi, "<br>"));
                                          }
                                        }

                                        areaTarget.remove();

                                      }

                                    } catch (err) {
                                      console.log(err);
                                    }
                                  }
                                },
                                attribute: { index: String(index) },
                                style: {
                                  display: "inline-flex",
                                  position: "absolute",
                                  width: String(plusCircleWidth) + ea,
                                  height: String(plusCircleWidth) + ea,
                                  borderRadius: String(plusCircleWidth) + ea,
                                  background: colorChip.gradientGreen,
                                  bottom: String(plusCircleBottom) + ea,
                                  right: String(plusCircleRight) + ea,
                                  justifyContent: "center",
                                  alignItems: "center",
                                  cursor: "pointer",
                                },
                                children: [
                                  {
                                    text: "+",
                                    attribute: { index: String(index) },
                                    event: {
                                      selectstart: (e) => { e.preventDefault(); },
                                    },
                                    style: {
                                      fontSize: String(plusSize) + ea,
                                      fontWeight: String(plusWeight),
                                      color: colorChip.white,
                                      fontFamily: "graphik",
                                      position: "relative",
                                      top: String(plusTextTop) + ea,
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  });

                }
              },
              style: {
                display: "inline-block",
                position: "absolute",
                paddingLeft: String(titleWhitePadding) + ea,
                paddingRight: String(titleWhitePadding) + ea,
                background: colorChip.white,
                zIndex: String(1),
                top: String(0),
                left: String(titleWhitePadding) + ea,
                fontSize: String(titleSize) + ea,
                fontWeight: String(titleWeight),
                color: colorChip.black,
                cursor: "pointer",
              }
            }
          ]
        });
      }
    }

    if ([ ...document.querySelectorAll('.' + memoBaseClassName) ].length > 0) {
      if ([ ...document.querySelectorAll('.' + memoWhitePopupClassName) ].length > 0) {
        const removeTargets = document.querySelectorAll('.' + memoWhitePopupClassName);
        for (let dom of removeTargets) {
          dom.remove();
        }
      }
      if (document.querySelector('.' + memoBaseClassName).getAttribute("desid") === desid) {
        document.querySelector('.' + memoBaseClassName).remove();
      } else {
        document.querySelector('.' + memoBaseClassName).setAttribute("desid", desid);
        renderMemo(desid, boxContents);
      }

      return;
    }

    memoBase = createNode({
      mother: totalContents,
      attribute: { desid },
      class: [ memoBaseClassName ],
      style: {
        position: "fixed",
        top: String(0),
        left: String(grayBarWidth) + ea,
        height: withOut(belowHeight, ea),
        width: withOut(grayBarWidth, ea),
        zIndex: String(4),
      },
      children: [
        {
          style: {
            display: "block",
            position: "relative",
            top: String(0),
            left: String(0),
            width: withOut(0),
            height: withOut(0),
            background: colorChip.white,
          }
        }
      ]
    }).children[0];

    renderMemo(desid, boxContents);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.checkListView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    if (GeneralJs.returnGet().entire !== "true") {
      this.backGrayBar();
    }
    await this.spreadData(null, true, null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight, media } = this;
    const mobile = media[4];
    const desktop = !mobile;
    const standardBar = totalMother.firstChild;
    const getObj = returnGet();
    const entireMode = (getObj.entire === "true");
    const normalMode = (entireMode && getObj.normal === "true");
    let designers, length;
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;
    let projects, clients;

    if (typeof getObj.desid === "string" && getObj.normal === "true") {
      designers = await ajaxJson({ noFlat: true, whereQuery: { desid: getObj.desid } }, "/getDesigners", { equal: true });
    } else {
      designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    }
    length = designers.length;
    this.designers = new Designers(designers);

    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.modes = [ "checklist", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[0];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };
    this.entireMode = entireMode;
    this.normalMode = normalMode;
    if (normalMode) {
      this.ea = "px";
    }

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            document.getElementById("totalcontents").removeChild(document.querySelector(".totalFather"));
            instance.totalFather = null;
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
          }
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.checkListDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            searchResult = instance.designers.search(value);
            if (searchResult.length > 0) {
              instance.checkListDetailLaunching(searchResult[0].desid);
            }
          }
        }
      });
      searchInput.addEventListener("contextmenu", this.checkListDetailSearchBox());
    }

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.checkListDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    if (desktop) {
      window.addEventListener("resize", (e) => {
        window.location.reload();
      });
    }
    window.addEventListener("popstate", (e) => {
      let targets, targetIndex;
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          instance.checkListDetailLaunching(instance.pageHistory[1].desid);
          instance.pageHistory.shift();
          instance.pageHistory.shift();
        }
      }
    });

    this.projectAreas = [];
    this.projectBlocks = [];

    //launching
    this.checkListDetailLaunching(this.desid);

    //add extract event
    this.reportAddExtractEvent();

  } catch (e) {
    console.log(e);
  }
}

// DATA -----------------------------------------------------------------------------------------------------------------

DesignerJs.prototype.contentsDataRender = function (project, titleMode) {
  const instance = this;
  const { ea, photoActionList, paymentActionList } = this;
  const { createNode, createNodes, colorChip, withOut, isMac, dateToString, autoComma, equalJson, ajaxJson, zeroAddition } = GeneralJs;
  const { proid, desid, name, address, process: { calculation: { method: calculationMethod, info: calculationInfo } }, contents: { photo, payment, raw, share, sns }, history, rawDate } = project;
  const { boo, date, info: { interviewer, photographer }, status } = photo;
  const { status: paymentStatus } = payment;
  const { portfolio: { status: portfolioStatus, link: portfolioLink }, interview: { status: interviewStatus, link: interviewLink }, photo: { status: photoStatus, link: photoLink } } = raw;
  const { client: { photo: photoClient, contents: contentsClient }, designer: { photo: photoDesigner, contents: contentsDesigner } } = share;
  const { portfolio: { long: longPortfolio, short: shortPortfoilo }, interview: { long: longInterview, short: shortInterview } } = sns;
  const textMaker = (title, value, color, column) => {
    return `<b id="${!titleMode ? project.proid : "title"}_${column}" title="${title}" class="value" style="color:${colorChip[titleMode ? "whiteBlack" : color]};">${titleMode ? title : value}</b>`;
  }
  const dateToColor = (dateObj, reverse = true) => {
    if (dateObj.valueOf() > (new Date(3000, 0, 1)).valueOf()) {
      return "red";
    } else if (dateObj.valueOf() < (new Date(2000, 0, 1)).valueOf()) {
      return "gray5";
    } else {
      if (dateObj.valueOf() <= (new Date()).valueOf()) {
        return !reverse ? "green" : "black";
      } else {
        return !reverse ? "black" : "green";
      }
    }
  }
  const emptyDate = new Date(1800, 0, 1);
  const emptyValue = "해당 없음";
  const foreContents = this.foreContents.find((obj) => {
    return obj.client === name.trim() && obj.desid === desid;
  })
  const foreContentsBoo = foreContents === undefined ? ((longInterview.valueOf() <= (new Date()).valueOf() && longInterview.valueOf() > (new Date(2000, 0, 1)).valueOf()) ? "사진 발행" : "사진 없음") : "사진 대기";
  let height, margin;
  let whiteBlock;
  let top, left, size;
  let startLeft;
  let previousWidth;
  let widthArr, domArr;
  let tempQsa;
  let whiteBack;
  let stringArr, tempDom;
  let tempString, tempString0, tempString1, tempString2, tempString3, tempString4;
  let updateArr;
  let map;
  let displayBoo;
  let num;
  let calendarEvent;

  height = 43;
  margin = 1;

  top = (titleMode ? (isMac() ? 12 : 13) : (isMac() ? 11 : 12.5));
  left = 16;
  size = 14;
  startLeft = 0;

  stringArr = [];
  updateArr = [];

  map = {
    boo: {
      title: "촬영",
      position: "contents.photo.boo",
      values: [ 'O', 'X' ],
      chain: {
        condition: 'X',
        updateQuery: {
          "contents.photo.status": emptyValue,
          "contents.photo.date": emptyDate,
          "contents.photo.info.photographer": emptyValue,
          "contents.photo.info.interviewer": emptyValue,
          "contents.share.client.photo": emptyDate,
          "contents.share.client.contents": emptyDate,
          "contents.share.designer.photo": emptyDate,
          "contents.share.designer.contents": emptyDate,
          "contents.sns.portfolio.long": emptyDate,
          "contents.sns.portfolio.short": emptyDate,
          "contents.sns.interview.long": emptyDate,
          "contents.sns.interview.short": emptyDate,
        }
      }
    },
    date: {
      title: "날짜",
      position: "contents.photo.date",
      values: [ '예정', '해당 없음' ],
      chain: null
    },
    dateHour: {
      title: "시간",
      position: "contents.photo.date",
      values: [],
      chain: null
    },
    status: {
      title: "상태",
      position: "contents.photo.status",
      values: [ '세팅 대기', '촬영 컨택 요망', '촬영 컨택중', '촬영 일정 확정', '촬영 완료', '촬영 홀딩', '해당 없음' ],
      chain: null
    },
    payment: {
      title: "결제",
      position: "contents.payment.status",
      values: [ '결제 요청', '결제 대기', '결제 완료', '무료 촬영', '환불 완료', '해당 없음' ],
      chain: null
    },
    photographer: {
      title: "포토",
      position: "contents.photo.info.photographer",
      values: [ '미정', '정경일', '한정구', '김태호', '이현익', '김다현', '디자이너', '고객', '박혜연', '배창규', '해당 없음' ],
      chain: null
    },
    interviewer: {
      title: "담당",
      position: "contents.photo.info.interviewer",
      values: [ '미정', '정재은', '강해진', '임혜령', '임지민', '이큰별', '배창규', '박혜연', '김지은', '해당 없음' ],
      chain: null
    },
    rawContents: {
      title: "디자이너 글",
      position: "",
      values: [],
      chain: null
    },
    address: {
      title: "주소",
      position: "",
      values: [],
      chain: null
    },
  };

  calendarEvent = function (thisCase) {
    const to = "photographing";
    const title = `촬영 W ${project.name}C ${project.designer}D ${thisCase["photographer"].textContent}P ${thisCase["interviewer"].textContent}I ${project.proid}`;
    let tempArr, dateValue, updateDate, start;

    dateValue = thisCase["date"].textContent.trim();

    if (dateValue !== "미정" && dateValue !== "예정" && dateValue !== "해당 없음" && !/디자이너/gi.test(thisCase["photographer"].textContent) && !/고객/gi.test(thisCase["photographer"].textContent)) {
      tempArr = dateValue.split('-');
      updateDate = new Date(Number(tempArr[0]), Number(tempArr[1].replace(/^0/, '')) - 1, Number(tempArr[2].replace(/^0/, '')), Number(thisCase["dateHour"].textContent.split('시')[0].replace(/[^0-9]/g, '')), Number(thisCase["dateHour"].textContent.split('시')[1].replace(/[^0-9]/g, '')));
      start = updateDate;
    } else {
      start = null;
    }

    GeneralJs.ajaxJson({ from: to, search: project.proid }, "/listSchedule", { equal: true }).then((list) => {
      if (start !== null) {
        if (list.length === 0) {
          return GeneralJs.ajaxJson({ to, title, start }, "/makeSchedule");
        } else {
          return GeneralJs.ajaxJson({ from: to, id: list[0].eventId, updateQuery: { start, title } }, "/updateSchedule");
        }
      } else {
        if (list.length !== 0) {
          return GeneralJs.ajaxJson({ from: to, id: list[0].eventId }, "/deleteSchedule");
        }
      }
    }).catch((err) => {
      throw new Error(err);
    });

  }

  stringArr.push(textMaker(map["boo"].title, boo ? 'O' : 'X', "black", "boo"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "boo";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    width = 36;
    margin = 4;
    startLeft = 0;

    background = colorChip.gradientGreen4;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        updateQuery[position] = value === 'O';
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        instance.contentsDeactivate(project.proid, (value === 'X'));
        valueDom.textContent = value;
        thisCase["status"].textContent = emptyValue;
        thisCase["date"].textContent = emptyValue;
        thisCase["photographer"].textContent = emptyValue;
        thisCase["interviewer"].textContent = emptyValue;
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    }

    nodeArr = [];
    for (let i = 0; i < values.length; i++) {
      nodeArr.push({
        mother: this,
        mode: "aside",
        attribute: [ { value: values[i] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top) + ea,
          left: String(startLeft + ((width + margin) * i)) + ea,
          width: String(width) + ea,
          height: String(height) + ea,
          background, zIndex, boxShadow, borderRadius, animation,
        }
      });
      nodeArr.push({
        mother: -1,
        text: values[i],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.whiteBlack,
        }
      });
    }
    createNodes(nodeArr);
  });
  stringArr.push(textMaker(map["date"].title, dateToString(date), dateToColor(date, true), "date"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "date";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;
    let calendarTong;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 260;
    margin = 4;

    background = colorChip.gradientGreen;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        let tempArr;
        if (value === "예정") {
          updateQuery[position] = new Date(3800, 0, 1);
          thisCase["dateHour"].style.color = valueDom.style.color = colorChip.red;
        } else if (value === "해당 없음") {
          updateQuery[position] = new Date(1800, 0, 1);
          thisCase["dateHour"].style.color = valueDom.style.color = colorChip.gray5;
        } else {
          tempArr = value.split('-');
          updateQuery[position] = new Date(Number(tempArr[0]), Number(tempArr[1].replace(/^0/, '')) - 1, Number(tempArr[2].replace(/^0/, '')), Number(thisCase["dateHour"].textContent.split('시')[0].replace(/[^0-9]/g, '')), Number(thisCase["dateHour"].textContent.split('시')[1].replace(/[^0-9]/g, '')));
          if (updateQuery[position].valueOf() > (new Date()).valueOf()) {
            thisCase["dateHour"].style.color = valueDom.style.color = colorChip.green;
          } else {
            thisCase["dateHour"].style.color = valueDom.style.color = colorChip.black;
          }
        }
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        valueDom.textContent = value;
        calendarEvent(thisCase);
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    };

    nodeArr = createNodes([
      {
        mother: this,
        mode: "aside",
        attribute: [ { value: values[0] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top) + ea,
          left: String(startLeft) + ea,
          width: String((width - margin) / 2) + ea,
          height: String(height) + ea,
          background: colorChip.white,
          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
          zIndex, borderRadius, animation,
        }
      },
      {
        mother: -1,
        text: values[0],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.black,
        }
      },
      {
        mother: this,
        mode: "aside",
        attribute: [ { value: values[1] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top) + ea,
          left: String(startLeft + ((width - margin) / 2) + margin) + ea,
          width: String((width - margin) / 2) + ea,
          height: String(height) + ea,
          background: colorChip.white,
          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
          zIndex, borderRadius, animation,
        }
      },
      {
        mother: -1,
        text: values[1],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.black,
        }
      },
      {
        mother: this,
        mode: "aside",
        events: [ { type: "click", event: (e) => { e.stopPropagation(); e.preventDefault(); } } ],
        style: {
          position: "absolute",
          top: String(top + height + margin) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          zIndex, borderRadius, animation,
          boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
          background: colorChip.white,
          transition: "all 0s ease",
        }
      }
    ]);

    calendarTong = nodeArr[4];

    const calendar = instance.mother.makeCalendar(new Date(), function (e) {
      e.stopPropagation();
      e.preventDefault();
      this.setAttribute("value", this.getAttribute("buttonValue"));
      updateEvent.call(this, e);
    });
    calendarTong.appendChild(calendar.calendarBase);
  });
  stringArr.push(textMaker(map["dateHour"].title, `${zeroAddition(date.getHours())}시 ${zeroAddition(date.getMinutes())}분`, dateToColor(date, true), "dateHour"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "dateHour";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;
    let newDom, newInput;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 36;
    margin = 4;

    background = colorChip.gradientGreen;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        let tempArr;
        if (thisCase["date"].textContent.trim() === "예정") {
          updateQuery[position] = new Date(3800, 0, 1);
          thisCase["date"].style.color = valueDom.style.color = colorChip.red;
        } else if (thisCase["date"].textContent.trim() === "해당 없음") {
          updateQuery[position] = new Date(1800, 0, 1);
          thisCase["date"].style.color = valueDom.style.color = colorChip.gray5;
        } else {
          tempArr = thisCase["date"].textContent.trim().split('-');
          updateQuery[position] = new Date(Number(tempArr[0]), Number(tempArr[1].replace(/^0/, '')) - 1, Number(tempArr[2].replace(/^0/, '')), Number(value.split('시')[0].replace(/[^0-9]/g, '')), Number(value.split('시')[1].replace(/[^0-9]/g, '')));
          if (updateQuery[position].valueOf() > (new Date()).valueOf()) {
            thisCase["date"].style.color = valueDom.style.color = colorChip.green;
          } else {
            thisCase["date"].style.color = valueDom.style.color = colorChip.black;
          }
        }
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        valueDom.textContent = value;
        calendarEvent(thisCase);
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    };

    [ newDom, newInput ] = createNodes([
      {
        mother: this,
        mode: "aside",
        events: [ { type: "click", event: (e) => { e.stopPropagation(); } } ],
        style: {
          position: "absolute",
          top: String(0) + ea,
          left: String(0) + ea,
          width: String(this.getBoundingClientRect().width) + ea,
          height: String(this.getBoundingClientRect().height) + ea,
          color: colorChip.green,
          background: colorChip.white,
          zIndex
        }
      },
      {
        mother: -1,
        mode: "input",
        attribute: [
          { type: "text" },
          { value: this.textContent.trim() },
          { past: this.textContent.trim() },
        ],
        events: [
          { type: "click", event: (e) => { e.stopPropagation(); } },
          {
            type: "keypress",
            event: function (e) {
              if (e.key === "Enter") {
                if (/^[0-9]+시 [0-9][0-9]분$/i.test(this.value.trim())) {
                  this.setAttribute("value", this.value.trim());
                  updateEvent.call(this, e);
                } else {
                  this.value = this.getAttribute("past");
                }
              }
            }
          },
        ],
        style: {
          display: "inline-block",
          fontSize: String(size + 1) + ea,
          fontWeight: String(500),
          color: colorChip.green,
          background: colorChip.white,
          outline: String(0),
          border: String(0),
          width: String(100) + '%',
          height: String(valueDom.getBoundingClientRect().height) + ea,
        }
      }
    ]);

    newInput.focus();

  });
  stringArr.push(textMaker(map["status"].title, status, "black", "status"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "status";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 114;
    margin = 4;

    background = colorChip.gradientGreen4;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        updateQuery[position] = value;
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        valueDom.textContent = value;
        calendarEvent(thisCase);
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    }

    nodeArr = [];
    for (let i = 0; i < values.length; i++) {
      nodeArr.push({
        mother: this,
        mode: "aside",
        attribute: [ { value: values[i] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top + ((margin + height) * i)) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          height: String(height) + ea,
          background, zIndex, boxShadow, borderRadius, animation,
        }
      });
      nodeArr.push({
        mother: -1,
        text: values[i],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.whiteBlack,
        }
      });
    }
    createNodes(nodeArr);
  });
  stringArr.push(textMaker(map["payment"].title, paymentStatus, (/대기/gi.test(paymentStatus) ? "red" : "black"), "payment"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "payment";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 114;
    margin = 4;

    background = colorChip.gradientGreen4;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        let additionalUpdateQuery;
        let rawValue;

        if (!/결제 요청/gi.test(value)) {

          updateQuery[position] = value;
          await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);

          if (/대기/gi.test(value)) {
            valueDom.style.color = colorChip.red;
          } else {
            valueDom.style.color = colorChip.black;
          }

          if (/결제 완료/gi.test(value)) {

            additionalUpdateQuery = {};
            do {
              rawValue = await GeneralJs.prompt("결제한 금액을 알려주세요!", "165000");
            } while (rawValue === null)
            additionalUpdateQuery["contents.payment.date"] = new Date();
            additionalUpdateQuery["contents.payment.calculation.amount"] = Number(rawValue.replace(/[^0-9]/gi, ''));
            additionalUpdateQuery["contents.payment.calculation.info.method"] = "계좌 이체";
            if (/프리/gi.test(calculationMethod) || /간이/gi.test(calculationMethod)) {
              additionalUpdateQuery["contents.payment.calculation.info.proof"] = "현금영수증";
            } else {
              additionalUpdateQuery["contents.payment.calculation.info.proof"] = "세금계산서";
            }
            additionalUpdateQuery["contents.payment.calculation.info.to"] = calculationInfo.to;

            await ajaxJson({ whereQuery, updateQuery: additionalUpdateQuery }, BACKHOST + "/rawUpdateProject");
          }
          
          valueDom.textContent = value;
          calendarEvent(thisCase);

          for (let dom of removeTargets) {
            mother.removeChild(dom);
          }


        } else {

          if (window.confirm("이 현장의 실장님께 촬영비 결제를 요청할까요?")) {

            const [ project ] = await GeneralJs.ajaxJson({ noFlat: true, where: { proid } }, "/getProjects", { equal: true });
            const [ client ] = await GeneralJs.ajaxJson({ noFlat: true, where: { cliid: project.cliid } }, "/getClients", { equal: true });
            const [ designer ] = await GeneralJs.ajaxJson({ noFlat: true, where: { desid: project.desid } }, "/getDesigners", { equal: true });
  
            await GeneralJs.ajaxJson({
              method: "requestPhotoPay",
              name: designer.designer,
              phone: designer.information.phone,
              option: {
                client: client.name,
                designer: designer.designer,
                amount0: GeneralJs.autoComma(300000),
                amount1: GeneralJs.autoComma(165000),
                host: FRONTHOST.slice(8),
                proid: project.proid,
              }
            }, "/alimTalk");

            window.alert("촬영비 결제 요청을 완료하였습니다!");
          }

          for (let dom of removeTargets) {
            mother.removeChild(dom);
          }

        }
      } catch (e) {
        console.log(e);
      }
    }

    nodeArr = [];
    for (let i = 0; i < values.length; i++) {
      nodeArr.push({
        mother: this,
        mode: "aside",
        attribute: [ { value: values[i] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top + ((margin + height) * i)) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          height: String(height) + ea,
          background, zIndex, boxShadow, borderRadius, animation,
        }
      });
      nodeArr.push({
        mother: -1,
        text: values[i],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.whiteBlack,
        }
      });
    }
    createNodes(nodeArr);
  });
  stringArr.push(textMaker(map["photographer"].title, photographer, (photographer === "미정" ? "red" : "black"), "photographer"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "photographer";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 70;
    margin = 4;

    background = colorChip.gradientGreen4;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        updateQuery[position] = value;
        if (value === "미정") {
          valueDom.style.color = colorChip.red;
        } else {
          valueDom.style.color = colorChip.black;
        }
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        valueDom.textContent = value;
        calendarEvent(thisCase);
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    }

    nodeArr = [];
    for (let i = 0; i < values.length; i++) {
      nodeArr.push({
        mother: this,
        mode: "aside",
        attribute: [ { value: values[i] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top + ((margin + height) * i)) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          height: String(height) + ea,
          background, zIndex, boxShadow, borderRadius, animation,
        }
      });
      nodeArr.push({
        mother: -1,
        text: values[i],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.whiteBlack,
        }
      });
    }
    createNodes(nodeArr);
  });
  stringArr.push(textMaker(map["interviewer"].title, interviewer, (interviewer === "미정" ? "red" : "black"), "interviewer"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "interviewer";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let nodeArr;
    let position;
    let whereQuery, updateQuery, chainQuery;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    position = map[column].position;
    values = map[column].values;
    chainQuery = map[column].chain;
    startLeft = 0;
    width = 70;
    margin = 4;

    background = colorChip.gradientGreen4;
    updateEvent = async function (e) {
      e.stopPropagation();
      e.preventDefault();
      try {
        const value = this.getAttribute("value");
        const removeTargets = mother.querySelectorAll("aside");
        updateQuery[position] = value;
        if (value === "미정") {
          valueDom.style.color = colorChip.red;
        } else {
          valueDom.style.color = colorChip.black;
        }
        await instance.contentsUpdate(whereQuery, updateQuery, chainQuery, value);
        valueDom.textContent = value;
        calendarEvent(thisCase);
        for (let dom of removeTargets) {
          mother.removeChild(dom);
        }

      } catch (e) {
        console.log(e);
      }
    }

    nodeArr = [];
    for (let i = 0; i < values.length; i++) {
      nodeArr.push({
        mother: this,
        mode: "aside",
        attribute: [ { value: values[i] } ],
        events: [ { type: "click", event: updateEvent } ],
        style: {
          position: "absolute",
          top: String(top + ((margin + height) * i)) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          height: String(height) + ea,
          background, zIndex, boxShadow, borderRadius, animation,
        }
      });
      nodeArr.push({
        mother: -1,
        text: values[i],
        style: {
          position: "absolute",
          top: String(textTop) + ea,
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.whiteBlack,
        }
      });
    }
    createNodes(nodeArr);
  });
  stringArr.push(textMaker(map["rawContents"].title, dateToString(rawDate), (/없음/gi.test(dateToString(rawDate)) ? "red" : "black"), "rawContents"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    cancelBox.parentNode.removeChild(cancelBox);
  });
  stringArr.push(textMaker(map["address"].title, address.replace(/시 /gi, " ").replace(/도 /gi, " ").replace(/군 /gi, " ").replace(/구 /gi, " ").slice(0, 40), "black", "address"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    cancelBox.parentNode.removeChild(cancelBox);
  });
  stringArr.push(textMaker("메모", history.replace(/\n/g, ' ').slice(0, 40), "black", "history"));
  updateArr.push(function (e, option, cancelBox, parent) {
    const mother = this;
    const { ea, top, createNodes, colorChip, withOut, boxShadow, animation, borderRadius, zIndex, thisCase, valueDom, height, size, textTop } = option;
    const column = "status";
    let startLeft, width, margin, background;
    let values, updateEvent;
    let whereQuery, updateQuery, chainQuery;
    let historyHeight;
    let historyMargin;

    updateQuery = {};
    whereQuery = { proid: project.proid };
    startLeft = -20;
    width = 560;
    historyHeight = 400;
    margin = 4;
    historyMargin = 15;

    this.style.overflow = "visible";

    background = colorChip.white;

    createNodes([
      {
        mother: this,
        mode: "aside",
        events: [
          {
            type: "click",
            event: function (e) {
              e.preventDefault();
              e.stopPropagation();
            }
          }
        ],
        style: {
          position: "absolute",
          top: String(top + 1) + ea,
          left: String(startLeft) + ea,
          width: String(width) + ea,
          height: String(historyHeight) + ea,
          background: colorChip.white,
          zIndex, boxShadow, borderRadius, animation,
        }
      },
      {
        mother: -1,
        mode: "textarea",
        text: history.replace(/\<br\>/gi, "\n"),
        events: [
          {
            type: "click",
            event: function (e) {
              e.stopPropagation();
            }
          },
          {
            type: "keydown",
            event: async function (e) {
              try {
                if (e.key === "Tab") {
                  e.preventDefault();
                  e.stopPropagation();

                  const removeTargets = mother.querySelectorAll("aside");
                  const value = this.value;
                  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));

                  (mother.querySelectorAll('b'))[0].textContent = value.slice(0, 40);
                  await GeneralJs.ajaxJson({
                    id: project.proid,
                    column: "photo",
                    value,
                    email: cookies.homeliaisonConsoleLoginedEmail
                  }, "/updateProjectHistory");

                  for (let dom of removeTargets) {
                    mother.removeChild(dom);
                  }

                }
              } catch (e) {
                console.log(e);
              }
            }
          }
        ],
        style: {
          position: "absolute",
          top: String(historyMargin) + ea,
          left: String(historyMargin + 3) + ea,
          width: withOut(100, (historyMargin + 3) * 2, ea),
          height: withOut(100, historyMargin * 2, ea),
          fontSize: String(size) + ea,
          fontWeight: String(300),
          background: colorChip.white,
          lineHeight: String(1.7),
          color: colorChip.black,
          border: String(0),
          outline: String(0),
        }
      }
    ]);

  });

  displayBoo = true;
  if (this.type === "contents" || this.type === "share") {
    if (photoActionList.includes(project.contents.raw.photo.status)) {
      // displayBoo = false;
    }
  }
  if (titleMode) {
    displayBoo = true;
  }

  return { map, stringArr, updateArr, grayBoo: boo, displayBoo };
}

DesignerJs.prototype.contentsUpdate = async function (whereQuery, updateQuery, chainQuery = null, rawValue = '') {
  const instance = this;
  const { colorChip, ajaxJson } = GeneralJs;
  try {
    if (typeof whereQuery !== "object" || typeof updateQuery !== "object") {
      throw new Error("invaild input");
    }
    if (chainQuery !== null) {
      if (chainQuery.condition === undefined || chainQuery.updateQuery === undefined) {
        throw new Error("invaild input");
      }
    }
    const { proid } = whereQuery;
    const project = this.projects.search("proid", proid);
    let tempArr, target;
    let boo;
    let tempQsa0, tempQsa1, tempQsa2;

    await ajaxJson({ whereQuery, updateQuery }, "/rawUpdateProject");

    for (let query in updateQuery) {
      tempArr = query.split('.');
      target = project;
      for (let i = 0; i < tempArr.length - 1; i++) {
        target = target[tempArr[i]];
      }
      target[tempArr[tempArr.length - 1]] = updateQuery[query];
    }

    if (chainQuery !== null) {
      const { condition, updateQuery: chainUpdateQuery } = chainQuery;
      boo = false;
      if ((new RegExp(condition, "gi")).test(rawValue)) {
        boo = true;
      }
      if (boo) {
        await ajaxJson({ whereQuery, updateQuery: chainUpdateQuery }, "/rawUpdateProject");
        for (let query in chainUpdateQuery) {
          tempArr = query.split('.');
          target = project;
          for (let i = 0; i < tempArr.length - 1; i++) {
            target = target[tempArr[i]];
          }
          target[tempArr[tempArr.length - 1]] = chainUpdateQuery[query];
        }
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.contentsDeactivate = function (proid, offMode = true) {
  const instance = this;
  const { colorChip, stacks } = GeneralJs;
  let emptyDate, emptyValue;
  let tempQsa;
  let whiteBlock;
  let num;
  let name;
  let tong;
  let children;
  let length;

  whiteBlock = document.getElementById(proid);
  children = whiteBlock.children;
  length = children.length;
  emptyDate = new Date(1800, 0, 1);
  emptyValue = "해당 없음";
  name = "deactive_" + proid;

  if (offMode) {
    stacks[name] = [];
    tong = stacks[name];
    tempQsa = whiteBlock.querySelectorAll("div");
    for (let dom of tempQsa) {
      tong.push(dom.style.color);
      dom.style.color = colorChip.gray4;
    }
    tempQsa = whiteBlock.querySelectorAll("b");
    for (let dom of tempQsa) {
      tong.push(dom.style.color);
      dom.style.color = colorChip.gray4;
    }
    tong.push(whiteBlock.firstChild.style.background);
    whiteBlock.firstChild.style.background = colorChip.gray0;
    tong.push(children[length - 2].style.background);
    children[length - 2].style.background = colorChip.gray0;
    tong.push(children[length - 1].style.background);
    children[length - 1].style.background = colorChip.gray4;
  } else {
    if (Array.isArray(stacks[name])) {
      num = 0;
      tong = stacks[name];
      tempQsa = whiteBlock.querySelectorAll("div");
      for (let dom of tempQsa) {
        dom.style.color = tong[num];
        num = num + 1;
      }
      tempQsa = whiteBlock.querySelectorAll("b");
      for (let dom of tempQsa) {
        dom.style.color = tong[num];
        num = num + 1;
      }
      whiteBlock.firstChild.style.background = tong[num];
      num = num + 1;
      children[length - 2].style.background = tong[num];
      num = num + 1;
      children[length - 1].style.background = tong[num];
    } else {
      if (![ "rgb(255, 255, 255)", "#ffffff", "#fff", "#FFFFFF", "#FFF", "white" ].includes(whiteBlock.firstChild.style.background)) {
        window.location.reload();
      }
    }
  }

}

// LOGIC -----------------------------------------------------------------------------------------------------------------

DesignerJs.prototype.contentsBase = function (search = null) {
  const instance = this;
  const { ea, belowHeight } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const { white, green } = colorChip;
  let totalMother;
  let margin;
  let titleArea, contentsArea;
  let titleDesigner, titleProject, titleTime;
  let contentsDesigner, contentsProject, contentsTong;
  let size;
  let borderBack;
  let dashBoardHeight, dashBoardMargin;
  let dashBoard;
  let topMargin, leftMargin;

  margin = 20;
  size = 18;
  dashBoardHeight = 0;
  dashBoardMargin = 0;
  topMargin = 11;
  leftMargin = 10;

  totalMother = createNode({
    mother: document.getElementById("totalcontents"),
    class: [ "totalMother" ],
    style: {
      position: "fixed",
      top: String(0),
      left: String(0),
      paddingTop: String(margin) + ea,
      paddingLeft: String(margin) + ea,
      paddingRight: String(margin) + ea,
      width: withOut(margin * 2, ea),
      height: withOut(margin + belowHeight, ea),
    }
  });
  this.totalMother = totalMother;

  [ borderBack, dashBoard, contentsArea, contentsTong ] = createNodes([
    {
      mother: totalMother,
      style: {
        position: "absolute",
        top: String(0) + ea,
        left: String(0) + ea,
        width: String(265) + ea,
        height: String(100) + "vh",
        background: colorChip.gray0
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        height: String(dashBoardHeight) + ea,
        marginBottom: String(dashBoardMargin) + ea,
        borderRadius: String(3) + "px",
        textAlign: "center",
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        height: withOut(dashBoardHeight + dashBoardMargin, ea),
      }
    },
    {
      mother: -1,
      style: {
        display: "block",
        position: "relative",
        paddingTop: String(0) + ea,
        paddingLeft: String(0) + ea,
        height: String(100) + '%',
        width: String(100) + '%',
        top: String(0) + ea,
        boxSizing: "border-box",
        overflowY: "scroll",
        overflowX: "hidden",
      }
    },
    {
      mother: totalMother,
      style: {
        position: "absolute",
        top: String(margin + dashBoardHeight + dashBoardMargin) + ea,
        right: String(0) + ea,
        width: String(margin) + ea,
        height: withOut(margin + dashBoardHeight + dashBoardMargin, ea),
        borderBottom: String(0),
        boxSizing: "border-box",
        zIndex: String(4),
      }
    },
  ]);

  this.contentsSpec.contentsTong = contentsTong;
  this.contentsSpec.dashBoard = dashBoard;
  this.contentsBlockInjection();
  // this.contentsDashBoard();
}

DesignerJs.prototype.contentsBlockInjection = function () {
  const instance = this;
  const { ea, projects } = this;
  const { createNode, createNodes, colorChip, withOut, cleanChildren, appendQuery, returnGet, removeQuery, setQueue } = GeneralJs;
  const { contentsTong } = this.contentsSpec;
  let scrollTong;
  let width, dom;
  let maxWidth;
  let startLeft, betweenText, widthArr, domArr;
  let temp;
  let firstBoo;
  let leftMargin;
  let firstPaddingTop;
  let tongPaddingBottom;
  let resultArr;

  leftMargin = 10;
  firstPaddingTop = 42;
  tongPaddingBottom = 500;

  cleanChildren(contentsTong);

  scrollTong = createNode({
    mother: contentsTong,
    style: {
      position: "relative",
      width: withOut(0, ea),
      overflowX: "hidden",
      paddingTop: String(firstPaddingTop) + ea,
      paddingBottom: String(tongPaddingBottom) + ea,
    }
  });

  maxWidth = [];

  this.scrollTong = scrollTong;
  this.contentsBlocks = [];
  this.ignoreNumbers = [ 3, 1 ];
  this.widthArrMotherConverted = null;

  resultArr = [];
  firstBoo = true;
  for (let i = 0; i < projects.length; i++) {
    if (firstBoo) {
      this.contentsWhiteBlock(scrollTong, projects[i], (i === 0), i, true);
      firstBoo = false;
    }
    resultArr.push(this.contentsWhiteBlock(scrollTong, projects[i], false, i, false));
  }

  resultArr = resultArr.filter((obj) => { return obj.result; });
  if (resultArr.length === 1) {
    if (returnGet().proid !== resultArr[0].proid) {
      appendQuery({
        proid: resultArr[0].proid
      });
    }
  } else if (resultArr.length === projects.length) {
    setQueue(() => {
      removeQuery("proid");
    });
  }
}

DesignerJs.prototype.contentsWhiteBlock = function (mother, project, first, index, titleMode = false) {
  if (mother === undefined || project === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { ea } = this;
  const { createNode, createNodes, colorChip, withOut, isMac, blankHref } = GeneralJs;
  const { map, stringArr, updateArr, grayBoo, displayBoo } = this.contentsDataRender(project, titleMode);
  let height, margin;
  let whiteBlock;
  let width0, width1;
  let top, left, size;
  let textMargin;
  let previousWidth, betweenText;
  let widthArr, domArr;
  let tempQsa;
  let whiteBack;
  let whiteWidth;
  let tempDom;
  let factorHeight;
  let leftMargin;
  let motherMargin;
  let titleBlockTop;
  let menuMargin;
  let menuHeight;
  let menuTextTop;
  let blockArr;
  let blockMap;
  let thisWidthArr;

  thisWidthArr = [
    25,
    79,
    63,
    79,
    52,
    52,
    52,
    79,
    400,
    420,
  ]

  leftMargin = 0;
  motherMargin = 20;

  height = 38;
  margin = 0;

  width0 = 220;
  width1 = 3;
  titleBlockTop = 20;

  top = (titleMode ? (isMac() ? 9 : 10.5) : (isMac() ? 9 : 10.5));
  left = 16;
  size = 14;
  textMargin = 6;
  betweenText = 48;

  whiteWidth = 16;
  factorHeight = 20;

  menuMargin = 24;
  menuHeight = 32;
  menuTextTop = isMac() ? 6 : 7;

  blockMap = window.localStorage.getItem(instance.localStorageConst + instance.blockMapConst + instance.type);
  if (blockMap === null) {
    blockMap = {};
  } else {
    blockMap = JSON.parse(blockMap);
  }

  if (blockMap[project.proid] === undefined) {
    blockArr = (new Array(stringArr.length)).fill("block");
  } else {
    blockArr = blockMap[project.proid];
    blockArr.pop();
  }

  blockArr.push(first ? "block" : instance.contentsSearchIndex.includes(index) ? "none" : (displayBoo ? "block" : "none"));

  whiteBlock = createNode({
    mother,
    id: titleMode ? "title" : project.proid,
    attribute: [
      { index: String(index) },
      { sortstandard: "" },
      { sort: "1" },
      { titlemode: titleMode ? 1 : 0 },
      { blockarr: JSON.stringify(blockArr) }
    ],
    style: {
      display: first ? "block" : blockArr.every((str) => { return str.trim() === "block" }) ? "block" : "none",
      position: titleMode ? "fixed" : "relative",
      width: String(8000) + ea,
      height: String(height) + ea,
      marginBottom: String(margin) + ea,
      transition: "all 0s ease",
      zIndex: titleMode ? String(4) : "",
      top: titleMode ? String(titleBlockTop) + ea : "",
    },
    children: [
      {
        style: {
          position: "absolute",
          width: "calc(100vw - " + String((motherMargin * 2) + (leftMargin * 2)) + ea + ")",
          height: String(100) + '%',
          borderRadius: titleMode ? String(5) + "px" : "",
          background: titleMode ? colorChip.gradientGray : "transparent",
          top: String(0),
          left: String(0),
          transition: "all 0s ease",
          boxShadow: titleMode ? "0px 2px 13px -9px " + colorChip.shadow : "",
          opacity: titleMode ? String(0.92) : "",
        }
      },
      {
        text: !titleMode ? project.proid + " <u%---%u> " + project.title : "",
        class: [ "hoverDefault" ],
        events: [
          {
            type: "click",
            event: function (e) {
              blankHref(window.location.protocol + "//" + window.location.host + "/project?proid=" + project.proid + "&rmode=true");
            }
          }
        ],
        style: {
          display: "inline-block",
          verticalAlign: "top",
          position: "relative",
          width: String(width0) + ea,
          top: String(top + (isMac() ? 1 : 0)) + ea,
          marginLeft: String(left) + ea,
          fontSize: String(size) + ea,
          fontWeight: String(600),
          zIndex: String(2),
          color: colorChip.black,
          transition: "all 0s ease",
        },
        under: {
          fontSize: String(size) + ea,
          fontWeight: String(600),
          color: colorChip.gray3,
        }
      },
      {
        text: !titleMode ? `|<b style="display:none">${project.proid + project.cliid + project.desid}</b>` : "",
        style: {
          display: "inline-block",
          verticalAlign: "top",
          position: "relative",
          width: String(width1) + ea,
          top: String(top + (isMac() ? 1 : 0)) + ea,
          marginLeft: String(textMargin) + ea,
          fontSize: String(size) + ea,
          color: colorChip.gray0,
          zIndex: String(2),
          transition: "all 0s ease",
        }
      },
    ]
  });

  widthArr = [];
  domArr = [];
  for (let i = 0; i < stringArr.length; i++) {
    tempDom = createNode({
      mother: whiteBlock,
      attribute: [
        { index: String(index) },
        { arrindex: String(i) },
        { titlemode: titleMode ? 1 : 0 },
        { sort: String(1), }
      ],
      text: stringArr[i],
      class: [ "white_child_" + String(i) ],
      events: [
        {
          type: [ "selectstart" ],
          event: (e) => { e.preventDefault() },
        },
        {
          type: [ "click", "contextmenu" ],
          event: function (e) {
            e.stopPropagation();
            e.preventDefault();
            const self = this;
            const { ea, ignoreNumbers, contentsBlocks, scrollTong } = instance;
            const { createNode, createNodes, colorChip, withOut, xyConverting, dateToString, stringToDate, isMac } = GeneralJs;
            const titleMode = Number(this.getAttribute("titlemode")) === 1;
            const thisIndex = Number(this.getAttribute("arrindex"));
            const thisSort = Number(this.getAttribute("sort"));
            if (titleMode) {

              const targets = contentsBlocks.map((dom, index) => { return { dom, index: index - 1 }; }).slice(1);
              const children = xyConverting(targets.map((obj) => { return [ ...obj.dom.children ].slice(ignoreNumbers[0], -1 * ignoreNumbers[1]); }));
              const sortTargets = children[thisIndex];
              const sortTargetsText = sortTargets.map((dom) => { return dom.querySelector(".value").textContent; });
              let indexArr, tempIndex, numberSortBoo;
              let target, column;
              let width, widthFactor;
              let innerMargin;
              let margin;
              let tong;
              let factor;
              let paddingLeft;
              let widthArr;
              let factorArr;
              let newWidth;
              let originalWidth;
              let height;
              let visual;
              let tongMargin;
              let cancel;
              let callback;
              let cancelLive;
              let onoff;
              let mode;
              let fontSize;

              if (e.type === "click") {

                numberSortBoo = sortTargets.map((dom) => { return dom.querySelector(".value").textContent; }).some((str) => { return (str.replace(/[0-9\-\.\: ]/gi, '').trim() === '' && /[0-9]/gi.test(str)) });

                if (!numberSortBoo) {
                  if (thisSort === 1) {
                    sortTargets.sort((a, b) => {
                      return b.querySelector(".value").textContent > a.querySelector(".value").textContent ? 1 : -1;
                    });
                    this.setAttribute("sort", String(0));
                  } else {
                    sortTargets.sort((a, b) => {
                      return a.querySelector(".value").textContent > b.querySelector(".value").textContent ? 1 : -1;
                    });
                    this.setAttribute("sort", String(1));
                  }
                } else {
                  if (thisSort === 1) {
                    sortTargets.sort((a, b) => {
                      let aValue, bValue;
                      aValue = a.querySelector(".value").textContent.replace(/[^0-9]/gi, '') === '' ? 0 : Number(a.querySelector(".value").textContent.replace(/[^0-9]/gi, ''));
                      bValue = b.querySelector(".value").textContent.replace(/[^0-9]/gi, '') === '' ? 0 : Number(b.querySelector(".value").textContent.replace(/[^0-9]/gi, ''));
                      if (/예정/gi.test(a.querySelector(".value").textContent)) {
                        aValue = 900000000;
                      }
                      if (/예정/gi.test(b.querySelector(".value").textContent)) {
                        bValue = 900000000;
                      }
                      return bValue - aValue;
                    });
                    this.setAttribute("sort", String(0));
                  } else {
                    sortTargets.sort((a, b) => {
                      let aValue, bValue;
                      aValue = a.querySelector(".value").textContent.replace(/[^0-9]/gi, '') === '' ? 0 : Number(a.querySelector(".value").textContent.replace(/[^0-9]/gi, ''));
                      bValue = b.querySelector(".value").textContent.replace(/[^0-9]/gi, '') === '' ? 0 : Number(b.querySelector(".value").textContent.replace(/[^0-9]/gi, ''));
                      if (/예정/gi.test(a.querySelector(".value").textContent)) {
                        aValue = 900000000;
                      }
                      if (/예정/gi.test(b.querySelector(".value").textContent)) {
                        bValue = 900000000;
                      }
                      return aValue - bValue;
                    });
                    this.setAttribute("sort", String(1));
                  }
                }

                indexArr = sortTargets.map((dom) => { return Number(dom.getAttribute("index")) });
                for (let index of indexArr) {
                  tempIndex = targets.findIndex((obj) => { return obj.index === index });
                  if (tempIndex !== -1) {
                    scrollTong.appendChild(targets[tempIndex].dom);
                  }
                }

              } else {

                // filter
                margin = 10;
                innerMargin = 4;
                widthFactor = 600;
                paddingLeft = 12;
                height = 36;
                visual = isMac() ? -2 : 0.5;
                tongMargin = 13;
                cancelLive = true;
                fontSize = 14;

                cancel = createNode({
                  mother: this,
                  style: {
                    position: "fixed",
                    top: String(0),
                    left: String(0),
                    width: String(100) + '%',
                    height: String(100) + '%',
                    background: "transparent",
                    zIndex: String(1),
                  }
                });

                if (sortTargetsText.some((str) => { return /[0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/gi.test(str); })) {
                  if (sortTargetsText.some((str) => { return /\,/gi.test(str) })) {
                    // date history
                    target = [ "있음", "없음" ];
                    column = 1;
                    mode = "dateHistory";
                  } else {
                    // date
                    target = [ "미래", "과거", "미정" ];
                    column = 1;
                    mode = "date";
                  }
                } else if (sortTargetsText.every((str) => { return str.length < 20; })) {
                  if (sortTargetsText.some((str) => { return /원$/.test(str) && /^[0-9]/gi.test(str) })) {
                    // money
                    target = [ "있음", "없음" ];
                    column = 1;
                    mode = "money";
                  } else {
                    // menu
                    target = [ ...new Set(sortTargetsText) ];
                    column = Math.ceil(target.length / 5);
                    mode = "menu";
                  }
                } else {
                  // long
                  cancel.remove();
                  cancelLive = false;
                }

                if (cancelLive) {

                  width = (widthFactor * column) + (innerMargin * (column - 1));

                  tong = createNode({
                    mother: this,
                    event: {
                      click: (e) => { e.preventDefault(); e.stopPropagation(); }
                    },
                    style: {
                      display: "block",
                      position: "absolute",
                      top: String(this.getBoundingClientRect().height + margin) + ea,
                      left: String((this.firstChild.getBoundingClientRect().width / 2) - (width / 2)) + ea,
                      width: String(width + column) + ea,
                      height: "auto",
                      transition: "all 0s ease",
                      borderRadius: String(3) + ea,
                      animation: "fadeuplite 0.3s ease",
                      boxShadow: "0px 4px 13px -9px " + colorChip.shadow,
                      zIndex: String(1),
                    },
                    children: [
                      {
                        style: {
                          position: "absolute",
                          top: String(0),
                          left: String(0),
                          width: String(100) + '%',
                          height: String(100) + '%',
                          background: colorChip.gray1,
                          opacity: String(0.9),
                          borderRadius: String(3) + ea,
                        }
                      }
                    ]
                  });


                  if (!Array.isArray(GeneralJs.stacks[instance.type + String(thisIndex)])) {
                    if (window.localStorage.getItem(instance.localStorageConst + instance.type + String(thisIndex)) !== null) {
                      GeneralJs.stacks[instance.type + String(thisIndex)] = JSON.parse(window.localStorage.getItem(instance.localStorageConst + instance.type + String(thisIndex)));
                    } else {
                      GeneralJs.stacks[instance.type + String(thisIndex)] = [[]];
                      window.localStorage.setItem(instance.localStorageConst + instance.type + String(thisIndex), JSON.stringify([[]]));
                    }
                  }
                  widthArr = [];
                  factorArr = [];
                  for (let str of target) {
                    onoff = GeneralJs.stacks[instance.type + String(thisIndex)][0].includes(str);
                    factor = createNode({
                      mother: tong,
                      attribute: {
                        toggle: onoff ? "on" : "off",
                        value: str,
                      },
                      event: {
                        click: function (e) {
                          e.preventDefault();
                          e.stopPropagation();
                          const toggle = this.getAttribute("toggle");
                          if (toggle === "off") {
                            this.style.background = colorChip.green;
                            this.setAttribute("toggle", "on");
                          } else {
                            this.style.background = colorChip.deactive;
                            this.setAttribute("toggle", "off");
                          }
                        }
                      },
                      style: {
                        display: "inline-flex",
                        justifyContent: "center",
                        alignItems: "center",
                        position: "relative",
                        width: String(widthFactor) + ea,
                        marginRight: String(innerMargin) + ea,
                        marginBottom: String(innerMargin) + ea,
                        height: String(height) + ea,
                        background: onoff ? colorChip.green : colorChip.deactive,
                        borderRadius: String(3) + ea,
                        paddingLeft: String(paddingLeft) + ea,
                        paddingRight: String(paddingLeft) + ea,
                      },
                      children: [
                        {
                          class: [ "hoverDefault_lite" ],
                          text: str,
                          style: {
                            fontSize: String(fontSize) + ea,
                            fontWeight: String(500),
                            color: colorChip.whiteBlack,
                            textAlign: "center",
                            width: String(100) + '%',
                            position: "relative",
                            top: String(visual) + ea,
                          }
                        }
                      ]
                    });

                    factor.style.width = "auto";
                    widthArr.push(factor.getBoundingClientRect().width);
                    factorArr.push(factor);
                  }

                  widthArr.sort((a, b) => { return b - a; });
                  originalWidth = Math.ceil(widthArr[0]);
                  newWidth = originalWidth - (paddingLeft * 2);
                  factorArr.forEach((dom) => {
                    dom.style.width = String(newWidth) + ea;
                  });

                  width = (originalWidth * column) + (innerMargin * (column - 1));

                  tong.style.paddingLeft = String(tongMargin) + ea;
                  tong.style.paddingTop = String(tongMargin) + ea;
                  tong.style.paddingRight = String(tongMargin - innerMargin) + ea;
                  tong.style.paddingBottom = String(tongMargin - innerMargin) + ea;

                  tong.style.left = String((this.firstChild.getBoundingClientRect().width / 2) - ((width + tongMargin + tongMargin) / 2)) + ea;
                  tong.style.width = String(width + innerMargin) + ea;

                  callback = async () => {
                    try {
                      const targetValues = factorArr.filter((dom) => { return dom.getAttribute("toggle") === "on" }).map((dom) => { return dom.getAttribute("value"); });
                      let blockArr, blockMap;
                      blockMap = {};

                      if (mode === "dateHistory") {
                        if (targetValues.length > 0) {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));

                            if (targetValues.includes("있음")) {
                              if (!/[0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/gi.test(dom.querySelector(".value").textContent)) {
                                blockArr[thisIndex] = "none";
                              } else {
                                blockArr[thisIndex] = "block";
                              }
                            }

                            if (targetValues.includes("없음")) {
                              if (!/[0-9][0-9][0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/gi.test(dom.querySelector(".value").textContent)) {
                                blockArr[thisIndex] = "block";
                              } else {
                                if (!targetValues.includes("있음")) {
                                  blockArr[thisIndex] = "none";
                                }
                              }
                            }

                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        } else {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));
                            blockArr[thisIndex] = "block";
                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        }
                      } else if (mode === "date") {
                        if (targetValues.length > 0) {

                          const past = new Date(2000, 0, 1);
                          const now = new Date();
                          const future = new Date(3000, 0, 1);

                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));

                            if (targetValues.includes("미래")) {
                              if (now.valueOf() <= stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() && stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() < future.valueOf()) {
                                blockArr[thisIndex] = "block";
                              } else {
                                blockArr[thisIndex] = "none";
                              }
                            }
                            if (targetValues.includes("과거")) {
                              if (now.valueOf() > stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() && stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() > past.valueOf()) {
                                blockArr[thisIndex] = "block";
                              } else {
                                if (!targetValues.includes("미래")) {
                                  blockArr[thisIndex] = "none";
                                }
                              }
                            }
                            if (targetValues.includes("미정")) {
                              if (future.valueOf() < stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() || stringToDate(dom.querySelector(".value").textContent.trim()).valueOf() < past.valueOf()) {
                                blockArr[thisIndex] = "block";
                              } else {
                                if (!targetValues.includes("미래") && !targetValues.includes("과거")) {
                                  blockArr[thisIndex] = "none";
                                }
                              }
                            }

                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }

                        } else {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));
                            blockArr[thisIndex] = "block";
                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        }
                      } else if (mode === "money") {
                        if (targetValues.length > 0) {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));

                            if (targetValues.includes("있음")) {
                              if (dom.querySelector(".value").textContent.trim() === "0원") {
                                blockArr[thisIndex] = "none";
                              } else {
                                blockArr[thisIndex] = "block";
                              }
                            }

                            if (targetValues.includes("없음")) {
                              if (dom.querySelector(".value").textContent.trim() === "0원") {
                                blockArr[thisIndex] = "block";
                              } else {
                                if (!targetValues.includes("있음")) {
                                  blockArr[thisIndex] = "none";
                                }
                              }
                            }

                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        } else {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));
                            blockArr[thisIndex] = "block";
                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        }
                      } else if (mode === "menu") {
                        if (targetValues.length > 0) {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));
                            if (targetValues.includes(dom.querySelector(".value").textContent.trim())) {
                              blockArr[thisIndex] = "block";
                            } else {
                              blockArr[thisIndex] = "none";
                            }
                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        } else {
                          for (let dom of sortTargets) {
                            blockArr = JSON.parse(dom.parentElement.getAttribute("blockarr"));
                            blockArr[thisIndex] = "block";
                            blockMap[dom.parentElement.id] = blockArr;
                            dom.parentElement.setAttribute("blockarr", JSON.stringify(blockArr));
                            if (blockArr.every((str) => { return str === "block" })) {
                              dom.parentElement.style.display = "block";
                            } else {
                              dom.parentElement.style.display = "none";
                            }
                          }
                        }
                      }

                      window.localStorage.setItem(instance.localStorageConst + instance.blockMapConst + instance.type, JSON.stringify(blockMap));

                      GeneralJs.stacks[instance.type + String(thisIndex)].unshift(targetValues);
                      window.localStorage.setItem(instance.localStorageConst + instance.type + String(thisIndex), JSON.stringify(GeneralJs.stacks[instance.type + String(thisIndex)]));
                    } catch (e) {
                      console.log(e);
                    }
                  }

                  cancel.addEventListener("click", async (e) => {
                    try {
                      e.preventDefault();
                      e.stopPropagation();

                      if (typeof callback === "function") {
                        await callback();
                      }

                      self.removeChild(self.lastChild);
                      self.removeChild(self.lastChild);
                    } catch (e) {
                      console.log(e);
                    }
                  });
                }

              }
            } else {
              if (this.querySelectorAll("aside").length === 0) {
                const self = this;
                const index = Number(this.getAttribute("arrindex"));
                const valueDom = this.querySelector(".value");
                let thisCase;
                thisCase = {};
                for (let column in map) {
                  if (document.getElementById(project.proid + "_" + column) === null) {
                    throw new Error("invaild doms");
                  }
                  thisCase[column] = document.getElementById(project.proid + "_" + column);
                }
                const option = {
                  ea,
                  top: menuMargin,
                  createNode,
                  createNodes,
                  colorChip,
                  withOut,
                  thisCase,
                  boxShadow: "0px 3px 16px -9px " + colorChip.shadow,
                  animation: "fadeuplite 0.2s ease forwards",
                  borderRadius: String(5) + "px",
                  zIndex: String(3),
                  valueDom,
                  height: menuHeight,
                  size: size - 1,
                  textTop: menuTextTop
                };
                let cancelBox, parent;

                parent = this.parentElement;
                cancelBox = createNode({
                  mother: this,
                  mode: "aside",
                  events: [
                    {
                      type: "click",
                      event: async function (e) {
                        try {
                          e.stopPropagation();
                          e.preventDefault();
                          const directParent = this.parentElement;
                          const removeTargets = directParent.querySelectorAll("aside");
                          for (let dom of removeTargets) {
                            directParent.removeChild(dom);
                          }
                        } catch (e) {
                          console.log(e);
                        }
                      }
                    }
                  ],
                  style: {
                    position: "fixed",
                    top: String(0) + ea,
                    left: String(0) + ea,
                    width: String(100) + '%',
                    height: String(100) + '%',
                    background: "transparent",
                    zIndex: option.zIndex,
                  }
                });

                updateArr[index].call(this, e, option, cancelBox, parent);
              }
            }
          }
        },
      ],
      style: {
        display: "inline-block",
        verticalAlign: "top",
        position: "relative",
        top: String(top) + ea,
        marginLeft: String(betweenText) + ea,
        fontSize: String(size) + ea,
        fontWeight: String(titleMode ? 700 : 500),
        height: ((i === stringArr.length - 1) ? String(factorHeight) + ea : ""),
        overflow: ((i === stringArr.length - 1) ? "hidden" : "visible"),
        transition: "all 0s ease",
        cursor: "pointer",
        width: String(thisWidthArr[i]) + ea,
      }
    });
    domArr.push(tempDom);
    previousWidth = tempDom.getBoundingClientRect().width;
    widthArr.push(previousWidth);
  }

  whiteBack = createNode({
    mother: whiteBlock,
    style: {
      position: "absolute",
      top: String(0) + ea,
      right: String(0) + ea,
      width: String(whiteWidth) + ea,
      height: String(100) + '%',
      background: colorChip.white
    }
  });

  if (!grayBoo) {
    tempQsa = whiteBlock.querySelectorAll("div");
    for (let dom of tempQsa) {
      dom.style.color = colorChip.gray4;
    }
    tempQsa = whiteBlock.querySelectorAll("b");
    for (let dom of tempQsa) {
      dom.style.color = colorChip.gray4;
    }
    whiteBlock.children[2].style.background = colorChip.gray0;
    whiteBack.style.background = colorChip.gray0;
  }

  this.contentsBlocks.push(whiteBlock);

  return {
    proid: project.proid,
    result: (first ? true : instance.contentsSearchIndex.includes(index) ? false : (displayBoo ? true : false))
  };
}

DesignerJs.prototype.contentsDashBoard = function () {
  const instance = this;
  const { ea, projects } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const { dashBoard } = this.contentsSpec;
  let size, top, left;
  let nodeArr;
  let textArr;
  let typeNum;
  let dashBoardBox;

  size = 16;
  top = 11;
  left = 19;

  textArr = [];
  typeNum = 0;
  for (let i = 0; i < this.typeArr.length; i++) {
    if (this.typeArr[i] === this.type) {
      typeNum = i;
    }
    textArr.push(this.typeArr[i].slice(0, 1).toUpperCase() + this.typeArr[i].slice(1));
  }

  dashBoardBox = createNode({
    mother: dashBoard,
    style: {
      position: "relative",
      width: withOut(left * 2, ea),
      height: String(100) + '%',
      left: String(left) + ea,
      textAlign: "left",
    }
  });

  nodeArr = [];
  for (let i = 0; i < textArr.length; i++) {
    nodeArr.push({
      mother: dashBoardBox,
      text: textArr[i],
      class: [ "hoverDefault" ],
      attribute: [
        { value: instance.typeArr[i] }
      ],
      events: [
        {
          type: "click",
          event: function (e) {
            instance.type = this.getAttribute("value");
            for (let i = 0; i < instance.typeArr.length; i++) {
              if (instance.typeArr[i] === instance.type) {
                instance.typeDoms[i].style.color = colorChip.green;
              } else {
                instance.typeDoms[i].style.color = colorChip.shadowWhite;
              }
            }
            instance.contentsBlockInjection();
          }
        }
      ],
      style: {
        display: "inline-block",
        position: "relative",
        fontFamily: "graphik",
        fontSize: String(size) + ea,
        fontWeight: String(400),
        top: String(top) + ea,
        color: colorChip[i === typeNum ? "green" : "shadowWhite"],
      }
    });
    if (i !== textArr.length - 1) {
      nodeArr.push({
        mother: dashBoardBox,
        text: `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`,
        style: {
          display: "inline-block",
          position: "relative",
          fontFamily: "graphik",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          top: String(top) + ea,
          color: colorChip.gray5
        }
      });
    }
  }
  nodeArr.push({
    mother: dashBoardBox,
    text: 'D',
    class: [ "hoverDefault" ],
    events: [
      {
        type: "click",
        event: function (e) {
          GeneralJs.blankHref(window.location.protocol + "//" + window.location.host + "/designer?mode=general");
        }
      }
    ],
    style: {
      position: "absolute",
      fontFamily: "graphik",
      fontSize: String(size + 2) + ea,
      fontWeight: String(500),
      top: String(top - 1) + ea,
      right: String(0) + ea,
      fontStyle: "italic",
      color: colorChip.black,
    }
  });
  nodeArr.push({
    mother: dashBoardBox,
    text: 'C',
    class: [ "hoverDefault" ],
    events: [
      {
        type: "click",
        event: function (e) {
          GeneralJs.blankHref(window.location.protocol + "//" + window.location.host + "/project");
        }
      }
    ],
    style: {
      position: "absolute",
      fontFamily: "graphik",
      fontSize: String(size + 2) + ea,
      fontWeight: String(500),
      top: String(top - 1) + ea,
      right: String(18) + ea,
      fontStyle: "italic",
      color: colorChip.black,
    }
  });

  nodeArr.push({
    mother: dashBoardBox,
    mode: "svg",
    source: this.mother.returnHamburger(colorChip.black),
    class: [ "hoverDefault" ],
    events: [
      {
        type: "click",
        event: function (e) {
          instance.contentsSearchIndex = [];
          instance.contentsBlockInjection();
        }
      }
    ],
    style: {
      position: "absolute",
      height: String(11) + ea,
      top: String(18) + ea,
      right: String(38) + ea,
    }
  });

  nodeArr = createNodes(nodeArr);
  instance.typeDoms = [];
  for (let i = 0; i < nodeArr.length; i++) {
    if (i % 2 === 0) {
      instance.typeDoms.push(nodeArr[i]);
    }
  }
}

DesignerJs.prototype.contentsSearchEvent = function () {
  const instance = this;
  const { ea } = this;
  const input = this.searchInput;
  let width, length;

  length = this.projects.length;
  width = 800;

  input.parentNode.style.width = String(width) + ea;
  input.parentNode.style.left = GeneralJs.withOut(50, width / 2, ea);
  input.addEventListener("keypress", function (e) {
    let tempArr, orArr;
    if (e.key === "Enter") {
      instance.contentsSearchIndex = [];
      orArr = [];
      tempArr = this.value.trim().split(',');
      for (let value of tempArr) {
        if (value.trim() !== '' && value.trim() !== '.') {
          for (let dom of instance.contentsBlocks) {
            if ((new RegExp(value.trim(), "gi")).test(dom.textContent)) {
              orArr.push(Number(dom.getAttribute("index")));
            }
          }
        }
      }
      if (this.value.trim() !== '' && this.value.trim() !== '.') {
        for (let i = 0; i < length; i++) {
          if (!orArr.includes(i)) {
            instance.contentsSearchIndex.push(i);
          }
        }
      }
      instance.contentsBlockInjection();
    }
  });
}

DesignerJs.prototype.contentsExtractEvent = function () {
  const instance = this;
  const { ignoreNumbers, parentId, sheetName } = this;
  const { ajaxJson, blankHref } = GeneralJs;
  const { belowButtons: { sub: { extractIcon } } } = this.mother;

  extractIcon.addEventListener("click", async function (e) {
    try {
      const domTargets = instance.contentsBlocks.filter((dom) => {
        return (dom.id !== "title") && (dom.style.display !== "none");
      });
      const childrenTargets = domTargets.map((dom) => {
        let target = [ ...dom.children ].slice(ignoreNumbers[0], -1 * ignoreNumbers[1]);
        target.unshift(dom.children[1]);
        return target;
      });
      const newMake = true;
      let values, titleMatrix;
      let loading;

      values = childrenTargets.map((arr) => {
        return arr.map((dom) => {
          if (dom.querySelector(".value") !== null) {
            return dom.querySelector(".value").textContent;
          } else {
            return dom.textContent;
          }
        });
      })

      titleMatrix = childrenTargets.map((arr) => {
        return arr.map((dom) => {
          if (dom.querySelector(".value") !== null) {
            return dom.querySelector(".value").getAttribute("title");
          } else {
            return "이름";
          }
        });
      })

      if (titleMatrix.length > 0) {
        values.unshift(titleMatrix[0]);
        loading = instance.mother.grayLoading();
        const { link } = await ajaxJson({ values, newMake, parentId, sheetName }, "/sendSheets");
        loading.remove();
        blankHref(link);
      }
    } catch (e) {
      console.log(e);
    }
  });
}

DesignerJs.prototype.contentsBlockMove = function () {
  const instance = this;
  const { ea } = this;
  const { belowButtons: { arrow: { left, right } } } = this.mother;
  const moveEvent = function (type = "left") {
    return function (e) {
      const blocks = instance.contentsBlocks;
      const movementAmount = 50;
      const ignoreNumbers = [ 1, 1 ];
      let children;
      let left;
      for (let block of blocks) {
        children = block.children;
        for (let i = ignoreNumbers[0]; i < children.length - ignoreNumbers[1]; i++) {
          left = Number(children[i].style.left.replace(/[^0-9\-\.]/gi, ''));
          left = left + (movementAmount * (type === "left" ? -1 : 1));
          children[i].style.left = String(left) + ea;
        }
      }
    }
  }
  left.addEventListener("click", moveEvent("left"));
  right.addEventListener("click", moveEvent("right"));
}

DesignerJs.prototype.contentsSubPannel = async function () {
  const instance = this;
  const { ea, totalContents, belowHeight, totalMother } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, returnGet } = GeneralJs;
  const titleStringClassName = "titleStringClassName";
  try {
    const zIndex = 2;
    let pannelBase;
    let pannelOuterMargin;
    let pannelInnerPadding;
    let pannelMenu;
    let menuPromptWidth;
    let menuPromptHeight;
    let menuTextTop;
    let menuBetween;
    let menuSize;
    let menuWeight;
    let pannelTong;
    let num;

    pannelOuterMargin = 40;
    pannelInnerPadding = 6;

    menuPromptWidth = 140;
    menuPromptHeight = 32;
    menuTextTop = isMac() ? -1 : 1,
    menuBetween = 3;
    menuSize = 13;
    menuWeight = 700;

    pannelMenu = [
      {
        title: "기본 프로젝트 모드",
        event: () => {
          return async function (e) {
            try {
              window.location.href = window.location.protocol + "//" + window.location.host + "/project?type=care&from=de";
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
      {
        title: "프로젝트 케어 모드",
        event: () => {
          return async function (e) {
            try {
              window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&type=care&from=ca&view=care";
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
      {
        title: "정산 관리 모드",
        event: () => {
          return async function (e) {
            try {
              window.location.href = window.location.protocol + "//" + window.location.host + "/calculation";
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
    ];

    pannelBase = createNode({
      mother: totalMother,
      style: {
        display: "flex",
        position: "fixed",
        bottom: String(belowHeight + pannelOuterMargin) + ea,
        right: String(pannelOuterMargin) + ea,
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 3px 15px -9px " + colorChip.shadow,
        padding: String(pannelInnerPadding) + ea,
        flexDirection: "column",
      },
      child: {
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          flexDirection: "column",
        }
      }
    });
    pannelTong = pannelBase.firstChild;

    num = 0;
    for (let obj of pannelMenu) {
      createNode({
        mother: pannelTong,
        event: {
          click: obj.event(),
        },
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          height: String(menuPromptHeight) + ea,
          borderRadius: String(5) + "px",
          background: colorChip.gradientGray,
          marginBottom: String(num === pannelMenu.length - 1 ? 0 : menuBetween) + ea,
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        child: {
          class: [ titleStringClassName ],
          text: obj.title,
          event: {
            selectstart: (e) => { e.preventDefault() },
          },
          style: {
            position: "relative",
            top: String(menuTextTop) + ea,
            fontSize: String(menuSize) + ea,
            fontWeight: String(menuWeight),
            color: colorChip.white,
          }
        }
      })
      num++;
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.contentsView = async function () {
  const instance = this;
  try {
    class SearchArray extends Array {
      constructor(arr) {
        super();
        for (let i of arr) {
          this.push(i);
        }
      }
      search(target, value) {
        let obj = null;
        for (let i of this) {
          if (i[target] === value) {
            obj = i;
          }
        }
        return obj;
      }
    }
    const { createNodes, colorChip, ajaxJson, ajaxMultiple, returnGet, equalJson, sleep, uniqueValue } = GeneralJs;
    const todayDateValue = (new Date()).valueOf();
    let loading;
    let projects;
    let designers, desidArr_raw, desidArr;
    let clients, cliidArr_raw, cliidArr;
    let proidArr_raw;
    let contents;
    let temp;
    let type, typeArr;
    let projectHistory;
    let proidArr;
    let whereQuery;
    let client;
    let requestNumber;
    let matrix;
    let aMonthAgo;
    let secondRes;
    let rawContent;

    aMonthAgo = new Date();
    aMonthAgo.setMonth(aMonthAgo.getMonth() - 3);

    loading = await this.mother.loadingRun();

    typeArr = [ "photo", "source", "contents", "share" ];
    type = returnGet().type;
    if (type === undefined || type === null || !typeArr.includes(type)) {
      type = typeArr[0];
    }

    this.parentId = "1fc961yeNnaZX4-_NpJfs2xG5-vw7vP0u";
    this.sheetName = "fromDB_contents_" + uniqueValue("string");
    this.typeArr = typeArr;
    this.type = type;
    this.contentsSpec = {};
    this.contentsSearchIndex = [];
    this.contentsBlocks = null;
    this.localStorageConst = "contentsFilter_";
    this.blockMapConst = "blockMap_";
    this.photoActionList = [
      "촬영 컨택",
      "촬영 대기",
      "원본 요청 요망",
      "원본 요청 완료",
      "해당 없음"
    ];
    this.paymentActionList = [
      "결제 대기",
      "결제 완료",
      "무료 촬영",
      "환불 완료",
      "해당 없음"
    ];

    for (let t of typeArr) {
      window.localStorage.removeItem(this.localStorageConst + this.blockMapConst + t);
      for (let i = 0; i < 20; i++) {
        window.localStorage.removeItem(this.localStorageConst + t + String(i));
      }
    }

    whereQuery = {};
    whereQuery["$and"] = [];
    whereQuery["$and"].push({ desid: { $regex: "^d" } });
    whereQuery["$and"].push({ "process.status": { $regex: "^[진홀완]" } });
    whereQuery["$and"].push({
      $or: [
        { "contents.photo.date": { $gte: aMonthAgo } },
        { "process.calculation.payments.remain.date": { $lte: new Date(2000, 0, 1) } }
      ]
    });

    projects = new SearchArray(await ajaxJson({ noFlat: true, whereQuery }, BACKHOST + "/getProjects", { equal: true }));

    desidArr_raw = [];
    cliidArr_raw = [];
    proidArr_raw = [];
    proidArr = [];
    for (let project of projects) {
      desidArr_raw.push(project.desid);
      cliidArr_raw.push(project.cliid);
      proidArr_raw.push({ proid: project.proid });
      proidArr.push(project.proid);
    }

    desidArr_raw = Array.from(new Set(desidArr_raw));
    desidArr = [];
    for (let desid of desidArr_raw) {
      desidArr.push({ desid });
    }
    cliidArr_raw = Array.from(new Set(cliidArr_raw));
    cliidArr = [];
    for (let cliid of cliidArr_raw) {
      cliidArr.push({ cliid });
    }

    matrix = await ajaxMultiple([
      [ { noFlat: true, whereQuery: { $or: desidArr } }, BACKHOST + "/getDesigners" ],
      [ { noFlat: true, whereQuery: { $or: cliidArr } }, BACKHOST + "/getClients" ],
      [ { noFlat: true, whereQuery: { $or: proidArr_raw } }, BACKHOST + "/getContents" ],
      [ { idArr: proidArr, method: "project", property: "photo", }, BACKHOST + "/getHistoryProperty" ],
      [ { mode: "get" }, CONTENTSHOST + "/foreContents" ],
      [ { proidArr }, SECONDHOST + "/getProcessData" ],
    ]);

    designers = new SearchArray(matrix[0]);
    clients = new SearchArray(matrix[1]);
    contents = new SearchArray(matrix[2]);
    projectHistory = matrix[3];
    this.foreContents = matrix[4];
    secondRes = matrix[5];
    this.rawContents = secondRes.rawContents;

    for (let p of projects) {
      p.designer = designers.search("desid", p.desid).designer;
      client = clients.search("cliid", p.cliid);
      p.name = client.name;
      requestNumber = 0;
      for (let i = 0; i < client.requests.length; i++) {
        if (p.proposal.date.valueOf() >= client.requests[i].request.timeline.valueOf()) {
          requestNumber = i;
          break;
        }
      }
      p.address = client.requests[requestNumber].request.space.address;
      p.title = `${p.name} <b style="color:${colorChip.green}">C</b>&nbsp;&nbsp;${p.designer} <b style="color:${colorChip.green}">D</b>`;
      temp = contents.search("proid", p.proid);
      if (temp !== null) {
        p.web = temp.contents.portfolio.date;
        p.pid = temp.contents.portfolio.pid;
      } else {
        p.web = p.contents.sns.portfolio.long;
        p.pid = "미정";
      }
      p.history = projectHistory[p.proid];

      rawContent = this.rawContents.find((obj) => {
        return obj.proid === p.proid
      });
      if (rawContent !== undefined) {
        p.rawDate = rawContent.date;
      } else {
        p.rawDate = new Date(1800, 0, 1);
      }
      
    }

    this.projects = projects;
    this.designers = new Designers(designers);
    this.designers.setProjects(projects);
    this.designers.setClients(clients);

    loading.parentNode.removeChild(loading);

    this.contentsBase();
    this.contentsSearchEvent();
    this.contentsBlockMove();
    this.contentsExtractEvent();
    await this.contentsSubPannel();

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalDataRender = async function (firstLoad = true) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, asyncProcessText, noticeSendRows, profileList, workList, representativeList, statusCheckLog } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute, equalJson } = GeneralJs;
  try {
    const calcMonthDelta = (from, to) => {
      return ((to.getFullYear() * 12) + to.getMonth() + 1) - ((from.getFullYear() * 12) + from.getMonth() + 1) + 1;
    }
    const now = new Date();
    const past = new Date();
    const yearsAgo = new Date();
    const agoDelta = 6;
    const agoYearDelta = 1;
    let columns;
    let values;
    let timeDelta;
    let year, month;
    let filteredProjectsProposal;
    let filteredProjectsContract;
    let thisTarget;
    let thisValueDoms;
    let yearDelta;
    let monthDelta;
    let tempDate;
    let tempString;
    let thisYear, from, to;
    let filteredFilteredProjectsProposal;
    let filteredFilteredProjectsContract;
    let thisDate;
    let standards;
    let thisValueTemp;
    let filteredChecklistSendRows;
    let filteredProfileSendRows;
    let filteredWorkSendRows;
    let completeAnalyticsRows;
    let profileListSet;
    let workListSet0, workListSet1, workListSet2, workListSet3;
    let filteredCareerSendRows;
    let filteredEntireSendRows;
    let careerUpdateBoo;
    let schoolUpdateBoo;
    let threeStrengthBoo;
    let representativeBoo;
    let filteredBasicEducationSendRows;
    let filteredConsoleEducationSendRows;
    let filteredSettingPortfolioSendRows;
    let filteredStatusCheckSendRows;
    let filteredStatusCheckLog;

    past.setFullYear(past.getFullYear() - agoYearDelta);
    past.setMonth(0);
    past.setDate(1);
    past.setHours(9);
    past.setMinutes(0);
    past.setSeconds(0);

    yearsAgo.setMonth(yearsAgo.getMonth() - agoDelta);
    yearDelta = now.getFullYear() - past.getFullYear() + 1;
    monthDelta = calcMonthDelta(yearsAgo, now);

    profileListSet = [ ...new Set(profileList.map((o) => { return o.desid })) ];
    workListSet0 = [ ...new Set(workList[0].map((o) => { return o.desid })) ];
    workListSet1 = [ ...new Set(workList[1].map((o) => { return o.desid })) ];
    workListSet2 = [ ...new Set(workList[2].map((o) => { return o.desid })) ];
    workListSet3 = [ ...new Set(workList[3].map((o) => { return o.desid })) ];

    standards = {
      columns: [
        {
          title: "아이디",
          width: 96,
          name: "desid",
          type: "string",
        },
        {
          title: "성함",
          width: 60,
          name: "designer",
          type: "string",
        },
      ],
      values: {},
    }

    columns = [
      {
        title: "일괄 안내 전송",
        width: 100,
        name: "entireNoticeSend",
        type: "date",
      },
      {
        title: "프로필 안내 전송",
        width: 100,
        name: "profilePhotoNoticeSend",
        type: "date",
      },
      {
        title: "작업물 안내 전송",
        width: 100,
        name: "workingPhotoNoticeSend",
        type: "date",
      },
      {
        title: "경력 안내 전송",
        width: 100,
        name: "careerSchoolNoticeSend",
        type: "date",
      },
      {
        title: "가이드 전송",
        width: 100,
        name: "basicEducationSend",
        type: "date",
      },
      {
        title: "콘솔 교육 전송",
        width: 100,
        name: "consoleEducationSend",
        type: "date",
      },
      {
        title: "세트 포폴 전송",
        width: 100,
        name: "settingPortfolioSend",
        type: "date",
      },
      {
        title: "상태 체크 전송",
        width: 100,
        name: "statusCheckSend",
        type: "date",
      },
      {
        title: "상태 체크 기록",
        width: 100,
        name: "statusCheckLog",
        type: "date",
      },
      // {
      //   title: "체크리스트",
      //   width: 100,
      //   name: "checklistDone",
      //   type: "string",
      //   menu: [
      //     {
      //       value: "전체 보기",
      //       functionName: "filterEvent_$all",
      //     },
      //     {
      //       value: "완료",
      //       functionName: "filterEvent_완료",
      //     },
      //     {
      //       value: "미완료",
      //       functionName: "filterEvent_미완료",
      //     },
      //   ],
      // },
      {
        title: "프로필 사진",
        width: 100,
        name: "profilePhotoDone",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "작업물",
        width: 100,
        name: "workingPhotoDone",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "경력 정보",
        width: 100,
        name: "careerUpdate",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "학력 정보",
        width: 100,
        name: "schoolUpdate",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "3가지 강점",
        width: 100,
        name: "threeStrengthUpdate",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "대표 작업물",
        width: 100,
        name: "representativeUpdate",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "올림",
            functionName: "filterEvent_올림",
          },
          {
            value: "안올림",
            functionName: "filterEvent_안올림",
          },
        ],
      },
      {
        title: "계약 상태",
        width: 100,
        name: "status",
        colorStandard: true,
        colorMap: [
          {
            value: "협약 완료",
            color: colorChip.black,
          },
          {
            value: "협약 휴직",
            color: colorChip.deactive,
          },
          {
            value: "협약 해지",
            color: colorChip.gray3,
          },
          {
            value: "신청 대기",
            color: colorChip.red,
          },
          {
            value: "컨택중",
            color: colorChip.deactive,
          },
        ],
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          }
        ].concat([
          "협약 완료",
          "협약 휴직",
          "협약 해지",
          "신청 대기",
          "컨택중",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        }))
      },
      {
        title: "계약일",
        width: 100,
        name: "contractDate",
        type: "date",
      },
      {
        title: "계약 유지",
        width: 100,
        name: "contractDuring",
        type: "during",
      },
      {
        title: "적용 경력",
        width: 100,
        name: "career",
        type: "during",
      },
      {
        title: "연락처",
        width: 130,
        name: "phone",
        type: "string",
      },
      {
        title: "주소",
        width: 400,
        name: "address",
        type: "string",
      },
      {
        title: "유효 범위",
        width: 100,
        name: "range",
        type: "number",
      },
      {
        title: "한계 범위",
        width: 100,
        name: "expenses",
        type: "number",
      },
      {
        title: "홈퍼니싱",
        width: 100,
        name: "homefurnishing",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "홈스타일링",
        width: 100,
        name: "homestyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "토탈 스타일링",
        width: 100,
        name: "totalstyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "설계 변경",
        width: 100,
        name: "extrastyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "프리미엄",
        width: 100,
        name: "premium",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "부분 공간",
        width: 100,
        name: "partial",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "온라인",
        width: 100,
        name: "online",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "거주중",
        width: 100,
        name: "living",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "협업 시공사",
        width: 100,
        name: "partner",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "자체 시공사",
        width: 100,
        name: "own",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "시공 역량",
        width: 100,
        name: "constructLevel",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "스타일링",
        width: 100,
        name: "stylingLevel",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "3D",
        width: 100,
        name: "modeling",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "CAD",
        width: 100,
        name: "cad",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
      {
        title: "콜라주",
        width: 100,
        name: "collage",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
        ],
      },
    ];

    values = {};

    for (let designer of instance.designers) {

      filteredChecklistSendRows = noticeSendRows.filter((o) => { return o.type === "checklist" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredProfileSendRows = noticeSendRows.filter((o) => { return o.type === "profile" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredWorkSendRows = noticeSendRows.filter((o) => { return o.type === "work" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredCareerSendRows = noticeSendRows.filter((o) => { return o.type === "career" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredEntireSendRows = noticeSendRows.filter((o) => { return o.type === "until" }).filter((o) => { return o.designer.desid === designer.desid });

      filteredBasicEducationSendRows = noticeSendRows.filter((o) => { return o.type === "basicEducation" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredConsoleEducationSendRows = noticeSendRows.filter((o) => { return o.type === "consoleEducation" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredSettingPortfolioSendRows = noticeSendRows.filter((o) => { return o.type === "settingPortfolio" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredStatusCheckSendRows = noticeSendRows.filter((o) => { return o.type === "statusCheck" }).filter((o) => { return o.designer.desid === designer.desid });
      filteredStatusCheckLog = equalJson(JSON.stringify(statusCheckLog.filter((o) => { return o.data.desid === designer.desid })));
      filteredStatusCheckLog.sort((a, b) => {
        return b.date.valueOf() - a.date.valueOf();
      });

      careerUpdateBoo = designer.information.business.career.detail.length > 0;
      schoolUpdateBoo = designer.information.business.career.school.length > 0;
      threeStrengthBoo = designer.setting.description.filter((str) => { return !/null/gi.test(str); }).length > 0;
      representativeBoo = representativeList.filter((o) => { return o.boo }).map(({ desid }) => { return desid }).includes(designer.desid);

      standards.values[designer.desid] = [
        {
          value: designer.desid,
          name: "desid",
        },
        {
          value: designer.designer,
          name: "designer",
        },
      ];

      values[designer.desid] = [
        {
          value: filteredEntireSendRows.length > 0 ? dateToString(filteredEntireSendRows[0].date) : "-",
          name: "entireNoticeSend",
        },
        {
          value: filteredProfileSendRows.length > 0 ? dateToString(filteredProfileSendRows[0].date) : "-",
          name: "profilePhotoNoticeSend",
        },
        {
          value: filteredWorkSendRows.length > 0 ? dateToString(filteredWorkSendRows[0].date) : "-",
          name: "workingPhotoNoticeSend",
        },
        {
          value: filteredCareerSendRows.length > 0 ? dateToString(filteredCareerSendRows[0].date) : "-",
          name: "careerSchoolNoticeSend",
        },
        {
          value: filteredBasicEducationSendRows.length > 0 ? dateToString(filteredBasicEducationSendRows[0].date) : "-",
          name: "basicEducationSend",
        },
        {
          value: filteredConsoleEducationSendRows.length > 0 ? dateToString(filteredConsoleEducationSendRows[0].date) : "-",
          name: "consoleEducationSend",
        },
        {
          value: filteredSettingPortfolioSendRows.length > 0 ? dateToString(filteredSettingPortfolioSendRows[0].date) : "-",
          name: "settingPortfolioSend",
        },
        {
          value: filteredStatusCheckSendRows.length > 0 ? dateToString(filteredStatusCheckSendRows[0].date) : "-",
          name: "statusCheckSend",
        },
        {
          value: filteredStatusCheckLog.length > 0 ? dateToString(filteredStatusCheckLog[0].date) : "-",
          name: "statusCheckLog",
        },
        // {
        //   value: asyncProcessText,
        //   name: "checklistDone",
        // },
        {
          value: profileListSet.includes(designer.desid) ? "올림" : "안올림",
          name: "profilePhotoDone",
        },
        {
          value: (workListSet0.includes(designer.desid) && workListSet1.includes(designer.desid) && workListSet2.includes(designer.desid) && workListSet3.includes(designer.desid)) ? "올림" : "안올림",
          name: "workingPhotoDone",
        },
        {
          value: careerUpdateBoo ? "올림" : "안올림",
          name: "careerUpdate",
        },
        {
          value: schoolUpdateBoo ? "올림" : "안올림",
          name: "schoolUpdate",
        },
        {
          value: threeStrengthBoo ? "올림" : "안올림",
          name: "threeStrengthUpdate",
        },
        {
          value: representativeBoo ? "올림" : "안올림",
          name: "representativeUpdate",
        },
        {
          value: designer.information.contract.status,
          name: "status",
        },
        {
          value: dateToString(designer.information.contract.date),
          name: "contractDate",
        },
      ];

      timeDelta = calcMonthDelta(designer.information.contract.date, new Date());
      values[designer.desid].push({
        value: String(timeDelta) + "개월",
        name: "contractDuring",
      });

      [ year, month ] = designerCareer(designer);
      values[designer.desid].push({
        value: `${String(year)}년 ${String(month)}개월`,
        name: "career",
      });

      values[designer.desid].push({
        value: designer.information.phone,
        name: "phone",
      });

      values[designer.desid].push({
        value: designer.information.address.length > 0 ? designer.information.address[0] : "",
        name: "address",
      });
      values[designer.desid].push({
        value: String(designer.analytics.region.range) + "km",
        name: "range",
      });
      values[designer.desid].push({
        value: String(designer.analytics.region.expenses) + "km",
        name: "expenses",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[0][1] === 1 ? "가능" : "불가능",
        name: "homefurnishing",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[1][1] === 1 ? "가능" : "불가능",
        name: "homestyling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[2][1] === 1 ? "가능" : "불가능",
        name: "totalstyling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[3][1] === 1 ? "가능" : "불가능",
        name: "extrastyling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix.some((arr) => { return arr[2] === 1 }) ? "가능" : "불가능",
        name: "premium",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix.some((arr) => { return arr[0] === 1 }) ? "가능" : "불가능",
        name: "partial",
      });
      values[designer.desid].push({
        value: designer.analytics.project.online ? "가능" : "불가능",
        name: "online",
      });
      values[designer.desid].push({
        value: designer.analytics.project.living ? "가능" : "불가능",
        name: "living",
      });
      values[designer.desid].push({
        value: designer.analytics.construct.partner ? "있음" : "없음",
        name: "partner",
      });
      values[designer.desid].push({
        value: designer.analytics.construct.own ? "있음" : "없음",
        name: "own",
      });
      values[designer.desid].push({
        value: [ "없", "하", "중", "상" ][designer.analytics.construct.level],
        name: "constructLevel",
      });
      values[designer.desid].push({
        value: [ "없", "하", "중", "상" ][designer.analytics.styling.level],
        name: "stylingLevel",
      });
      values[designer.desid].push({
        value: [ "불가능", "하", "중", "상" ][designer.analytics.project.modeling],
        name: "modeling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.cad ? "가능" : "불가능",
        name: "cad",
      });
      values[designer.desid].push({
        value: designer.analytics.project.collage ? "가능" : "불가능",
        name: "collage",
      });

    }

    return { standards, columns, values };

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalColorSync = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute } = GeneralJs;
  try {
    let columns;
    let colorStandard;
    let standardDoms, valueDoms;
    let thisValue;
    let thisColor;
    let thisTargets;

    ({ columns } = await this.normalDataRender(false));

    colorStandard = columns.find((obj) => { return obj.colorStandard === true });

    standardDoms = [ ...document.querySelectorAll('.' + standardCaseClassName) ];
    valueDoms = [ ...document.querySelectorAll('.' + valueCaseClassName) ];

    for (let i = 0; i < standardDoms.length; i++) {
      thisValue = findByAttribute([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ], "name", colorStandard.name).textContent.trim();
      if (colorStandard.colorMap.find((o) => { return o.value === thisValue }) === undefined) {
        throw new Error("invalid value color match");
      }
      thisColor = colorStandard.colorMap.find((o) => { return o.value === thisValue }).color;
      thisTargets = [ ...standardDoms[i].querySelectorAll('.' + valueTargetClassName) ].concat([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ]);
      for (let dom of thisTargets) {
        dom.style.color = (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor;
        dom.setAttribute("color", (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor);
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalWhiteCard = function (desid) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, hasQuery, removeQuery, appendQuery } = GeneralJs;
  return async function (e) {
    try {
      const zIndex = 4;
      const blank = "&nbsp;/&nbsp;";
      const designer = instance.designers.find((d) => { return d.desid === desid });
      let cancelBack, whitePrompt;
      let titleWhite;
      let margin;
      let titleHeight;
      let innerMargin;
      let overlap;
      let titleTextTop, titleSize;
      let titleWeight;
      let fontTextTop, fontSize, fontBetween, fontWeight;
      let whiteMaker;
      let iframeMaker;
      let linkDictionary;
      let isCxMember;

      window.history.pushState({ desid }, "");
      if (hasQuery("desid")) {
        removeQuery("desid");
      }
      appendQuery({ desid: desid });

      isCxMember = await GeneralJs.nonCxBan(true);
      linkDictionary = {
        checklist: BACKHOST + "/middle/designerAbout?desid=" + designer.desid + "&entire=true&normal=true&cx=" + (isCxMember ? "true" : "false"),
        process: BACKHOST + "/middle/designerBoard?desid=" + designer.desid + "&entire=true&normal=true&cx=" + (isCxMember ? "true" : "false"),
        possible: BACKHOST + "/middle/designerPossible?desid=" + designer.desid + "&entire=true&normal=true&cx=" + (isCxMember ? "true" : "false"),
        portfolio: BACKHOST + "/designer?mode=general&desid=" + designer.desid + "&dataonly=true&entire=true&normal=true&cx=" + (isCxMember ? "true" : "false"),
        report: BACKHOST + "/middle/designerReport?desid=" + designer.desid + "&entire=true&normal=true&cx=" + (isCxMember ? "true" : "false"),
        proposal: BACKHOST + "/file?proposaldesid=" + designer.desid + "&preview=true&previewonly=true&dataonly=true&entire=true",
      }

      margin = 30;
      titleHeight = 50;
      innerMargin = 24;
      overlap = 12;

      titleTextTop = isMac() ? 2 : 5;
      titleSize = 21;
      titleWeight = 800;

      fontTextTop = isMac() ? 1 : 3;
      fontSize = 14;
      fontBetween = 8;
      fontWeight = 400;

      iframeMaker = (mode) => {
        const src = linkDictionary[mode];
        return function (e) {
          const whiteTong = document.querySelector('.' + whiteBaseClassName);
          const toggle = this.getAttribute("off");
          const desid = this.getAttribute("desid");
          const siblings = Array.from(document.querySelectorAll('.' + titleButtonsClassName));
          whiteTong.removeChild(whiteTong.firstChild);
          createNode({
            mother: whiteTong,
            mode: "iframe",
            attribute: { src },
            style: {
              position: "absolute",
              display: "block",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              border: String(0),
            }
          });
          this.setAttribute("toggle", "on");
          this.style.color = colorChip.green;
          for (let dom of siblings) {
            if (dom !== this) {
              dom.setAttribute("toggle", "off");
              dom.style.color = colorChip.black;    
            }
          }
          instance.whiteCardMode = mode;
          window.history.pushState({ mode }, "");
        }
      }

      whiteMaker = (reload = false) => {

        if (!reload) {
          cancelBack = createNode({
            mother: totalContents,
            class: [ "justfadein", whiteCardClassName ],
            event: (e) => {
              removeByClass(whiteCardClassName);
              if (hasQuery("desid")) {
                removeQuery("desid");
              }
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(grayBarWidth) + ea,
              width: withOut(grayBarWidth, ea),
              height: withOut(belowHeight, ea),
              background: colorChip.black,
              zIndex: String(zIndex),
            }
          });
        } 
  
        whitePrompt = createNode({
          mother: totalContents,
          attribute: {
            desid: desid
          },
          class: [ whiteCardClassName, whiteBaseClassName ],
          style: {
            position: "fixed",
            top: String(0 + margin + titleHeight) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth, ea),
            height: withOut(0 + (margin * 2) + titleHeight + belowHeight, ea),
            background: colorChip.white,
            zIndex: String(zIndex),
            borderBottomLeftRadius: String(5) + "px",
            borderBottomRightRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0 2px 10px -6px " + colorChip.shadow,
            overflow: "hidden",
          },
          child: {
            mode: "iframe",
            attribute: {
              src: linkDictionary[instance.whiteCardMode],
            },
            style: {
              position: "absolute",
              display: "block",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              border: String(0),
            }
          }
        });
  
        titleWhite = createNode({
          mother: totalContents,
          class: [ whiteCardClassName ],
          style: {
            display: "flex",
            flexDirection: "column",
            position: "fixed",
            top: String(0 + margin) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth, ea),
            height: String(titleHeight) + ea,
            background: colorChip.white,
            zIndex: String(zIndex),
            borderTopLeftRadius: String(5) + "px",
            borderTopRightRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            overflow: "hidden",
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "end",
          },
          child: {
            style: {
              display: "flex",
              position: "relative",
              flexDirection: "row",
              alignItems: "end",
              justifyContent: "start",
              width: withOut(innerMargin * 2, ea),
            },
            children: [
              {
                attribute: { designer: designer.designer, phone: designer.information.phone.replace(/[^0-9]/gi, '') },
                event: {
                  click: function (e) {
                    const designer = this.getAttribute("designer");
                    const phone = this.getAttribute("phone");
                    const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
                    if (window.confirm(designer + " 실장님께 전화를 걸까요?")) {
                      ajaxJson({
                        who: cookies.homeliaisonConsoleLoginedEmail,
                        phone: phone
                      }, BACKHOST + "/callTo").catch((err) => { console.log(err); });
                    }
                  }
                },
                text: designer.designer,
                style: {
                  position: "relative",
                  top: String(titleTextTop) + ea,
                  fontSize: String(titleSize) + ea,
                  fontWeight: String(titleWeight),
                  color: colorChip.black,
                  cursor: "pointer",
                }
              },
              {
                attribute: { desid: desid },
                event: {
                  click: async function (e) {
                    try {
                      const desid = this.getAttribute("desid");
                      await window.navigator.clipboard.writeText(desid);
                      instance.mother.greenAlert("클립보드에 저장되었습니다!");
                    } catch (e) {
                      console.log(e);
                    }
                  },
                },
                text: designer.desid,
                style: {
                  position: "relative",
                  top: String(fontTextTop) + ea,
                  fontSize: String(fontSize) + ea,
                  marginLeft: String(fontBetween) + ea,
                  fontWeight: String(fontWeight),
                  color: colorChip.green,
                  cursor: "pointer",
                }
              },
              {
                style: {
                  display: "flex",
                  position: "absolute",
                  bottom: String(0),
                  right: String(0),
                  flexDirection: "row",
                  alignItems: "end",
                  justifyContent: "end",
                },
                children: [
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "checklist" ? "on" : "off"), desid, mode: "checklist" },
                    event: {
                      click: iframeMaker("checklist"),
                    },
                    text: "체크리스트",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "checklist" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "possible" ? "on" : "off"), desid, mode: "process" },
                    event: {
                      click: iframeMaker("process"),
                    },
                    text: "프로젝트",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "process" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "possible" ? "on" : "off"), desid, mode: "possible" },
                    event: {
                      click: iframeMaker("possible"),
                    },
                    text: "일정 관리",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "possible" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "portfolio" ? "on" : "off"), desid, mode: "portfolio" },
                    event: {
                      click: iframeMaker("portfolio"),
                    },
                    text: "포트폴리오",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "portfolio" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "proposal" ? "on" : "off"), desid, mode: "proposal" },
                    event: {
                      click: iframeMaker("proposal"),
                    },
                    text: "디자인 제안",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "proposal" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: (instance.whiteCardMode === "report" ? "on" : "off"), desid, mode: "report" },
                    event: {
                      click: iframeMaker("report"),
                    },
                    text: "리포트",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: instance.whiteCardMode === "report" ? colorChip.green : colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: "off", desid },
                    event: {
                      click: function (e) {
                        const desid = this.getAttribute("desid");
                        blankHref("/file?mode=designer&desid=" + desid);
                      }
                    },
                    text: "디자이너 폴더",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: "off", desid },
                    event: {
                      click: function (e) {
                        const desid = this.getAttribute("desid");
                        blankHref(FRONTHOST + "/proposal_test.php?desid=" + desid);
                      }
                    },
                    text: "추천서 샘플",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                      cursor: "pointer",
                    }
                  },
                  {
                    text: blank,
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.gray3,
                    }
                  },
                  {
                    class: [ titleButtonsClassName ],
                    attribute: { toggle: "off", desid },
                    event: {
                      click: function (e) {
                        const desid = this.getAttribute("desid");
                        blankHref(FRONTHOST + "/designer/dashboard.php?desid=" + desid + "&view=test");
                      }
                    },
                    text: "디자이너 콘솔",
                    style: {
                      position: "relative",
                      top: String(fontTextTop) + ea,
                      fontSize: String(fontSize) + ea,
                      marginLeft: String(fontBetween) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                      cursor: "pointer",
                    }
                  },
                ]
              }
            ]
          }
        });
      }

      instance.whiteMaker = whiteMaker;

      if (document.querySelector('.' + whiteCardClassName) === null) {
        whiteMaker(false);
      } else {
        const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
        if (w0 !== undefined) {
          w0.style.animation = "fadedownlite 0.3s ease forwards";
        }
        if (w1 !== undefined) {
          w1.style.animation = "fadedownlite 0.3s ease forwards";
        }
        setQueue(() => {
          if (w0 !== undefined) {
            w0.remove();
          }
          if (w1 !== undefined) {
            w1.remove();
          }
          setQueue(() => {
            whiteMaker(true);
          })
        }, 350);
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.normalSendNotice = function (method, desid, untilDate) {
  const instance = this;
  const { ea, totalContents, designers } = this;
  const { ajaxJson } = GeneralJs;
  const dateToUntilString = (date) => {
    let temp;
    temp = String(date.getFullYear()).slice(2);
    temp += "년";
    temp += " ";
    temp += String(date.getMonth() + 1);
    temp += "월";
    temp += " ";
    temp += String(date.getDate());
    temp += "일";
    temp += "까지";
    return temp;
  }
  let tempValue;
  let untilString;
  if (method === "checklist") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }
        if (window.confirm(designer.designer + " 실장님께 체크리스트 기입 요청 알림톡을 전송할까요?")) {
          tempValue = await GeneralJs.promptDate("마감일을 언제로 설정할까요?");
          if (tempValue !== null) {
            untilString = dateToUntilString(tempValue);
            const response = await ajaxJson({
              mode: "send",
              desid: designer.desid,
              designer: designer.designer,
              phone: designer.information.phone,
              type: "until",
              until: untilString,
            }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
            if (response.message === "success") {
              window.alert("전송에 성공하였습니다!");
            } else {
              window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
            }
            window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
          }
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "console") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        if (window.confirm(designer.designer + " 실장님께 디자이너 콘솔 알림톡을 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            desid: designer.desid,
            designer: designer.designer,
            phone: designer.information.phone,
            type: "console",
          }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "profile") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        if (window.confirm(designer.designer + " 실장님께 프로필 사진 업로드 알림톡을 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            desid: designer.desid,
            designer: designer.designer,
            phone: designer.information.phone,
            type: "profile",
          }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "work") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        if (window.confirm(designer.designer + " 실장님께 작업 사진 업로드 알림톡을 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            desid: designer.desid,
            designer: designer.designer,
            phone: designer.information.phone,
            type: "work",
          }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "career") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        if (window.confirm(designer.designer + " 실장님께 경력 및 학력 업데이트 요청 알림톡을 전송할까요?")) {
          const response = await ajaxJson({
            mode: "send",
            desid: designer.desid,
            designer: designer.designer,
            phone: designer.information.phone,
            type: "career",
          }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
          if (response.message === "success") {
            window.alert("전송에 성공하였습니다!");
          } else {
            window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
          }
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "basicEducation") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        const response = await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "basicEducation",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        if (response.message === "success") {
          window.alert("전송에 성공하였습니다!");
        } else {
          window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
        }
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "consoleEducation") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        const response = await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "consoleEducation",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        if (response.message === "success") {
          window.alert("전송에 성공하였습니다!");
        } else {
          window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
        }
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "settingPortfolio") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        const response = await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "settingPortfolio",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        if (response.message === "success") {
          window.alert("전송에 성공하였습니다!");
        } else {
          window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
        }
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "statusCheck") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        const response = await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "statusCheck",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        if (response.message === "success") {
          window.alert("전송에 성공하였습니다!");
        } else {
          window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
        }
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  } else if (method === "totalChecklist") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "until",
          until: dateToUntilString(untilDate),
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        return true;
      } catch (e) {
        console.log(e);
        return null;
      }
    }
  } else if (method === "totalProfile") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "profile",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        return true;
      } catch (e) {
        console.log(e);
        return null;
      }
    }
  } else if (method === "totalWork") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        await ajaxJson({
          mode: "send",
          desid: designer.desid,
          designer: designer.designer,
          phone: designer.information.phone,
          type: "work",
        }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
        return true;
      } catch (e) {
        console.log(e);
        return null;
      }
    }
  } else if (method === "proposalProfile") {
    return async function () {
      try {
        const designer = designers.find((d) => { return d.desid === desid });
        if (designer === undefined) {
          throw new Error("invalid desid");
        }

        if (window.confirm(designer.designer + " 실장님께 추천서 안내 및 프로필 요청 알림톡을 전송할까요?")) {
          tempValue = await GeneralJs.promptDate("마감일을 언제로 설정할까요?");
          if (tempValue !== null) {
            untilString = dateToUntilString(tempValue);
            const response = await ajaxJson({
              mode: "send",
              desid: designer.desid,
              designer: designer.designer,
              phone: designer.information.phone,
              type: "proposalProfile",
              until: untilString,
            }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
            if (response.message === "success") {
              window.alert("전송에 성공하였습니다!");
            } else {
              window.alert("전송에 실패하였습니다! 다시 시도해주세요.");
            }
            window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
          }
        }
        
      } catch (e) {
        window.alert(e.message);
        console.log(e);
        return null;
      }
    }
  }
}

DesignerJs.prototype.normalBase = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText, idNameAreaClassName, valueAreaClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson } = GeneralJs;
  const moveTargetClassName = "moveTarget";
  const menuPromptClassName = "menuPromptClassName";
  const importantCircleClassName = "importantCircleClassName";
  const designerSubMenuEventFactorClassName = "designerSubMenuEventFactorClassName";
  try {
    let totalMother;
    let grayArea, whiteArea;
    let totalPaddingTop;
    let columnAreaHeight;
    let fontSize, fontWeight;
    let idWidth, nameWidth;
    let idNameAreaPaddingTop;
    let idNameArea;
    let idNameHeight;
    let idNamePaddingBottom;
    let maxWidth;
    let valueColumnsAreaPaddingLeft;
    let valueArea;
    let valueWeight;
    let thisTong;
    let columns;
    let values;
    let valueMaxWidth;
    let thisTargets;
    let hoverEvent, hoverOutEvent;
    let standards;
    let menuPromptWidth, menuPromptHeight;
    let menuVisual;
    let menuBetween;
    let menuTextTop, menuSize, menuWeight;
    let columnsMenuEvent;
    let menuEventTong;
    let normalContentsLoad;
    let circleRight, circleTop;
    let importantMarkingEvent;
    let designerSubMenuEvent;
    let contextIndent;
    let contextButtonOuterMargin;
    let contextButtonInnerMargin;
    let contextButtonWidth;
    let contextButtonHeight;
    let contextButtonSize;
    let contextButtonWeight;
    let contextButtonTextTop;
  
    totalPaddingTop = 38;
    columnAreaHeight = 32;
  
    fontSize = 14;
    fontWeight = 600;
    valueWeight = 500;
  
    idWidth = 96;
    nameWidth = 60;
  
    idNameAreaPaddingTop = 17;
    idNameHeight = 36;
  
    idNamePaddingBottom = 400;
    maxWidth = 8000;
    valueMaxWidth = 1000;
  
    valueColumnsAreaPaddingLeft = 20;

    menuPromptWidth = 80;
    menuPromptHeight = 28;
    menuVisual = 4;
    menuBetween = 3;

    menuTextTop = isMac() ? -1 : 1,
    menuSize = 13;
    menuWeight = 600;

    circleRight = 2.5;
    circleTop = isMac() ? 3 : 1;

    contextIndent = 5;
    contextButtonOuterMargin = 8;
    contextButtonInnerMargin = 3;
    contextButtonWidth = 230;
    contextButtonHeight = 28;
    contextButtonSize = 12;
    contextButtonWeight = 700;
    contextButtonTextTop = isMac() ? -1 : 1;

    ({ standards, columns, values } = await this.normalDataRender(true));
  
    hoverEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = colorChip.green;
        }
      }
    }

    hoverOutEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = dom.getAttribute("color") !== null ? dom.getAttribute("color") : colorChip.black;
        }
      }
    }

    menuEventTong = {
      sortEvent: (thisType, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const type = columns[index].type;
            let domMatrix;
            let thisDesid;
            let thisValueDom;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisDesid = idNameDoms[i].getAttribute("desid");
              thisValueDom = findByAttribute(valueDoms, "desid", thisDesid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }
  
            domMatrix.sort((a, b) => {
              let aValue, bValue;
              let aSortValue, bSortValue;
              let tempArr;
  
              aValue = findByAttribute([ ...a[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              bValue = findByAttribute([ ...b[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              
              if (type === "string") {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              } else if (type === "number") {
                aValue = aValue.replace(/[^0-9]/gi, '')
                bValue = bValue.replace(/[^0-9]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "percentage") {
                aValue = aValue.replace(/[^0-9\.]/gi, '')
                bValue = bValue.replace(/[^0-9\.]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "date") {
                aSortValue = aValue !== '' ? stringToDate(aValue) : stringToDate("1800-01-01");
                bSortValue = bValue !== '' ? stringToDate(bValue) : stringToDate("1800-01-01");
                aSortValue = aSortValue.valueOf();
                bSortValue = bSortValue.valueOf();
              } else if (type === "during") {
  
                if (/년/gi.test(aValue)) {
                  tempArr = aValue.split('년');
                  if (tempArr.length > 1) {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  aSortValue = Number(aValue.replace(/[^0-9]/gi, ''));
                }
  
                if (/년/gi.test(bValue)) {
                  tempArr = bValue.split('년');
                  if (tempArr.length > 1) {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  bSortValue = Number(bValue.replace(/[^0-9]/gi, ''));
                }
  
              } else {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              }
              
              if (thisType === "down") {
                return bSortValue - aSortValue;
              } else {
                return aSortValue - bSortValue;
              }
            });
  
            for (let [ standard, value ] of domMatrix) {
              idNameArea.appendChild(standard);
              valueArea.appendChild(value);
            }
  
            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
      filterEvent: (thisValue, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const last = "lastfilter";
            const type = columns[index].type;
            let domMatrix;
            let thisDesid;
            let thisValueDom;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisDesid = idNameDoms[i].getAttribute("desid");
              thisValueDom = findByAttribute(valueDoms, "desid", thisDesid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }

            if (thisValue === "$all") {
              for (let [ standard, value ] of domMatrix) {
                standard.style.display = "flex";
                value.style.display = "flex";
                standard.setAttribute(last, "none");
                value.setAttribute(last, "none");
              }
            } else {
              for (let [ standard, value ] of domMatrix) {
                if (standard.getAttribute(last) === name) {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    standard.style.display = "flex";
                    value.style.display = "flex";
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                } else {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    if (standard.style.display !== "none") {
                      standard.style.display = "flex";
                      value.style.display = "flex";
                    }
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                }
                standard.setAttribute(last, name);
                value.setAttribute(last, name);
              }
            }

            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
    }

    columnsMenuEvent = (index) => {
      return async function (e) {
        try {
          e.preventDefault();
          const name = this.getAttribute("name");
          const index = Number(this.getAttribute("index"));
          const thisObject = columns[index];
          const zIndex = 4;
          let cancelBack, blackPrompt;
          let thisMenu;

          thisMenu = [
            {
              value: "내림차순",
              functionName: "sortEvent_down",
            },
            {
              value: "오름차순",
              functionName: "sortEvent_up",
            },
          ];

          if (Array.isArray(thisObject.menu)) {
            thisMenu = thisMenu.concat(thisObject.menu);
          }

          cancelBack = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            event: (e) => { removeByClass(menuPromptClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          blackPrompt = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            style: {
              position: "fixed",
              top: String(e.y + menuVisual) + "px",
              left: String(e.x + menuVisual) + "px",
              width: String(menuPromptWidth) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              zIndex: String(zIndex),
            },
            children: thisMenu.map(({ value, functionName }) => {
              const functionOrderArr = functionName.split("_");
              const [ thisFunctionName ] = functionOrderArr;
              let thisArguments;
              if (functionOrderArr.length > 1) {
                thisArguments = functionOrderArr.slice(1).concat([ name, index ]);
              } else {
                thisArguments = [ name, index ];
              }
              return {
                event: {
                  selectstart: (e) => { e.preventDefault() },
                  click: menuEventTong[thisFunctionName](...thisArguments),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(menuPromptWidth) + ea,
                  height: String(menuPromptHeight) + ea,
                  borderRadius: String(5) + "px",
                  background: colorChip.gradientGray,
                  marginBottom: String(menuBetween) + ea,
                  justifyContent: "center",
                  alignItems: "center",
                  textAlign: "center",
                  cursor: "pointer",
                },
                child: {
                  text: value,
                  event: {
                    selectstart: (e) => { e.preventDefault() },
                  },
                  style: {
                    position: "relative",
                    top: String(menuTextTop) + ea,
                    fontSize: String(menuSize) + ea,
                    fontWeight: String(menuWeight),
                    color: colorChip.white,
                  }
                }
              }
            })
          })

        } catch (e) {
          console.log(e);
        }
      }
    }

    importantMarkingEvent = (desid) => {
      return async function (e) {
        e.preventDefault();
        try {
          const circles = this.querySelectorAll('.' + importantCircleClassName);
          const desid = this.getAttribute("desid");
          let onoff;
          let whereQuery, updateQuery;

          for (let circle of circles) {
            if (circle.getAttribute("toggle") === "on") {
              circle.style.display = "none";
              circle.setAttribute("toggle", "off");
              onoff = "off";
            } else {
              circle.style.display = "inline-block";
              circle.setAttribute("toggle", "on");
              onoff = "on";
            }
          }

          whereQuery = { desid };
          if (onoff === "on") {
            updateQuery = { important: true };
          } else {
            updateQuery = { important: false };
          }

          await ajaxJson({
            id: desid,
            column: "important",
            value: updateQuery.important ? 1 : 0,
            email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
          }, BACKHOST + "/updateDesignerHistory");
          
        } catch (e) {
          console.log(e);
        }
      }
    }

    designerSubMenuEvent = (desid, designer) => {
      return async function (e) {
        e.preventDefault();
        try {
          const px = "px";
          const zIndex = 4;
          const contextMenu = [
            {
              title: designer + " 실장님께 체크리스트 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("checklist", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 디자이너 콘솔 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("console", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 프로필 업로드 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("profile", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 작업 사진 업로드 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("work", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 경력 업데이트 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("career", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 디자이너 가이드 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("basicEducation", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 디자이너 콘솔 설명서 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("consoleEducation", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 세트 포폴 요청 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("settingPortfolio", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 상태 체크 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("statusCheck", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 추천서 안내 및 프로필 요청",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("proposalProfile", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
          ];
          const thisBox = this.getBoundingClientRect();
          const { x, y } = e;
          let cancelBack, contextBase;

          cancelBack = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            event: {
              click: (e) => { removeByClass(designerSubMenuEventFactorClassName) },
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          contextBase = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            style: {
              display: "inline-block",
              position: "fixed",
              top: String(y + contextIndent) + px,
              left: String(x + (contextIndent / 2)) + px,
              padding: String(contextButtonOuterMargin) + ea,
              paddingBottom: String(contextButtonOuterMargin - contextButtonInnerMargin) + ea,
              background: colorChip.white,
              borderRadius: String(5) + px,
              boxShadow: "3px 0px 15px -9px " + colorChip.shadow,
              zIndex: String(zIndex),
              animation: "fadeuplite 0.3s ease forwards",
            }
          })

          for (let obj of contextMenu) {
            createNode({
              mother: contextBase,
              event: {
                click: obj.func(desid),
              },
              style: {
                display: "flex",
                width: String(contextButtonWidth) + ea,
                height: String(contextButtonHeight) + ea,
                background: colorChip.gradientGray,
                borderRadius: String(5) + px,
                marginBottom: String(contextButtonInnerMargin) + ea,
                justifyContent: "center",
                alignItems: "center",
                flexDirection: "row",
                cursor: "pointer",
              },
              child: {
                text: obj.title,
                style: {
                  fontSize: String(contextButtonSize) + ea,
                  fontWeight: String(contextButtonWeight),
                  color: colorChip.white,
                  position: "relative",
                  display: "inline-block",
                  top: String(contextButtonTextTop) + ea,
                }
              }
            });
          }

        } catch (e) {
          console.log(e);
        }
      }
    }

    totalMother = createNode({
      mother: totalContents,
      class: [ "totalMother" ],
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: withOut(this.belowHeight, ea),
      }
    });
    this.totalMother = totalMother;

    normalContentsLoad = async (reload = false) => {
      try {

        if (reload) {
          ({ standards, columns, values } = await instance.normalDataRender(true));
        }

        cleanChildren(totalMother);

        createNode({
          mother: totalMother,
          style: {
            position: "absolute",
            top: String(0),
            left: String(0),
            width: String(this.grayBarWidth) + ea,
            height: withOut(0, ea),
            background: colorChip.gray0,
          }
        });
        createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(totalPaddingTop) + ea,
            height: String(columnAreaHeight) + ea,
            borderBottom: "1px dashed " + colorChip.gray3,
          },
          children: [
            {
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                height: withOut(0, ea),
                justifyContent: "center",
                alignItems: "start",
                verticalAlign: "top",
                width: String(this.grayBarWidth) + ea,
              },
              children: standards.columns.map(({ title, width }) => {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(width) + ea,
                    cursor: "pointer",
                  },
                  child: {
                    text: title,
                    style: {
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.green,
                    }
                  }
                }
              })
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                height: withOut(0, ea),
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
              child: {
                class: [ moveTargetClassName ],
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: withOut(0, ea),
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                },
                children: columns.map(({ title, width, name }, index) => {
                  return {
                    attribute: {
                      name: name,
                      index: String(index),
                    },
                    event: {
                      selectstart: (e) => { e.preventDefault() },
                      click: columnsMenuEvent(index),
                      contextmenu: columnsMenuEvent(index),
                    },
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "center",
                      alignItems: "start",
                      width: String(width) + ea,
                      cursor: "pointer",
                    },
                    child: {
                      style: {
                        display: "inline-block",
                        width: String(90) + '%',
                        position: "relative",
                        overflow: "hidden",
                        textAlign: "center",
                      },
                      child: {
                        style: {
                          display: "flex",
                          width: String(valueMaxWidth) + ea,
                          position: "relative",
                          left: withOut(50, valueMaxWidth / 2, ea),
                          textAlign: "center",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: title,
                          style: {
                            fontSize: String(fontSize) + ea,
                            fontWeight: String(fontWeight),
                            color: colorChip.green,
                          }
                        }
                      }
                    }
                  }
                })
              }
            }
          ]
        });
      
        [ idNameArea, valueArea ] = createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(idNameAreaPaddingTop) + ea,
            height: withOut(totalPaddingTop + columnAreaHeight + idNameAreaPaddingTop, ea),
            width: withOut(0, ea),
            overflow: "scroll",
          },
          children: [
            {
              class: [ idNameAreaClassName ],
              style: {
                display: "inline-flex",
                verticalAlign: "top",
                flexDirection: "column",
                position: "relative",
                width: String(this.grayBarWidth) + ea,
                paddingBottom: String(idNamePaddingBottom) + ea,
              }
            },
            {
              class: [ valueAreaClassName ],
              style: {
                display: "inline-block",
                position: "relative",
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
            }
          ]
        }).children;
      
        for (let designer of instance.designers) {
      
          createNode({
            mother: idNameArea,
            attribute: { desid: designer.desid, lastfilter: "none", important: designer.important ? "true" : "false" },
            event: {
              click: instance.normalWhiteCard(designer.desid),
              dblclick: importantMarkingEvent(designer.desid),
              contextmenu: designerSubMenuEvent(designer.desid, designer.designer),
            },
            class: [ standardCaseClassName ],
            style: {
              display: "flex",
              flexDirection: "row",
              position: "relative",
              height: String(idNameHeight) + ea,
              justifyContent: "center",
              alignItems: "start",
              cursor: "pointer",
            },
            children: standards.values[designer.desid].map(({ value, name }, index) => {
              return {
                style: {
                  display: "inline-flex",
                  flexDirection: "row",
                  position: "relative",
                  justifyContent: "center",
                  alignItems: "start",
                  width: String(standards.columns[index].width) + ea,
                },
                child: {
                  class: [ valueTargetClassName ],
                  attribute: { name },
                  text: value,
                  style: {
                    position: "relative",
                    transition: "all 0.3s ease",
                    fontSize: String(fontSize) + ea,
                    fontWeight: String(fontWeight),
                    color: colorChip.black,
                  },
                  next: {
                    class: [ importantCircleClassName ],
                    attribute: { toggle: designer.important ? "on" : "off" },
                    mode: "svg",
                    source: instance.mother.returnCircle("", colorChip.red),
                    style: {
                      display: designer.important ? "inline-block" : "none",
                      position: "absolute",
                      transform: "scale(0.4)",
                      transformOrigin: "100% 0%",
                      right: String(index === 0 ? 0 : circleRight) + ea,
                      top: String(circleTop) + ea,
                      zIndex: String(0),
                    }
                  }
                }
              }
            })
          });
      
          thisTong = createNode({
            mother: valueArea,
            attribute: { desid: designer.desid, lastfilter: "none" },
            class: [ moveTargetClassName, valueCaseClassName, designer.desid ],
            event: {
              mouseenter: hoverEvent(),
              mouseleave: hoverOutEvent(),
            },
            style: {
              display: "flex",
              position: "relative",
              width: String(maxWidth) + ea,
              height: String(idNameHeight) + ea,
              flexDirection: "row",
              alignItems: "start",
              justifyContent: "start",
              paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
              cursor: "pointer",
            }
          })
    
          for (let i = 0; i < columns.length; i++) {
            createNode({
              mother: thisTong,
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                justifyContent: "center",
                alignItems: "start",
                width: String(columns[i].width) + ea,
              },
              child: {
                style: {
                  display: "inline-block",
                  width: String(90) + '%',
                  position: "relative",
                  overflow: "hidden",
                  textAlign: "center",
                },
                child: {
                  style: {
                    display: "flex",
                    width: String(valueMaxWidth) + ea,
                    position: "relative",
                    left: withOut(50, valueMaxWidth / 2, ea),
                    textAlign: "center",
                    justifyContent: "center",
                    alignItems: "center",
                  },
                  child: {
                    attribute: {
                      desid: designer.desid,
                      name: values[designer.desid][i].name,
                    },
                    class: [ valueTargetClassName ],
                    text: String(values[designer.desid][i].value),
                    style: {
                      position: "relative",
                      transition: "all 0.1s ease",
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(valueWeight),
                      color: (new RegExp(asyncProcessText, "gi")).test(values[designer.desid][i].value) ? colorChip.gray3 : colorChip.black,
                    }
                  }
                }
              }
            });
          }
    
        }
    
        await this.normalColorSync();
        await this.normalSubPannel();

      } catch (e) {
        console.log(e);
      }
    }

    await normalContentsLoad(false);
    this.normalContentsLoad = normalContentsLoad;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalSearchEvent = async function () {
  const instance = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, setQueue } = GeneralJs;
  try {
    this.searchInput.addEventListener("keypress", async function (e) {
      try {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            instance.totalFather.classList.remove("fadein");
            instance.totalFather.classList.add("fadeout");
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
            setQueue(() => {
              instance.totalFather.remove();
              instance.totalFather = null;
            }, 501);
          }
          if (document.querySelector('.' + whiteBaseClassName) !== null) {
            const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
            cancelBack.style.animation = "justfadeout 0.3s ease forwards";
            if (w0 !== undefined) {
              w0.style.animation = "fadedownlite 0.3s ease forwards";
            }
            if (w1 !== undefined) {
              w1.style.animation = "fadedownlite 0.3s ease forwards";
            }
            setQueue(() => {
              cancelBack.click();
            }, 350);
          }

          const value = this.value.trim().replace(/\&\=\+\\\//gi, '');
          const designers = await ajaxJson({ noFlat: true, query: value }, BACKHOST + "/searchDesigners", { equal: true });
          const histories = await ajaxJson({
            method: "designer",
            property: [ "manager", "important" ],
            idArr: designers.map((d) => { return d.desid }),
          }, BACKHOST + "/getHistoryProperty", { equal: true });

          for (let designer of designers) {
            designer.manager = histories[designer.desid].manager;
            designer.important = histories[designer.desid].important;
          }

          instance.designers = designers;
          await instance.normalContentsLoad(true);
          
          setQueue(async () => {
            try {
              if (instance.designers.length === 1) {
                const tempFunc = instance.normalWhiteCard(instance.designers[0].desid);
                await tempFunc({});
              }
            } catch (e) {
              console.log(e);
            }
          }, 350);

        }
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalDetailSearchEvent = async function () {
  const instance = this;
  const { ea, totalContents, totalMother, belowHeight } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, setQueue } = GeneralJs;
  const detailSearchClassName = "detailSearchClassName";
  try {
    this.searchInput.addEventListener("contextmenu", async function (e) {
      e.preventDefault();
      try {
        const zIndex = 4;
        let cancelBack, whiteBase;
        let margin;
        let titleSize;
        let titleWeight;
        let fontSize;
        let fontWeight;

        margin = 30;

        titleSize = 21;
        titleWeight = 800;

        fontSize = 14;
        fontWeight = 400;

        cancelBack = createNode({
          mother: totalMother,
          class: [ detailSearchClassName ],
          event: {
            click: (e) => {
              removeByClass(detailSearchClassName);
            },
          },
          style: {
            position: "fixed",
            top: String(0),
            left: String(0),
            width: withOut(0, ea),
            height: withOut(0, ea),
            background: colorChip.black,
            opacity: String(0.3),
            zIndex: String(zIndex),
          }
        });

        whiteBase = createNode({
          mother: totalMother,
          class: [ detailSearchClassName ],
          style: {
            position: "fixed",
            top: String(margin) + ea,
            left: String(margin) + ea,
            width: withOut(margin * 2, ea),
            height: withOut((margin * 2) + belowHeight, ea),
            zIndex: String(zIndex),
            background: colorChip.white,
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0 2px 10px -6px " + colorChip.shadow,
            borderRadius: String(5) + "px",
          }
        });



      } catch (e) {
        console.log(e);
      }
    })
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalProcessDetailEvent = async function (proid, desid) {
  const instance = this;
  const { ea, totalContents, totalMother, belowHeight, grayBarWidth, processDetailEventClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, setQueue, blankHref } = GeneralJs;
  try {
    const zIndex = 4;
    let cancelBack, whiteBase;
    let margin;
    let titleSize;
    let titleWeight;
    let fontSize;
    let fontWeight;

    margin = 30;

    titleSize = 21;
    titleWeight = 800;

    fontSize = 14;
    fontWeight = 400;

    cancelBack = createNode({
      mother: totalMother,
      class: [ processDetailEventClassName ],
      attribute: {
        proid,
        desid,
      },
      event: {
        click: (e) => {
          removeByClass(processDetailEventClassName);
        },
      },
      style: {
        position: "fixed",
        top: String(0),
        left: String(grayBarWidth) + ea,
        width: withOut(grayBarWidth, ea),
        height: withOut(0, ea),
        background: colorChip.black,
        opacity: String(0.3),
        zIndex: String(zIndex),
      }
    });

    whiteBase = createNode({
      mother: totalMother,
      class: [ processDetailEventClassName ],
      attribute: {
        proid,
        desid,
      },
      style: {
        position: "fixed",
        top: String(margin) + ea,
        left: String(grayBarWidth + margin) + ea,
        width: withOut((margin * 2) + grayBarWidth, ea),
        height: withOut((margin * 2) + belowHeight, ea),
        zIndex: String(zIndex),
        background: colorChip.white,
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 2px 10px -6px " + colorChip.shadow,
        borderRadius: String(5) + "px",
        overflow: "hidden",
      }
    });

    createNode({
      mother: whiteBase,
      mode: "iframe",
      attribute: {
        src: BACKHOST + "/process?proid=" + proid + "&entire=true&dataonly=true",
      },
      style: {
        display: "display",
        position: "relative",
        top: String(0),
        left: String(0),
        width: withOut(0, ea),
        height: withOut(0, ea),
        border: String(0),
        outline: String(0),
        borderRadius: String(5) + "px",
      }
    });

    setQueue(() => {
      blankHref(FRONTHOST + "/designer/process.php?proid=" + proid + "&mode=request&view=test");
    }, 1000);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalMessageEvent = async function () {
  const instance = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName, processDetailEventClassName } = this;
  const { findByAttribute, ajaxJson, removeByClass } = GeneralJs;
  try {
    window.addEventListener("message", async function (e) {
      try {
        const data = JSON.parse(e.data);
        if (typeof data === "object" && data !== null) {
          if (data.type === "whiteConverting") {
            if (document.querySelector('.' + whiteBaseClassName) !== null) {
              if (findByAttribute([ ...document.querySelectorAll('.' + titleButtonsClassName) ], "mode", data.mode) !== null) {
                findByAttribute([ ...document.querySelectorAll('.' + titleButtonsClassName) ], "mode", data.mode).click();
              }
            }
          } else if (data.type === "checklistUpdate") {
            let designers;
            let histories;

            ajaxJson({ noFlat: true, whereQuery: {} }, BACKHOST + "/getDesigners", { equal: true }).then((de) => {
              designers = de;
              return ajaxJson({
                method: "designer",
                property: [ "manager", "important" ],
                idArr: designers.map((d) => { return d.desid }),
              }, BACKHOST + "/getHistoryProperty", { equal: true });
            }).then((h) => {
              histories = h;
              for (let designer of designers) {
                designer.manager = histories[designer.desid].manager;
                designer.important = histories[designer.desid].important;
              }
              instance.designers = designers;
              return instance.normalContentsLoad(true);
            }).catch((err) => {
              console.log(err);
            });

          } else if (data.type === "processDetail") {
            
            removeByClass(whiteCardClassName);
            await instance.normalProcessDetailEvent(data.proid, data.desid);

          } else if (data.type === "returnToPast") {
            const tempFunction = instance.normalWhiteCard(document.querySelectorAll('.' + processDetailEventClassName)[1].getAttribute("desid"));
            removeByClass(processDetailEventClassName);
            await tempFunction({});
          }
        }
      } catch {}
    })
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalExtractEvent = async function () {
  const instance = this;
  const { ajaxJson, blankHref } = GeneralJs;
  try {
    const parentId = "1JcUBOu9bCrFBQfBAG-yXFcD9gqYMRC1c";
    this.mother.belowButtons.sub.extractIcon.addEventListener("click", async function (e) {
      try {
        const today = new Date();
        let thisObject;
        let matrix;
        let tempArr;
        let thisDesigner;
        let data;
        let thisLength;

        if (instance.viewMode === "normal") {
          data = await instance.normalDataRender(false);
        } else if (instance.viewMode === "numbers") {
          data = await instance.numbersDataRender();
        } else {
          data = await instance.careDataRender(null);
        }

        matrix = [];
        tempArr = [
          "아이디",
          "이름",
        ];
        if (instance.viewMode === "normal") {
          tempArr = tempArr.concat([
            "이메일",
            "계좌번호",
            "사업자 분류",
            "사업자 등록번호",
          ])
        }

        for (let obj of data.columns) {
          tempArr.push(obj.title);
        }
        matrix.push(tempArr);

        for (let desid in data.values) {

          thisDesigner = instance.designers.find((d) => { return d.desid === desid });

          if (instance.viewMode !== "care") {

            tempArr = [];
            tempArr.push(desid);
            tempArr.push(thisDesigner.designer);
            if (instance.viewMode === "normal") {
              tempArr.push(thisDesigner.information.email);
              tempArr.push(thisDesigner.information.business.account.length > 0 ? thisDesigner.information.business.account[0].bankName + " " + thisDesigner.information.business.account[0].accountNumber : "");
              tempArr.push(thisDesigner.information.business.businessInfo.classification);
              tempArr.push(thisDesigner.information.business.businessInfo.businessNumber);
            }
            for (let obj of data.columns) {
              thisObject = data.values[desid].find((o) => { return o.name === obj.name });
              if (obj.type === "number") {
                tempArr.push(Number(String(thisObject.value).replace(/[^0-9\.\-]/gi, '')));
              } else {
                tempArr.push(thisObject.value);
              }
            }
            matrix.push(tempArr);

          } else {

            thisLength = data.values[desid][0].length;
            for (let i = 0; i < thisLength; i++) {
              tempArr = [];
              tempArr.push(desid);
              tempArr.push(thisDesigner.designer);
              for (let obj of data.columns) {
                thisObject = data.values[desid].find((o) => { return o[0].name === obj.name });
                if (obj.type === "number") {
                  tempArr.push(Number(String(thisObject[i].value).replace(/[^0-9\.\-]/gi, '')));
                } else {
                  tempArr.push(thisObject[i].value);
                }
              }
              matrix.push(tempArr);
            }

          }
        }

        instance.mother.greenAlert("시트 추출이 완료되면 자동으로 열립니다!");
        ajaxJson({
          values: matrix,
          newMake: true,
          parentId: parentId,
          sheetName: "fromDB_designer_" + String(today.getFullYear()) + instance.mother.todayMaker()
        }, BACKHOST + "/sendSheets", { equal: true }).then((result) => {
          blankHref(result.link);
        }).catch((err) => {
          console.log(err);
        });
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalReportWhite = function () {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, autoComma, zeroAddition } = GeneralJs;
  const vaildValue = function (target) {
    const today = new Date();
    let valueArr0, valueArr1, valueArr2;
    target.style.color = GeneralJs.colorChip.black;
    if (!/[0-9][0-9]\-[0-9][0-9]\-[0-9][0-9] \~ [0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/.test(target.value)) {
      valueArr0 = target.value.split(" ~ ");
      valueArr1 = valueArr0[0].split("-");
      if (valueArr0[1] !== undefined) {
        valueArr2 = valueArr0[1].split("-");
        if (valueArr1.length === 3 && valueArr2.length === 3) {
          target.value = String(valueArr1[0]) + '-' + zeroAddition(valueArr1[1]) + '-' + zeroAddition(valueArr1[2]) + ' ~ ' + String(valueArr2[0]) + '-' + zeroAddition(valueArr2[1]) + '-' + zeroAddition(valueArr2[2]);
        } else {
          target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
        }
      } else {
        target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
      }
    }
    target.value = (/[0-9][0-9]\-[0-9][0-9]\-[0-9][0-9] \~ [0-9][0-9]\-[0-9][0-9]\-[0-9][0-9]/.exec(target.value))[0];

    valueArr0 = target.value.split(" ~ ");
    valueArr1 = valueArr0[0].split("-");
    valueArr2 = valueArr0[1].split("-");
    if ((Number(valueArr1[0]) * 12) + Number(valueArr1[1].replace(/^0/, '')) > (Number(valueArr2[0]) * 12) + Number(valueArr2[1].replace(/^0/, ''))) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr1[1].replace(/^0/, '')) > 12 || Number(valueArr1[1].replace(/^0/, '')) < 1) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr2[1].replace(/^0/, '')) > 12 || Number(valueArr2[1].replace(/^0/, '')) < 1) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }
    if (Number(valueArr1[0]) < 19) {
      target.value = GeneralJs.stacks.reportBoxStartDayInputValue;
    }

    GeneralJs.stacks.reportBoxStartDayInputValue = target.value;
  }
  return async function (e) {
    try {
      const zIndex = 4;
      let cancelBack, whitePrompt;
      let titleWhite;
      let margin;
      let titleHeight;
      let innerMargin;
      let overlap;
      let titleTextTop, titleSize;
      let titleWeight;
      let fontTextTop, fontSize, fontBetween, fontWeight;
      let whiteReportMaker;
      let iframeMaker;
      let linkDictionary;
      let base, scrollBox;
      let titleArea;
      let basePaddingTop;
      let basePaddingBottom;
      let divideNumber;
      let lineBetween;
      let linePaddingLeft;
      let wordingSize;
      let linePaddingTop;
      let linePaddingBottom;
      let designerSize;
      let desidSize;
      let subTitleLeft;
      let subTitleBottom;
      let data;
      let today;
      let ago;
      let agoDate;
      let loading;
      let loadingWidth;
      let style;
      let startPaddingTop;
      let todayRange, dateInput;
      let todayString;
      let inputWidth, inputSize, inputWeight;
      let subTodaySize, subTodayWeight;
      let dataLoad;

      today = new Date();
      ago = 30;
      agoDate = new Date();
      agoDate.setDate(agoDate.getDate() - ago);

      margin = 30;
      titleHeight = 58;
      innerMargin = 24;
      overlap = 12;

      titleTextTop = isMac() ? 2 : 5;
      titleSize = 21;
      titleWeight = 800;

      fontTextTop = isMac() ? 1 : 3;
      fontSize = 14;
      fontBetween = 8;
      fontWeight = 400;

      basePaddingTop = 10;
      basePaddingBottom = 6;
      divideNumber = 4;
      lineBetween = 4;
      linePaddingLeft = 16;
      wordingSize = 14;
      linePaddingTop = isMac() ? 10 : 12;
      linePaddingBottom = isMac() ? 11 : 11;
      designerSize = 16;
      desidSize = 11;
      subTitleLeft = 1;
      subTitleBottom = isMac() ? 6 : 4;
      startPaddingTop = 10;

      loadingWidth = 48;

      inputWidth = 500;
      inputSize = 20;
      inputWeight = 500;

      subTodaySize = 13;
      subTodayWeight = 200;

      dataLoad = () => {};

      whiteReportMaker = (fromDate, toDate, reload = false) => {

        if (!reload) {
          cancelBack = createNode({
            mother: totalContents,
            class: [ "justfadein", whiteCardClassName ],
            event: (e) => { removeByClass(whiteCardClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(grayBarWidth) + ea,
              width: withOut(grayBarWidth, ea),
              height: withOut(belowHeight, ea),
              background: colorChip.black,
            }
          });
        } 
  
        whitePrompt = createNode({
          mother: totalContents,
          class: [ whiteCardClassName, whiteBaseClassName ],
          style: {
            position: "fixed",
            top: String(0 + margin) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth, ea),
            height: withOut(0 + (margin * 2) + belowHeight, ea),
            background: colorChip.white,
            zIndex: String(zIndex),
            borderRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0 2px 10px -6px " + colorChip.shadow,
            overflow: "hidden",
          },
          children: [
            {
              style: {
                display: "block",
                position: "relative",
                marginLeft: String(innerMargin) + ea,
                width: withOut(innerMargin * 2, ea),
                height: String(titleHeight) + ea,
                borderBottom: "1px dashed " + colorChip.gray3,
              }
            },
            {
              style: {
                display: "block",
                position: "relative",
                marginLeft: String(innerMargin) + ea,
                width: withOut(innerMargin * 2, ea),
                height: withOut(titleHeight + startPaddingTop, ea),
                paddingTop: String(startPaddingTop) + ea,
                overflow: "scroll",
              },
            }
          ]
        });

        [ titleArea, scrollBox ] = Array.from(whitePrompt.children);

        todayRange = dateToString(fromDate).slice(2) + " ~ " + dateToString(toDate).slice(2);
        todayString = dateToString(new Date());

        dateInput = createNode({
          mode: "input",
          attribute: {
            type: "text",
          },
          event: {
            focus: function (e) {
              this.style.color = colorChip.green;
              GeneralJs.stacks.reportBoxStartDayInputValue = this.value;
            },
            blur: function (e) {
              vaildValue(this);
            },
            keyup: function (e) {
              if (e.key === "Enter") {
                vaildValue(this);
                const dateArr = this.value.split(" ~ ");
                const startDay = "20" + dateArr[0];
                const endDay = "20" + dateArr[1];

                this.blur();

                cleanChildren(scrollBox);

                loading = instance.mother.returnLoadingIcon();
                style = {
                  position: "absolute",
                  width: String(loadingWidth) + ea,
                  height: String(loadingWidth) + ea,
                  top: withOut(50, loadingWidth / 2, ea),
                  left: withOut(50, loadingWidth / 2, ea),
                }
                for (let i in style) {
                  loading.style[i] = style[i];
                }
                whitePrompt.appendChild(loading);

                ajaxJson({
                  mode: "designer",
                  start: stringToDate(startDay),
                  end: stringToDate(endDay)
                }, BACKHOST + "/getProjectReport", { equal: true }).then(dataLoad(loading)).catch((err) => {
                  console.log(err);
                });
              }
            }
          },
          mother: titleArea,
          style: {
            position: "absolute",
            left: String(0) + ea,
            bottom: String(startPaddingTop) + ea,
            width: String(inputWidth) + ea,
            fontSize: String(inputSize) + ea,
            fontWeight: String(inputWeight),
            border: String(0) + ea,
            outline: String(0) + ea,
            color: colorChip.black,
            fontFamily: "graphik",
          }
        });
        dateInput.value = todayRange;

        createNode({
          mother: titleArea,
          text: "today : " + todayString,
          style: {
            position: "absolute",
            fontSize: String(subTodaySize) + ea,
            fontWeight: String(subTodayWeight) + ea,
            right: String(0) + ea,
            bottom: String(startPaddingTop) + ea,
            color: colorChip.green,
            fontFamily: "graphik",
          }
        });

        loading = instance.mother.returnLoadingIcon();
        style = {
          position: "absolute",
          width: String(loadingWidth) + ea,
          height: String(loadingWidth) + ea,
          top: withOut(50, loadingWidth / 2, ea),
          left: withOut(50, loadingWidth / 2, ea),
        }
        for (let i in style) {
          loading.style[i] = style[i];
        }
        whitePrompt.appendChild(loading);

        dataLoad = (loading) => {
          return (data) => {
            loading.remove();
            cleanChildren(scrollBox);
  
            for (let designer of data.designers) {
        
              designer.proposal = designer.proposal.filter((obj) => { return obj.amount !== 0 });
              designer.process = designer.process.filter((obj) => { return obj.amount !== 0 });
              designer.first = designer.first.filter((obj) => { return obj.amount !== 0 });
              designer.remain = designer.remain.filter((obj) => { return obj.amount !== 0 });
          
              base = createNode({
                mother: scrollBox,
                style: {
                  display: "block",
                  position: "relative",
                  width: String(100) + '%',
                  paddingTop: String(basePaddingTop) + ea,
                  paddingBottom: String(basePaddingBottom) + ea,
                }
              });
          
              createNode({
                mother: base,
                class: [ "hoverDefault_lite" ],
                attribute: { desid: designer.desid },
                event: {
                  click: function (e) {
                    blankHref(FRONTHOST + "/designer/report.php?desid=" + this.getAttribute("desid"));
                  }
                },
                text: `${designer.designer}&nbsp;&nbsp;<b%${designer.desid}%b>`,
                style: {
                  display: "inline-block",
                  fontSize: String(designerSize) + ea,
                  fontWeight: String(600),
                  color: colorChip.black,
                  marginLeft: String(subTitleLeft) + ea,
                  marginBottom: String(subTitleBottom) + ea,
                },
                bold: {
                  fontSize: String(desidSize) + ea,
                  fontWeight: String(300),
                  color: colorChip.green
                }
              });
          
              tong = createNode({
                mother: base,
                style: {
                  display: "block",
                  borderRadius: String(5) + "px",
                  border: "1px solid " + colorChip.gray3,
                  boxSizing: "border-box",
                  width: String(100) + '%',
                }
              });
          
              for (let i = 0; i < divideNumber; i++) {
                area = createNode({
                  mother: tong,
                  style: {
                    display: "inline-block",
                    width: String(100 / divideNumber) + '%',
                    borderRight: i === divideNumber - 1 ? "" : "1px dashed " + colorChip.gray3,
                    verticalAlign: "top",
                    paddingTop: String(linePaddingTop) + ea,
                    paddingBottom: String(linePaddingBottom) + ea,
                    boxSizing: "border-box",
                  }
                });
                if (i === 0) {
          
                  createNode({
                    mother: area,
                    text: `<b%제안 횟수%b> : ${String(designer.proposal.length)}회`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%제안액 누계%b> : ${autoComma(designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%제안액 평균%b> : ${designer.proposal.length === 0 ? String(0) : autoComma(Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.proposal.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%평단가 평균%b> : ${designer.proposal.length === 0 ? String(0) : autoComma(Math.floor((designer.proposal.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.proposal.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                } else if (i === 1) {
          
                  createNode({
                    mother: area,
                    text: `<b%계약 횟수%b> : ${String(designer.process.length)}회`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%디자인비 누계%b> : ${autoComma(designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%디자인비 평균%b> : ${designer.process.length === 0 ? String(0) : autoComma(Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.process.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%디자인비 평단가%b> : ${designer.process.length === 0 ? String(0) : autoComma(Math.floor((designer.process.reduce((acc, curr) => { return acc + curr.per }, 0) / designer.process.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
        
                } else if (i === 2) {
          
                  createNode({
                    mother: area,
                    text: `<b%선금 정산 횟수%b> : ${String(designer.first.length)}회`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%선금 정산 누계%b> : ${autoComma(designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%선금 정산 평균%b> : ${designer.first.length === 0 ? String(0) : autoComma(Math.floor((designer.first.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.first.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%평균 평수%b> : ${designer.first.length === 0 ? String(0) : autoComma(Math.floor((designer.first.reduce((acc, curr) => { return acc + curr.pyeong }, 0) / designer.first.length) / 1) * 1)}평`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                } else {
          
                  createNode({
                    mother: area,
                    text: `<b%잔금 정산 횟수%b> : ${String(designer.remain.length)}회`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%잔금 정산 누계%b> : ${autoComma(designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0))}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%잔금 정산 평균%b> : ${designer.remain.length === 0 ? String(0) : autoComma(Math.floor((designer.remain.reduce((acc, curr) => { return acc + curr.amount }, 0) / designer.remain.length) / 1000) * 1000)}원`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      marginBottom: String(lineBetween) + ea,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                  createNode({
                    mother: area,
                    text: `<b%평균 평수%b> : ${designer.remain.length === 0 ? String(0) : autoComma(Math.floor((designer.remain.reduce((acc, curr) => { return acc + curr.pyeong }, 0) / designer.remain.length) / 1) * 1)}평`,
                    style: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(300),
                      color: colorChip.black,
                      paddingLeft: String(linePaddingLeft) + ea,
                    },
                    bold: {
                      fontSize: String(wordingSize) + ea,
                      fontWeight: String(600),
                      color: colorChip.black,
                    }
                  });
          
                }
              }
          
            }
          }
        }

        ajaxJson({
          mode: "designer",
          start: fromDate,
          end: toDate
        }, BACKHOST + "/getProjectReport", { equal: true }).then(dataLoad(loading)).catch((err) => {
          console.log(err);
        });

      }

      if (document.querySelector('.' + whiteCardClassName) === null) {
        whiteReportMaker(agoDate, today, false);
      } else {
        const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
        if (w0 !== undefined) {
          w0.style.animation = "fadedownlite 0.3s ease forwards";
        }
        if (w1 !== undefined) {
          w1.style.animation = "fadedownlite 0.3s ease forwards";
        }
        setQueue(() => {
          if (w0 !== undefined) {
            w0.remove();
          }
          if (w1 !== undefined) {
            w1.remove();
          }
          setQueue(() => {
            whiteReportMaker(agoDate, today, true);
          })
        }, 350);
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.normalReportEvent = async function () {
  const instance = this;
  const { ajaxJson } = GeneralJs;
  try {
    this.mother.belowButtons.square.reportIcon.addEventListener("click", instance.normalReportWhite());
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.communicationRender = function () {
  const instance = this;
  const { communication } = this.mother;
  const { whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, sleep, blankHref, selfHref } = GeneralJs;
  communication.setItem([
    () => { return "체크리스트 전체 발송"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        const targetDesigners = instance.designers.filter((d) => { return /협약 완료/gi.test(d.information.contract.status) });
        let asyncTempFunc;
        let tempRes;
        let untilDate;
        untilDate = await GeneralJs.promptDate("마감일을 언제로 설정할까요?");

        if (untilDate !== null) {
          for (let designer of targetDesigners) {
            asyncTempFunc = instance.normalSendNotice("totalChecklist", designer.desid, untilDate);
            tempRes = await asyncTempFunc();
            if (tempRes === null) {
              throw new Error("send fail");
            }
          }
          window.alert("체크리스트 전체 발송에 성공하였습니다!");
          window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
        }

      } catch (e) {
        console.log(e);
        window.alert("체크리스트 전체 발송에 실패하였습니다!");
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
      }
    }
  ]);
  communication.setItem([
    () => { return "프로필 요청 전체 발송"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        const targetDesigners = instance.designers.filter((d) => { return /협약 완료/gi.test(d.information.contract.status) });
        let asyncTempFunc;
        for (let designer of targetDesigners) {
          asyncTempFunc = instance.normalSendNotice("totalProfile", designer.desid);
          tempRes = await asyncTempFunc();
          if (tempRes === null) {
            throw new Error("send fail");
          }
        }
        window.alert("프로필 요청 전체 발송에 성공하였습니다!");
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
      } catch (e) {
        console.log(e);
        window.alert("프로필 요청 전체 발송에 실패하였습니다!");
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
      }
    }
  ]);
  communication.setItem([
    () => { return "작업물 요청 전체 발송"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) === null;
    },
    async function (e) {
      try {
        const targetDesigners = instance.designers.filter((d) => { return /협약 완료/gi.test(d.information.contract.status) });
        let asyncTempFunc;
        for (let designer of targetDesigners) {
          asyncTempFunc = instance.normalSendNotice("totalWork", designer.desid);
          tempRes = await asyncTempFunc();
          if (tempRes === null) {
            throw new Error("send fail");
          }
        }
        window.alert("작업물 요청 전체 발송에 성공하였습니다!");
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
      } catch (e) {
        console.log(e);
        window.alert("작업물 요청 전체 발송에 실패하였습니다!");
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
      }
    }
  ]);
  communication.setItem([
    () => { return "체크리스트 요청하기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("checklist", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "프로필 업로드 요청하기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("profile", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "작업 사진 업로드 요청하기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("work", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "경력 업데이트 요청하기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("career", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "디자이너 가이드 보내기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("basicEducation", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "콘솔 설명서 보내기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("consoleEducation", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "세트 포폴 요청 보내기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("settingPortfolio", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "상태 체크 보내기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("statusCheck", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "추천서 안내 및 프로필 요청"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const sendFunc = instance.normalSendNotice("proposalProfile", desid);
        await sendFunc();
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "신청자 정보 보기"; },
    function () {
      return document.querySelector('.' + whiteBaseClassName) !== null;
    },
    async function (e) {
      const desid = document.querySelector('.' + whiteBaseClassName).getAttribute("desid");
      try {
        const [ thisDesigner ] = await ajaxJson({ whereQuery: { desid } }, SECONDHOST + "/getDesigners", { equal: true });
        const thisAspirants = await ajaxJson({ whereQuery: { "$and": [ { designer: thisDesigner.designer }, { "meeting.status": { "$not": { "$regex": "드랍" } } } ] } }, SECONDHOST + "/getAspirants", { equal: true });
        if (thisAspirants.length > 0) {
          selfHref(BACKHOST + "/designer?mode=aspirant&aspid=" + thisAspirants[0].aspid);
        }
      } catch (e) {
        console.log(e);
        window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&desid=" + desid;
      }
    }
  ]);
  communication.setItem([
    () => { return "이미지 전송 기록"; },
    function () {
      return true;
    },
    async function (e) {
      try {
        await instance.mother.imageTransferHistory();
      } catch (e) {
        console.log(e);
      }
    }
  ]);
  communication.setItem([
    () => { return "신규 컨텐츠 발행"; },
    function () {
      return true;
    },
    async function (e) {
      try {
        let popupFunction;
        popupFunction = instance.rawUploadView();
        await popupFunction();
      } catch (e) {
        console.log(e);
      }
    }
  ]);
}

DesignerJs.prototype.normalSubPannel = async function () {
  const instance = this;
  const { ea, totalContents, belowHeight, totalMother } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson } = GeneralJs;
  const titleStringClassName = "titleStringClassName";
  try {
    const zIndex = 2;
    let pannelBase;
    let pannelOuterMargin;
    let pannelInnerPadding;
    let pannelMenu;
    let menuPromptWidth;
    let menuPromptHeight;
    let menuTextTop;
    let menuBetween;
    let menuSize;
    let menuWeight;
    let pannelTong;
    let num;

    pannelOuterMargin = 40;
    pannelInnerPadding = 6;

    menuPromptWidth = 140;
    menuPromptHeight = 32;
    menuTextTop = isMac() ? -1 : 1,
    menuBetween = 3;
    menuSize = 13;
    menuWeight = 700;

    pannelMenu = [
      {
        title: "프로젝트 케어 모드",
        event: () => {
          return async function (e) {
            try {
              await instance.careView();
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
      {
        title: "디자이너 보고서 모드",
        event: () => {
          return async function (e) {
            try {
              await instance.numbersView(false);
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
    ];

    pannelBase = createNode({
      mother: totalMother,
      style: {
        display: "flex",
        position: "absolute",
        bottom: String(pannelOuterMargin) + ea,
        right: String(pannelOuterMargin) + ea,
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 3px 15px -9px " + colorChip.shadow,
        padding: String(pannelInnerPadding) + ea,
        flexDirection: "column",
      },
      child: {
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          flexDirection: "column",
        }
      }
    });
    pannelTong = pannelBase.firstChild;

    num = 0;
    for (let obj of pannelMenu) {
      createNode({
        mother: pannelTong,
        event: {
          click: obj.event(),
        },
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          height: String(menuPromptHeight) + ea,
          borderRadius: String(5) + "px",
          background: colorChip.gradientGray,
          marginBottom: String(num === pannelMenu.length - 1 ? 0 : menuBetween) + ea,
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        child: {
          class: [ titleStringClassName ],
          text: obj.title,
          event: {
            selectstart: (e) => { e.preventDefault() },
          },
          style: {
            position: "relative",
            top: String(menuTextTop) + ea,
            fontSize: String(menuSize) + ea,
            fontWeight: String(menuWeight),
            color: colorChip.white,
          }
        }
      })
      num++;
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.cleanSearchEvent = function () {
  const instance = this;
  let searchInputCloned;
  searchInputCloned = this.searchInput.cloneNode(true);
  this.searchInput.parentNode.appendChild(searchInputCloned);
  this.searchInput.remove();
  this.searchInput = searchInputCloned;
}

DesignerJs.prototype.careSubPannel = async function () {
  const instance = this;
  const { ea, totalContents, belowHeight, totalMother } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, returnGet } = GeneralJs;
  const titleStringClassName = "titleStringClassName";
  try {
    const zIndex = 2;
    let pannelBase;
    let pannelOuterMargin;
    let pannelInnerPadding;
    let pannelMenu;
    let menuPromptWidth;
    let menuPromptHeight;
    let menuTextTop;
    let menuBetween;
    let menuSize;
    let menuWeight;
    let pannelTong;
    let num;

    pannelOuterMargin = 40;
    pannelInnerPadding = 6;

    menuPromptWidth = 140;
    menuPromptHeight = 32;
    menuTextTop = isMac() ? -1 : 1,
    menuBetween = 3;
    menuSize = 13;
    menuWeight = 700;

    if (returnGet()?.from === "ca") {
      pannelMenu = [
        {
          title: returnGet()?.view === "care" ? "전체 보기" : "진행중만 보기",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&type=care&from=ca&view=" + (returnGet()?.view === "care" ? "all" : "care");
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
        {
          title: "촬영 관리 모드",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=contents";
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
        {
          title: "기본 프로젝트 모드",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/project?type=care&from=de";
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
        {
          title: "정산 관리 모드",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/calculation";
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
      ];
    } else {
      pannelMenu = [
        {
          title: "디자이너 속성 모드",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
        {
          title: "디자이너 보고서 모드",
          event: () => {
            return async function (e) {
              try {
                window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&type=numbers";
              } catch (e) {
                console.log(e);
                window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
                window.location.reload();
              }
            }
          },
        },
      ];
    }

    pannelBase = createNode({
      mother: totalMother,
      style: {
        display: "flex",
        position: "absolute",
        bottom: String(pannelOuterMargin) + ea,
        right: String(pannelOuterMargin) + ea,
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 3px 15px -9px " + colorChip.shadow,
        padding: String(pannelInnerPadding) + ea,
        flexDirection: "column",
      },
      child: {
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          flexDirection: "column",
        }
      }
    });
    pannelTong = pannelBase.firstChild;

    num = 0;
    for (let obj of pannelMenu) {
      createNode({
        mother: pannelTong,
        event: {
          click: obj.event(),
        },
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          height: String(menuPromptHeight) + ea,
          borderRadius: String(5) + "px",
          background: colorChip.gradientGray,
          marginBottom: String(num === pannelMenu.length - 1 ? 0 : menuBetween) + ea,
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        child: {
          class: [ titleStringClassName ],
          text: obj.title,
          event: {
            selectstart: (e) => { e.preventDefault() },
          },
          style: {
            position: "relative",
            top: String(menuTextTop) + ea,
            fontSize: String(menuSize) + ea,
            fontWeight: String(menuWeight),
            color: colorChip.white,
          }
        }
      })
      num++;
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.careSearchEvent = async function () {
  const instance = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, setQueue } = GeneralJs;
  try {
    this.searchInput.addEventListener("keypress", async function (e) {
      try {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            instance.totalFather.classList.remove("fadein");
            instance.totalFather.classList.add("fadeout");
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
            setQueue(() => {
              instance.totalFather.remove();
              instance.totalFather = null;
            }, 501);
          }
          if (document.querySelector('.' + whiteBaseClassName) !== null) {
            const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
            cancelBack.style.animation = "justfadeout 0.3s ease forwards";
            if (w0 !== undefined) {
              w0.style.animation = "fadedownlite 0.3s ease forwards";
            }
            if (w1 !== undefined) {
              w1.style.animation = "fadedownlite 0.3s ease forwards";
            }
            setQueue(() => {
              cancelBack.click();
            }, 350);
          }

          const value = this.value.trim().replace(/\&\=\+\\\//gi, '');

          loading = instance.mother.grayLoading(null, false);
          ajaxJson({ mode: "search", value: value.trim() }, BACKHOST + "/processConsole", { equal: true }).then((serverResponse) => {
            instance.reloadProjects(serverResponse);
            return instance.careContentsLoad(true, null);
          }).then(() => {
            try {
              loading.remove();
            } catch {}
          }).catch((err) => {
            console.log(err);
          });

        }
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.careWhiteCard = function (proid, caMode = false) {
  const instance = this;
  const { ea, totalContents, grayBarWidth, belowHeight } = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, setQueue, blankHref, ajaxJson, hasQuery, removeQuery, appendQuery } = GeneralJs;
  return async function (e) {
    try {
      const zIndex = 4;
      const blank = "&nbsp;/&nbsp;";
      const project = instance.projects.find((d) => { return d.proid === proid });
      let cancelBack, whitePrompt;
      let margin;
      let titleHeight;
      let innerMargin;
      let overlap;
      let titleTextTop, titleSize;
      let titleWeight;
      let fontTextTop, fontSize, fontBetween, fontWeight;
      let whiteMaker;

      margin = 30;
      titleHeight = 0;
      innerMargin = 24;
      overlap = 12;

      titleTextTop = isMac() ? 2 : 5;
      titleSize = 21;
      titleWeight = 800;

      fontTextTop = isMac() ? 1 : 3;
      fontSize = 14;
      fontBetween = 8;
      fontWeight = 400;

      whiteMaker = (reload = false) => {

        if (!reload) {
          cancelBack = createNode({
            mother: totalContents,
            class: [ "justfadein", whiteCardClassName ],
            event: (e) => {
              removeByClass(whiteCardClassName);
              if (hasQuery("desid")) {
                removeQuery("desid");
              }
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(grayBarWidth) + ea,
              width: withOut(grayBarWidth, ea),
              height: withOut(belowHeight, ea),
              background: colorChip.black,
              zIndex: String(zIndex),
            }
          });
        } 
  
        whitePrompt = createNode({
          mother: totalContents,
          attribute: {
            proid: proid
          },
          class: [ whiteCardClassName, whiteBaseClassName ],
          style: {
            position: "fixed",
            top: String(0 + margin + titleHeight) + ea,
            left: String(grayBarWidth + margin) + ea,
            width: withOut((margin * 2) + grayBarWidth, ea),
            height: withOut(0 + (margin * 2) + titleHeight + belowHeight, ea),
            background: colorChip.white,
            zIndex: String(zIndex),
            borderRadius: String(5) + "px",
            animation: "fadeuplite 0.3s ease forwards",
            boxShadow: "0 2px 10px -6px " + colorChip.shadow,
            overflow: "hidden",
          },
          child: {
            mode: "iframe",
            attribute: {
              src: (!caMode ? BACKHOST + "/process?proid=" + proid + "&entire=true&normal=true&dataonly=true" : "/project?proid=" + proid + "&entire=true&normal=true&dataonly=true"),
            },
            style: {
              position: "absolute",
              display: "block",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              border: String(0),
            }
          }
        });
  
      }

      if (document.querySelector('.' + whiteCardClassName) === null) {
        whiteMaker(false);
      } else {
        const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
        if (w0 !== undefined) {
          w0.style.animation = "fadedownlite 0.3s ease forwards";
        }
        if (w1 !== undefined) {
          w1.style.animation = "fadedownlite 0.3s ease forwards";
        }
        setQueue(() => {
          if (w0 !== undefined) {
            w0.remove();
          }
          if (w1 !== undefined) {
            w1.remove();
          }
          setQueue(() => {
            whiteMaker(true);
          })
        }, 350);
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.careDataRender = async function (filterFunc = null) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, asyncProcessText, noticeSendRows, profileList, workList, representativeList } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute, equalJson, serviceParsing } = GeneralJs;
  try {
    let columns;
    let values;
    let standards;
    let desidArr;
    let thisDesigners;
    let thisProjects;
    let progress, pending;
    let num;

    desidArr = instance.projects.map((p) => { return p.desid });
    desidArr = [ ...new Set(desidArr) ];

    thisDesigners = [];
    for (let desid of desidArr) {
      thisProjects = instance.projects.filter((p) => { return p.desid === desid });
      if (thisProjects.length > 0) {
        thisDesigners.push({
          desid,
          designer: equalJson(JSON.stringify(thisProjects[0].designer)),
          projects: equalJson(JSON.stringify(thisProjects)),
        });
      }
    }

    thisDesigners.sort((a, b) => {
      return b.projects.length - a.projects.length;
    })
    
    standards = {
      columns: [
        {
          title: "아이디",
          width: 96,
          name: "desid",
          type: "string",
        },
        {
          title: "성함",
          width: 60,
          name: "designer",
          type: "string",
        },
      ],
      values: {},
    }

    columns = [
      {
        title: "고객",
        width: 80,
        name: "client",
        type: "string",
      },
      {
        title: "상태",
        width: 80,
        name: "status",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "진행중",
            functionName: "filterEvent_진행중",
          },
          {
            value: "대기",
            functionName: "filterEvent_대기",
          },
          {
            value: "드랍",
            functionName: "filterEvent_드랍",
          },
        ],
      },
      {
        title: "시작일",
        width: 110,
        name: "startDate",
        type: "date",
      },
      {
        title: "종료일",
        width: 110,
        name: "endDate",
        type: "date",
      },
      {
        title: "온오프",
        width: 100,
        name: "onoff",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "오프라인",
            functionName: "filterEvent_오프라인",
          },
          {
            value: "온라인",
            functionName: "filterEvent_온라인",
          },
        ],
      },
      {
        title: "서비스",
        width: 120,
        name: "service",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "홈퍼니싱",
            functionName: "filterEvent_홈퍼니싱",
          },
          {
            value: "홈스타일링",
            functionName: "filterEvent_홈스타일링",
          },
          {
            value: "토탈 스타일링",
            functionName: "filterEvent_토탈 스타일링",
          },
          {
            value: "엑스트라",
            functionName: "filterEvent_엑스트라",
          },
        ],
      },
      {
        title: "주소",
        width: 120,
        name: "address",
        type: "string",
      },
      {
        title: "평수",
        width: 60,
        name: "pyeong",
        type: "number",
      },
      {
        title: "형태",
        width: 90,
        name: "contract",
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "자가",
            functionName: "filterEvent_자가",
          },
          {
            value: "전월세",
            functionName: "filterEvent_전월세",
          },
        ],
      },
      {
        title: "계약금",
        width: 110,
        name: "contractDate",
        type: "date",
      },
      {
        title: "잔금",
        width: 110,
        name: "remainDate",
        type: "date",
      },
      {
        title: "디자인비",
        width: 120,
        name: "designFee",
        type: "number",
      },
      {
        title: "현장 미팅",
        width: 110,
        name: "meetingDate",
        type: "date",
      },
      {
        title: "상태 공유",
        width: 110,
        name: "sendStatus",
        type: "date",
      },
      {
        title: "디자인 제안",
        width: 110,
        name: "sendProposal",
        type: "date",
      },
      {
        title: "디자이너 글",
        width: 110,
        name: "sendContents",
        type: "date",
      },
      {
        title: "주소 전체",
        width: 450,
        name: "addressFull",
        type: "string",
      },
      {
        title: "연락처",
        width: 120,
        name: "phone",
        type: "string",
      },
      {
        title: "이메일",
        width: 200,
        name: "email",
        type: "string",
      },
    ];

    values = {};

    num = 0;
    for (let { designer, projects } of thisDesigners) {

      if (typeof filterFunc === "function") {
        projects = filterFunc(projects);
      }

      progress = projects.filter((p) => { return /진행/gi.test(p.process.status )})
      pending = projects.filter((p) => { return /대기/gi.test(p.process.status )})
      progress.sort((a, b) => {
        return a.process.contract.form.date.from.valueOf() - b.process.contract.form.date.from.valueOf();
      });
      pending.sort((a, b) => {
        return a.process.contract.form.date.from.valueOf() - b.process.contract.form.date.from.valueOf();
      });
      projects = progress.concat(pending);
      thisDesigners[num].projects = equalJson(JSON.stringify(projects));

      standards.values[designer.desid] = [
        {
          value: designer.desid,
          name: "desid",
        },
        {
          value: designer.designer,
          name: "designer",
        },
      ];

      values[designer.desid] = [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
      ];

      for (let p of projects) {
        values[designer.desid][0].push({
          value: p.name,
          name: "client",
        });
        values[designer.desid][1].push({
          value: p.process.status,
          name: "status",
        });
        values[designer.desid][2].push({
          value: dateToString(p.process.contract.form.date.from),
          name: "startDate",
        });
        values[designer.desid][3].push({
          value: dateToString(p.process.contract.form.date.to),
          name: "endDate",
        });
        values[designer.desid][4].push({
          value: serviceParsing(p.service).split(" ").slice(0, 1).join(" "),
          name: "onoff",
        });
        values[designer.desid][5].push({
          value: serviceParsing(p.service).split(" ").slice(1, -1).join(" "),
          name: "service",
        });
        values[designer.desid][6].push({
          value: p.client.requests[p.requestNumber].request.space.address.slice(0, 8),
          name: "address",
        });
        values[designer.desid][7].push({
          value: String(p.client.requests[p.requestNumber].request.space.pyeong),
          name: "pyeong",
        });
        values[designer.desid][8].push({
          value: p.client.requests[p.requestNumber].request.space.contract,
          name: "contract",
        });
        values[designer.desid][9].push({
          value: dateToString(p.process.contract.first.date),
          name: "contractDate",
        });
        values[designer.desid][10].push({
          value: dateToString(p.process.contract.remain.date),
          name: "remainDate",
        });
        values[designer.desid][11].push({
          value: autoComma(p.process.contract.remain.calculation.amount.consumer) + "원",
          name: "designFee",
        });
        values[designer.desid][12].push({
          value: dateToString(p.process.contract.meeting.date),
          name: "meetingDate",
        });
        values[designer.desid][13].push({
          value: dateToString(p.sendStatus),
          name: "sendStatus",
        });
        values[designer.desid][14].push({
          value: dateToString(p.sendFile),
          name: "sendProposal",
        });
        values[designer.desid][15].push({
          value: dateToString(p.rawDate),
          name: "sendContents",
        });
        values[designer.desid][16].push({
          value: p.client.requests[p.requestNumber].request.space.address,
          name: "addressFull",
        });
        values[designer.desid][17].push({
          value: p.client.phone,
          name: "phone",
        });
        values[designer.desid][18].push({
          value: p.client.email,
          name: "email",
        });
      }
      
      num++;
    }

    return { thisDesigners, standards, columns, values };

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.careBase = async function (filterFunc = null) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText, idNameAreaClassName, valueAreaClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, svgMaker, blankHref } = GeneralJs;
  const moveTargetClassName = "moveTarget";
  const menuPromptClassName = "menuPromptClassName";
  const importantCircleClassName = "importantCircleClassName";
  const designerSubMenuEventFactorClassName = "designerSubMenuEventFactorClassName";
  const standardBarCaseClassName = "standardBarCaseClassName";
  const valueBarCaseClassName = "valueBarCaseClassName";
  try {
    let totalMother;
    let grayArea, whiteArea;
    let totalPaddingTop;
    let columnAreaHeight;
    let fontSize, fontWeight;
    let idWidth, nameWidth;
    let idNameAreaPaddingTop;
    let idNameArea;
    let idNameHeight;
    let idNamePaddingBottom;
    let maxWidth;
    let valueColumnsAreaPaddingLeft;
    let valueArea;
    let valueWeight;
    let thisTong;
    let columns;
    let values;
    let valueMaxWidth;
    let thisTargets;
    let hoverEvent, hoverOutEvent;
    let standards;
    let menuPromptWidth, menuPromptHeight;
    let menuVisual;
    let menuBetween;
    let menuTextTop, menuSize, menuWeight;
    let columnsMenuEvent;
    let menuEventTong;
    let careContentsLoad;
    let circleRight, circleTop;
    let importantMarkingEvent;
    let designerSubMenuEvent;
    let contextIndent;
    let contextButtonOuterMargin;
    let contextButtonInnerMargin;
    let contextButtonWidth;
    let contextButtonHeight;
    let contextButtonSize;
    let contextButtonWeight;
    let contextButtonTextTop;
    let thisDesigners;
    let idNameLineTop, idNameLineWidth;
    let valueLineLeft, valueLineMaxWidth;
    let smallTextSize, smallTextTop, smallLineHeight;
    let progress;
    let pending;
    let blankIconRight, blankIconTop, blankIconWidth;
  
    totalPaddingTop = 38;
    columnAreaHeight = 32;
  
    fontSize = 14;
    fontWeight = 600;
    valueWeight = 500;
  
    idWidth = 96;
    nameWidth = 60;
  
    idNameAreaPaddingTop = 17;
    idNameHeight = 36;
  
    idNamePaddingBottom = 400;
    maxWidth = 8000;
    valueMaxWidth = 1000;
  
    valueColumnsAreaPaddingLeft = 20;

    menuPromptWidth = 80;
    menuPromptHeight = 28;
    menuVisual = 4;
    menuBetween = 3;

    menuTextTop = isMac() ? -1 : 1,
    menuSize = 13;
    menuWeight = 600;

    circleRight = 2.5;
    circleTop = isMac() ? 3 : 1;

    contextIndent = 5;
    contextButtonOuterMargin = 8;
    contextButtonInnerMargin = 3;
    contextButtonWidth = 230;
    contextButtonHeight = 28;
    contextButtonSize = 12;
    contextButtonWeight = 700;
    contextButtonTextTop = isMac() ? -1 : 1;

    idNameLineTop = 11;
    idNameLineWidth = 154;

    valueLineLeft = 9;
    valueLineMaxWidth = 9000;

    smallTextSize = 12;
    smallTextTop = -10;
    smallLineHeight = 1.61;

    blankIconRight = 0;
    blankIconTop = 15;
    blankIconWidth = 10;

    ({ thisDesigners, standards, columns, values } = await this.careDataRender(filterFunc));
  
    hoverEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = colorChip.green;
        }
      }
    }

    hoverOutEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = dom.getAttribute("color") !== null ? dom.getAttribute("color") : colorChip.black;
        }
      }
    }

    menuEventTong = {
      sortEvent: (thisType, name, index) => {
        return async function (e) {
          try {
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const type = columns[index].type;
            let domMatrix;
            let thisDesid;
            let thisValueDom;
            let newValueDomsArray;
            let desidArr;
            let tempFiltered;

            desidArr = [ ...new Set(valueDoms.map((dom) => { return dom.getAttribute("desid") })) ];
            domMatrix = {};
            for (let dom of valueDoms) {
              thisDesid = dom.getAttribute("desid");
              if (domMatrix[thisDesid] === undefined) {
                domMatrix[thisDesid] = [];
              }
              domMatrix[thisDesid].push(dom);
            }

            for (let desid in domMatrix) {
              domMatrix[desid].sort((a, b) => {
                let aValue, bValue;
                let aSortValue, bSortValue;
                let tempArr;

                if (findByAttribute([ ...a.querySelectorAll('.' + valueTargetClassName) ], "name", name) !== null) {
                  aValue = findByAttribute([ ...a.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
                } else {
                  if (type === "string") {
                    aValue = '';
                  } else if (type === "number") {
                    aValue = "0";
                  } else if (type === "percentage") {
                    aValue = "0";
                  } else if (type === "date") {
                    aValue = "1800-01-01";
                  } else if (type === "during") {
                    aValue = "0";
                  } else {
                    aValue = "0";
                  }  
                }

                if (findByAttribute([ ...b.querySelectorAll('.' + valueTargetClassName) ], "name", name) !== null) {
                  bValue = findByAttribute([ ...b.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
                } else {
                  if (type === "string") {
                    bValue = '';
                  } else if (type === "number") {
                    bValue = "0";
                  } else if (type === "percentage") {
                    bValue = "0";
                  } else if (type === "date") {
                    bValue = "1800-01-01";
                  } else if (type === "during") {
                    bValue = "0";
                  } else {
                    bValue = "0";
                  }  
                }
                
                if (type === "string") {
                  aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                  bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
                } else if (type === "number") {
                  aValue = aValue.replace(/[^0-9]/gi, '')
                  bValue = bValue.replace(/[^0-9]/gi, '')
                  aSortValue = aValue !== '' ? Number(aValue) : 0;
                  bSortValue = bValue !== '' ? Number(bValue) : 0;
                } else if (type === "percentage") {
                  aValue = aValue.replace(/[^0-9\.]/gi, '')
                  bValue = bValue.replace(/[^0-9\.]/gi, '')
                  aSortValue = aValue !== '' ? Number(aValue) : 0;
                  bSortValue = bValue !== '' ? Number(bValue) : 0;
                } else if (type === "date") {
                  aSortValue = aValue !== '' ? stringToDate(aValue) : stringToDate("1800-01-01");
                  bSortValue = bValue !== '' ? stringToDate(bValue) : stringToDate("1800-01-01");
                  aSortValue = aSortValue.valueOf();
                  bSortValue = bSortValue.valueOf();
                } else if (type === "during") {
    
                  if (/년/gi.test(aValue)) {
                    tempArr = aValue.split('년');
                    if (tempArr.length > 1) {
                      aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                    } else {
                      aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                    }
                  } else {
                    aSortValue = Number(aValue.replace(/[^0-9]/gi, ''));
                  }
    
                  if (/년/gi.test(bValue)) {
                    tempArr = bValue.split('년');
                    if (tempArr.length > 1) {
                      bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                    } else {
                      bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                    }
                  } else {
                    bSortValue = Number(bValue.replace(/[^0-9]/gi, ''));
                  }
    
                } else {
                  aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                  bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
                }
                
                if (thisType === "down") {
                  return bSortValue - aSortValue;
                } else {
                  return aSortValue - bSortValue;
                }
              });
              tempFiltered = domMatrix[desid].filter((d) => { return d.getAttribute("blank") === "true" });
              for (let d of tempFiltered) {
                domMatrix[desid].push(d);
              }
              domMatrix[desid].push(domMatrix[desid].find((d) => { return d.getAttribute("bar") === "true" }));
            }

            for (let desid of desidArr) {
              for (let d of domMatrix[desid]) {
                valueArea.appendChild(d);
              }
            }
  
            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
      filterEvent: (thisValue, name, index) => {
        return async function (e) {
          try {
            let loading;
            let filterFunc;

            if (name === "status") {
              if (thisValue === "$all") {
                filterFunc = null;
              } else {
                filterFunc = (ps) => {
                  return ps.filter((p) => {
                    return p.process.status === thisValue;
                  });
                }
              }
            } else if (name === "onoff") {
              if (thisValue === "$all") {
                filterFunc = null;
              } else {
                filterFunc = (ps) => {
                  return ps.filter((p) => {
                    if (/온라인/gi.test(thisValue)) {
                      return p.service.online;
                    } else {
                      return !p.service.online;
                    }
                  });
                }
              }
            } else if (name === "service") {
              if (thisValue === "$all") {
                filterFunc = null;
              } else {
                filterFunc = (ps) => {
                  return ps.filter((p) => {
                    if (/홈퍼니싱/gi.test(thisValue)) {
                      return /aa01s/gi.test(p.service.serid);
                    } else if (/홈스타일링/gi.test(thisValue)) {
                      return /aa02s/gi.test(p.service.serid);
                    } else if (/토탈 스타일링/gi.test(thisValue)) {
                      return /aa03s/gi.test(p.service.serid);
                    } else {
                      return /aa04s/gi.test(p.service.serid);
                    }
                  });
                }
              }
            } else if (name === "contract") {
              if (thisValue === "$all") {
                filterFunc = null;
              } else {
                filterFunc = (ps) => {
                  return ps.filter((p) => {
                    if (/자가/gi.test(thisValue)) {
                      return /자가/gi.test(p.client.requests[p.requestNumber].request.space.contract);
                    } else {
                      return !/자가/gi.test(p.client.requests[p.requestNumber].request.space.contract);
                    }
                  });
                }
              }
            }

            removeByClass(menuPromptClassName);

            loading = await instance.mother.loadingRun();

            if (instance.totalMother !== null && instance.totalMother !== undefined) {
              totalContents.removeChild(instance.totalMother);
            }

            await instance.careBase(filterFunc);

            loading.parentNode.removeChild(loading);
            
          } catch (e) {
            console.log(e);
          }
        }
      },
    }

    columnsMenuEvent = (index) => {
      return async function (e) {
        try {
          e.preventDefault();
          const name = this.getAttribute("name");
          const index = Number(this.getAttribute("index"));
          const thisObject = columns[index];
          const zIndex = 4;
          let cancelBack, blackPrompt;
          let thisMenu;

          thisMenu = [
            {
              value: "내림차순",
              functionName: "sortEvent_down",
            },
            {
              value: "오름차순",
              functionName: "sortEvent_up",
            },
          ];

          if (Array.isArray(thisObject.menu)) {
            thisMenu = thisMenu.concat(thisObject.menu);
          }

          cancelBack = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            event: (e) => { removeByClass(menuPromptClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          blackPrompt = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            style: {
              position: "fixed",
              top: String(e.y + menuVisual) + "px",
              left: String(e.x + menuVisual) + "px",
              width: String(menuPromptWidth) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              zIndex: String(zIndex),
            },
            children: thisMenu.map(({ value, functionName }) => {
              const functionOrderArr = functionName.split("_");
              const [ thisFunctionName ] = functionOrderArr;
              let thisArguments;
              if (functionOrderArr.length > 1) {
                thisArguments = functionOrderArr.slice(1).concat([ name, index ]);
              } else {
                thisArguments = [ name, index ];
              }
              return {
                event: {
                  selectstart: (e) => { e.preventDefault() },
                  click: menuEventTong[thisFunctionName](...thisArguments),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(menuPromptWidth) + ea,
                  height: String(menuPromptHeight) + ea,
                  borderRadius: String(5) + "px",
                  background: colorChip.gradientGray,
                  marginBottom: String(menuBetween) + ea,
                  justifyContent: "center",
                  alignItems: "center",
                  textAlign: "center",
                  cursor: "pointer",
                },
                child: {
                  text: value,
                  event: {
                    selectstart: (e) => { e.preventDefault() },
                  },
                  style: {
                    position: "relative",
                    top: String(menuTextTop) + ea,
                    fontSize: String(menuSize) + ea,
                    fontWeight: String(menuWeight),
                    color: colorChip.white,
                  }
                }
              }
            })
          })

        } catch (e) {
          console.log(e);
        }
      }
    }

    importantMarkingEvent = (desid) => {
      return async function (e) {
        e.preventDefault();
        try {
          const circles = this.querySelectorAll('.' + importantCircleClassName);
          const desid = this.getAttribute("desid");
          let onoff;
          let whereQuery, updateQuery;

          for (let circle of circles) {
            if (circle.getAttribute("toggle") === "on") {
              circle.style.display = "none";
              circle.setAttribute("toggle", "off");
              onoff = "off";
            } else {
              circle.style.display = "inline-block";
              circle.setAttribute("toggle", "on");
              onoff = "on";
            }
          }

          whereQuery = { desid };
          if (onoff === "on") {
            updateQuery = { important: true };
          } else {
            updateQuery = { important: false };
          }

          await ajaxJson({
            id: desid,
            column: "important",
            value: updateQuery.important ? 1 : 0,
            email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
          }, BACKHOST + "/updateDesignerHistory");
          
        } catch (e) {
          console.log(e);
        }
      }
    }

    designerSubMenuEvent = (desid, designer) => {
      return async function (e) {
        e.preventDefault();
        try {
          const px = "px";
          const zIndex = 4;
          const contextMenu = []
          const thisBox = this.getBoundingClientRect();
          const { x, y } = e;
          let cancelBack, contextBase;

          cancelBack = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            event: {
              click: (e) => { removeByClass(designerSubMenuEventFactorClassName) },
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          contextBase = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            style: {
              display: "inline-block",
              position: "fixed",
              top: String(y + contextIndent) + px,
              left: String(x + (contextIndent / 2)) + px,
              padding: String(contextButtonOuterMargin) + ea,
              paddingBottom: String(contextButtonOuterMargin - contextButtonInnerMargin) + ea,
              background: colorChip.white,
              borderRadius: String(5) + px,
              boxShadow: "3px 0px 15px -9px " + colorChip.shadow,
              zIndex: String(zIndex),
              animation: "fadeuplite 0.3s ease forwards",
            }
          })

          for (let obj of contextMenu) {
            createNode({
              mother: contextBase,
              event: {
                click: obj.func(desid),
              },
              style: {
                display: "flex",
                width: String(contextButtonWidth) + ea,
                height: String(contextButtonHeight) + ea,
                background: colorChip.gradientGray,
                borderRadius: String(5) + px,
                marginBottom: String(contextButtonInnerMargin) + ea,
                justifyContent: "center",
                alignItems: "center",
                flexDirection: "row",
                cursor: "pointer",
              },
              child: {
                text: obj.title,
                style: {
                  fontSize: String(contextButtonSize) + ea,
                  fontWeight: String(contextButtonWeight),
                  color: colorChip.white,
                  position: "relative",
                  display: "inline-block",
                  top: String(contextButtonTextTop) + ea,
                }
              }
            });
          }

        } catch (e) {
          console.log(e);
        }
      }
    }

    totalMother = createNode({
      mother: totalContents,
      class: [ "totalMother" ],
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: withOut(this.belowHeight, ea),
      }
    });
    this.totalMother = totalMother;

    careContentsLoad = async (reload = false, filterFunc = null) => {
      try {

        if (reload) {
          ({ thisDesigners, standards, columns, values } = await instance.careDataRender(filterFunc));
        }

        cleanChildren(totalMother);

        createNode({
          mother: totalMother,
          style: {
            position: "absolute",
            top: String(0),
            left: String(0),
            width: String(this.grayBarWidth) + ea,
            height: withOut(0, ea),
            background: colorChip.gray0,
          }
        });
        createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(totalPaddingTop) + ea,
            height: String(columnAreaHeight) + ea,
            borderBottom: "1px dashed " + colorChip.gray3,
          },
          children: [
            {
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                height: withOut(0, ea),
                justifyContent: "center",
                alignItems: "start",
                verticalAlign: "top",
                width: String(this.grayBarWidth) + ea,
              },
              children: standards.columns.map(({ title, width }) => {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(width) + ea,
                    cursor: "pointer",
                  },
                  child: {
                    text: title,
                    style: {
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.green,
                    }
                  }
                }
              })
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                height: withOut(0, ea),
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
              child: {
                class: [ moveTargetClassName ],
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: withOut(0, ea),
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                },
                children: columns.map(({ title, width, name }, index) => {
                  return {
                    attribute: {
                      name: name,
                      index: String(index),
                    },
                    event: {
                      selectstart: (e) => { e.preventDefault() },
                      click: columnsMenuEvent(index),
                      contextmenu: columnsMenuEvent(index),
                    },
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "center",
                      alignItems: "start",
                      width: String(width) + ea,
                      cursor: "pointer",
                    },
                    child: {
                      style: {
                        display: "inline-block",
                        width: String(90) + '%',
                        position: "relative",
                        overflow: "hidden",
                        textAlign: "center",
                      },
                      child: {
                        style: {
                          display: "flex",
                          width: String(valueMaxWidth) + ea,
                          position: "relative",
                          left: withOut(50, valueMaxWidth / 2, ea),
                          textAlign: "center",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: title,
                          style: {
                            fontSize: String(fontSize) + ea,
                            fontWeight: String(fontWeight),
                            color: colorChip.green,
                          }
                        }
                      }
                    }
                  }
                })
              }
            }
          ]
        });
      
        [ idNameArea, valueArea ] = createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(idNameAreaPaddingTop) + ea,
            height: withOut(totalPaddingTop + columnAreaHeight + idNameAreaPaddingTop, ea),
            width: withOut(0, ea),
            overflow: "scroll",
          },
          children: [
            {
              class: [ idNameAreaClassName ],
              style: {
                display: "inline-flex",
                verticalAlign: "top",
                flexDirection: "column",
                position: "relative",
                width: String(this.grayBarWidth) + ea,
                paddingBottom: String(idNamePaddingBottom) + ea,
              }
            },
            {
              class: [ valueAreaClassName ],
              style: {
                display: "inline-block",
                position: "relative",
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
            }
          ]
        }).children;
      
        for (let { designer, projects } of thisDesigners) {
      
          progress = projects.filter((p) => { return /진행/gi.test(p.process.status )})
          pending = projects.filter((p) => { return /대기/gi.test(p.process.status )})
    
          // id name area

          createNode({
            mother: idNameArea,
            attribute: { desid: designer.desid, lastfilter: "none", important: designer.important ? "true" : "false" },
            event: {
              click: instance.normalWhiteCard(designer.desid),
              dblclick: importantMarkingEvent(designer.desid),
              contextmenu: designerSubMenuEvent(designer.desid, designer.designer),
            },
            class: [ standardCaseClassName ],
            style: {
              display: "flex",
              flexDirection: "row",
              position: "relative",
              height: String(idNameHeight) + ea,
              justifyContent: "center",
              alignItems: "start",
              cursor: "pointer",
            },
            children: standards.values[designer.desid].map(({ value, name }, index) => {
              return {
                style: {
                  display: "inline-flex",
                  flexDirection: "row",
                  position: "relative",
                  justifyContent: "center",
                  alignItems: "start",
                  width: String(standards.columns[index].width) + ea,
                },
                child: {
                  class: [ valueTargetClassName ],
                  attribute: { name },
                  text: value,
                  style: {
                    position: "relative",
                    transition: "all 0.3s ease",
                    fontSize: String(fontSize) + ea,
                    fontWeight: String(fontWeight),
                    color: colorChip.black,
                  },
                  next: {
                    class: [ importantCircleClassName ],
                    attribute: { toggle: designer.important ? "on" : "off" },
                    mode: "svg",
                    source: instance.mother.returnCircle("", colorChip.red),
                    style: {
                      display: designer.important ? "inline-block" : "none",
                      position: "absolute",
                      transform: "scale(0.4)",
                      transformOrigin: "100% 0%",
                      right: String(index === 0 ? 0 : circleRight) + ea,
                      top: String(circleTop) + ea,
                      zIndex: String(0),
                    }
                  }
                }
              }
            })
          });
          
          if (projects.length >= 3) {
            for (let i = 1; i < projects.length; i++) {
              createNode({
                mother: idNameArea,
                attribute: { desid: designer.desid, lastfilter: "none", important: designer.important ? "true" : "false" },
                class: [ standardCaseClassName ],
                style: {
                  display: "flex",
                  flexDirection: "row",
                  position: "relative",
                  height: String(idNameHeight) + ea,
                  justifyContent: "center",
                  alignItems: "start",
                  cursor: "pointer",
                },
                children: standards.values[designer.desid].map(({ value, name }, index) => {
                  return {
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "end",
                      alignItems: "start",
                      width: String((i === 1 ? (index === 0 ? 0 : 132) : 0)) + ea,
                    },
                    child: {
                      class: [ valueTargetClassName ],
                      attribute: { desid: designer.desid, index: String(index), i: String(i) },
                      event: {
                        click: function (e) {
                          const desid = this.getAttribute("desid");
                          const index = Number(this.getAttribute("index"));
                          const i = Number(this.getAttribute("i"));
                          if (i === 1 && index === 1) {
                            blankHref(FRONTHOST + "/designer/dashboard.php?desid=" + desid + "&view=test");
                          }
                        }
                      },
                      text: (i === 1 ? (index === 0 ? "" : "진행중 : " + String(progress.length) + "&nbsp;&nbsp;&nbsp;<u%/%u>&nbsp;&nbsp;&nbsp;대기 : " + String(pending.length) + "\n<b%디자이너 콘솔%b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;") : ""),
                      style: {
                        position: "relative",
                        transition: "all 0.3s ease",
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(fontWeight),
                        top: String(smallTextTop) + ea,
                        color: colorChip.black,
                        textAlign: "right",
                        lineHeight: String(smallLineHeight),
                      },
                      under: {
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(300),
                        color: colorChip.deactive,
                      },
                      bold: {
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(600),
                        color: colorChip.purple,
                      },
                      next: {
                        mode: "svg",
                        source: svgMaker.blankArrow(colorChip.purple),
                        style: {
                          display: i === 1 && index !== 0 ? "inline-block" : "none",
                          position: "absolute",
                          right: String(blankIconRight) + ea,
                          top: String(blankIconTop) + ea,
                          width: String(blankIconWidth) + ea,
                        }
                      }
                    }
                  }
                })
              });
            }
          } else {
            for (let i = 1; i < 3; i++) {
              createNode({
                mother: idNameArea,
                attribute: { desid: designer.desid, lastfilter: "none", important: designer.important ? "true" : "false" },
                class: [ standardCaseClassName ],
                style: {
                  display: "flex",
                  flexDirection: "row",
                  position: "relative",
                  height: String(idNameHeight) + ea,
                  justifyContent: "center",
                  alignItems: "start",
                  cursor: "pointer",
                },
                children: standards.values[designer.desid].map(({ value, name }, index) => {
                  return {
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "end",
                      alignItems: "start",
                      width: String((i === 1 ? (index === 0 ? 0 : 132) : 0)) + ea,
                    },
                    child: {
                      class: [ valueTargetClassName ],
                      text: (i === 1 ? (index === 0 ? "" : "진행중 : " + String(progress.length) + "&nbsp;&nbsp;&nbsp;<u%/%u>&nbsp;&nbsp;&nbsp;대기 : " + String(pending.length) + "\n<b%디자이너 콘솔%b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;") : ""),
                      style: {
                        position: "relative",
                        transition: "all 0.3s ease",
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(fontWeight),
                        top: String(smallTextTop) + ea,
                        color: colorChip.black,
                        textAlign: "right",
                        lineHeight: String(smallLineHeight),
                      },
                      under: {
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(300),
                        color: colorChip.deactive,
                      },
                      bold: {
                        fontSize: String(smallTextSize) + ea,
                        fontWeight: String(600),
                        color: colorChip.purple,
                      },
                      next: {
                        mode: "svg",
                        source: svgMaker.blankArrow(colorChip.purple),
                        style: {
                          display: i === 1 && index !== 0 ? "inline-block" : "none",
                          position: "absolute",
                          right: String(blankIconRight) + ea,
                          top: String(blankIconTop) + ea,
                          width: String(blankIconWidth) + ea,
                        }
                      }
                    }
                  }
                })
              });
            }
          }

          // bar -------------------------------------------------------------------------------------------
          createNode({
            mother: idNameArea,
            class: [ standardCaseClassName, standardBarCaseClassName ],
            attribute: { desid: designer.desid, lastfilter: "none" },
            style: {
              display: "flex",
              flexDirection: "row",
              position: "relative",
              height: String(idNameHeight) + ea,
              justifyContent: "center",
              alignItems: "start",
              cursor: "pointer",
            },
            children: standards.values[designer.desid].map(({ value, name }, index) => {
              if (index === 0) {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(standards.columns[index].width) + ea,
                  },
                  child: {
                    style: {
                      position: "absolute",
                      top: String(idNameLineTop) + ea,
                      width: String(idNameLineWidth) + ea,
                      left: String(0),
                      borderBottom: "1px dashed " + colorChip.gray4,
                    },
                  }
                }
              } else {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(standards.columns[index].width) + ea,
                  },
                  child: {
                    class: [ valueTargetClassName ],
                    style: {
                      position: "relative",
                      transition: "all 0.3s ease",
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.black,
                    },
                  }
                }
              }
            })
          });
          // bar -------------------------------------------------------------------------------------------


          // value area

          if (projects.length >= 3) {

            for (let p = 0; p < projects.length; p++) {
              thisTong = createNode({
                mother: valueArea,
                attribute: { desid: designer.desid, lastfilter: "none", proid: projects[p].proid },
                class: [ moveTargetClassName, valueCaseClassName, designer.desid ],
                event: {
                  click: async function (e) {
                    try {
                      const proid = this.getAttribute("proid");
                      const desid = this.getAttribute("desid");
                      const eventFunction = instance.careWhiteCard(proid, false);

                      await eventFunction(e);

                    } catch (e) {
                      console.log(e);
                    }
                  },
                  contextmenu: async function (e) {
                    try {
                      e.preventDefault();
                      const proid = this.getAttribute("proid");
                      const desid = this.getAttribute("desid");
                      const eventFunction = instance.careWhiteCard(proid, true);

                      await eventFunction(e);

                    } catch (e) {
                      console.log(e);
                    }
                  },
                  mouseenter: hoverEvent(),
                  mouseleave: hoverOutEvent(),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: String(idNameHeight) + ea,
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                  cursor: "pointer",
                }
              })
              for (let i = 0; i < columns.length; i++) {
                createNode({
                  mother: thisTong,
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(columns[i].width) + ea,
                  },
                  child: {
                    style: {
                      display: "inline-block",
                      width: String(90) + '%',
                      position: "relative",
                      overflow: "hidden",
                      textAlign: "center",
                    },
                    child: {
                      style: {
                        display: "flex",
                        width: String(valueMaxWidth) + ea,
                        position: "relative",
                        left: withOut(50, valueMaxWidth / 2, ea),
                        textAlign: "center",
                        justifyContent: "center",
                        alignItems: "center",
                      },
                      child: {
                        attribute: {
                          desid: designer.desid,
                          name: values[designer.desid][i][p].name,
                        },
                        class: [ valueTargetClassName ],
                        text: String(values[designer.desid][i][p].value),
                        style: {
                          position: "relative",
                          transition: "all 0.1s ease",
                          fontSize: String(fontSize) + ea,
                          fontWeight: String(valueWeight),
                          color: colorChip.black,
                        }
                      }
                    }
                  }
                });
              }
            }

          } else {

            for (let p = 0; p < projects.length; p++) {
              thisTong = createNode({
                mother: valueArea,
                attribute: { desid: designer.desid, lastfilter: "none" },
                class: [ moveTargetClassName, valueCaseClassName, designer.desid ],
                event: {
                  mouseenter: hoverEvent(),
                  mouseleave: hoverOutEvent(),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: String(idNameHeight) + ea,
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                  cursor: "pointer",
                }
              })
              for (let i = 0; i < columns.length; i++) {
                createNode({
                  mother: thisTong,
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(columns[i].width) + ea,
                  },
                  child: {
                    style: {
                      display: "inline-block",
                      width: String(90) + '%',
                      position: "relative",
                      overflow: "hidden",
                      textAlign: "center",
                    },
                    child: {
                      style: {
                        display: "flex",
                        width: String(valueMaxWidth) + ea,
                        position: "relative",
                        left: withOut(50, valueMaxWidth / 2, ea),
                        textAlign: "center",
                        justifyContent: "center",
                        alignItems: "center",
                      },
                      child: {
                        attribute: {
                          desid: designer.desid,
                          name: values[designer.desid][i][p].name,
                        },
                        class: [ valueTargetClassName ],
                        text: String(values[designer.desid][i][p].value),
                        style: {
                          position: "relative",
                          transition: "all 0.1s ease",
                          fontSize: String(fontSize) + ea,
                          fontWeight: String(valueWeight),
                          color: colorChip.black,
                        }
                      }
                    }
                  }
                });
              }
            }
            for (let p = 0; p < 3 - projects.length; p++) {
              thisTong = createNode({
                mother: valueArea,
                attribute: { desid: designer.desid, lastfilter: "none", blank: "true" },
                class: [ moveTargetClassName, valueCaseClassName, designer.desid ],
                event: {
                  mouseenter: hoverEvent(),
                  mouseleave: hoverOutEvent(),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: String(idNameHeight) + ea,
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                  cursor: "pointer",
                }
              })
              for (let i = 0; i < columns.length; i++) {
                createNode({
                  mother: thisTong,
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(columns[i].width) + ea,
                  },
                  child: {
                    style: {
                      display: "inline-block",
                      width: String(90) + '%',
                      position: "relative",
                      overflow: "hidden",
                      textAlign: "center",
                    },
                    child: {
                      style: {
                        display: "flex",
                        width: String(valueMaxWidth) + ea,
                        position: "relative",
                        left: withOut(50, valueMaxWidth / 2, ea),
                        textAlign: "center",
                        justifyContent: "center",
                        alignItems: "center",
                      },
                      child: {
                        attribute: {
                          desid: designer.desid,
                        },
                        class: [ valueTargetClassName ],
                        text: "",
                        style: {
                          position: "relative",
                          transition: "all 0.1s ease",
                          fontSize: String(fontSize) + ea,
                          fontWeight: String(valueWeight),
                          color: colorChip.black,
                        }
                      }
                    }
                  }
                });
              }
            }

          }

          // bar -------------------------------------------------------------------------------------------
          thisTong = createNode({
            mother: valueArea,
            attribute: { desid: designer.desid, lastfilter: "none", blank: "true", bar: "true" },
            class: [ moveTargetClassName, valueCaseClassName, valueBarCaseClassName, designer.desid ],
            event: {
              mouseenter: hoverEvent(),
              mouseleave: hoverOutEvent(),
            },
            style: {
              display: "flex",
              position: "relative",
              width: String(maxWidth) + ea,
              height: String(idNameHeight) + ea,
              flexDirection: "row",
              alignItems: "start",
              justifyContent: "start",
              paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
              cursor: "pointer",
            }
          });
          createNode({
            mother: thisTong,
            style: {
              display: "inline-flex",
              flexDirection: "row",
              position: "relative",
              justifyContent: "center",
              alignItems: "start",
              width: String(valueLineMaxWidth) + ea,
            },
            child: {
              style: {
                position: "absolute",
                top: String(idNameLineTop) + ea,
                width: String(valueLineMaxWidth) + ea,
                left: String(valueLineLeft) + ea,
                borderBottom: "1px dashed " + colorChip.gray3,
              },
            }
          });
          // bar -------------------------------------------------------------------------------------------

        }

        await instance.careColorSync(typeof filterFunc === "function");
        await instance.careSubPannel();

      } catch (e) {
        console.log(e);
      }
    }

    await careContentsLoad(false, filterFunc);
    this.careContentsLoad = careContentsLoad;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.reloadProjects = function (serverResponse) {
  const instance = this;
  let projects, clients, designers, history;
  let proid, cliid, desid, service;
  let thisClient, thisDesigner, thisHistory;
  let clientHistory, thisClientHistory;
  let rawContents, rawContent;
  let requestNumber;
  let sendStatus, sendSchedule, sendFile;
  let thisSendStatus, thisSendSchedule, thisSendFile;

  projects = serverResponse.projects;
  clients = serverResponse.clients;
  designers = serverResponse.designers;
  history = serverResponse.history;
  clientHistory = serverResponse.clientHistory;
  rawContents = serverResponse.rawContents;
  sendStatus = serverResponse.sendStatus;
  sendSchedule = serverResponse.sendSchedule;
  sendFile = serverResponse.sendFile;

  for (let project of projects) {
    ({ proid, cliid, desid, service } = project);

    thisClient = clients.find((obj) => { return obj.cliid === cliid });
    thisDesigner = designers.find((obj) => { return obj.desid === desid });
    thisHistory = history.find((obj) => {
      return obj.proid === proid
    });
    thisClientHistory = clientHistory.find((obj) => {
      return obj.cliid === thisClient.cliid
    });
    rawContent = rawContents.find((obj) => {
      return obj.proid === proid
    });

    thisSendStatus = sendStatus.filter((obj) => { return obj.proid === proid });
    thisSendSchedule = sendSchedule.filter((obj) => { return obj.proid === proid });
    thisSendFile = sendFile.filter((obj) => { return obj.proid === proid });

    requestNumber = 0;
    for (let i = 0; i < thisClient.requests.length; i++) {
      if (thisClient.requests[i].request.timeline.valueOf() <= project.proposal.date.valueOf()) {
        requestNumber = i;
        break;
      }
    }

    project.client = thisClient;
    project.requestNumber = requestNumber;
    project.designer = thisDesigner;
    project.history = thisHistory;
    project.clientHistory = thisClientHistory;
    project.name = thisClient.name;
    project.phone = thisClient.phone;
    if (rawContent !== undefined) {
      project.rawDate = rawContent.date;
    } else {
      project.rawDate = new Date(1800, 0, 1);
    }
    if (thisSendStatus.length > 0) {
      thisSendStatus.sort((a, b) => { return b.date.valueOf() - a.date.valueOf() });
      project.sendStatus = thisSendStatus[0].date;
    } else {
      project.sendStatus = new Date(1800, 0, 1);
    }
    if (thisSendSchedule.length > 0) {
      thisSendSchedule.sort((a, b) => { return b.date.valueOf() - a.date.valueOf() });
      project.sendSchedule = thisSendSchedule[0].date;
    } else {
      project.sendSchedule = new Date(1800, 0, 1);
    }
    if (thisSendFile.length > 0) {
      thisSendFile.sort((a, b) => { return b.date.valueOf() - a.date.valueOf() });
      project.sendFile = thisSendFile[0].date;
    } else {
      project.sendFile = new Date(1800, 0, 1);
    }

  }

  if (projects.length !== 1) {
    projects = projects.filter((obj) => {
      return obj.proid !== "p1801_aa01s" && obj.proid !== "p1801_aa02s";
    });
  }

  this.clientHistory = clientHistory;
  this.history = history;
  this.projects = projects;
}

DesignerJs.prototype.careColorSync = async function (allBlack = false) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute } = GeneralJs;
  try {
    let columns;
    let colorStandard;
    let standardDoms, valueDoms;
    let thisValue;
    let thisColor;
    let thisTargets;
    let thisTarget;

    colorStandard = [
      {
        value: "진행중",
        color: colorChip.black,
      },
      {
        value: "대기",
        color: allBlack ? colorChip.black : colorChip.deactive,
      },
      {
        value: "드랍",
        color: allBlack ? colorChip.black : colorChip.red,
      },
      {
        value: "홀딩",
        color: allBlack ? colorChip.black : colorChip.red,
      },
    ];

    standardDoms = [ ...document.querySelectorAll('.' + standardCaseClassName) ];
    valueDoms = [ ...document.querySelectorAll('.' + valueCaseClassName) ];

    for (let i = 0; i < standardDoms.length; i++) {
      thisTarget = findByAttribute([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ], "name", "status");
      if (thisTarget !== null) {
        thisValue = thisTarget.textContent.trim();
        thisColor = colorStandard.find((o) => { return o.value === thisValue }).color;
        thisTargets = [ ...standardDoms[i].querySelectorAll('.' + valueTargetClassName) ].concat([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = thisColor;
          dom.setAttribute("color", thisColor);
        }
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.careView = async function () {
  const instance = this;
  const { ea, totalContents } = this;
  const { createNode, withOut, colorChip, ajaxJson, returnGet, cleanChildren, ajaxMultiple, hasQuery, removeQuery, appendQuery } = GeneralJs;
  try {
    const getObj = returnGet();
    const emptyDate = () => { return new Date(1800, 0, 1) };
    const emptyDateValue = (new Date(2000, 0, 1)).valueOf();
    let loading;
    let serverResponse;
    let projects;
    let clients, designers;
    let proidArr;
    let history;
    let clientHistory;
    let cliidArr;
    let secondRes;
    let matrix;

    loading = await this.mother.loadingRun();

    if (instance.totalMother !== null && instance.totalMother !== undefined) {
      totalContents.removeChild(instance.totalMother);
    }

    if (hasQuery("type")) {
      removeQuery("type");
    }
    appendQuery({ type: "care" });

    ({ projects, clients } = await ajaxJson({ mode: "pre", searchMode: (typeof getObj.proid === "string" ? getObj.proid : "false"), careView: (getObj.view === "care" ? 1 : 0) }, BACKHOST + "/processConsole", { equal: true }));
    proidArr = projects.map((p) => { return p.proid });
    cliidArr = clients.map((c) => { return c.cliid });

    matrix = await ajaxMultiple([
      [ { noFlat: true, whereQuery: {} }, BACKHOST + "/getDesigners" ],
      [ { method: "project", idArr: proidArr }, BACKHOST + "/getHistoryTotal" ],
      [ { method: "client", idArr: cliidArr }, BACKHOST + "/getHistoryTotal" ],
      [ { proidArr }, SECONDHOST + "/getProcessData" ],
    ]);

    designers = matrix[0];
    history = Object.values(matrix[1]);
    clientHistory = Object.values(matrix[2]);
    secondRes = matrix[3];

    serverResponse = {
      projects,
      clients,
      designers,
      history,
      clientHistory,
      rawContents: secondRes.rawContents,
      sendStatus: secondRes.sendStatus,
      sendSchedule: secondRes.sendSchedule,
      sendFile: secondRes.sendFile
    }

    this.reloadProjects(serverResponse);
    this.designers = designers;

    this.contents = null;
    ajaxJson({}, SECONDHOST + "/getChecklist").then((contents) => {
      instance.contents = contents;
      instance.panContents = this.contents.map((obj) => { return obj.children }).flat();
      instance.panList = [];
      instance.itemList = [];
      instance.panNumbers = [];
      instance.naviHeight = 0;
      instance.menuArea = null;
    }).catch((err) => {
      window.location.reload();
    })

    this.matrix = [];
    this.names = [];
    this.bigDoms = [];
    this.clientDoms = [];
    this.totalValues = [];
    this.totalNumbers = [];
    this.onofflineWordsClassName = "onofflineWordsClassName";
    this.numbersExtractClassName = "numbersExtractClassName";
    this.viewMode = "care";

    this.cleanSearchEvent();
    await this.careBase(null);
    await this.careSearchEvent();
    
    loading.parentNode.removeChild(loading);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.numbersColorSync = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute } = GeneralJs;
  try {
    let columns;
    let colorStandard;
    let standardDoms, valueDoms;
    let thisValue;
    let thisColor;
    let thisTargets;

    ({ columns } = await this.normalDataRender(false));

    colorStandard = columns.find((obj) => { return obj.colorStandard === true });

    standardDoms = [ ...document.querySelectorAll('.' + standardCaseClassName) ];
    valueDoms = [ ...document.querySelectorAll('.' + valueCaseClassName) ];

    for (let i = 0; i < standardDoms.length; i++) {
      thisValue = findByAttribute([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ], "name", colorStandard.name).textContent.trim();
      if (colorStandard.colorMap.find((o) => { return o.value === thisValue }) === undefined) {
        throw new Error("invalid value color match");
      }
      thisColor = colorStandard.colorMap.find((o) => { return o.value === thisValue }).color;
      thisTargets = [ ...standardDoms[i].querySelectorAll('.' + valueTargetClassName) ].concat([ ...valueDoms[i].querySelectorAll('.' + valueTargetClassName) ]);
      for (let dom of thisTargets) {
        dom.style.color = (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor;
        dom.setAttribute("color", (new RegExp(asyncProcessText, "gi")).test(dom.textContent) ? colorChip.gray3 : thisColor);
      }
    }

  } catch (e) {
    console.log(e);
  }
}

Set.prototype.intersection = function (setB) {
  let intersection = new Set();
  for (let elem of setB) {
    if (this.has(elem)) {
      intersection.add(elem);
    }
  }
  return intersection;
}

Set.prototype.union = function (setB) {
  let union = new Set(this);
  for (let elem of setB) {
    union.add(elem);
  }
  return union;
}

DesignerJs.prototype.numbersSearchEvent = async function () {
  const instance = this;
  const { titleButtonsClassName, whiteCardClassName, whiteBaseClassName } = this;
  const { ajaxJson, setQueue } = GeneralJs;
  try {
    this.searchInput.addEventListener("keypress", async function (e) {
      try {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            instance.totalFather.classList.remove("fadein");
            instance.totalFather.classList.add("fadeout");
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
            setQueue(() => {
              instance.totalFather.remove();
              instance.totalFather = null;
            }, 501);
          }
          if (document.querySelector('.' + whiteBaseClassName) !== null) {
            const [ cancelBack, w0, w1 ] = Array.from(document.querySelectorAll('.' + whiteCardClassName));
            cancelBack.style.animation = "justfadeout 0.3s ease forwards";
            if (w0 !== undefined) {
              w0.style.animation = "fadedownlite 0.3s ease forwards";
            }
            if (w1 !== undefined) {
              w1.style.animation = "fadedownlite 0.3s ease forwards";
            }
            setQueue(() => {
              cancelBack.click();
            }, 350);
          }

          const value = this.value.trim().replace(/\&\=\+\\\//gi, '');
          const designers = await ajaxJson({ noFlat: true, query: value }, BACKHOST + "/searchDesigners", { equal: true });
          const histories = await ajaxJson({
            method: "designer",
            property: [ "manager", "important" ],
            idArr: designers.map((d) => { return d.desid }),
          }, BACKHOST + "/getHistoryProperty", { equal: true });

          for (let designer of designers) {
            designer.manager = histories[designer.desid].manager;
            designer.important = histories[designer.desid].important;
          }

          instance.designers = designers;
          await instance.numbersContentsLoad(true);

        }
      } catch (e) {
        console.log(e);
      }
    });
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.numbersSubPannel = async function (entireDesignerMode = false) {
  const instance = this;
  const { ea, totalContents, belowHeight, totalMother } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson } = GeneralJs;
  const titleStringClassName = "titleStringClassName";
  try {
    const zIndex = 2;
    let pannelBase;
    let pannelOuterMargin;
    let pannelInnerPadding;
    let pannelMenu;
    let menuPromptWidth;
    let menuPromptHeight;
    let menuTextTop;
    let menuBetween;
    let menuSize;
    let menuWeight;
    let pannelTong;
    let num;

    pannelOuterMargin = 40;
    pannelInnerPadding = 6;

    menuPromptWidth = 140;
    menuPromptHeight = 32;
    menuTextTop = isMac() ? -1 : 1,
    menuBetween = 3;
    menuSize = 13;
    menuWeight = 700;

    pannelMenu = [
      (entireDesignerMode ? {
        title: "협업 디자이너",
        event: () => {
          return async function (e) {
            try {
              await instance.numbersView(false);
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      } : {
        title: "전체 디자이너",
        event: () => {
          return async function (e) {
            try {
              await instance.numbersView(true);
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      }),
      {
        title: "디자이너 속성 모드",
        event: () => {
          return async function (e) {
            try {
              window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
      {
        title: "프로젝트 케어 모드",
        event: () => {
          return async function (e) {
            try {
              window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal&type=care";
            } catch (e) {
              console.log(e);
              window.alert("오류가 발생하였습니다! 다시 시도해주세요!");
              window.location.reload();
            }
          }
        },
      },
    ];

    pannelBase = createNode({
      mother: totalMother,
      style: {
        display: "flex",
        position: "absolute",
        bottom: String(pannelOuterMargin) + ea,
        right: String(pannelOuterMargin) + ea,
        background: colorChip.white,
        zIndex: String(zIndex),
        borderRadius: String(5) + "px",
        animation: "fadeuplite 0.3s ease forwards",
        boxShadow: "0 3px 15px -9px " + colorChip.shadow,
        padding: String(pannelInnerPadding) + ea,
        flexDirection: "column",
      },
      child: {
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          flexDirection: "column",
        }
      }
    });
    pannelTong = pannelBase.firstChild;

    num = 0;
    for (let obj of pannelMenu) {
      createNode({
        mother: pannelTong,
        event: {
          click: obj.event(),
        },
        style: {
          display: "flex",
          position: "relative",
          width: String(menuPromptWidth) + ea,
          height: String(menuPromptHeight) + ea,
          borderRadius: String(5) + "px",
          background: colorChip.gradientGray,
          marginBottom: String(num === pannelMenu.length - 1 ? 0 : menuBetween) + ea,
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
          cursor: "pointer",
        },
        child: {
          class: [ titleStringClassName ],
          text: obj.title,
          event: {
            selectstart: (e) => { e.preventDefault() },
          },
          style: {
            position: "relative",
            top: String(menuTextTop) + ea,
            fontSize: String(menuSize) + ea,
            fontWeight: String(menuWeight),
            color: colorChip.white,
          }
        }
      })
      num++;
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.numbersDataRender = async function () {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, asyncProcessText, noticeSendRows, profileList, workList, representativeList } = this;
  const { createNode, colorChip, withOut, dateToString, designerCareer, ajaxJson, autoComma, findByAttribute, equalJson } = GeneralJs;
  try {
    const calcMonthDelta = (from, to) => {
      return ((to.getFullYear() * 12) + to.getMonth() + 1) - ((from.getFullYear() * 12) + from.getMonth() + 1) + 1;
    }
    const now = new Date();
    const past = new Date();
    const yearsAgo = new Date();
    const agoDelta = 36;
    const agoYearDelta = 4;
    let columns;
    let values;
    let timeDelta;
    let year, month;
    let filteredProjectsProposal;
    let filteredProjectsContract;
    let thisTarget;
    let thisValueDoms;
    let yearDelta;
    let monthDelta;
    let tempDate;
    let tempString;
    let thisYear, from, to;
    let filteredFilteredProjectsProposal;
    let filteredFilteredProjectsContract;
    let thisDate;
    let standards;
    let thisValueTemp;
    let filteredChecklistSendRows;
    let filteredProfileSendRows;
    let filteredWorkSendRows;
    let completeAnalyticsRows;
    let profileListSet;
    let workListSet0, workListSet1, workListSet2, workListSet3;
    let filteredCareerSendRows;
    let filteredEntireSendRows;
    let careerUpdateBoo;
    let schoolUpdateBoo;
    let threeStrengthBoo;
    let representativeBoo;
    let thisRealtime;
    let thisPossible;
    let possible3m, possible6m, possible12m;
    let preStandard0, preStandard1, preStandard2, preStandard3;
    let range0, range1;
    let standard0, standard1, standard2, standard3;

    preStandard0 = new Date();
    preStandard1 = new Date();
    preStandard2 = new Date();
    preStandard3 = new Date();

    preStandard1.setMonth(preStandard1.getMonth() + 3);
    preStandard2.setMonth(preStandard2.getMonth() + 6);
    preStandard3.setMonth(preStandard3.getMonth() + 12);

    past.setFullYear(past.getFullYear() - agoYearDelta);
    past.setMonth(0);
    past.setDate(1);
    past.setHours(9);
    past.setMinutes(0);
    past.setSeconds(0);

    yearsAgo.setMonth(yearsAgo.getMonth() - agoDelta);
    yearDelta = now.getFullYear() - past.getFullYear() + 1
    monthDelta = calcMonthDelta(yearsAgo, now);

    profileListSet = [ ...new Set(profileList.map((o) => { return o.desid })) ];
    workListSet0 = [ ...new Set(workList[0].map((o) => { return o.desid })) ];
    workListSet1 = [ ...new Set(workList[1].map((o) => { return o.desid })) ];
    workListSet2 = [ ...new Set(workList[2].map((o) => { return o.desid })) ];
    workListSet3 = [ ...new Set(workList[3].map((o) => { return o.desid })) ];

    standards = {
      columns: [
        {
          title: "아이디",
          width: 96,
          name: "desid",
          type: "string",
        },
        {
          title: "성함",
          width: 60,
          name: "designer",
          type: "string",
        },
      ],
      values: {},
    }

    columns = [
      {
        title: "계약 상태",
        width: 100,
        name: "status",
        colorStandard: true,
        colorMap: [
          {
            value: "협약 완료",
            color: colorChip.black,
          },
          {
            value: "협약 휴직",
            color: colorChip.deactive,
          },
          {
            value: "협약 해지",
            color: colorChip.gray3,
          },
          {
            value: "신청 대기",
            color: colorChip.red,
          },
          {
            value: "컨택중",
            color: colorChip.deactive,
          },
        ],
        type: "string",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          }
        ].concat([
          "협약 완료",
          "협약 휴직",
          "협약 해지",
          "신청 대기",
          "컨택중",
        ].map((str) => {
          return {
            value: str,
            functionName: "filterEvent_" + str,
          }
        }))
      },
      {
        title: "대기",
        width: 80,
        name: "processPending",
        type: "number",
      },
      {
        title: "진행중",
        width: 80,
        name: "processDoing",
        type: "number",
      },
      {
        title: "홈퍼니싱",
        width: 100,
        name: "homefurnishing",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "홈스타일링",
        width: 100,
        name: "homestyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "토탈 스타일링",
        width: 100,
        name: "totalstyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "설계 변경",
        width: 100,
        name: "extrastyling",
        type: "boolean",
        menu: [
          {
            value: "전체 보기",
            functionName: "filterEvent_$all",
          },
          {
            value: "가능",
            functionName: "filterEvent_가능",
          },
          {
            value: "불가능",
            functionName: "filterEvent_불가능",
          },
        ],
      },
      {
        title: "3개월 가능수",
        width: 90,
        name: "possible3m",
        type: "number",
      },
      {
        title: "6개월 가능수",
        width: 90,
        name: "possible6m",
        type: "number",
      },
      {
        title: "1년 가능수",
        width: 90,
        name: "possible12m",
        type: "number",
      },
      {
        title: "총 추천수",
        width: 90,
        name: "proposalNumber",
        type: "number",
      },
      {
        title: "총 진행수",
        width: 90,
        name: "contractNumber",
        type: "number",
      },
      {
        title: "진행율",
        width: 90,
        name: "contractPercentage",
        type: "percentage",
      },
      {
        title: "총 정산액",
        width: 120,
        name: "totalAmount",
        type: "number",
        money: true,
      },
    ];

    for (let i = 0; i < yearDelta; i++) {
      columns.push({
        title: String(now.getFullYear() - i) + " " + "추천수",
        width: 100,
        name: "proposalNumberY" + String(i),
        type: "number",
      });
      columns.push({
        title: String(now.getFullYear() - i) + " " + "진행수",
        width: 100,
        name: "contractNumberY" + String(i),
        type: "number",
      });
      columns.push({
        title: String(now.getFullYear() - i) + " " + "진행율",
        width: 100,
        name: "contractPercentageY" + String(i),
        type: "percentage",
      });
      columns.push({
        title: String(now.getFullYear() - i) + " " + "총 정산액",
        width: 120,
        name: "totalAmountY" + String(i),
        type: "number",
        money: true,
      });
    }

    for (let i = 0; i < monthDelta; i++) {
      tempDate = new Date();
      tempDate.setMonth(tempDate.getMonth() - i);
      tempString = String(tempDate.getFullYear()).slice(2) + ". " + String(tempDate.getMonth() + 1) + "월";
      columns.push({
        title: tempString + " " + "추천수",
        width: 100,
        name: "monthDelta" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1),
        type: "number",
      });
      tempDate = new Date();
      tempDate.setMonth(tempDate.getMonth() - i);
      tempString = String(tempDate.getFullYear()).slice(2) + ". " + String(tempDate.getMonth() + 1) + "월";
      columns.push({
        title: tempString + " " + "계약수",
        width: 100,
        name: "monthDeltaContract" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1),
        type: "number",
      });
      tempDate = new Date();
      tempDate.setMonth(tempDate.getMonth() - i);
      tempString = String(tempDate.getFullYear()).slice(2) + ". " + String(tempDate.getMonth() + 1) + "월";
      columns.push({
        title: tempString + " " + "정산액",
        width: 100,
        name: "monthDeltaAmount" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1),
        type: "number",
        money: true
      });
    }

    values = {};

    for (let designer of instance.designers) {

      filteredProjectsProposal = instance.projects.filter((p) => {
        return p.proposal.detail.some((obj) => {
          return obj.desid === designer.desid
        });
      });

      filteredProjectsContract = instance.projects.filter((p) => {
        return p.desid === designer.desid;
      });

      thisRealtime = instance.realtimeDesigner.data.find((o) => { return o.desid === designer.desid });
      thisPossible = [];
      if (thisRealtime !== undefined) {
        thisPossible = equalJson(JSON.stringify(thisRealtime.possible));
      }

      possible3m = thisPossible.filter((o) => {
        standard0 = Math.round((((o.start.valueOf() / 1000) / 60) / 60) / 24);
        standard1 = Math.round((((o.end.valueOf() / 1000) / 60) / 60) / 24);
        standard2 = Math.round((((preStandard0.valueOf() / 1000) / 60) / 60) / 24);
        standard3 = Math.round((((preStandard1.valueOf() / 1000) / 60) / 60) / 24);
        range0 = [];
        range1 = [];
        for (let i = standard0; i <= standard1; i++) {
          range0.push(i);
        }
        for (let i = standard2; i <= standard3; i++) {
          range1.push(i);
        }
        range0 = new Set(range0);
        range1 = new Set(range1);
        return (range0.intersection(range1)).size > 0;
      });
      possible6m = thisPossible.filter((o) => {
        standard0 = Math.round((((o.start.valueOf() / 1000) / 60) / 60) / 24);
        standard1 = Math.round((((o.end.valueOf() / 1000) / 60) / 60) / 24);
        standard2 = Math.round((((preStandard0.valueOf() / 1000) / 60) / 60) / 24);
        standard3 = Math.round((((preStandard2.valueOf() / 1000) / 60) / 60) / 24);
        range0 = [];
        range1 = [];
        for (let i = standard0; i <= standard1; i++) {
          range0.push(i);
        }
        for (let i = standard2; i <= standard3; i++) {
          range1.push(i);
        }
        range0 = new Set(range0);
        range1 = new Set(range1);
        return (range0.intersection(range1)).size > 0;
      });
      possible12m = thisPossible.filter((o) => {
        standard0 = Math.round((((o.start.valueOf() / 1000) / 60) / 60) / 24);
        standard1 = Math.round((((o.end.valueOf() / 1000) / 60) / 60) / 24);
        standard2 = Math.round((((preStandard0.valueOf() / 1000) / 60) / 60) / 24);
        standard3 = Math.round((((preStandard3.valueOf() / 1000) / 60) / 60) / 24);
        range0 = [];
        range1 = [];
        for (let i = standard0; i <= standard1; i++) {
          range0.push(i);
        }
        for (let i = standard2; i <= standard3; i++) {
          range1.push(i);
        }
        range0 = new Set(range0);
        range1 = new Set(range1);
        return (range0.intersection(range1)).size > 0;
      });
      
      if (possible3m.length > 0) {
        possible3m = possible3m.map((o) => { return o.matrix });
        possible3m = possible3m.flat();
        possible3m = possible3m.reduce((acc, curr) => { return acc >= curr ? acc : curr }, 0);
      } else {
        possible3m = 0;
      }
      if (possible6m.length > 0) {
        possible6m = possible6m.map((o) => { return o.matrix });
        possible6m = possible6m.flat();
        possible6m = possible6m.reduce((acc, curr) => { return acc >= curr ? acc : curr }, 0);
      } else {
        possible6m = 0;
      }
      if (possible12m.length > 0) {
        possible12m = possible12m.map((o) => { return o.matrix });
        possible12m = possible12m.flat();
        possible12m = possible12m.reduce((acc, curr) => { return acc >= curr ? acc : curr }, 0);
      } else {
        possible12m = 0;
      }

      standards.values[designer.desid] = [
        {
          value: designer.desid,
          name: "desid",
        },
        {
          value: designer.designer,
          name: "designer",
        },
      ];

      values[designer.desid] = [
        {
          value: designer.information.contract.status,
          name: "status",
        },
      ];
      values[designer.desid].push({
        value: String(filteredProjectsContract.filter((p) => { return /^대/.test(p.process.status) }).length),
        name: "processPending",
      });
      values[designer.desid].push({
        value: String(filteredProjectsContract.filter((p) => { return /^진/.test(p.process.status) }).length),
        name: "processDoing",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[0][1] === 1 ? "가능" : "불가능",
        name: "homefurnishing",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[1][1] === 1 ? "가능" : "불가능",
        name: "homestyling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[2][1] === 1 ? "가능" : "불가능",
        name: "totalstyling",
      });
      values[designer.desid].push({
        value: designer.analytics.project.matrix[3][1] === 1 ? "가능" : "불가능",
        name: "extrastyling",
      });
      values[designer.desid].push({
        value: String(possible3m),
        name: "possible3m",
      });
      values[designer.desid].push({
        value: String(possible6m),
        name: "possible6m",
      });
      values[designer.desid].push({
        value: String(possible12m),
        name: "possible12m",
      });
      values[designer.desid].push({
        value: String(filteredProjectsProposal.length),
        name: "proposalNumber",
      });
      values[designer.desid].push({
        value: String(filteredProjectsContract.length),
        name: "contractNumber",
      });
      values[designer.desid].push({
        value: String(Math.round((filteredProjectsProposal.length === 0 ? 0 : (filteredProjectsContract.length / filteredProjectsProposal.length)) * 10000) / 100) + '%',
        name: "contractPercentage",
      });
      values[designer.desid].push({
        value: autoComma(Math.floor(filteredProjectsContract.reduce((acc, curr) => { return acc + curr.process.calculation.payments.totalAmount; }, 0))) + '원',
        name: "totalAmount",
      });

      for (let i = 0; i < yearDelta; i++) {

        thisYear = (new Date()).getFullYear() - i;
        from = new Date(thisYear, 0, 1);
        to = new Date(thisYear + 1, 0, 1);

        filteredFilteredProjectsProposal = filteredProjectsProposal.filter((p) => {
          return (p.proposal.date.valueOf() >= from.valueOf() && p.proposal.date.valueOf() < to.valueOf());
        });

        filteredFilteredProjectsContract = filteredProjectsContract.filter((p) => {
          return (p.process.contract.first.date.valueOf() >= from.valueOf() && p.process.contract.first.date.valueOf() < to.valueOf());
        });


        values[designer.desid].push({ value: String(filteredFilteredProjectsProposal.length), name: "proposalNumberY" + String(i) });
        values[designer.desid].push({ value: String(filteredFilteredProjectsContract.length), name: "contractNumberY" + String(i) });
        values[designer.desid].push({ value: (String(Math.round((filteredFilteredProjectsProposal.length === 0 ? 0 : (filteredFilteredProjectsContract.length / filteredFilteredProjectsProposal.length)) * 10000) / 100) + '%'), name: "contractPercentageY" + String(i) });
        values[designer.desid].push({ value: (autoComma(Math.floor(filteredFilteredProjectsContract.reduce((acc, curr) => { return acc + curr.process.calculation.payments.totalAmount; }, 0))) + '원'), name: "totalAmountY" + String(i) });
      }
  
      for (let i = 0; i < monthDelta; i++) {

        thisDate = new Date();
        thisDate.setMonth(thisDate.getMonth() - i);
        from = new Date(thisDate.getFullYear(), thisDate.getMonth(), 1);
        to = new Date(thisDate.getFullYear(), thisDate.getMonth(), 1);
        to.setMonth(to.getMonth() + 1);

        filteredFilteredProjectsProposal = filteredProjectsProposal.filter((p) => {
          return (p.proposal.date.valueOf() >= from.valueOf() && p.proposal.date.valueOf() < to.valueOf());
        });
        filteredFilteredProjectsContract = filteredProjectsContract.filter((p) => {
          return (p.process.contract.first.date.valueOf() >= from.valueOf() && p.process.contract.first.date.valueOf() < to.valueOf());
        });

        tempDate = new Date();
        tempDate.setMonth(tempDate.getMonth() - i);
        tempString = String(tempDate.getFullYear()).slice(2) + ". " + String(tempDate.getMonth() + 1) + "월";
        values[designer.desid].push({ value: String(filteredFilteredProjectsProposal.length), name: "monthDelta" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1) });
        values[designer.desid].push({ value: String(filteredFilteredProjectsContract.length), name: "monthDeltaContract" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1) });
        values[designer.desid].push({ value: (autoComma(Math.floor(filteredFilteredProjectsContract.reduce((acc, curr) => { return acc + curr.process.calculation.payments.totalAmount; }, 0))) + '원'), name: "monthDeltaAmount" + String(tempDate.getFullYear()).slice(2) + String(tempDate.getMonth() + 1) });
      }

    }

    return { standards, columns, values };

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.numbersBase = async function (entireDesignerMode = false) {
  const instance = this;
  const { ea, totalContents, valueTargetClassName, valueCaseClassName, standardCaseClassName, asyncProcessText, idNameAreaClassName, valueAreaClassName } = this;
  const { createNode, colorChip, withOut, findByAttribute, removeByClass, isMac, dateToString, stringToDate, cleanChildren, ajaxJson, autoComma } = GeneralJs;
  const moveTargetClassName = "moveTarget";
  const menuPromptClassName = "menuPromptClassName";
  const importantCircleClassName = "importantCircleClassName";
  const designerSubMenuEventFactorClassName = "designerSubMenuEventFactorClassName";
  const sumValueRowsClassName = "sumValueRowsClassName";
  const valueSumTargetClassName = "valueSumTargetClassName";
  try {
    let totalMother;
    let grayArea, whiteArea;
    let totalPaddingTop;
    let columnAreaHeight;
    let fontSize, fontWeight;
    let idWidth, nameWidth;
    let idNameAreaPaddingTop;
    let idNameArea;
    let idNameHeight;
    let idNamePaddingBottom;
    let maxWidth;
    let valueColumnsAreaPaddingLeft;
    let valueArea;
    let valueWeight;
    let thisTong;
    let columns;
    let values;
    let valueMaxWidth;
    let thisTargets;
    let hoverEvent, hoverOutEvent;
    let standards;
    let menuPromptWidth, menuPromptHeight;
    let menuVisual;
    let menuBetween;
    let menuTextTop, menuSize, menuWeight;
    let columnsMenuEvent;
    let menuEventTong;
    let numbersContentsLoad;
    let circleRight, circleTop;
    let importantMarkingEvent;
    let designerSubMenuEvent;
    let contextIndent;
    let contextButtonOuterMargin;
    let contextButtonInnerMargin;
    let contextButtonWidth;
    let contextButtonHeight;
    let contextButtonSize;
    let contextButtonWeight;
    let contextButtonTextTop;
    let sumMatrix;

    totalPaddingTop = 38;
    columnAreaHeight = 32;
  
    fontSize = 14;
    fontWeight = 600;
    valueWeight = 500;
  
    idWidth = 96;
    nameWidth = 60;
  
    idNameAreaPaddingTop = 17;
    idNameHeight = 36;
  
    idNamePaddingBottom = 400;
    maxWidth = 8000;
    valueMaxWidth = 1000;
  
    valueColumnsAreaPaddingLeft = 20;

    menuPromptWidth = 80;
    menuPromptHeight = 28;
    menuVisual = 4;
    menuBetween = 3;

    menuTextTop = isMac() ? -1 : 1,
    menuSize = 13;
    menuWeight = 600;

    circleRight = 2.5;
    circleTop = isMac() ? 3 : 1;

    contextIndent = 5;
    contextButtonOuterMargin = 8;
    contextButtonInnerMargin = 3;
    contextButtonWidth = 230;
    contextButtonHeight = 28;
    contextButtonSize = 12;
    contextButtonWeight = 700;
    contextButtonTextTop = isMac() ? -1 : 1;

    ({ standards, columns, values } = await this.numbersDataRender());
  
    hoverEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = colorChip.green;
        }
      }
    }

    hoverOutEvent = () => {
      return function (e) {
        const desid = this.getAttribute("desid");
        const opposite = findByAttribute(document.querySelectorAll('.' + standardCaseClassName), "desid", desid);
        thisTargets = [ ...this.querySelectorAll('.' + valueTargetClassName) ].concat([ ...opposite.querySelectorAll('.' + valueTargetClassName) ]);
        for (let dom of thisTargets) {
          dom.style.color = dom.getAttribute("color") !== null ? dom.getAttribute("color") : colorChip.black;
        }
      }
    }

    menuEventTong = {
      sortEvent: (thisType, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const [ sumStandard, valueStandard ] = Array.from(document.querySelectorAll('.' + sumValueRowsClassName));
            const type = columns[index].type;
            let domMatrix;
            let thisDesid;
            let thisValueDom;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisDesid = idNameDoms[i].getAttribute("desid");
              thisValueDom = findByAttribute(valueDoms, "desid", thisDesid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }
  
            domMatrix.sort((a, b) => {
              let aValue, bValue;
              let aSortValue, bSortValue;
              let tempArr;
  
              aValue = findByAttribute([ ...a[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              bValue = findByAttribute([ ...b[1].querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent;
              
              if (type === "string") {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              } else if (type === "number") {
                aValue = aValue.replace(/[^0-9]/gi, '')
                bValue = bValue.replace(/[^0-9]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "percentage") {
                aValue = aValue.replace(/[^0-9\.]/gi, '')
                bValue = bValue.replace(/[^0-9\.]/gi, '')
                aSortValue = aValue !== '' ? Number(aValue) : 0;
                bSortValue = bValue !== '' ? Number(bValue) : 0;
              } else if (type === "date") {
                aSortValue = aValue !== '' ? stringToDate(aValue) : stringToDate("1800-01-01");
                bSortValue = bValue !== '' ? stringToDate(bValue) : stringToDate("1800-01-01");
                aSortValue = aSortValue.valueOf();
                bSortValue = bSortValue.valueOf();
              } else if (type === "during") {
  
                if (/년/gi.test(aValue)) {
                  tempArr = aValue.split('년');
                  if (tempArr.length > 1) {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    aSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  aSortValue = Number(aValue.replace(/[^0-9]/gi, ''));
                }
  
                if (/년/gi.test(bValue)) {
                  tempArr = bValue.split('년');
                  if (tempArr.length > 1) {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12) + Number(tempArr[1].replace(/[^0-9]/gi, ''));
                  } else {
                    bSortValue = (Number(tempArr[0].replace(/[^0-9]/gi, '')) * 12);
                  }
                } else {
                  bSortValue = Number(bValue.replace(/[^0-9]/gi, ''));
                }
  
              } else {
                aSortValue = aValue !== '' ? aValue.charCodeAt(0) : 0;
                bSortValue = bValue !== '' ? bValue.charCodeAt(0) : 0;
              }
              
              if (thisType === "down") {
                return bSortValue - aSortValue;
              } else {
                return aSortValue - bSortValue;
              }
            });
  
            for (let [ standard, value ] of domMatrix) {
              idNameArea.appendChild(standard);
              valueArea.appendChild(value);
            }

            idNameArea.appendChild(sumStandard);
            valueArea.appendChild(valueStandard);
  
            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
      filterEvent: (thisValue, name, index) => {
        return async function (e) {
          try {
            const idNameArea = document.querySelector('.' + idNameAreaClassName);
            const valueArea = document.querySelector('.' + valueAreaClassName);
            const idNameDoms = Array.from(document.querySelectorAll('.' + standardCaseClassName));
            const valueDoms = Array.from(document.querySelectorAll('.' + valueCaseClassName));
            const [ sumStandard, valueStandard ] = Array.from(document.querySelectorAll('.' + sumValueRowsClassName));
            const last = "lastfilter";
            const type = columns[index].type;
            const typeArr = columns.map((o) => { return o.type });
            const moneyArr = columns.map((o) => { return o.money ? true : false });
            let domMatrix;
            let thisDesid;
            let thisValueDom;
            let valueMatrix;
            let valueMatrixMatrix;
            let sumArr;
            let num;
  
            domMatrix = [];
            for (let i = 0; i < idNameDoms.length; i++) {
              thisDesid = idNameDoms[i].getAttribute("desid");
              thisValueDom = findByAttribute(valueDoms, "desid", thisDesid);
              domMatrix.push([
                idNameDoms[i],
                thisValueDom
              ]);
            }

            valueMatrixMatrix = [];
            if (thisValue === "$all") {
              for (let [ standard, value ] of domMatrix) {
                standard.style.display = "flex";
                value.style.display = "flex";
                valueMatrix = [ ...value.children ].map((dom) => { return dom.querySelector('.' + valueTargetClassName).textContent });
                valueMatrix = valueMatrix.map((str, index) => {
                  if (typeArr[index] === "number") {
                    return Number(str.replace(/[^0-9\.\-]/gi, ''));
                  } else {
                    return str;
                  }
                });
                valueMatrixMatrix.push(valueMatrix);
                standard.setAttribute(last, "none");
                value.setAttribute(last, "none");
              }
            } else {
              for (let [ standard, value ] of domMatrix) {
                if (standard.getAttribute(last) === name) {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    standard.style.display = "flex";
                    value.style.display = "flex";
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                } else {
                  if (findByAttribute([ ...value.querySelectorAll('.' + valueTargetClassName) ], "name", name).textContent.trim() === thisValue) {
                    if (standard.style.display !== "none") {
                      standard.style.display = "flex";
                      value.style.display = "flex";
                    }
                  } else {
                    standard.style.display = "none";
                    value.style.display = "none";
                  }
                }
                if (value.style.display !== "none") {
                  valueMatrix = [ ...value.children ].map((dom) => { return dom.querySelector('.' + valueTargetClassName).textContent });
                  valueMatrix = valueMatrix.map((str, index) => {
                    if (typeArr[index] === "number") {
                      return Number(str.replace(/[^0-9\.\-]/gi, ''));
                    } else {
                      return str;
                    }
                  });
                  valueMatrixMatrix.push(valueMatrix);
                }
                standard.setAttribute(last, name);
                value.setAttribute(last, name);
              }
            }

            sumArr = valueMatrixMatrix.reduce((acc, curr) => {
              let newArr;
              newArr = GeneralJs.equalJson(JSON.stringify(acc));
              for (let i = 0; i < newArr.length; i++) {
                if (typeArr[i] === "number") {
                  newArr[i] = newArr[i] + curr[i];
                }
              }
              return newArr;
            }, (new Array(typeArr.length)).fill(0, 0).map((z, index) => { return typeArr[index] === "number" ? z : '-' }));

            sumArr = sumArr.map((i, index) => {
              return moneyArr[index] ? GeneralJs.autoComma(i) + "원" : String(i);
            });

            num = 0;
            for (let dom of valueStandard.children) {
              dom.querySelector('.' + valueSumTargetClassName).textContent = sumArr[num];
              num++;
            }

            idNameArea.appendChild(sumStandard);
            valueArea.appendChild(valueStandard);

            removeByClass(menuPromptClassName);
  
          } catch (e) {
            console.log(e);
          }
        }
      },
    }

    columnsMenuEvent = (index) => {
      return async function (e) {
        try {
          e.preventDefault();
          const name = this.getAttribute("name");
          const index = Number(this.getAttribute("index"));
          const thisObject = columns[index];
          const zIndex = 4;
          let cancelBack, blackPrompt;
          let thisMenu;

          thisMenu = [
            {
              value: "내림차순",
              functionName: "sortEvent_down",
            },
            {
              value: "오름차순",
              functionName: "sortEvent_up",
            },
          ];

          if (Array.isArray(thisObject.menu)) {
            thisMenu = thisMenu.concat(thisObject.menu);
          }

          cancelBack = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            event: (e) => { removeByClass(menuPromptClassName) },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          blackPrompt = createNode({
            mother: totalContents,
            class: [ menuPromptClassName ],
            style: {
              position: "fixed",
              top: String(e.y + menuVisual) + "px",
              left: String(e.x + menuVisual) + "px",
              width: String(menuPromptWidth) + ea,
              animation: "fadeuplite 0.3s ease forwards",
              zIndex: String(zIndex),
            },
            children: thisMenu.map(({ value, functionName }) => {
              const functionOrderArr = functionName.split("_");
              const [ thisFunctionName ] = functionOrderArr;
              let thisArguments;
              if (functionOrderArr.length > 1) {
                thisArguments = functionOrderArr.slice(1).concat([ name, index ]);
              } else {
                thisArguments = [ name, index ];
              }
              return {
                event: {
                  selectstart: (e) => { e.preventDefault() },
                  click: menuEventTong[thisFunctionName](...thisArguments),
                },
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(menuPromptWidth) + ea,
                  height: String(menuPromptHeight) + ea,
                  borderRadius: String(5) + "px",
                  background: colorChip.gradientGray,
                  marginBottom: String(menuBetween) + ea,
                  justifyContent: "center",
                  alignItems: "center",
                  textAlign: "center",
                  cursor: "pointer",
                },
                child: {
                  text: value,
                  event: {
                    selectstart: (e) => { e.preventDefault() },
                  },
                  style: {
                    position: "relative",
                    top: String(menuTextTop) + ea,
                    fontSize: String(menuSize) + ea,
                    fontWeight: String(menuWeight),
                    color: colorChip.white,
                  }
                }
              }
            })
          })

        } catch (e) {
          console.log(e);
        }
      }
    }

    importantMarkingEvent = (desid) => {
      return async function (e) {
        e.preventDefault();
        try {
          const circles = this.querySelectorAll('.' + importantCircleClassName);
          const desid = this.getAttribute("desid");
          let onoff;
          let whereQuery, updateQuery;

          for (let circle of circles) {
            if (circle.getAttribute("toggle") === "on") {
              circle.style.display = "none";
              circle.setAttribute("toggle", "off");
              onoff = "off";
            } else {
              circle.style.display = "inline-block";
              circle.setAttribute("toggle", "on");
              onoff = "on";
            }
          }

          whereQuery = { desid };
          if (onoff === "on") {
            updateQuery = { important: true };
          } else {
            updateQuery = { important: false };
          }

          await ajaxJson({
            id: desid,
            column: "important",
            value: updateQuery.important ? 1 : 0,
            email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
          }, BACKHOST + "/updateDesignerHistory");
          
        } catch (e) {
          console.log(e);
        }
      }
    }

    designerSubMenuEvent = (desid, designer) => {
      return async function (e) {
        e.preventDefault();
        try {
          const px = "px";
          const zIndex = 4;
          const contextMenu = [
            {
              title: designer + " 실장님께 체크리스트 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("checklist", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 디자이너 콘솔 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("console", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 프로필 업로드 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("profile", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 작업 사진 업로드 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("work", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 경력 업데이트 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("career", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 디자이너 가이드 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("basicEducation", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 콘솔 설명서 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("consoleEducation", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 세트 포폴 요청 보내기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("settingPortfolio", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 상태 체크 요청하기",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("statusCheck", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
            {
              title: designer + " 실장님께 추천서 안내 및 프로필 요청",
              func: (desid) => {
                return async function (e) {
                  try {
                    const sendFunc = instance.normalSendNotice("proposalProfile", desid);
                    await sendFunc();
                  } catch (e) {
                    console.log(e);
                  }
                }
              }
            },
          ];
          const thisBox = this.getBoundingClientRect();
          const { x, y } = e;
          let cancelBack, contextBase;

          cancelBack = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            event: {
              click: (e) => { removeByClass(designerSubMenuEventFactorClassName) },
            },
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: withOut(0, ea),
              height: withOut(0, ea),
              background: "transparent",
              zIndex: String(zIndex),
            }
          });

          contextBase = createNode({
            mother: totalContents,
            class: [ designerSubMenuEventFactorClassName ],
            style: {
              display: "inline-block",
              position: "fixed",
              top: String(y + contextIndent) + px,
              left: String(x + (contextIndent / 2)) + px,
              padding: String(contextButtonOuterMargin) + ea,
              paddingBottom: String(contextButtonOuterMargin - contextButtonInnerMargin) + ea,
              background: colorChip.white,
              borderRadius: String(5) + px,
              boxShadow: "3px 0px 15px -9px " + colorChip.shadow,
              zIndex: String(zIndex),
              animation: "fadeuplite 0.3s ease forwards",
            }
          })

          for (let obj of contextMenu) {
            createNode({
              mother: contextBase,
              event: {
                click: obj.func(desid),
              },
              style: {
                display: "flex",
                width: String(contextButtonWidth) + ea,
                height: String(contextButtonHeight) + ea,
                background: colorChip.gradientGray,
                borderRadius: String(5) + px,
                marginBottom: String(contextButtonInnerMargin) + ea,
                justifyContent: "center",
                alignItems: "center",
                flexDirection: "row",
                cursor: "pointer",
              },
              child: {
                text: obj.title,
                style: {
                  fontSize: String(contextButtonSize) + ea,
                  fontWeight: String(contextButtonWeight),
                  color: colorChip.white,
                  position: "relative",
                  display: "inline-block",
                  top: String(contextButtonTextTop) + ea,
                }
              }
            });
          }

        } catch (e) {
          console.log(e);
        }
      }
    }

    totalMother = createNode({
      mother: totalContents,
      class: [ "totalMother" ],
      style: {
        display: "block",
        position: "relative",
        width: withOut(0, ea),
        height: withOut(this.belowHeight, ea),
      }
    });
    this.totalMother = totalMother;

    numbersContentsLoad = async (reload = false) => {
      try {

        if (reload) {
          ({ standards, columns, values } = await instance.numbersDataRender());
        }

        cleanChildren(totalMother);

        createNode({
          mother: totalMother,
          style: {
            position: "absolute",
            top: String(0),
            left: String(0),
            width: String(this.grayBarWidth) + ea,
            height: withOut(0, ea),
            background: colorChip.gray0,
          }
        });
        createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(totalPaddingTop) + ea,
            height: String(columnAreaHeight) + ea,
            borderBottom: "1px dashed " + colorChip.gray3,
          },
          children: [
            {
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                height: withOut(0, ea),
                justifyContent: "center",
                alignItems: "start",
                verticalAlign: "top",
                width: String(this.grayBarWidth) + ea,
              },
              children: standards.columns.map(({ title, width }) => {
                return {
                  style: {
                    display: "inline-flex",
                    flexDirection: "row",
                    position: "relative",
                    justifyContent: "center",
                    alignItems: "start",
                    width: String(width) + ea,
                    cursor: "pointer",
                  },
                  child: {
                    text: title,
                    style: {
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(fontWeight),
                      color: colorChip.green,
                    }
                  }
                }
              })
            },
            {
              style: {
                display: "inline-block",
                position: "relative",
                height: withOut(0, ea),
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
              child: {
                class: [ moveTargetClassName ],
                style: {
                  display: "flex",
                  position: "relative",
                  width: String(maxWidth) + ea,
                  height: withOut(0, ea),
                  flexDirection: "row",
                  alignItems: "start",
                  justifyContent: "start",
                  paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
                },
                children: columns.map(({ title, width, name }, index) => {
                  return {
                    attribute: {
                      name: name,
                      index: String(index),
                    },
                    event: {
                      selectstart: (e) => { e.preventDefault() },
                      click: columnsMenuEvent(index),
                      contextmenu: columnsMenuEvent(index),
                    },
                    style: {
                      display: "inline-flex",
                      flexDirection: "row",
                      position: "relative",
                      justifyContent: "center",
                      alignItems: "start",
                      width: String(width) + ea,
                      cursor: "pointer",
                    },
                    child: {
                      style: {
                        display: "inline-block",
                        width: String(90) + '%',
                        position: "relative",
                        overflow: "hidden",
                        textAlign: "center",
                      },
                      child: {
                        style: {
                          display: "flex",
                          width: String(valueMaxWidth) + ea,
                          position: "relative",
                          left: withOut(50, valueMaxWidth / 2, ea),
                          textAlign: "center",
                          justifyContent: "center",
                          alignItems: "center",
                        },
                        child: {
                          text: title,
                          style: {
                            fontSize: String(fontSize) + ea,
                            fontWeight: String(fontWeight),
                            color: colorChip.green,
                          }
                        }
                      }
                    }
                  }
                })
              }
            }
          ]
        });
      
        [ idNameArea, valueArea ] = createNode({
          mother: totalMother,
          style: {
            display: "block",
            position: "relative",
            paddingTop: String(idNameAreaPaddingTop) + ea,
            height: withOut(totalPaddingTop + columnAreaHeight + idNameAreaPaddingTop, ea),
            width: withOut(0, ea),
            overflow: "scroll",
          },
          children: [
            {
              class: [ idNameAreaClassName ],
              style: {
                display: "inline-flex",
                verticalAlign: "top",
                flexDirection: "column",
                position: "relative",
                width: String(this.grayBarWidth) + ea,
                paddingBottom: String(idNamePaddingBottom) + ea,
              }
            },
            {
              class: [ valueAreaClassName ],
              style: {
                display: "inline-block",
                position: "relative",
                verticalAlign: "top",
                width: withOut(this.grayBarWidth, ea),
                overflow: "hidden",
              },
            }
          ]
        }).children;

        sumMatrix = (new Array(columns.length)).fill(0, 0);
      
        for (let designer of instance.designers) {
      
          createNode({
            mother: idNameArea,
            attribute: { desid: designer.desid, lastfilter: "none", important: designer.important ? "true" : "false" },
            event: {
              click: instance.normalWhiteCard(designer.desid),
              dblclick: importantMarkingEvent(designer.desid),
              contextmenu: designerSubMenuEvent(designer.desid, designer.designer),
            },
            class: [ standardCaseClassName ],
            style: {
              display: "flex",
              flexDirection: "row",
              position: "relative",
              height: String(idNameHeight) + ea,
              justifyContent: "center",
              alignItems: "start",
              cursor: "pointer",
            },
            children: standards.values[designer.desid].map(({ value, name }, index) => {
              return {
                style: {
                  display: "inline-flex",
                  flexDirection: "row",
                  position: "relative",
                  justifyContent: "center",
                  alignItems: "start",
                  width: String(standards.columns[index].width) + ea,
                },
                child: {
                  class: [ valueTargetClassName ],
                  attribute: { name },
                  text: value,
                  style: {
                    position: "relative",
                    transition: "all 0.3s ease",
                    fontSize: String(fontSize) + ea,
                    fontWeight: String(fontWeight),
                    color: colorChip.black,
                  },
                  next: {
                    class: [ importantCircleClassName ],
                    attribute: { toggle: designer.important ? "on" : "off" },
                    mode: "svg",
                    source: instance.mother.returnCircle("", colorChip.red),
                    style: {
                      display: designer.important ? "inline-block" : "none",
                      position: "absolute",
                      transform: "scale(0.4)",
                      transformOrigin: "100% 0%",
                      right: String(index === 0 ? 0 : circleRight) + ea,
                      top: String(circleTop) + ea,
                      zIndex: String(0),
                    }
                  }
                }
              }
            })
          });
      
          thisTong = createNode({
            mother: valueArea,
            attribute: { desid: designer.desid, lastfilter: "none" },
            class: [ moveTargetClassName, valueCaseClassName, designer.desid ],
            event: {
              mouseenter: hoverEvent(),
              mouseleave: hoverOutEvent(),
            },
            style: {
              display: "flex",
              position: "relative",
              width: String(maxWidth) + ea,
              height: String(idNameHeight) + ea,
              flexDirection: "row",
              alignItems: "start",
              justifyContent: "start",
              paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
              cursor: "pointer",
            }
          })
    
          for (let i = 0; i < columns.length; i++) {

            if (columns[i].type === "number") {
              sumMatrix[i] += Number(String(values[designer.desid][i].value).replace(/[^0-9\.]/gi, ''));
            } else {
              sumMatrix[i] = '-';
            }

            createNode({
              mother: thisTong,
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                justifyContent: "center",
                alignItems: "start",
                width: String(columns[i].width) + ea,
              },
              child: {
                style: {
                  display: "inline-block",
                  width: String(90) + '%',
                  position: "relative",
                  overflow: "hidden",
                  textAlign: "center",
                },
                child: {
                  style: {
                    display: "flex",
                    width: String(valueMaxWidth) + ea,
                    position: "relative",
                    left: withOut(50, valueMaxWidth / 2, ea),
                    textAlign: "center",
                    justifyContent: "center",
                    alignItems: "center",
                  },
                  child: {
                    attribute: {
                      desid: designer.desid,
                      name: values[designer.desid][i].name,
                    },
                    class: [ valueTargetClassName ],
                    text: String(values[designer.desid][i].value),
                    style: {
                      position: "relative",
                      transition: "all 0.1s ease",
                      fontSize: String(fontSize) + ea,
                      fontWeight: String(valueWeight),
                      color: (new RegExp(asyncProcessText, "gi")).test(values[designer.desid][i].value) ? colorChip.gray3 : colorChip.black,
                    }
                  }
                }
              }
            });
          }
    
        }

        createNode({
          mother: idNameArea,
          class: [ sumValueRowsClassName ],
          style: {
            display: "flex",
            flexDirection: "row",
            position: "relative",
            height: String(idNameHeight) + ea,
            justifyContent: "center",
            alignItems: "start",
            cursor: "pointer",
          },
          children: [ "-", "총합" ].map((value, index) => {
            return {
              style: {
                display: "inline-flex",
                flexDirection: "row",
                position: "relative",
                justifyContent: "center",
                alignItems: "start",
                width: String(standards.columns[index].width) + ea,
              },
              child: {
                text: value,
                style: {
                  position: "relative",
                  transition: "all 0.3s ease",
                  fontSize: String(fontSize) + ea,
                  fontWeight: String(fontWeight),
                  color: colorChip.green,
                },
              }
            }
          })
        });
    
        thisTong = createNode({
          mother: valueArea,
          class: [ moveTargetClassName, sumValueRowsClassName ],
          style: {
            display: "flex",
            position: "relative",
            width: String(maxWidth) + ea,
            height: String(idNameHeight) + ea,
            flexDirection: "row",
            alignItems: "start",
            justifyContent: "start",
            paddingLeft: String(valueColumnsAreaPaddingLeft) + ea,
            cursor: "pointer",
          }
        })
  
        for (let i = 0; i < columns.length; i++) {
          createNode({
            mother: thisTong,
            style: {
              display: "inline-flex",
              flexDirection: "row",
              position: "relative",
              justifyContent: "center",
              alignItems: "start",
              width: String(columns[i].width) + ea,
            },
            child: {
              style: {
                display: "inline-block",
                width: String(90) + '%',
                position: "relative",
                overflow: "hidden",
                textAlign: "center",
              },
              child: {
                style: {
                  display: "flex",
                  width: String(valueMaxWidth) + ea,
                  position: "relative",
                  left: withOut(50, valueMaxWidth / 2, ea),
                  textAlign: "center",
                  justifyContent: "center",
                  alignItems: "center",
                },
                child: {
                  class: [ valueSumTargetClassName ],
                  text: columns[i].money ? autoComma(sumMatrix[i]) + "원": String(sumMatrix[i]),
                  style: {
                    position: "relative",
                    transition: "all 0.1s ease",
                    fontSize: String(fontSize) + ea,
                    fontWeight: String(valueWeight),
                    color: colorChip.green,
                  }
                }
              }
            }
          });
        }
    
        await this.numbersColorSync();
        await this.numbersSubPannel(entireDesignerMode);

      } catch (e) {
        console.log(e);
      }
    }

    await numbersContentsLoad(false);
    this.numbersContentsLoad = numbersContentsLoad;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.numbersView = async function (entireDesignerMode = false) {
  const instance = this;
  const { ea, totalContents } = this;
  const { createNode, withOut, colorChip, ajaxJson, returnGet, cleanChildren, hasQuery, removeQuery, appendQuery } = GeneralJs;
  try {
    const getObj = returnGet();
    let loading;
    let designers;
    let histories;
    let members;
    let importants;
    let execFunc;
    let projects;
    let realtimeDesigner;

    loading = await this.mother.loadingRun();

    if (instance.totalMother !== null && instance.totalMother !== undefined) {
      totalContents.removeChild(instance.totalMother);
    }

    if (hasQuery("type")) {
      removeQuery("type");
    }
    appendQuery({ type: "numbers" });

    if (entireDesignerMode) {
      designers = await ajaxJson({ noFlat: true, whereQuery: {} }, BACKHOST + "/getDesigners", { equal: true });
    } else {
      designers = await ajaxJson({ noFlat: true, whereQuery: {
        "information.contract.status": { $regex: "완료" }
      } }, BACKHOST + "/getDesigners", { equal: true });
    }
    histories = await ajaxJson({
      method: "designer",
      property: [ "manager", "important" ],
      idArr: designers.map((d) => { return d.desid }),
    }, BACKHOST + "/getHistoryProperty", { equal: true });
    for (let designer of designers) {
      designer.manager = histories[designer.desid].manager;
      designer.important = histories[designer.desid].important;
    }

    members = await ajaxJson({ type: "get" }, BACKHOST + "/getMembers", { equal: true });
    projects = await ajaxJson({ whereQuery: {}, projectQuery: { proid: 1, cliid: 1, desid: 1, service: 1, process: 1, proposal: 1, } }, SECONDHOST + "/pickProjects", { equal: true });
    realtimeDesigner = await ajaxJson({ mode: "all" }, BACKHOST + "/realtimeDesigner", { equal: true });

    this.viewMode = "numbers";
    this.designers = designers;
    this.projects = projects;
    this.realtimeDesigner = realtimeDesigner;

    this.cleanSearchEvent();
    await this.numbersBase(entireDesignerMode);
    await this.numbersSearchEvent();

    loading.parentNode.removeChild(loading);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.normalView = async function () {
  const instance = this;
  const { ea, totalContents } = this;
  const { createNode, withOut, colorChip, ajaxJson, returnGet, cleanChildren } = GeneralJs;
  try {
    const getObj = returnGet();
    let loading;
    let designers;
    let histories;
    let members;
    let importants;
    let noticeSendRows;
    let profileList, workList;
    let representativeList;
    let execFunc;
    let statusCheckLog;
    let statusCheckAgo;

    loading = await this.mother.loadingRun();

    if (instance.totalMother !== null && instance.totalMother !== undefined) {
      totalContents.removeChild(instance.totalMother);
    }

    designers = await ajaxJson({ noFlat: true, whereQuery: {} }, BACKHOST + "/getDesigners", { equal: true });
    histories = await ajaxJson({
      method: "designer",
      property: [ "manager", "important" ],
      idArr: designers.map((d) => { return d.desid }),
    }, BACKHOST + "/getHistoryProperty", { equal: true });
    for (let designer of designers) {
      designer.manager = histories[designer.desid].manager;
      designer.important = histories[designer.desid].important;
    }

    statusCheckAgo = new Date();
    statusCheckAgo.setDate(statusCheckAgo.getDate() - 14);

    members = await ajaxJson({ type: "get" }, BACKHOST + "/getMembers", { equal: true });
    noticeSendRows = await ajaxJson({ mode: "get" }, SECONDHOST + "/noticeDesignerConsole", { equal: true });
    statusCheckLog = await ajaxJson({ mode: "all", date: statusCheckAgo }, SECONDHOST + "/readLogDesignerStatus", { equal: true });
    profileList = await ajaxJson({ mode: "entire" }, BRIDGEHOST + "/designerProfileList", { equal: true });
    workList = await ajaxJson({ mode: "entire" }, BRIDGEHOST + "/designerWorksList", { equal: true });
    representativeList = await ajaxJson({ target: "$all" }, BRIDGEHOST + "/representativeFileRead", { equal: true });

    console.log(profileList, workList, representativeList);

    this.members = members;
    this.designers = designers;
    this.projects = null;
    this.valueTargetClassName = "valueTargetClassName";
    this.valueCaseClassName = "valueCaseClassName";
    this.standardCaseClassName = "standardCaseClassName";
    this.idNameAreaClassName = "idNameAreaClassName";
    this.valueAreaClassName = "valueAreaClassName";
    this.titleButtonsClassName = "titleButtonsClassName";
    this.whiteCardClassName = "whiteCardClassName";
    this.whiteBaseClassName = "whiteBaseClassName";
    this.processDetailEventClassName = "processDetailEventClassName";
    this.whiteCardMode = getObj.whitecardmode === undefined ? "checklist" : getObj.whitecardmode;
    this.asyncProcessText = "로드중..";
    this.noticeSendRows = noticeSendRows;
    this.statusCheckLog = statusCheckLog.data;
    this.profileList = profileList;
    this.workList = workList;
    this.representativeList = representativeList;
    this.viewMode = "normal";

    this.cleanSearchEvent();
    await this.normalBase();
    await this.normalSearchEvent();
    await this.normalDetailSearchEvent();
    await this.normalMessageEvent();
    await this.normalExtractEvent();
    await this.normalReportEvent();
    this.communicationRender();

    window.addEventListener("popstate", (event) => {
      window.location.href = window.location.protocol + "//" + window.location.host + "/designer?mode=normal";
    });

    loading.parentNode.removeChild(loading);

    if (typeof getObj.desid === "string" && /^d/gi.test(getObj.desid)) {
      execFunc = instance.normalWhiteCard(getObj.desid);
      await execFunc(new Event("click", { bubbles: true }));
    }

    if (typeof getObj.type === "string") {
      if (getObj.type === "project" || getObj.type === "care") {
        await instance.careView();
      } else if (getObj.type === "report" || getObj.type === "numbers") {
        await instance.numbersView();
      } else {
        // pass
      }
    }

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.possibleDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight, middleMode } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip } = GeneralJs;
  let target, pastScrollTop;
  let loading;

  this.dateDoms = [];
  this.selection = [];

  if (typeof this.possiblePannelStatus !== "object" || this.possiblePannelStatus === null) {
    this.possiblePannelStatus = {
      project: false,
      numbers: false,
      doms: [],
    };
  }
  if (typeof this.possiblePannelStatus.project !== "boolean") {
    this.possiblePannelStatus.project = false;
  }
  if (typeof this.possiblePannelStatus.numbers !== "boolean") {
    this.possiblePannelStatus.numbers = false;
  }
  if (!Array.isArray(this.possiblePannelStatus.doms)) {
    this.possiblePannelStatus.doms = [];
  }
  if (typeof this.possibleConst !== "object" || this.possibleConst === null) {
    this.possibleConst = {
      futureLength: 25,
      okClassName: "okSvg",
      cancelClassName: "cancelSvg",
      numberClassName: "numberWord",
      backClassName: "backColor",
      nullClassName: "dateNullTarget",
      generalDateClassName: "dateTarget",
      weekClassName: "week",
      weekGeneralClassName: "weekGeneral",
      titleClassName: "title",
      titleGeneralName: "titleGeneral",
      joinToken: "_",
      scrollEventName: "scrollYEvent",
      scrollEventTimeout: "scrollYTimeout",
      dummyDatesClassName: "dummyDummyDate",
      daydayWords: [ "일", "월", "화", "수", "목", "금", "토" ],
      daydayLength: 7,
      serviceMatrix: [ "홈퍼니싱", "홈스타일링", "토탈 스타일링", "엑스트라 스타일링" ],
    };
  }

  if (!middleMode) {
    this.pageHistory.unshift({ path: "possible", status: "list", desid });
  }
  window.history.pushState({ path: "possible", status: "list", desid }, '');

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  if (!middleMode) {
    target = null;
    for (let i = 0; i < this.standardDoms.length; i++) {
      if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
        if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
          target = i;
        }
      }
    }
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (i !== target) {
        this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
      } else {
        this.standardDoms[i].style.color = colorChip.green;
        if (i !== 1) {
          if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
            standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
          }
        } else {
          standardBar.parentElement.scrollTo({ top: 0 });
        }
      }
    }
  }

  if (middleMode) {
    ajaxJson({
      page: "possible",
      mode: "page",
      who: instance.designer.information.phone,
      desid,
    }, "/ghostDesigner_updateAnalytics").then((message) => {
      console.log(message);
    }).catch((err) => {
      console.log(err);
    });
  }

  this.possibleIconSet(desid);
  this.mother.loadingRun().then((dom) => {
    loading = dom;
    return ajaxJson({ noFlat: true, whereQuery: { desid } }, "/getProjects", { equal: true });
  }).then((projects) => {
    if (projects.length === 0) {
      return [];
    } else {
      instance.designers.setProjects(projects);
      return ajaxJson({
        noFlat: true,
        whereQuery: { $or: projects.map((obj) => { return { cliid: obj.cliid } }) }
      }, "/getClients", { equal: true });
    }
  }).then((clients) => {
    if (clients.length > 0) {
      instance.designers.setClients(clients);
    }
    return ajaxJson({
      mode: "read",
      db: "console",
      collection: "realtimeDesigner",
      whereQuery: { desid },
    }, "/generalMongo", { equal: true });
  }).then((realtimeDesigner) => {
    loading.parentNode.removeChild(loading);
    instance.possibleContents(desid, realtimeDesigner);
    scrollTo(totalMother, pastScrollTop);
    if (callback !== null) {
      if (typeof callback === "function") {
        callback();
      }
    }
  }).catch((err) => {
    console.log(err);
  });
}

DesignerJs.prototype.possibleContents = function (desid, realtimeDesigner) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  let margin;
  let baseTong0, baseTong;
  let matrix;
  let tempArr;
  let tempObj, nodeArr, subNodeArr;
  let eachTotalTong, eachNameTong, eachValueTong;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let tempMatrix;
  let temp;
  let baseTongMarginBottom;
  let checkListData;
  let middleAdjustTong;
  let thisChildWidth;
  let dateString;
  let outerMargin;
  let contentsBox;
  let baseTongPaddingBottom;
  let mobileOuterMargin;

  margin = 8;
  outerMargin = <%% (margin * 3), (margin * 3), (margin * 3), (margin * 3), 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 12 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 40 %%>;
  size = <%% 16, 15, 15, 15, 4 %%>;

  baseTongPaddingBottom = 15;
  mobileOuterMargin = 4;

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(outerMargin) + ea : (this.middleMode ? String(60) + "px" : String(outerMargin)),
      left: String(grayBarWidth + (desktop ? outerMargin : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? outerMargin * 2 : mobileOuterMargin * 2), ea),
      height: "auto",
      animation: "",
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: colorChip.white,
      height: "auto",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingBottom: desktop ? "" : String(baseTongPaddingBottom) + ea,
    }
  });

  contentsBox = createNode({
    mother: baseTong,
    style: {
      position: "relative",
      top: String(outerMargin) + ea,
      marginLeft: String(outerMargin) + ea,
      marginRight: String(outerMargin) + ea,
      marginBottom: String(outerMargin * 2) + ea,
      width: withOut(outerMargin * 2, ea),
      display: "block",
    }
  });

  this.possibleMatrix(contentsBox, desid, realtimeDesigner).catch((err) => {
    console.log(err);
  });

  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.possibleUpdate = async function (desid) {
  const instance = this;
  const { ajaxJson, createNode, withOut, colorChip, setQueue, equalJson, dateToString, stringToDate, sleep } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, possibleConst } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  const projects = designer.projects === undefined ? [] : designer.projects;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  try {
    const dateDoms = instance.dateDoms;
    const onDoms = dateDoms.filter((d) => { return d.getAttribute("toggle") === "on"; });
    const rawDates = onDoms.map((d) => { return new Date(d.getAttribute("value")); });
    let removeDates, tempDate, tempDate2;
    let filteredDates;
    let possible;
    let tempObj;
    let num;
    let whereQuery, updateQuery;
    let date;
    let finalPossible;
    let noneIndex;
    let length;
    let onIndex;
    let boo, tempStr, tempIndex;
    let additionalPossible;
    let additionalPossibleMatrix, additionalPossibleMatrixTemp, additionalPossibleMatrixRaw, additionalPossibleMatrixPast;

    removeDates = [];
    for (let i = 1; i < rawDates.length - 1; i++) {
      tempDate = new Date(JSON.stringify(rawDates[i - 1]).slice(1, -1));
      tempDate2 = new Date(JSON.stringify(rawDates[i + 1]).slice(1, -1));
      tempDate.setDate(tempDate.getDate() + 1);
      tempDate2.setDate(tempDate2.getDate() - 1);
      if (dateToString(tempDate) === dateToString(rawDates[i]) && dateToString(tempDate2) === dateToString(rawDates[i])) {
        removeDates.push(dateToString(rawDates[i]));
      }
    }

    onDoms.sort((a, b) => { return (new Date(a.getAttribute("value"))).valueOf() - (new Date(b.getAttribute("value"))).valueOf(); });
    filteredDates = onDoms.filter((d, index) => { const boo = !removeDates.includes(dateToString(new Date(d.getAttribute("value")))); if (boo) { d.setAttribute("onindex", String(index)); } return boo; });

    possible = [];
    tempObj = {};
    for (let dom of filteredDates) {
      onIndex = Number(dom.getAttribute("onindex"));
      date = new Date(dom.getAttribute("value"));
      tempDate = new Date(JSON.stringify(date).slice(1, -1));
      tempDate.setDate(tempDate.getDate() + 1);
      if (removeDates.includes(dateToString(tempDate))) {
        tempObj.start = date;
        tempObj.startIndex = onIndex;
      } else {
        if (tempObj.start === undefined) {
          tempObj.start = date;
          tempObj.startIndex = onIndex;
        }
        tempObj.end = date;
        tempObj.endIndex = onIndex;
        tempObj.totalMatrix = [];
        for (let i = tempObj.startIndex; i < tempObj.endIndex + 1; i++) {
          tempObj.totalMatrix.push(equalJson(onDoms[i].getAttribute("matrix")));
        }
        tempObj.matrix = equalJson(dom.getAttribute("matrix"));
        possible.push(tempObj);
        tempObj = {};
      }
    }

    noneIndex = [];
    for (let i = 0; i < possible.length - 1; i++) {
      if (dateToString(possible[i].start) === dateToString(possible[i].end)) {
        if (dateToString(possible[i + 1].start) === dateToString(possible[i + 1].end)) {
          tempDate = new Date(JSON.stringify(possible[i].start).slice(1, -1));
          tempDate.setDate(tempDate.getDate() + 1);
          if (dateToString(tempDate) === dateToString(possible[i + 1].start)) {
            possible[i].end = new Date(JSON.stringify(possible[i + 1].end).slice(1, -1));
            noneIndex.push(i + 1);
          }
        }
      }
    }

    finalPossible = [];
    length = possible.length;
    for (let i = 0; i < length; i++) {
      if (!noneIndex.includes(i)) {
        finalPossible.push(possible[i]);
      }
    }

    finalPossible = finalPossible.filter((obj) => { return obj.matrix.length > 0; });
    finalPossible = finalPossible.filter((obj) => { return obj.matrix.reduce((acc, current) => { return acc + current }) !== 0; });

    additionalPossible = [];
    for (let obj of finalPossible) {
      tempStr = JSON.stringify(obj.matrix);
      boo = !obj.totalMatrix.every((arr) => { return JSON.stringify(arr) === tempStr });
      if (boo) {
        additionalPossibleMatrixRaw = obj.totalMatrix.map((arr) => { return JSON.stringify(arr); });
        additionalPossibleMatrix = [];
        additionalPossibleMatrixPast = null;
        additionalPossibleMatrixTemp = null;
        for (let i = 0; i < additionalPossibleMatrixRaw.length; i++) {
          if (additionalPossibleMatrixRaw[i] !== additionalPossibleMatrixPast) {
            if (Array.isArray(additionalPossibleMatrixTemp)) {
              additionalPossibleMatrixTemp.push(i - 1);
              additionalPossibleMatrix.push(additionalPossibleMatrixTemp);
            }
            additionalPossibleMatrixTemp = [];
            additionalPossibleMatrixTemp.push(i);
          }
          additionalPossibleMatrixPast = additionalPossibleMatrixRaw[i];
        }
        if (Array.isArray(additionalPossibleMatrixTemp)) {
          additionalPossibleMatrixTemp.push(additionalPossibleMatrixRaw.length - 1);
          additionalPossibleMatrix.push(additionalPossibleMatrixTemp);
        }
        for (let [ start, end ] of additionalPossibleMatrix) {
          if (equalJson(onDoms[obj.startIndex + start].getAttribute("matrix")).reduce((acc, current) => { return acc + current }) !== 0) {
            additionalPossible.push({
              start: new Date(onDoms[obj.startIndex + start].getAttribute("value")),
              end: new Date(onDoms[obj.startIndex + end].getAttribute("value")),
              matrix: equalJson(onDoms[obj.startIndex + start].getAttribute("matrix"))
            });
          }
        }
      }
      obj.removeTarget = boo;
    }

    finalPossible = finalPossible.filter((obj) => { return !obj.removeTarget; }).map((obj) => { return { start: obj.start, end: obj.end, matrix: obj.matrix }; }).concat(additionalPossible);
    finalPossible.sort((a, b) => { return a.start.valueOf() - b.start.valueOf(); });

    whereQuery = { desid };
    updateQuery = { possible: finalPossible };

    await ajaxJson({
      mode: "update",
      db: "console",
      collection: "realtimeDesigner",
      whereQuery,
      updateQuery,
    }, "/generalMongo", { equal: true });

    instance.realtimeDesigner.possible = finalPossible;

    ajaxJson({
      mode: "sse",
      db: "console",
      collection: "sse_possibleDesigner",
      log: true,
      who: (instance.middleMode ? instance.designer.information.phone : JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
      updateQuery: {
        desid,
        type: "possible",
        possible: finalPossible
      }
    }, "/generalMongo").then(() => {
      return ajaxJson({
        page: "possible",
        mode: "update",
        who: (instance.middleMode ? instance.designer.information.phone : JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail),
        update: [ Object.keys(updateQuery), Object.values(updateQuery) ],
        desid,
      }, "/ghostDesigner_updateAnalytics");
    }).catch((err) => {
      console.log(err);
    });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.possibleMatrix = async function (mother, desid, realtimeDesigner) {
  const instance = this;
  const { ajaxJson, createNode, withOut, colorChip, getDateMatrix, findByAttribute, setQueue, setDebounce, equalJson, dateToString, stringToDate, isMac, swipePatch, sleep } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, possibleConst } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  const projects = designer.projects === undefined ? [] : designer.projects;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const now = new Date();
  const nowValue = now.valueOf();
  const between = "&nbsp;&nbsp;&nbsp;&nbsp;";
  const { futureLength, okClassName, cancelClassName, numberClassName, backClassName, nullClassName, generalDateClassName, weekClassName, weekGeneralClassName, titleClassName, titleGeneralName, joinToken, scrollEventName, scrollEventTimeout, dummyDatesClassName, daydayWords, daydayLength, serviceMatrix } = possibleConst;
  try {
    let magin, outerMargin;
    let dateMatrix;
    let map;
    let size;
    let tempObj;
    let block;
    let titleField, matrixField;
    let titleWidth;
    let titlePaddingLeft;
    let titlePaddingRight;
    let titleLineHeight;
    let weekBlock;
    let weekBlockHeight;
    let num;
    let blockMarginBottom;
    let dateBox;
    let dateNumberSize, dateNumberTop, dateNumberLeft;
    let dateIconTop, dateIconWidth, dateIconRight;
    let pastBoo;
    let weekBlocks;
    let removeTargets;
    let children, length;
    let weekTotalLength;
    let firstBlock;
    let tempArr;
    let titleTargets;
    let firstMother;
    let topMap;
    let daydayField;
    let daydayMargin;
    let daydaySize, daydayTextTop;
    let daydayBarTop, daydayBarBottom;
    let daydayIndent;
    let functionPannel;
    let functionPannelBottom;
    let functionPannelRight;
    let functionPannelWidth;
    let functionPannelBlockHeight;
    let functionPannelSize;
    let functionPannelLeft;
    let functionPannelTextTop0;
    let functionPannelTextTop1;
    let functionPannelPaddingTop;
    let functionPannelPaddingBottom;
    let functionPannelContents;
    let allSvgs, tempSvg;
    let dateBoxOpacity;
    let clientPopupWordPadding;
    let clientPopupWordPaddingTop, clientPopupWordPaddingBottom;
    let clientPopupWordPaddingHeightPadding;
    let clientPopupWordSize;
    let clientPopupTopMargin;
    let from, to, doingArr, doingBooArr;
    let updateQuery;
    let tempDate, keyName;
    let updateBoo;
    let targetDom;
    let pannelDom, pannelDoms;
    let projectPannel, calendarPannel;
    let daydayVisualLeft;
    let titleMobileIndent, titleMobileMarginBottom;
    let sizeVisual;
    let blockPaddingTop, blockBarBottom;
    let daydayFieldTop;
    let dateNumberWidth;
    let motherPaddingTop;
    let daydayBlockHeight;
    let monthSize;
    let mobileOuterMargin;

    this.desid = desid;
    this.designer = designer;

    if (realtimeDesigner.length === 0) {

      updateQuery = { desid };
      updateQuery.possible = [];
      updateQuery.projects = [];
      for (let project of projects) {
        updateQuery.projects.push({ proid: project.proid, meeting: [ project.process.contract.meeting.date ], project: [ { start: project.process.contract.form.date.from, end: project.process.contract.form.date.to } ] });
      }
      realtimeDesigner = updateQuery;

      ajaxJson({
        mode: "create",
        db: "console",
        collection: "realtimeDesigner",
        updateQuery,
      }, "/generalMongo", { equal: true }).catch((err) => { console.log(err); });

    } else {

      [ realtimeDesigner ] = realtimeDesigner;
      delete realtimeDesigner._id;
      realtimeDesigner.projects = [];
      for (let project of projects) {
        realtimeDesigner.projects.push({ proid: project.proid, meeting: [ project.process.contract.meeting.date ], project: [ { start: project.process.contract.form.date.from, end: project.process.contract.form.date.to } ] });
      }
      updateQuery = equalJson(JSON.stringify(realtimeDesigner));
      ajaxJson({
        mode: "update",
        db: "console",
        collection: "realtimeDesigner",
        whereQuery: { desid },
        updateQuery,
      }, "/generalMongo", { equal: true }).catch((err) => { console.log(err); });

    }

    this.realtimeDesigner = realtimeDesigner;

    firstBlock = {};
    allSvgs = [];

    margin = 8;
    outerMargin = <%% (margin * 3), (margin * 3), (margin * 3), (margin * 3), 2.5 %%>;

    dateBoxOpacity = 0.08;

    motherPaddingTop = <%% 80, 72, 64, 56, 14 %%>;

    monthSize = <%% 23, 23, 21, 20, 3.6 %%>;
    size = <%% 15, 15, 14, 13, 3.6 %%>;
    sizeVisual = <%% 7, 7, 6, 5, 0.6 %%>;
    titleWidth = <%% 130, 120, 120, 80, 0 %%>;
    titlePaddingLeft = <%% 5, 5, 3, 1, 0.1 %%>;
    titlePaddingRight = <%% 50, 50, 30, 18, 5 %%>;
    titleLineHeight = 1.55;
    titleMobileIndent = <%% 3, 3, 2, 2, 0.5 %%>;
    titleMobileMarginBottom = <%% 14, 13, 12, 11, 2 %%>;

    weekBlockHeight = <%% 80, 76, 64, 56, 8.6 %%>;
    daydayBlockHeight = <%% 60, 57, 50, 42, 8.6 %%>;

    blockPaddingTop = 5;
    blockMarginBottom = <%% 36, 36, 32, 24, 12 %%>;
    blockBarBottom = 2.7;

    dateNumberSize = <%% 17, 15, 14, 12, 2.9 %%>;
    dateNumberTop = <%% 23, 22, 18, 16, 1.5 %%>;
    dateNumberLeft = <%% 23, 18, 15, 12, 0 %%>;
    dateNumberWidth = <%% 60, 56, 50, 42, 0 %%>;

    dateIconTop = <%% 26, 25.5, 20, 19, 4 %%>;
    dateIconWidth = <%% 20, 17, 16, 13, 5 %%>;
    dateIconRight = <%% 24, 18, 15, 12, 4 %%>;

    daydayFieldTop = <%% (outerMargin * 2), (outerMargin * 2), (outerMargin * 2), (outerMargin * 2), 21 %%>;
    daydayMargin = <%% 20, 20, 20, 20, 4 %%>;
    daydaySize = <%% 16, 16, 14, 13, 3.2 %%>;
    daydayTextTop = <%% (isMac() ? 16 : 18), (isMac() ? 16 : 18), 12, 10, 1.5 %%>;
    daydayBarTop = <%% 16, 16, 16, 16, 2 %%>;
    daydayBarBottom = <%% 18, 18, 18, 18, 2 %%>;
    daydayIndent = <%% 7, 7, 7, 7, 0.8 %%>;
    daydayVisualLeft = <%% 1, 1, 1, 1, 0 %%>;

    functionPannelBottom = <%% 36, 36, 36, 36, 6 %%>;
    functionPannelRight = <%% 10, 10, 10, 10, 3 %%>;
    functionPannelWidth = <%% 150, 150, 150, 150, 14 %%>;

    functionPannelPaddingTop = <%% 12, 12, 9, 9, 6 %%>;
    functionPannelPaddingBottom = <%% 12, 12, 12, 12, 6 %%>;

    functionPannelBlockHeight = <%% 24, 24, 22, 20, 5 %%>;
    functionPannelSize = <%% 14, 14, 13, 12, 3 %%>;
    functionPannelLeft = <%% 18, 18, 18, 18, 4 %%>;
    functionPannelTextTop0 = <%% (isMac() ? 2 : 4), (isMac() ? 2 : 4), (isMac() ? 2 : 4), (isMac() ? 2 : 4), 0 %%>;
    functionPannelTextTop1 = <%% 3, 3, 3, 3, 0 %%>;

    clientPopupWordPadding = <%% 18, 18, 18, 18, 1 %%>;
    clientPopupWordPaddingTop = <%% 8, 8, 8, 8, 1 %%>;
    clientPopupWordPaddingBottom = <%% 12, 12, 12, 12, 1 %%>;
    clientPopupWordPaddingHeightPadding = <%% 1.5, 1.5, 1.5, 1.5, 0 %%>;
    clientPopupWordSize = <%% 14, 14, 14, 14, 2.8 %%>;
    clientPopupTopMargin = <%% 7, 7, 7, 7, 1 %%>;

    mobileOuterMargin = 4;

    functionPannelContents = [
      {
        name: "프로젝트 보기",
        attribute: {
          toggle: "off",
        },
        event: async function (e) {
          const toggle = this.getAttribute("toggle");
          const dateDoms = instance.dateDoms;
          const projects = designer.projects.filter((p) => { return /^[대진]/.test(p.process.status); });
          try {
            let start, end;
            let target, targets, targets2;
            let tempStr, dom;
            let clientsArr;
            if (toggle === "off") {

              if (instance.possiblePannelStatus.numbers) {
                if (instance.possiblePannelStatus.doms.length === 2) {
                  instance.possiblePannelStatus.doms[1].click();
                  await sleep(1500);
                }
              }

              targets2 = [];
              for (let svg of allSvgs) {
                svg.style.opacity = String(0);
                svg.parentElement.children[0].style.background = colorChip.white;
                svg.parentElement.children[1].style.color = colorChip.black;
                svg.parentElement.children[1].querySelector('b').style.color = colorChip.black;
                svg.setAttribute("mode", "projects");
                if ([ 0, 6 ].includes(Number(svg.parentElement.getAttribute("index")))) {
                  targets2.push(svg.parentElement.children[1]);
                }
              }

              setQueue(() => {
                for (let { name, process: { status, contract: { form: { date: { from, to } } } } } of projects) {
                  if (from.valueOf() <= to.valueOf()) {

                    tempStr = String(JSON.stringify(from));

                    start = new Date(JSON.stringify(from).slice(1, -1));
                    end = new Date(JSON.stringify(to).slice(1, -1));
                    end.setDate(end.getDate() + 1);
                    targets = [];
                    while (start.valueOf() < end.valueOf()) {
                      target = findByAttribute(dateDoms, [ "year", "month", "date" ], [ start.getFullYear(), start.getMonth() + 1, start.getDate() ]);
                      if (target !== null) {
                        targets.push(target);
                      }
                      start.setDate(start.getDate() + 1);
                    }

                    for (let dom of targets) {
                      if (dom.getAttribute("past") !== "true") {
                        dom.firstChild.style.background = colorChip.green;
                        if (dom.firstChild.hasAttribute("projects")) {
                          dom.firstChild.setAttribute("projects", String(Number(dom.firstChild.getAttribute("projects")) + 1));
                        } else {
                          dom.firstChild.setAttribute("projects", String(1));
                        }
                        if (dom.firstChild.hasAttribute("clients")) {
                          clientsArr = GeneralJs.equalJson(dom.firstChild.getAttribute("clients"));
                          clientsArr.push(`${name} (${status})`);
                          dom.firstChild.setAttribute("clients", JSON.stringify(clientsArr));
                        } else {
                          dom.firstChild.setAttribute("clients", JSON.stringify([ `${name} (${status})` ]));
                        }
                        dom.firstChild.style.background = colorChip.green;
                        dom.querySelector("aside").style.opacity = String(1);
                        if (desktop) {
                          dom.querySelector("aside").textContent = dom.firstChild.getAttribute("projects");
                        } else {
                          dom.querySelector("aside").parentElement.children[1].style.opacity = String(0);
                          dom.querySelector("aside").textContent = dom.firstChild.getAttribute("projects") + " Prj";
                        }
                        dom.firstChild.style.opacity = String(dateBoxOpacity * Number(dom.firstChild.getAttribute("projects")));
                      }
                    }

                  }
                }
                setQueue(() => {
                  for (let dom of targets2) {
                    dom.style.color = colorChip.darkGreen;
                    dom.querySelector('b').style.color = colorChip.darkGreen;
                  }
                }, 900);
              }, 301);

              this.lastChild.textContent = "on";
              this.firstChild.style.color = colorChip.green;
              this.lastChild.style.color = colorChip.green;
              this.setAttribute("toggle", "on");
              instance.possiblePannelStatus.project = true;

            } else {

              setQueue(() => {
                let targets2, dom;
                targets2 = [];
                for (let svg of allSvgs) {
                  dom = svg.parentElement;
                  dom.querySelector("aside").textContent = String(0);
                  dom.firstChild.style.opacity = String(dateBoxOpacity);
                  dom.firstChild.setAttribute("projects", String(0));
                  dom.firstChild.setAttribute("clients", JSON.stringify([]));
                  dom.children[1].style.opacity = String(1);
                  if (dom.getAttribute("toggle") === "on") {
                    dom.firstChild.style.background = colorChip.green;
                    if (svg.getAttribute("kind") === "ok") {
                      svg.style.opacity = String(1);
                    } else {
                      svg.style.opacity = String(0);
                    }
                    dom.children[1].style.color = colorChip.green;
                    dom.children[1].querySelector('b').style.color = colorChip.green;
                  } else {
                    dom.firstChild.style.background = colorChip.white;
                    if (svg.getAttribute("kind") === "ok") {
                      svg.style.opacity = String(0);
                    } else {
                      svg.style.opacity = String(1);
                    }
                  }
                  if ([ 0, 6 ].includes(Number(dom.getAttribute("index")))) {
                    targets2.push(dom.children[1]);
                  }
                }
                setQueue(() => {
                  for (let dom of targets2) {
                    dom.style.color = colorChip.red;
                    dom.querySelector('b').style.color = colorChip.red;
                  }
                }, 900);
              }, 301);

              for (let svg of allSvgs) {
                svg.setAttribute("mode", "possible");
                dom = svg.parentElement;
                dom.querySelector("aside").style.opacity = String(0);
              }

              this.lastChild.textContent = "off";
              this.firstChild.style.color = colorChip.black;
              this.lastChild.style.color = colorChip.red;
              this.setAttribute("toggle", "off");
              instance.possiblePannelStatus.project = false;

            }
          } catch (e) {
            console.log(e);
          }
        }
      },
      {
        name: "가능수 보기",
        attribute: {
          toggle: this.possiblePannelStatus.numbers ? "on" : "off"
        },
        event: async function (e) {
          const toggle = this.getAttribute("toggle");
          const dateDoms = instance.dateDoms;
          try {
            let target, targets, targets2;
            let tempStr, dom;
            if (toggle === "off") {

              if (instance.possiblePannelStatus.project) {
                if (instance.possiblePannelStatus.doms.length === 2) {
                  instance.possiblePannelStatus.doms[0].click();
                  await sleep(1500);
                }
              }

              targets2 = [];
              for (let svg of allSvgs) {
                svg.style.opacity = String(0);
                svg.parentElement.children[0].style.background = colorChip.white;
                svg.parentElement.children[1].style.color = colorChip.black;
                svg.parentElement.children[1].querySelector('b').style.color = colorChip.black;
                svg.setAttribute("mode", "numbers");
                if ([ 0, 6 ].includes(Number(svg.parentElement.getAttribute("index")))) {
                  targets2.push(svg.parentElement.children[1]);
                }
              }

              setQueue(() => {
                targets = [];
                for (let dom of dateDoms) {
                  if (equalJson(dom.getAttribute("matrix")).length > 0) {
                    targets.push(dom);
                  }
                }

                for (let dom of targets) {
                  if (dom.getAttribute("past") !== "true") {
                    dom.firstChild.style.background = colorChip.green;
                    dom.querySelector("aside").style.opacity = String(1);
                    if (mobile) {
                      dom.querySelector("aside").parentElement.children[1].style.opacity = String(0);
                    }
                    dom.querySelector("aside").textContent = equalJson(dom.getAttribute("matrix")).reduce((acc, current) => { return (acc >= current ? acc : current); });
                  }
                }
                setQueue(() => {
                  for (let dom of targets2) {
                    dom.style.color = colorChip.darkGreen;
                    dom.querySelector('b').style.color = colorChip.darkGreen;
                  }
                }, 900);
              }, 301);

              this.lastChild.textContent = "on";
              this.firstChild.style.color = colorChip.green;
              this.lastChild.style.color = colorChip.green;
              this.setAttribute("toggle", "on");
              instance.possiblePannelStatus.numbers = true;

            } else {

              setQueue(() => {
                let targets2, dom;
                targets2 = [];
                for (let svg of allSvgs) {
                  dom = svg.parentElement;
                  dom.querySelector("aside").textContent = String(0);
                  dom.firstChild.style.opacity = String(dateBoxOpacity);
                  dom.children[1].style.opacity = String(1);
                  if (dom.getAttribute("toggle") === "on") {
                    dom.firstChild.style.background = colorChip.green;
                    if (svg.getAttribute("kind") === "ok") {
                      svg.style.opacity = String(1);
                    } else {
                      svg.style.opacity = String(0);
                    }
                    dom.children[1].style.color = colorChip.green;
                    dom.children[1].querySelector('b').style.color = colorChip.green;
                  } else {
                    dom.firstChild.style.background = colorChip.white;
                    if (svg.getAttribute("kind") === "ok") {
                      svg.style.opacity = String(0);
                    } else {
                      svg.style.opacity = String(1);
                    }
                  }
                  if ([ 0, 6 ].includes(Number(dom.getAttribute("index")))) {
                    targets2.push(dom.children[1]);
                  }
                }
                setQueue(() => {
                  for (let dom of targets2) {
                    dom.style.color = colorChip.red;
                    dom.querySelector('b').style.color = colorChip.red;
                  }
                }, 900);
              }, 301);

              for (let svg of allSvgs) {
                svg.setAttribute("mode", "possible");
                dom = svg.parentElement;
                dom.querySelector("aside").style.opacity = String(0);
              }

              this.lastChild.textContent = "off";
              this.firstChild.style.color = colorChip.black;
              this.lastChild.style.color = colorChip.red;
              this.setAttribute("toggle", "off");
              instance.possiblePannelStatus.numbers = false;

            }
          } catch (e) {
            console.log(e);
          }
        }
      }
    ];

    dateMatrix = getDateMatrix(now.getFullYear(), now.getMonth());

    map = [];
    for (let i = 0; i < futureLength; i++) {
      tempObj = {};
      tempObj.year = dateMatrix.getYearString();
      tempObj.month = dateMatrix.getMonthString();
      tempObj.matrix = dateMatrix.returnSundayMatrix();
      tempObj.doing = 0;
      tempObj.standing = 0;
      for (let project of projects) {
        from = new Date(JSON.stringify(project.process.contract.form.date.from).slice(1, -1));
        to = new Date(JSON.stringify(project.process.contract.form.date.to).slice(1, -1));
        doingBooArr = [];
        while (from.valueOf() <= to.valueOf()) {
          doingBooArr.push(from.getFullYear() === dateMatrix.year && from.getMonth() === dateMatrix.month);
          from.setDate(from.getDate() + 1);
        }
        if (doingBooArr.some((i) => { return i; })) {
          if (project.process.status === "대기") {
            tempObj.standing = tempObj.standing + 1;
          } else {
            tempObj.doing = tempObj.doing + 1;
          }
        }
      }
      map.push(tempObj);
      dateMatrix = dateMatrix.nextMatrix();
    }

    mother.style.paddingTop = String(motherPaddingTop) + ea;

    this.dateDoms = [];
    this.titleFields = [];
    weekBlocks = [];
    num = 0;
    for (let { year, month, matrix, doing, standing } of map) {
      block = createNode({
        mother,
        style: {
          position: "relative",
          display: "block",
          verticalAlign: "top",
          paddingBottom: String(blockMarginBottom) + ea,
          paddingTop: String(desktop ? daydayMargin : blockPaddingTop) + ea,
        }
      });
      if (num === 0) {
        firstMother = block;
        daydayField = createNode({
          mother: block,
          style: {
            position: "fixed",
            width: withOut(grayBarWidth + (outerMargin * 4) + (daydayIndent * 2) + (desktop ? 0 : mobileOuterMargin * 2), ea),
            height: String(daydayBlockHeight) + ea,
            background: colorChip.white,
            top: String(daydayFieldTop + (desktop ? 0 : mobileOuterMargin)) + ea,
            left: String(grayBarWidth + (outerMargin * 2) + daydayVisualLeft + daydayIndent + (desktop ? 0 : mobileOuterMargin)) + ea,
            boxSizing: "border-box",
            zIndex: String(1),
            borderRadius: String(50) + ea,
            boxShadow: desktop ? "0px 3px 14px -9px " + colorChip.shadow : "0px 2px 14px -9px " + colorChip.shadow,
            opacity: String(0.95),
          }
        });
        this.fixTargets.push(daydayField);
        for (let i = 0; i < daydayLength; i++) {
          createNode({
            mother: daydayField,
            style: {
              display: "inline-block",
              width: (i !== 0 && i !== 6 ? "calc(calc(100% + " + String(daydayIndent * 2) + ea + ") / 7)" : "calc(calc(calc(100% + " + String(daydayIndent * 2) + ea + ") / 7) - " + String(daydayIndent) + ea + ")"),
              height: String(100) + '%',
              position: "relative",
            },
            children: [
              {
                style: {
                  position: "absolute",
                  width: String(100) + '%',
                  top: String(daydayBarTop) + ea,
                  height: withOut(daydayBarTop + daydayBarBottom, ea),
                  borderRight: (i !== 6 ? "1px solid " + colorChip.gray3 : ""),
                }
              },
              {
                text: daydayWords[i],
                style: {
                  position: "absolute",
                  top: String(daydayTextTop) + ea,
                  width: String(100) + '%',
                  textAlign: "center",
                  fontSize: String(daydaySize) + ea,
                  fontWeight: String(600),
                  color: colorChip[(i === 0 || i === 6 ? "red" : "black")],
                }
              }
            ]
          });
        }
        pannelDoms = [];
        if (desktop) {
          functionPannel = createNode({
            mother: block,
            style: {
              position: "fixed",
              bottom: String(belowHeight + functionPannelBottom) + ea,
              right: String((outerMargin * 2) + functionPannelRight) + ea,
              width: String(functionPannelWidth) + ea,
              height: "auto",
              background: colorChip.white,
              zIndex: String(1),
              borderRadius: String(5) + ea,
              boxShadow: "0px 3px 14px -9px " + colorChip.shadow,
              opacity: String(0.95),
              paddingTop: String(functionPannelPaddingTop) + ea,
              paddingBottom: String(functionPannelPaddingBottom) + ea,
            }
          });
          this.possiblePannelStatus.doms = [];
          for (let { name, attribute, event } of functionPannelContents) {
            pannelDom = createNode({
              mother: functionPannel,
              class: [ "hoverDefault_lite" ],
              attribute,
              events: [
                {
                  type: "click",
                  event,
                }
              ],
              style: {
                position: "relative",
                display: "block",
                width: String(100) + '%',
                height: String(functionPannelBlockHeight) + ea,
              },
              children: [
                {
                  text: name,
                  style: {
                    position: "absolute",
                    fontSize: String(functionPannelSize) + ea,
                    fontWeight: String(600),
                    color: attribute.toggle === "off" ? colorChip.black : colorChip.green,
                    left: String(functionPannelLeft) + ea,
                    top: String(functionPannelTextTop0) + ea,
                  }
                },
                {
                  text: attribute.toggle,
                  style: {
                    position: "absolute",
                    fontSize: String(functionPannelSize) + ea,
                    fontWeight: String(300),
                    fontFamily: "graphik",
                    color: attribute.toggle === "off" ? colorChip.red : colorChip.green,
                    right: String(functionPannelLeft) + ea,
                    top: String(functionPannelTextTop1) + ea,
                  }
                }
              ]
            });
            pannelDoms.push(pannelDom);
            this.possiblePannelStatus.doms.push(pannelDom);
          }
        }
      }

      titleField = createNode({
        mother: block,
        class: [
          titleGeneralName,
          [ titleClassName, year.replace(/[^0-9]/g, ''), month.replace(/[^0-9]/g, '') ].join(joinToken)
        ],
        attribute: [
          { year: year.replace(/[^0-9]/g, '') },
          { month: month.replace(/[^0-9]/g, '') },
        ],
        style: {
          position: "relative",
          display: "block",
          width: desktop ? String(100) + '%' : withOut(outerMargin * 4, ea),
          marginLeft: desktop ? "" : String(outerMargin * 2) + ea,
          marginBottom: String(titleMobileMarginBottom) + ea,
          height: String(100) + '%',
          verticalAlign: "top"
        },
        children: [
          {
            attribute: [
              { year: year.replace(/[^0-9]/g, '') },
              { month: month.replace(/[^0-9]/g, '') },
            ],
            text: `${year} ${month}<u%진행중 ${doing}${between}대기 ${standing}%u>`,
            events: [
              {
                type: "selectstart",
                event: (e) => { e.preventDefault(); }
              },
            ],
            style: {
              position: "relative",
              left: String(titleMobileIndent) + ea,
              fontSize: String(monthSize) + ea,
              fontWeight: String(500),
              color: colorChip.black,
              lineHeight: String(titleLineHeight),
              cursor: "pointer",
            },
            bold: {
              fontSize: String(monthSize - sizeVisual) + ea,
              fontWeight: String(200),
              color: colorChip.deactive,
              lineHeight: String(titleLineHeight),
            },
            under: {
              position: "absolute",
              top: String(sizeVisual + (desktop ? 3 : 0)) + ea,
              right: String(titleMobileIndent) + ea,
              fontSize: String(monthSize - sizeVisual) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              lineHeight: String(titleLineHeight),
            }
          }
        ]
      });
      matrixField = createNode({
        mother: block,
        style: {
          position: "relative",
          display: "block",
          verticalAlign: "top",
          width: desktop ? withOut(0, ea) : withOut(outerMargin * 4, ea),
          marginLeft: desktop ? "" : String(outerMargin * 2) + ea,
          height: String(100) + '%',
        }
      });
      if (num === 0) {
        firstBlock = matrixField;
      }

      for (let i = 0; i < matrix.length; i++) {
        weekBlock = createNode({
          mother: matrixField,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            height: "auto",
            boxSizing: "border-box",
            borderRadius: String(5) + "px",
            transition: "all 0.1s ease",
          }
        });
        for (let j = 0; j < daydayLength; j++) {
          if (matrix[i][j] !== null) {
            pastBoo = nowValue >= (new Date(Number(year.replace(/[^0-9]/gi, '')), Number(month.replace(/[^0-9]/gi, '')) - 1, matrix[i][j].date)).valueOf();
          }
          dateBox = createNode({
            mother: weekBlock,
            class: [ (matrix[i][j] !== null ? generalDateClassName : nullClassName) ],
            attribute: [
              { toggle: "off" },
              { year: year.replace(/[^0-9]/gi, '') },
              { month: month.replace(/[^0-9]/gi, '') },
              { date: (matrix[i][j] !== null ? String(matrix[i][j].date) : "0") },
              { value: (matrix[i][j] !== null ? JSON.stringify(new Date(Number(year.replace(/[^0-9]/gi, '')), Number(month.replace(/[^0-9]/gi, '')) - 1, matrix[i][j].date)).slice(1, -1) : "null") },
              { past: pastBoo ? "true" : "false" },
              { index: String(j) },
              { matrix: JSON.stringify([]) },
            ],
            events: [
              {
                type: "selectstart",
                event: (e) => { e.preventDefault(); }
              },
              {
                type: "click",
                event: async function (e) {
                  e.stopPropagation();
                  const self = this;
                  try {
                    const pastBoo = (this.getAttribute("past") === "true" || this.getAttribute("value") === "null");
                    if (!pastBoo) {
                      const toggle = this.getAttribute("toggle");
                      const thisDate = new Date(this.getAttribute("value"));
                      const thisOk = this.querySelector('.' + okClassName);
                      const thisCancel = this.querySelector('.' + cancelClassName);
                      const thisWords = this.querySelector('.' + numberClassName);
                      const thisMonth = this.querySelector('.' + numberClassName).querySelector('b');
                      const thisBack = this.querySelector('.' + backClassName);
                      const mode = thisOk.getAttribute("mode");
                      const defaultCount = 2;
                      let index, first, last;
                      let clients, clientTong, clientDom, widthArr;
                      let matrix, countMatrix;
                      if (mode === "possible" || mode === "numbers") {
                        if (toggle === "off") {
                          index = instance.dateDoms.findIndex((d) => { return d === self; });
                          thisBack.style.background = colorChip.green;
                          if (mode === "possible") {
                            thisWords.style.color = colorChip.green;
                            thisMonth.style.color = colorChip.green;
                            thisOk.style.opacity = String(1);
                            thisCancel.style.opacity = String(0);
                          } else {
                            this.querySelector("aside").style.opacity = String(1);
                            if (mobile) {
                              this.querySelector("aside").parentElement.children[1].style.opacity = String(0);
                            }
                            if (equalJson(this.getAttribute("matrix")).length === 0) {
                              this.querySelector("aside").textContent = String(0);
                            } else {
                              this.querySelector("aside").textContent = equalJson(this.getAttribute("matrix")).reduce((acc, current) => { return (acc >= current ? acc : current); });
                            }
                          }

                          if (instance.selection.length === 0) {
                            instance.selection.push(index);
                            this.setAttribute("toggle", "on");
                          } else {
                            matrix = designer.analytics.project.matrix.map((arr) => { return arr.some((i) => { return i === 1; }) ? 1 : 0 });
                            try {
                              countMatrix = (new Array(matrix.length)).fill(0, 0);
                              if (matrix[1] === 1) {
                                for (let i = 1; i < matrix.length - 1; i++) {
                                  if (matrix[i] === 0) {
                                    countMatrix[i] = 0;
                                  } else {
                                    countMatrix[i] = defaultCount;
                                  }
                                }
                                if (matrix[0] === 0) {
                                  countMatrix[0] = 0;
                                } else {
                                  countMatrix[0] = countMatrix[1];
                                }
                              } else {
                                for (let i = 0; i < matrix.length - 1; i++) {
                                  if (matrix[i] === 0) {
                                    countMatrix[i] = 0;
                                  } else {
                                    countMatrix[i] = defaultCount;
                                  }
                                }
                              }
                              if (countMatrix[2] >= 1 && matrix[3] === 1) {
                                countMatrix[3] = 1;
                              }

                              if (index < instance.selection[0]) {
                                first = index;
                                last = instance.selection[0];
                              } else {
                                last = index;
                                first = instance.selection[0];
                              }
                              for (let i = first; i < last + 1; i++) {
                                if (mode === "possible") {
                                  instance.dateDoms[i].querySelector('.' + okClassName).style.opacity = String(1);
                                  instance.dateDoms[i].querySelector('.' + cancelClassName).style.opacity = String(0);
                                  instance.dateDoms[i].querySelector('.' + numberClassName).style.color = colorChip.green;
                                  instance.dateDoms[i].querySelector('.' + numberClassName).querySelector('b').style.color = colorChip.green;
                                } else {
                                  instance.dateDoms[i].querySelector("aside").style.opacity = String(1);
                                  if (mobile) {
                                    instance.dateDoms[i].querySelector("aside").parentElement.children[1].style.opacity = String(0);
                                  }
                                  instance.dateDoms[i].querySelector("aside").textContent = countMatrix.reduce((acc, current) => { return (acc >= current ? acc : current); });
                                }
                                instance.dateDoms[i].querySelector('.' + backClassName).style.background = colorChip.green;
                                instance.dateDoms[i].setAttribute("toggle", "on");
                                instance.dateDoms[i].setAttribute("matrix", JSON.stringify(countMatrix));
                              }
                            } catch (e) {
                              for (let i of [ instance.selection[0], index ]) {
                                if (mode === "possible") {
                                  instance.dateDoms[i].querySelector('.' + okClassName).style.opacity = String(0);
                                  instance.dateDoms[i].querySelector('.' + cancelClassName).style.opacity = String(1);
                                  instance.dateDoms[i].querySelector('.' + numberClassName).style.color = colorChip.black;
                                  instance.dateDoms[i].querySelector('.' + numberClassName).querySelector('b').style.color = colorChip.black;
                                } else {
                                  instance.dateDoms[i].querySelector("aside").style.opacity = String(0);
                                  if (mobile) {
                                    instance.dateDoms[i].querySelector("aside").parentElement.children[1].style.opacity = String(1);
                                  }
                                  instance.dateDoms[i].querySelector("aside").textContent = String(0);
                                }
                                instance.dateDoms[i].querySelector('.' + backClassName).style.background = "transparent";
                                instance.dateDoms[i].setAttribute("toggle", "off");
                                instance.dateDoms[i].setAttribute("matrix", JSON.stringify([]));
                              }
                              instance.selection = [];
                            }
                            instance.selection = [];
                          }
                        } else {
                          if (mode === "possible") {
                            thisWords.style.color = colorChip.black;
                            thisMonth.style.color = colorChip.black;
                            thisBack.style.background = "transparent";
                            thisOk.style.opacity = String(0);
                            thisCancel.style.opacity = String(1);
                            this.querySelector("aside").style.opacity = String(0);
                            if (mobile) {
                              this.querySelector("aside").parentElement.children[1].style.opacity = String(1);
                            }
                            this.querySelector("aside").textContent = String(0);
                            this.setAttribute("toggle", "off");
                            this.setAttribute("matrix", JSON.stringify([]));
                          } else {

                            index = instance.dateDoms.findIndex((d) => { return d === self; });
                            first = index;
                            last = index;

                            while (instance.dateDoms[last].getAttribute("toggle") === "on" && instance.dateDoms[index].getAttribute("month") === instance.dateDoms[last].getAttribute("month")) {
                              last = last + 1;
                            }
                            last = last - 1;

                            while (instance.dateDoms[first].getAttribute("toggle") === "on" && instance.dateDoms[index].getAttribute("month") === instance.dateDoms[first].getAttribute("month")) {
                              first = first - 1;
                            }
                            first = first + 1;

                            instance.arrowDomTargets = [];
                            for (let i = first; i < last + 1; i++) {
                              instance.dateDoms[i].firstChild.style.background = colorChip.yellow;
                              instance.dateDoms[i].firstChild.style.opacity = String(0.16);
                              instance.arrowDomTargets.push(instance.dateDoms[i]);
                            }

                            instance.arrowDomMode = true;
                            createNode({
                              mother: document.getElementById("totalcontents"),
                              event: {
                                click: (e) => {
                                  document.getElementById("totalcontents").removeChild(document.getElementById("totalcontents").lastChild);
                                  for (let dom of instance.arrowDomTargets) {
                                    if (equalJson(dom.getAttribute("matrix")).reduce((acc, current) => { return acc + current }) === 0) {
                                      dom.firstChild.style.background = "transparent";
                                      dom.querySelector("aside").style.opacity = String(0);
                                      dom.setAttribute("toggle", "off");
                                      dom.setAttribute("matrix", "[]");
                                    } else {
                                      dom.firstChild.style.background = colorChip.green;
                                    }
                                    dom.firstChild.style.opacity = String(0.08);
                                  }
                                  instance.arrowDomMode = false;
                                  instance.arrowDomTargets = [];
                                }
                              },
                              style: {
                                position: "fixed",
                                top: String(0),
                                left: String(0),
                                width: String(100) + '%',
                                height: String(100) + '%',
                                background: "transparent",
                                zIndex: String(4),
                              }
                            });

                          }
                        }
                        await instance.possibleUpdate(desid);
                      } else if (mode === "projects") {
                        if (this.firstChild.getAttribute("clients") !== null) {
                          clients = GeneralJs.equalJson(this.firstChild.getAttribute("clients"));
                          if (clients.length > 0) {
                            createNode({
                              mother: this,
                              events: [
                                {
                                  type: [ "click", "contextmenu" ],
                                  event: function (e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    self.removeChild(self.lastChild);
                                    self.removeChild(self.lastChild);
                                  }
                                }
                              ],
                              style: {
                                position: "fixed",
                                top: String(0),
                                left: String(0),
                                width: String(100) + '%',
                                height: String(100) + '%',
                                background: "transparent",
                                zIndex: String(2),
                              }
                            });

                            clientTong = createNode({
                              mother: this,
                              events: [
                                {
                                  type: [ "click", "contextmenu" ],
                                  event: function (e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                  }
                                }
                              ],
                              style: {
                                position: "absolute",
                                bottom: String(weekBlockHeight + clientPopupTopMargin) + ea,
                                left: String(0) + ea,
                                width: String(600) + ea,
                                borderRadius: String(5) + "px",
                                background: colorChip.gradientGreen,
                                zIndex: String(2),
                                paddingTop: String(clientPopupWordPaddingTop) + ea,
                                paddingBottom: String(clientPopupWordPaddingBottom) + ea,
                                animation: "fadeuplite 0.2s ease forwards",
                                transition: "all 0s ease",
                              }
                            });

                            widthArr = [];
                            for (let client of clients) {
                              clientDom = createNode({
                                mother: clientTong,
                                text: client,
                                style: {
                                  display: "inline-block",
                                  position: "relative",
                                  fontSize: String(clientPopupWordSize) + ea,
                                  fontWeight: String(500),
                                  color: colorChip.whiteBlack,
                                  paddingLeft: String(clientPopupWordPadding) + ea,
                                  paddingRight: String(clientPopupWordPadding) + ea,
                                  paddingTop: String(clientPopupWordPaddingHeightPadding) + ea,
                                  paddingBottom: String(clientPopupWordPaddingHeightPadding) + ea,
                                }
                              });
                              widthArr.push(clientDom.getBoundingClientRect().width);
                            }

                            widthArr.sort((a, b) => { return b - a; });

                            clientTong.style.width = String(widthArr[0]) + ea;
                            clientTong.style.left = withOut(50, widthArr[0] / 2, ea);
                          }
                        }
                      }
                    }
                  } catch (e) {
                    console.log(e);
                  }
                }
              },
              {
                type: "contextmenu",
                event: async function (e) {
                  e.stopPropagation();
                  e.preventDefault();
                  const self = this;
                  try {
                    const pastBoo = (this.getAttribute("past") === "true" || this.getAttribute("value") === "null");
                    if (!pastBoo) {
                      if (window.confirm("전체 일정이 삭제됩니다. 확실한가요?")) {
                        const toggle = this.getAttribute("toggle");
                        const thisDate = new Date(this.getAttribute("value"));
                        const thisOk = this.querySelector('.' + okClassName);
                        const thisCancel = this.querySelector('.' + cancelClassName);
                        const thisWords = this.querySelector('.' + numberClassName);
                        const thisMonth = this.querySelector('.' + numberClassName).querySelector('b');
                        const thisBack = this.querySelector('.' + backClassName);
                        const mode = thisOk.getAttribute("mode");
                        let index, first, last;
                        let num;
                        let clients, clientTong, clientDom, widthArr;
                        if (mode === "possible" || mode === "numbers") {
                          index = instance.dateDoms.findIndex((d) => { return d === self; });
                          if (toggle === "on") {
                            num = 1;
                            last = index;
                            while (instance.dateDoms[index + num].getAttribute("toggle") === "on") {
                              last = index + num;
                              num++;
                            }
                            num = 1;
                            first = index;
                            while (instance.dateDoms[index - num].getAttribute("toggle") === "on") {
                              first = index - num;
                              num++;
                            }
                          } else {
                            first = index;
                            last = index;
                          }
                          for (let i = first; i < last + 1; i++) {
                            if (mode === "possible") {
                              instance.dateDoms[i].querySelector('.' + okClassName).style.opacity = String(0);
                              instance.dateDoms[i].querySelector('.' + cancelClassName).style.opacity = String(1);
                            } else {
                              instance.dateDoms[i].querySelector("aside").style.opacity = String(0);
                              if (mobile) {
                                instance.dateDoms[i].querySelector("aside").parentElement.children[1].style.opacity = String(1);
                              }
                              instance.dateDoms[i].querySelector("aside").textContent = String(0);
                            }
                            instance.dateDoms[i].querySelector('.' + numberClassName).style.color = colorChip.black;
                            instance.dateDoms[i].querySelector('.' + numberClassName).querySelector('b').style.color = colorChip.black;
                            instance.dateDoms[i].querySelector('.' + backClassName).style.background = "transparent";
                            instance.dateDoms[i].setAttribute("toggle", "off");
                            instance.dateDoms[i].setAttribute("matrix", JSON.stringify([]));
                          }
                          await instance.possibleUpdate(desid);
                        } else if (mode === "projects") {
                          if (this.firstChild.getAttribute("clients") !== null) {
                            clients = GeneralJs.equalJson(this.firstChild.getAttribute("clients"));
                            if (clients.length > 0) {
                              createNode({
                                mother: this,
                                events: [
                                  {
                                    type: [ "click", "contextmenu" ],
                                    event: function (e) {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      self.removeChild(self.lastChild);
                                      self.removeChild(self.lastChild);
                                    }
                                  }
                                ],
                                style: {
                                  position: "fixed",
                                  top: String(0),
                                  left: String(0),
                                  width: String(100) + '%',
                                  height: String(100) + '%',
                                  background: "transparent",
                                  zIndex: String(2),
                                }
                              });

                              clientTong = createNode({
                                mother: this,
                                events: [
                                  {
                                    type: [ "click", "contextmenu" ],
                                    event: function (e) {
                                      e.preventDefault();
                                      e.stopPropagation();
                                    }
                                  }
                                ],
                                style: {
                                  position: "absolute",
                                  bottom: String(weekBlockHeight + clientPopupTopMargin) + ea,
                                  left: String(0) + ea,
                                  width: String(600) + ea,
                                  borderRadius: String(5) + "px",
                                  background: colorChip.gradientGreen,
                                  zIndex: String(2),
                                  paddingTop: String(clientPopupWordPaddingTop) + ea,
                                  paddingBottom: String(clientPopupWordPaddingBottom) + ea,
                                  animation: "fadeuplite 0.2s ease forwards",
                                  transition: "all 0s ease",
                                }
                              });

                              widthArr = [];
                              for (let client of clients) {
                                clientDom = createNode({
                                  mother: clientTong,
                                  text: client,
                                  style: {
                                    display: "inline-block",
                                    position: "relative",
                                    fontSize: String(clientPopupWordSize) + ea,
                                    fontWeight: String(500),
                                    color: colorChip.whiteBlack,
                                    paddingLeft: String(clientPopupWordPadding) + ea,
                                    paddingRight: String(clientPopupWordPadding) + ea,
                                    paddingTop: String(clientPopupWordPaddingHeightPadding) + ea,
                                    paddingBottom: String(clientPopupWordPaddingHeightPadding) + ea,
                                  }
                                });
                                widthArr.push(clientDom.getBoundingClientRect().width);
                              }

                              widthArr.sort((a, b) => { return b - a; });

                              clientTong.style.width = String(widthArr[0]) + ea;
                              clientTong.style.left = withOut(50, widthArr[0] / 2, ea);
                            }
                          }
                        }
                      }
                    }
                  } catch (e) {
                    console.log(e);
                  }
                }
              },
            ],
            style: {
              position: "relative",
              display: "inline-block",
              width: "calc(100% / 7)",
              height: String(weekBlockHeight) + ea,
              boxSizing: "border-box",
              borderTop: "1px solid " + colorChip.gray3,
              borderLeft: "1px solid " + colorChip.gray3,
              borderRight: (j !== daydayLength - 1 ? "" : "1px solid " + colorChip.gray3),
              borderBottom: (i !== matrix.length - 1 ? "" : "1px solid " + colorChip.gray3),
              borderRadius: String(5) + "px",
              background: (matrix[i][j] === null ? colorChip.gray0 : (pastBoo ? colorChip.gray0 : colorChip.white)),
              transition: "all 0.1s ease",
              cursor: "pointer",
            }
          });
          if (matrix[i][j] !== null) {
            createNode({
              mother: dateBox,
              class: [ backClassName ],
              attribute: [
                { projects: String(0) }
              ],
              style: {
                position: "absolute",
                top: String(0) + ea,
                left: String(0) + ea,
                width: String(100) + '%',
                height: String(100) + '%',
                background: "transparent",
                borderRadius: String(5) + "px",
                transition: "all 0s ease",
                opacity: String(dateBoxOpacity),
              }
            });
            createNode({
              mother: dateBox,
              class: [ numberClassName ],
              text: String("<b%" + month.replace(/[^0-9]/gi, '') + "%b><u% / %u>" + matrix[i][j].date),
              style: {
                position: "absolute",
                fontFamily: "graphik",
                fontSize: String(dateNumberSize) + ea,
                fontWeight: String(matrix[i][j].date === 1 ? 400 : 300),
                color: (pastBoo ? colorChip.deactive : ((j === 0 || j === 6) ? colorChip.red : colorChip.black)),
                top: String(dateNumberTop) + ea,
                left: String(dateNumberLeft) + ea,
                width: desktop ? String(dateNumberWidth) + ea : String(100) + '%',
                textAlign: desktop ? "" : "center",
              },
              bold: {
                fontSize: String(dateNumberSize) + ea,
                fontFamily: "graphik",
                fontWeight: String(matrix[i][j].date === 1 ? 400 : 300),
                color: (pastBoo ? colorChip.deactive : ((j === 0 || j === 6) ? colorChip.red : colorChip.black)),
              },
              under: {
                fontFamily: "graphik",
                fontSize: String(dateNumberSize) + ea,
                fontWeight: String(300),
                color: colorChip.gray4,
              }
            });
            tempSvg = createNode({
              mother: dateBox,
              attribute: [
                { kind: "ok" },
                { mode: "possible" }
              ],
              class: [ okClassName ],
              mode: "svg",
              source: instance.mother.returnCheckCircle(pastBoo ? colorChip.deactive : colorChip.green),
              style: {
                display: desktop ? "block" : "none",
                position: "absolute",
                top: String(dateIconTop) + ea,
                right: String(dateIconRight) + ea,
                width: String(dateIconWidth) + ea,
                opacity: String(pastBoo ? 1 : 0),
              }
            });
            if (!pastBoo) {
              allSvgs.push(tempSvg);
            }
            tempSvg = createNode({
              mother: dateBox,
              attribute: [
                { kind: "cancel" },
              ],
              class: [ cancelClassName ],
              mode: "svg",
              source: instance.mother.returnCancelCircle(pastBoo ? colorChip.deactive : colorChip.red),
              style: {
                display: desktop ? "block" : "none",
                position: "absolute",
                top: String(dateIconTop) + ea,
                right: String(dateIconRight) + ea,
                width: String(dateIconWidth) + ea,
                opacity: String(pastBoo ? 0 : 1),
              }
            });
            if (!pastBoo) {
              allSvgs.push(tempSvg);
              createNode({
                mode: "aside",
                mother: dateBox,
                text: String(0),
                style: {
                  position: "absolute",
                  fontSize: String(dateNumberSize) + ea,
                  fontWeight: String(300),
                  fontFamily: "graphik",
                  top: String(dateNumberTop) + ea,
                  right: desktop ? String(dateNumberLeft) + ea : "",
                  left: desktop ? "" : String(0) + ea,
                  width: desktop ? "" : String(100) + '%',
                  textAlign: desktop ? "right" : "center",
                  opacity: String(0),
                  color: colorChip.darkGreen
                }
              });
            }

            this.dateDoms.push(dateBox);
          }
        }
        weekBlocks.push(weekBlock);
      }

      if (num !== map.length - 1) {
        createNode({
          mother: block,
          style: {
            position: "absolute",
            bottom: String(desktop ? blockMarginBottom / 2 : blockBarBottom) + ea,
            left: String(titleWidth) + ea,
            width: withOut(titleWidth, ea),
            height: String(0),
            borderBottom: (mobile ? "1px dashed " + colorChip.gray3 : ""),
          }
        });
      }

      this.titleFields.push(titleField);
      num++;
    }

    projectPannel = createNode({
      mother,
      attribute: { toggle: "off" },
      style: { display: "none" },
      children: [ { style: { display: "none" } } ],
    });
    swipePatch({
      left: (e) => {
        functionPannelContents.find((obj) => { return /가능수 보기/gi.test(obj.name); }).event.call(projectPannel, {});
      },
      right: (e) => {
        functionPannelContents.find((obj) => { return /프로젝트 보기/gi.test(obj.name); }).event.call(projectPannel, {});
      },
    });
    this.possibleReload("possible");

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.possibleIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  if (!this.middleMode) {

    listIcon.addEventListener("click", function (e) {
      blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=calendar");
    });

    previousIcon.addEventListener("click", function (e) {
      let previousDesid, boo, thisStandard;
      previousDesid = desid;
      do {
        previousDesid = instance.designers.previous(previousDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === previousDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.possibleDetailLaunching(previousDesid);
    });

    nextIcon.addEventListener("click", function (e) {
      let nextDesid, boo, thisStandard;
      nextDesid = desid;
      do {
        nextDesid = instance.designers.next(nextDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === nextDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.possibleDetailLaunching(nextDesid);
    });

  } else {

    if (desktop) {

      listIcon.addEventListener("click", function (e) {
        const totalContents = document.getElementById("totalcontents");
        const totalMother = document.querySelector(".totalMother");
        const grayBack = totalContents.children[0];
        const listPannel = totalMother.children[0].children[0];
        const iconSetPannel = instance.iconTong;
        const mainBaseTong = instance.mainBaseTong;
        const outerMargin = Number(mainBaseTong.style.top.replace(/[^0-9\.\-]/gi, ''));
        const [ fixTarget ] = instance.fixTargets;

        if (grayBack.getAttribute("toggle") !== "off") {
          grayBack.style.width = String(0) + ea;
          listPannel.style.transform = "translateX(" + String((instance.grayBarWidth + instance.tabletWidth) * -1) + ea + ")";
          iconSetPannel.style.background = "transparent";
          mainBaseTong.style.left = String(outerMargin) + ea;
          mainBaseTong.style.width = withOut(outerMargin * 2, ea);
          grayBack.setAttribute("toggle", "off");
          instance.listIcon.style.left = String(left2) + ea;

          fixTarget.style.left = String(Number(fixTarget.style.left.replace(/[^0-9\.\-]/gi, '')) - instance.grayBarWidth) + ea;
          fixTarget.style.width = "calc(100% - " + String(Number(fixTarget.style.width.split('-')[1].replace(/[^0-9\.\-]/gi, '')) - instance.grayBarWidth) + ea + ")";
        } else {
          grayBack.style.width = String(instance.grayBarWidth) + ea;
          listPannel.style.transform = "translateX(" + String(0) + ea + ")";
          iconSetPannel.style.background = colorChip.gray0;
          mainBaseTong.style.left = String(instance.grayBarWidth + outerMargin) + ea;
          mainBaseTong.style.width = withOut(instance.grayBarWidth + (outerMargin * 2), ea);
          grayBack.setAttribute("toggle", "on");
          instance.listIcon.style.left = String(left) + ea;

          fixTarget.style.left = String(Number(fixTarget.style.left.replace(/[^0-9\.\-]/gi, '')) + instance.grayBarWidth) + ea;
          fixTarget.style.width = "calc(100% - " + String(Number(fixTarget.style.width.split('-')[1].replace(/[^0-9\.\-]/gi, '')) + instance.grayBarWidth) + ea + ")";
        }

      });

    } else {

      listIcon.addEventListener("click", function (e) {
        let num = designer.information.did.replace(/[^0-9]/g, '');
        let id;
        id = '';
        for (let i = 0; i < 3 - num.length; i++) {
          id += '0';
        }
        id += num;
        blankHref(FRONTHOST + "/desdetail.php?desid=" + designer.desid);
      });

    }

    previousIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index - 1] === undefined ? targets[targets.length - 1] : targets[index - 1];
        target.click();
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index + 1] === undefined ? targets[0] : targets[index + 1];
        target.click();
      }
    });

  }

  rInitialIcon.addEventListener("click", function (e) {
    blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=calendar");
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
      GeneralJs.ajaxJson({
        method: "designerConsole",
        name: designer.designer,
        phone: designer.information.phone,
        option: {
          desid: designer.desid,
          designer: designer.designer,
          host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
          path: "possible",
        }
      }, "/alimTalk").then(() => {
        return GeneralJs.ajaxJson({
          page: "possible",
          mode: "send",
          who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
          desid: designer.desid,
        }, "/ghostDesigner_updateAnalytics");
      }).then(() => {
        instance.mother.greenAlert("알림톡이 전송되었습니다!");
      }).catch((err) => {
        console.log(err);
      });
    } else {
      instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
    }
  });

}

DesignerJs.prototype.possibleReload = function (type = "possible") {
  const instance = this;
  const { ea, possibleConst, possiblePannelStatus } = this;
  const { colorChip, dateToString, findByAttribute } = GeneralJs;
  const { futureLength, okClassName, cancelClassName, numberClassName, backClassName, nullClassName, generalDateClassName, weekClassName, weekGeneralClassName, titleClassName, titleGeneralName, joinToken, scrollEventName, scrollEventTimeout, dummyDatesClassName, daydayWords, daydayLength } = possibleConst;
  const redIndexTargets = [ 0, 6 ];
  const mobile = this.media[4];
  const desktop = !mobile;
  let targetDom;
  let dateLength;
  let tempDate;
  let onTargets;
  let year, month;
  let thisKey;
  let target;
  let mode;
  let pastBoo;

  if (!possiblePannelStatus.project && !possiblePannelStatus.numbers) {
    mode = "possible";
  } else if (possiblePannelStatus.numbers) {
    mode = "numbers";
  } else if (possiblePannelStatus.project) {
    mode = "project";
  }

  if (type === "possible") {
    onTargets = [];
    for (let { start, end, matrix } of this.realtimeDesigner.possible) {
      tempDate = new Date(JSON.stringify(start).slice(1, -1));
      dateLength = 1;
      while (dateToString(tempDate) !== dateToString(end)) {
        dateLength = dateLength + 1;
        tempDate.setDate(tempDate.getDate() + 1);
      }
      tempDate = new Date(JSON.stringify(start).slice(1, -1));
      for (let i = 0; i < dateLength; i++) {
        targetDom = findByAttribute(this.dateDoms, [ "year", "month", "date" ], [ tempDate.getFullYear(), tempDate.getMonth() + 1, tempDate.getDate() ]);
        if (targetDom !== null) {
          pastBoo = (targetDom.getAttribute("past") === "true" || targetDom.getAttribute("value") === "null");
          if (!pastBoo) {
            if (mode === "numbers") {
              targetDom.querySelector('.' + okClassName).style.opacity = String(0);
              targetDom.querySelector('.' + cancelClassName).style.opacity = String(0);
              targetDom.querySelector("aside").style.opacity = String(1);
              if (mobile) {
                targetDom.querySelector("aside").parentElement.children[1].style.opacity = String(0);
              }
              targetDom.querySelector("aside").textContent = matrix.reduce((acc, current) => { return (acc >= current ? acc : current); });
            } else {
              targetDom.querySelector('.' + numberClassName).style.color = colorChip.green;
              targetDom.querySelector('.' + numberClassName).querySelector('b').style.color = colorChip.green;
              targetDom.querySelector('.' + okClassName).style.opacity = String(1);
              targetDom.querySelector('.' + cancelClassName).style.opacity = String(0);
              targetDom.querySelector("aside").style.opacity = String(0);
            }
            if (instance.arrowDomTargets.includes(targetDom)) {
              targetDom.querySelector('.' + backClassName).style.background = colorChip.yellow;
            } else {
              targetDom.querySelector('.' + backClassName).style.background = colorChip.green;
            }
            targetDom.setAttribute("toggle", "on");
            targetDom.setAttribute("matrix", JSON.stringify(matrix));
            onTargets.push(targetDom);
          }
        }
        tempDate.setDate(tempDate.getDate() + 1);
      }
    }
    for (let dom of this.dateDoms) {
      if (!onTargets.includes(dom)) {
        pastBoo = (dom.getAttribute("past") === "true" || dom.getAttribute("value") === "null");
        if (!pastBoo) {
          if (mode === "numbers") {

            dom.querySelector('.' + okClassName).style.opacity = String(0);
            dom.querySelector('.' + cancelClassName).style.opacity = String(0);
            dom.querySelector("aside").style.opacity = String(0);
            if (mobile) {
              dom.querySelector("aside").parentElement.children[1].style.opacity = String(1);
            }
            dom.querySelector("aside").textContent = String(0);

          } else {

            dom.querySelector('.' + numberClassName).style.color = redIndexTargets.includes(Number(dom.getAttribute("index"))) ? colorChip.red : colorChip.black;
            dom.querySelector('.' + numberClassName).querySelector('b').style.color = redIndexTargets.includes(Number(dom.getAttribute("index"))) ? colorChip.red : colorChip.black;
            dom.querySelector('.' + okClassName).style.opacity = String(0);
            dom.querySelector('.' + cancelClassName).style.opacity = String(1);
            dom.querySelector("aside").style.opacity = String(0);

          }
          dom.querySelector('.' + backClassName).style.background = "transparent";
          dom.setAttribute("toggle", "off");
          dom.setAttribute("matrix", JSON.stringify([]));
        }
      }
    }
    this.possiblePannelStatus.project = false;
  }

}

DesignerJs.prototype.possibleSseParsing = function (orders) {
  const instance = this;
  const { ea } = this;
  const { colorChip, setDebounce } = GeneralJs;
  const sseDebounceConstPossible = "sseDebounceConstPossible";
  const sseDebounceConstCount = "sseDebounceConstCount";
  if (!Array.isArray(orders)) {
    throw new Error("invaild input");
  }
  if (orders.length > 0) {
    for (let obj of orders) {
      const { desid, type } = obj;
      if (instance.desid === desid) {
        if (type === "possible") {
          const { possible } = obj;
          setDebounce(() => {
            if (JSON.stringify(possible) !== JSON.stringify(instance.realtimeDesigner.possible)) {
              instance.realtimeDesigner.possible = possible;
              instance.possibleReload("possible");
            }
          }, sseDebounceConstPossible);
        }
      }
    }
  }
}

DesignerJs.prototype.possibleDetailSearchBox = function () {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, searchCondition } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  const className = "searchConditionBack";
  return function (e) {
    e.stopPropagation();
    e.preventDefault();
    if (document.querySelector('.' + className) === null) {
      let cancelBox, whiteBox, scrollBox, scrollBase;
      let margin, innerMargin;
      let paddingTop, paddingBottom;

      innerMargin = 48;
      margin = 100;
      paddingTop = 63;
      paddingBottom = 160;

      cancelBox = createNode({
        mother: totalMother,
        class: [ className ],
        style: {
          position: "fixed",
          top: String(0),
          left: String(grayBarWidth) + ea,
          width: withOut(grayBarWidth, ea),
          height: withOut(belowHeight, ea),
          background: colorChip.black,
          animation: "justfadein 0.3s ease forwards",
          zIndex: String(2),
          cursor: "pointer",
        },
        events: [
          {
            type: [ "click", "contextmenu" ],
            event: function (e) {
              e.preventDefault();
              e.stopPropagation();
              let loading;
              totalMother.removeChild(totalMother.lastChild);
              instance.mother.loadingRun().then((dom) => {
                loading = dom;
                return instance.possibleDetailSearchParsing();
              }).then(() => {
                loading.remove();
                totalMother.removeChild(totalMother.lastChild);
              }).catch((err) => {
                console.log(err);
              })
            }
          }
        ]
      });
      whiteBox = createNode({
        mother: totalMother,
        style: {
          position: "fixed",
          top: String(margin) + ea,
          left: String(grayBarWidth + margin) + ea,
          width: withOut(grayBarWidth + (margin * 2), ea),
          height: withOut(belowHeight + (margin * 2), ea),
          background: colorChip.white,
          borderRadius: String(5) + "px",
          boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
          animation: "fadeup 0.3s ease forwards",
          zIndex: String(2),
        }
      });
      scrollBox = createNode({
        mother: whiteBox,
        style: {
          position: "absolute",
          top: String(innerMargin) + ea,
          left: String(innerMargin) + ea,
          width: withOut(innerMargin * 2, ea),
          height: withOut(innerMargin, ea),
          overflow: "scroll",
        }
      });
      scrollBase = createNode({
        mother: scrollBox,
        style: {
          position: "relative",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          paddingTop: String(paddingTop) + ea,
          paddingBottom: String(paddingBottom) + ea,
        }
      });
      instance.possibleDetailSearchContents(scrollBase);
    }
  }
}

DesignerJs.prototype.possibleDetailSearchContents = function (mother) {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, searchCondition } = this;
  const { createNode, createNodes, colorChip, withOut, isMac, getDateMatrix, equalJson } = GeneralJs;
  const innerMargin = Number(mother.parentNode.style.top.replace(/[^0-9\-\.]/gi, ''));
  const designer = this.designers[this.designers.length - 1];
  const { futureLength, joinToken: token } = this.possibleConst;
  const now = new Date();
  let domTong;
  let titleSize, size;
  let titleHeight;
  let block, title, contents;
  let radius;
  let obj;
  let modeTop, modeRight;
  let modeWidth, modeMargin;
  let modeCircleTop;
  let dateBlockMother;
  let map, tempObj;
  let dateMatrix;
  let blockMap;
  let tempArr;
  let motherWidth;
  let maxLength;
  let num;
  let blockMargin;
  let blockHeight, textTop;
  let titleBottomMargin;
  let conditionReload;

  this.searchSelection = [];
  this.searchDomTong = [];
  this.searchCheckTong = [];
  this.searchCondition.conditions = [];
  this.searchCondition.blocks = [];

  motherWidth = mother.getBoundingClientRect().width;
  titleSize = 25;
  titleHeight = 48;
  size = 15;
  radius = 3;
  modeTop = isMac() ? 15 : 17;
  modeRight = 62;
  modeWidth = 36.34;
  modeMargin = 5;
  modeCircleTop = isMac() ? 7 : 5;
  blockMargin = 6;
  blockHeight = 36;
  textTop = isMac() ? 7 : 8;
  titleBottomMargin = isMac() ? 16 : 13;

  dateMatrix = getDateMatrix(now.getFullYear(), now.getMonth());
  map = [];
  for (let i = 0; i < futureLength; i++) {
    tempObj = {};
    tempObj.year = dateMatrix.getYearString();
    tempObj.month = dateMatrix.getMonthString();
    tempObj.matrix = dateMatrix.returnSundayMatrix();
    map.push(tempObj);
    dateMatrix = dateMatrix.nextMatrix();
  }

  blockMap = [];
  maxLength = [];
  for (let { matrix } of map) {
    maxLength.push(matrix.length);
  }
  maxLength.sort((a, b) => { return b - a; });
  maxLength = maxLength[0];

  for (let { year, month, matrix } of map) {

    tempObj = {};
    tempObj.text = "initial";
    tempObj.year = Number(year.replace(/[^0-9]/gi, ''));
    tempObj.month = Number(month.replace(/[^0-9]/gi, ''));
    tempObj.date = {};
    tempObj.date.first = 0;
    tempObj.date.last = 0;
    blockMap.push(tempObj);

    for (let i = 0; i < maxLength; i++) {
      if (matrix[i] !== undefined) {
        tempArr = equalJson(JSON.stringify(matrix[i]));
        tempArr.reverse();
        tempObj = {};
        tempObj.text = `${year.slice(2)} ${month} ${String(i + 1)}주`;
        tempObj.year = Number(year.replace(/[^0-9]/gi, ''));
        tempObj.month = Number(month.replace(/[^0-9]/gi, ''));
        tempObj.date = {};
        tempObj.date.first = (matrix[i].find((obj) => { return obj !== null })).date;
        tempObj.date.last = (tempArr.find((obj) => { return obj !== null })).date;
      } else {
        tempObj.text = "";
        tempObj.year = 0;
        tempObj.month = 0;
        tempObj.date = {};
        tempObj.date.first = 0;
        tempObj.date.last = 0;
      }
      blockMap.push(tempObj);
    }
  }

  createNode({
    mother,
    style: {
      position: "fixed",
      width: withOut(100, innerMargin * 2, ea),
      height: String(titleHeight) + ea,
      background: colorChip.white,
      top: String(innerMargin * (5 / 6)) + ea,
      left: String(innerMargin) + ea,
      zIndex: String(1),
      borderBottom: "1px solid " + colorChip.gray2,
    },
    children: [
      {
        text: "디자이너 조건 검색",
        style: {
          position: "absolute",
          top: String(isMac() ? 0 : 3) + ea,
          left: String(-1) + ea,
          fontSize: String(titleSize) + ea,
          fontWeight: String(500),
          color: colorChip.black
        }
      },
      {
        style: {
          position: "absolute",
          top: String(modeTop + modeCircleTop) + ea,
          right: String(0 + modeWidth + modeMargin) + ea,
          background: colorChip.deactive,
          width: String((radius - 1) * 2) + ea,
          height: String((radius - 1) * 2) + ea,
          borderRadius: String((radius - 1) * 2) + ea,
        }
      },
      {
        text: "초기화",
        class: [ "hoverDefault_lite" ],
        style: {
          position: "absolute",
          top: String(modeTop) + ea,
          right: String(0) + ea,
          fontSize: String(size - 1) + ea,
          fontWeight: String(500),
          color: colorChip.black,
        },
        events: [
          {
            type: "click",
            event: function (e) {
              for (let b of searchCondition.blocks) {
                if (b.querySelector("svg") !== null) {
                  b.style.background = colorChip.deactive;
                  b.firstChild.firstChild.setAttribute("fill", colorChip.white);
                  b.setAttribute("toggle", "off");
                } else {
                  b.style.background = colorChip.gray5;
                  b.firstChild.style.color = colorChip.white;
                  b.setAttribute("toggle", "off");
                }
              }
              instance.searchSelection = [];
              searchCondition.conditions = [];
            }
          }
        ]
      },
    ]
  });

  createNode({
    mother,
    text: "검색하고자 하는 날짜 블록을 선택",
    style: {
      position: "relative",
      display: "block",
      width: String(100) + '%',
      height: "auto",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      marginBottom: String(titleBottomMargin) + ea,
    },
  });

  dateBlockMother = createNode({
    mother,
    style: {
      position: "relative",
      display: "block",
      width: String(100) + '%',
      height: "auto",
    },
  });

  conditionReload = () => {
    instance.searchCondition.conditions = instance.searchDomTong.filter((dom) => {
      return dom.getAttribute("toggle") === "on";
    }).map((dom) => {
      return [ Number(dom.getAttribute("year")), Number(dom.getAttribute("month")), Number(dom.getAttribute("first")), Number(dom.getAttribute("last")) ];
    });
  }

  num = 0;
  for (let { text, year, month, date: { first, last } } of blockMap) {

    if (text !== "initial") {
      this.searchDomTong.push(createNode({
        mother: dateBlockMother,
        attribute: {
          toggle: "off",
          exception: text !== "" ? "false" : "true",
          year,
          month,
          first,
          last
        },
        event: {
          selectstart: (e) => { e.stopPropagation(); e.preventDefault(); },
          click: function (e) {
            const exception = (this.getAttribute("exception") === "true");
            if (!exception) {
              const toggle = this.getAttribute("toggle");
              const index = Number(this.getAttribute("index"));
              const token = "_";
              let onTong;
              let yearMonthTong;
              let targetDom;
              let filtering;
              if (toggle === "off") {
                onTong = [];
                if (instance.searchSelection.length > 0) {
                  if (instance.searchSelection[0] >= index) {
                    for (let i = index; i < instance.searchSelection[0] + 1; i++) {
                      instance.searchDomTong[i].style.background = colorChip.green;
                      instance.searchDomTong[i].firstChild.style.color = colorChip.whiteBlack;
                      instance.searchDomTong[i].setAttribute("toggle", "on");
                      onTong.push(instance.searchDomTong[i]);
                    }
                  } else {
                    for (let i = instance.searchSelection[0]; i < index + 1; i++) {
                      instance.searchDomTong[i].style.background = colorChip.green;
                      instance.searchDomTong[i].firstChild.style.color = colorChip.whiteBlack;
                      instance.searchDomTong[i].setAttribute("toggle", "on");
                      onTong.push(instance.searchDomTong[i]);
                    }
                  }
                  instance.searchSelection = [];
                } else {
                  this.style.background = colorChip.green;
                  this.firstChild.style.color = colorChip.whiteBlack;
                  this.setAttribute("toggle", "on");
                  instance.searchSelection.push(index);
                  onTong.push(this);
                }

                yearMonthTong = [];
                for (let dom of onTong) {
                  yearMonthTong.push(dom.getAttribute("year") + token + dom.getAttribute("month"));
                }
                yearMonthTong = [ ...(new Set(yearMonthTong)) ];
                yearMonthTong = yearMonthTong.map((str) => { return str.split(token).map((s) => { return Number(s); }); });

                for (let [ year, month ] of yearMonthTong) {
                  filtering = (dom) => { return dom.getAttribute("year") === String(year) && dom.getAttribute("month") === String(month); }
                  if (instance.searchDomTong.filter(filtering).length === onTong.filter(filtering).length) {
                    targetDom = instance.searchCheckTong.find(filtering);
                    targetDom.style.background = colorChip.green;
                    targetDom.firstChild.firstChild.setAttribute("fill", colorChip.whiteBlack);
                    targetDom.setAttribute("toggle", "on");
                  }
                }
              } else {
                this.style.background = colorChip.gray5;
                this.firstChild.style.color = colorChip.white;
                this.setAttribute("toggle", "off");
              }
              conditionReload();
            }
          }
        },
        style: {
          position: "relative",
          display: "inline-block",
          width: "calc(calc(100% - " + String(maxLength * blockMargin) + ea + " - " + String(blockHeight) + ea + ") / " + String(maxLength) + ")",
          height: String(blockHeight) + ea,
          background: text !== "" ? colorChip.gray5 : colorChip.white,
          marginRight: String((num % (maxLength + 1)) === maxLength ? 0 : blockMargin) + ea,
          marginBottom: String(blockMargin) + ea,
          borderRadius: String(3) + "px",
          verticalAlign: "top",
          cursor: text !== "" ? "pointer" : "",
          transition: "all 0.2s ease",
        },
        children: [
          {
            text,
            style: {
              position: "absolute",
              left: String(0),
              top: String(textTop) + ea,
              width: String(100) + '%',
              fontSize: String(size) + ea,
              fontWeight: String(500),
              textAlign: "center",
              color: colorChip.white,
            }
          }
        ]
      }));
    } else {
      this.searchCheckTong.push(createNode({
        mother: dateBlockMother,
        attribute: {
          toggle: "off",
          year,
          month,
        },
        event: {
          click: function (e) {
            const toggle = this.getAttribute("toggle");
            const year = Number(this.getAttribute("year"));
            const month = Number(this.getAttribute("month"));
            let targets;
            targets = instance.searchDomTong.filter((dom) => {
              return (dom.getAttribute("year") === String(year) && dom.getAttribute("month") === String(month));
            });
            if (toggle === "off") {

              for (let dom of targets) {
                dom.style.background = colorChip.green;
                dom.firstChild.style.color = colorChip.whiteBlack;
                dom.setAttribute("toggle", "on");
              }

              this.style.background = colorChip.green;
              this.firstChild.firstChild.setAttribute("fill", colorChip.whiteBlack);

              this.setAttribute("toggle", "on");

            } else {

              for (let dom of targets) {
                dom.style.background = colorChip.gray5;
                dom.firstChild.style.color = colorChip.white;
                dom.setAttribute("toggle", "off");
              }

              this.style.background = colorChip.deactive;
              this.firstChild.firstChild.setAttribute("fill", colorChip.white);
              this.setAttribute("toggle", "off");

            }
            conditionReload();
            instance.searchSelection = [];
          }
        },
        style: {
          position: "relative",
          display: "inline-block",
          width: String(blockHeight) + ea,
          height: String(blockHeight) + ea,
          background: text !== "" ? colorChip.deactive : colorChip.white,
          marginRight: String((num % (maxLength + 1)) === maxLength ? 0 : blockMargin) + ea,
          marginBottom: String(blockMargin) + ea,
          borderRadius: String(3) + "px",
          verticalAlign: "top",
          cursor: "pointer",
        },
        children: [
          {
            mode: "svg",
            source: instance.mother.returnCheckCircle(colorChip.white),
            style: {
              position: "absolute",
              left: String(blockHeight / 4) + ea,
              top: String(blockHeight / 4) + ea,
              width: String(blockHeight / 2) + ea,
            }
          }
        ]
      }));
    }
    num++;
  }
  this.searchDomTong = this.searchDomTong.filter((dom) => {
    return dom.getAttribute("exception") !== "true";
  }).map((dom, index) => {
    dom.setAttribute("index", String(index));
    return dom;
  });
  searchCondition.blocks = this.searchDomTong.concat(this.searchCheckTong);

  createNode({
    mother,
    style: {
      position: "fixed",
      width: withOut(100, innerMargin * 2, ea),
      height: String(titleHeight) + ea,
      background: colorChip.white,
      bottom: String(0) + ea,
      left: String(innerMargin) + ea,
      zIndex: String(1),
      borderTop: "1px solid " + colorChip.gray2,
    },
  });

}

DesignerJs.prototype.possibleDetailSearchParsing = async function () {
  const instance = this;
  const { searchCondition, standardDoms, designers } = this;
  const { createNode, createNodes, colorChip, withOut, ajaxJson } = GeneralJs;
  const token = "_";
  try {
    let tempArr, tempObj, tempDate;
    let desidArr, desidArr2;
    let blocks;
    let realtimes;
    let boo;
    let conditions;
    let num;

    if (searchCondition.conditions.length === 0) {
      desidArr = [];
      for (let { desid } of designers) {
        desidArr.push(desid);
      }
    } else {

      realtimes = await ajaxJson({
        mode: "read",
        db: "console",
        collection: "realtimeDesigner",
        whereQuery: {},
      }, "/generalMongo", { equal: true });

      realtimes = realtimes.filter((obj) => {
        return Array.from(instance.designers).map((designer) => { return designer.desid }).includes(obj.desid);
      });

      conditions = [];
      num = 0;
      tempObj = {};
      for (let [ year, month, first, last ] of searchCondition.conditions) {
        if (tempObj.start === undefined) {
          tempObj.start = new Date(year, month - 1, first);
        }
        if (searchCondition.conditions[num + 1] !== undefined) {
          tempDate = new Date(year, month - 1, last);
          tempDate.setDate(tempDate.getDate() + 1);
          if (tempDate.getFullYear() === searchCondition.conditions[num + 1][0] && tempDate.getMonth() + 1 === searchCondition.conditions[num + 1][1] && tempDate.getDate() === searchCondition.conditions[num + 1][2]) {
            tempObj.end = new Date(searchCondition.conditions[num + 1][0], searchCondition.conditions[num + 1][1] - 1, searchCondition.conditions[num + 1][3]);
          } else {
            tempObj.end = new Date(year, month - 1, last);
            conditions.push(tempObj);
            tempObj = {};
          }
        } else {
          tempObj.end = new Date(year, month - 1, last);
          conditions.push(tempObj);
        }
        num++;
      }

      desidArr = [];
      for (let { desid, possible } of realtimes) {
        boo = false;
        for (let { start, end } of conditions) {
          for (let { start: possibleStart, end: possibleEnd } of possible) {
            if (end.valueOf() >= possibleStart.valueOf() && possibleEnd.valueOf() >= start.valueOf()) {
              boo = true;
              break;
            }
          }
          if (boo) {
            break;
          }
        }
        if (boo) {
          desidArr.push(desid);
        }
      }
    }

    blocks = [];
    for (let i = 1; i < standardDoms.length; i++) {
      if (desidArr.includes(standardDoms[i].getAttribute("desid"))) {
        standardDoms[i].style.display = "block";
        blocks.push(standardDoms[i]);
      } else {
        standardDoms[i].style.display = "none";
      }
    }

    if (blocks.length > 0) {
      setTimeout(() => {
        blocks[0].click();
      }, 0);
    }
  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.possibleEntireContents = function (mother, data) {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight, possibleConst } = this;
  const { createNode, createNodes, colorChip, withOut, ajaxJson, setQueue, isMac } = GeneralJs;
  const { futureLength } = possibleConst;
  const today = new Date();
  const future = new Date();
  future.setMonth(future.getMonth() + futureLength);
  let baseTong;
  let outerMargin;
  let designerTong;
  let fontSize;
  let designerBoxWidth;
  let designerBlockMarginLeft;
  let designerBlockMarginBottom;
  let dateTong;
  let grayBoxWidth;
  let grayBoxHeight;
  let tong;
  let dateLength, dateArr;
  let tempDate;
  let totalWidth;
  let tongArr;
  let barTop;
  let designerNameTong;
  let dateTongHeight;
  let xScrollTong;
  let rowHeight;
  let dateBarTop, dateBarHeight;
  let tongPaddingBottom;
  let lineTop, lineVisual;
  let dateSize;
  let pastLeft;

  totalWidth = 5000;
  outerMargin = 24;
  fontSize = 15;
  designerBoxWidth = 54;
  designerBlockMarginBottom = 12;
  designerBlockMarginLeft = 28;
  grayBoxHeight = 19;
  grayBoxWidth = 5;
  barTop = isMac() ? 2 : 1;
  dateTongHeight = 80;
  rowHeight = 20;
  dateBarTop = 56;
  dateBarHeight = 3;
  tongPaddingBottom = 200;
  lineTop = 48;
  lineVisual = 36;
  dateSize = 13;

  dateLength = 0;
  dateArr = [];
  tempDate = new Date();
  while (tempDate.valueOf() <= future.valueOf()) {
    dateArr.push(new Date(JSON.stringify(tempDate).slice(1, -1)));
    tempDate.setDate(tempDate.getDate() + 1);
    dateLength++;
  }

  baseTong = createNode({
    mother,
    style: {
      position: "relative",
      top: String(outerMargin) + ea,
      marginLeft: String(outerMargin) + ea,
      width: withOut(outerMargin * 2, ea),
      height: withOut(outerMargin * 2, ea),
      borderRadius: String(5) + "px",
      border: "1px solid " + colorChip.gray3,
      overflow: "scroll",
      boxSizing: "border-box",
    }
  });

  xScrollTong = createNode({
    mother: baseTong,
    style: {
      position: "relative",
      left: String(designerBlockMarginLeft + designerBoxWidth) + ea,
      width: withOut(designerBlockMarginLeft + designerBoxWidth, ea),
      overflow: "scroll",
    }
  })

  dateTong = createNode({
    mother: xScrollTong,
    class: [ "moveTarget" ],
    style: {
      position: "relative",
      height: String(dateTongHeight) + ea,
      width: String(totalWidth) + ea,
    },
    children: [
      {
        style: {
          position: "relative",
          top: String(dateBarTop) + ea,
          height: String(dateBarHeight) + ea,
          overflow: "hidden",
        },
        children: [
          {
            style: {
              display: "block",
              position: "relative",
              verticalAlign: "top",
            }
          }
        ]
      },
    ]
  });

  designerTong = createNode({
    mother: xScrollTong,
    class: [ "moveTarget" ],
    style: {
      position: "relative",
      width: String(totalWidth) + ea,
      paddingBottom: String(tongPaddingBottom) + ea,
    }
  });

  designerNameTong = createNode({
    mother: baseTong,
    style: {
      position: "absolute",
      background: colorChip.white,
      left: String(designerBlockMarginLeft) + ea,
      top: String(dateTongHeight) + ea,
      width: String(designerBoxWidth) + ea,
      zIndex: String(1),
    }
  })

  tongArr = [];
  for (let obj of data) {
    createNode({
      mother: designerNameTong,
      attribute: {
        desid: obj.desid,
      },
      class: [ "hoverDefault_lite" ],
      event: {
        click: function (e) {
          const desid = this.getAttribute("desid");
          window.location.href = window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=possible&desid=" + desid;
        }
      },
      style: {
        position: "relative",
        marginBottom: String(designerBlockMarginBottom) + ea,
        height: String(rowHeight) + ea,
      },
      children: [
        {
          text: obj.designer,
          style: {
            display: "inline-block",
            position: "relative",
            fontSize: String(fontSize) + ea,
            fontWeight: String(500),
            width: String(designerBoxWidth) + ea,
            verticalAlign: "top",
          }
        }
      ]
    });
    tong = createNode({
      mother: designerTong,
      style: {
        position: "relative",
        marginBottom: String(designerBlockMarginBottom + (rowHeight - grayBoxHeight)) + ea
      },
      children: [
        {
          style: {
            display: "inline-block",
            position: "relative",
            width: withOut(designerBoxWidth, ea),
            verticalAlign: "top",
            opacity: String(0.9),
            top: String(barTop) + ea,
          }
        }
      ]
    });
    tongArr.push({ tong, possible: obj.possible });
  }

  setQueue(() => {
    const lineHeight = designerNameTong.getBoundingClientRect().height + lineVisual;
    pastLeft = 0;
    for (let i = 0; i < dateLength - 1; i++) {
      if (dateArr[i].getMonth() !== dateArr[i + 1].getMonth()) {
        createNode({
          mother: dateTong,
          text: String(dateArr[i].getFullYear()).slice(2) + " / " + String(dateArr[i].getMonth() + 1),
          style: {
            fontSize: String(dateSize) + ea,
            fontWeight: String(300),
            fontFamily: "graphik",
            position: "absolute",
            top: String(lineTop - 16) + ea,
            left: String(pastLeft + 9) + ea,
          }
        });
        createNode({
          mother: dateTong,
          style: {
            position: "absolute",
            top: String(lineTop) + ea,
            left: String((i + 1) * grayBoxWidth) + ea,
            borderRight: "1px solid " + colorChip.darkGreen,
            height: String(lineHeight) + ea,
            width: String(0),
          }
        });
        pastLeft = (i + 1) * grayBoxWidth;
      }
    }
  });

  setQueue(() => {
    const tongLength = tongArr.length;
    let divClone, styleGray, styleGreen;
    styleGray = {
      display: "inline-block",
      position: "relative",
      width: String(grayBoxWidth) + ea,
      height: String(grayBoxHeight) + ea,
      background: colorChip.gray1,
    };
    styleGreen = JSON.parse(JSON.stringify(styleGray));
    styleGreen.background = colorChip.green;

    for (let z = 0; z < tongLength; z++) {
      for (let i = 0; i < dateLength; i++) {
        divClone = GeneralJs.nodes.div.cloneNode(true);
        if (tongArr[z].possible.some((obj) => { return (obj.start.valueOf() <= dateArr[i].valueOf() && dateArr[i].valueOf() <= obj.end.valueOf()); })) {
          for (let s in styleGreen) {
            divClone.style[s] = styleGreen[s];
          }
        } else {
          for (let s in styleGray) {
            divClone.style[s] = styleGray[s];
          }
        }
        tongArr[z].tong.children[0].appendChild(divClone);
      }
    }

    for (let i = 0; i < dateLength; i++) {
      divClone = GeneralJs.nodes.div.cloneNode(true);
      for (let s in styleGray) {
        divClone.style[s] = styleGray[s];
      }
      dateTong.children[0].children[0].appendChild(divClone);
    }

  });

}

DesignerJs.prototype.possibleEntire = function () {
  const instance = this;
  const { totalMother, ea, grayBarWidth, belowHeight } = this;
  const { createNode, createNodes, colorChip, withOut, ajaxJson } = GeneralJs;
  this.possibleEntire = {};
  return async function (e) {
    try {
      const zIndex = 4;
      let cancelBox, whiteBox;
      let outerMargin;
      let data;

      outerMargin = 36;

      instance.possibleEntire.cancelBox = {};
      instance.possibleEntire.whiteBox = {};

      cancelBox = createNode({
        mother: totalMother,
        event: {
          click: function (e) {
            totalMother.removeChild(instance.possibleEntire.whiteBox);
            totalMother.removeChild(instance.possibleEntire.cancelBox);
          }
        },
        style: {
          position: "fixed",
          top: String(0),
          left: String(grayBarWidth) + ea,
          width: withOut(grayBarWidth, ea),
          height: withOut(belowHeight, ea),
          background: colorChip.cancelBlack,
          zIndex: String(zIndex),
          animation: "justfadein 0.3s ease forwards",
        }
      });

      whiteBox = createNode({
        mother: totalMother,
        style: {
          position: "fixed",
          top: String(outerMargin) + ea,
          left: String(grayBarWidth + outerMargin) + ea,
          width: withOut(grayBarWidth + (outerMargin * 2), ea),
          height: withOut(belowHeight + (outerMargin * 2), ea),
          background: colorChip.white,
          zIndex: String(zIndex),
          animation: "fadeuplite 0.3s ease forwards",
          borderRadius: String(3) + "px",
          boxShadow: "0px 3px 14px -9px " + colorChip.shadow,
        }
      });

      data = await ajaxJson({
        mode: "read",
        db: "console",
        collection: "realtimeDesigner",
        whereQuery: {},
      }, "/generalMongo", { equal: true });

      for (let obj of data) {
        for (let designer of instance.designers) {
          if (obj.desid === designer.desid) {
            obj.designer = designer.designer;
          }
        }
      }

      data = data.filter((obj) => { return obj.designer !== undefined; });
      data.sort((a, b) => { return a.desid > b.desid ? -1 : 1 });
      instance.possibleEntireContents(whiteBox, data);

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.possibleView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    const middleMode = /middle/gi.test(window.location.pathname);
    this.backGrayBar();
    await this.spreadData(null, true, middleMode ? "middle" : null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight } = this;
    const standardBar = totalMother.firstChild;
    const designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    const length = designers.length;
    const getObj = returnGet();
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;
    let reportIcon;

    this.designers = new Designers(designers);
    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.middleMode = middleMode;
    this.modes = [ "checklist", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[2];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };
    this.dateDoms = [];
    this.selection = [];

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            document.getElementById("totalcontents").removeChild(document.querySelector(".totalFather"));
            instance.totalFather = null;
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
          }
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.possibleDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            searchResult = instance.designers.search(value);
            if (searchResult.length > 0) {
              instance.possibleDetailLaunching(searchResult[0].desid);
            }
          }
        }
      });
      searchInput.addEventListener("contextmenu", this.possibleDetailSearchBox());
    }

    //entire event
    reportIcon = this.mother.belowButtons.square.reportIcon;
    reportIcon.addEventListener("click", this.possibleEntire());

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.possibleDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    window.addEventListener("resize", (e) => {
      window.location.reload();
    });
    window.addEventListener("popstate", (e) => {
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          instance.reportDetailLaunching(instance.pageHistory[1].desid);
          instance.pageHistory.shift();
          instance.pageHistory.shift();
        }
      }
    });

    instance.arrowDomMode = false;
    instance.arrowDomTargets = [];
    window.addEventListener("keydown", async (e) => {
      try {
        if (e.key === "ArrowUp" || e.key === "ArrowDown") {
          if (instance.arrowDomMode) {
            e.preventDefault();
            let tempMatrix;
            if (e.key === "ArrowUp") {
              for (let dom of instance.arrowDomTargets) {
                tempMatrix = equalJson(dom.getAttribute("matrix"));
                tempMatrix = tempMatrix.map((num) => { return num + 1 });
                dom.setAttribute("matrix", JSON.stringify(tempMatrix));
                dom.querySelector("aside").textContent = String(tempMatrix.reduce((acc, current) => { return acc >= current ? acc : current }));
              }
            } else {
              for (let dom of instance.arrowDomTargets) {
                tempMatrix = equalJson(dom.getAttribute("matrix"));
                tempMatrix = tempMatrix.map((num) => { return num - 1 });
                tempMatrix = tempMatrix.map((num) => { return (num < 0 ? 0 : num); });
                dom.setAttribute("matrix", JSON.stringify(tempMatrix));
                dom.querySelector("aside").textContent = String(tempMatrix.reduce((acc, current) => { return acc >= current ? acc : current }));
              }
            }
            await instance.possibleUpdate(instance.desid);
          }
        }
      } catch (e) {
        console.log(e);
      }
    });
    window.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        if (instance.arrowDomMode) {
          e.preventDefault();
          document.getElementById("totalcontents").removeChild(document.getElementById("totalcontents").lastChild);
          for (let dom of instance.arrowDomTargets) {
            if (GeneralJs.equalJson(dom.getAttribute("matrix")).reduce((acc, current) => { return acc + current }) === 0) {
              dom.firstChild.style.background = "transparent";
              dom.querySelector("aside").style.opacity = String(0);
              dom.setAttribute("toggle", "off");
              dom.setAttribute("matrix", "[]");
            } else {
              dom.firstChild.style.background = colorChip.green;
            }
            dom.firstChild.style.opacity = String(0.08);
          }
          instance.arrowDomMode = false;
          instance.arrowDomTargets = [];
        }
      }
    });

    //launching
    this.possibleDetailLaunching(this.desid);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.priceBase = function () {
  const instance = this;
  const { ea, belowHeight, garoStandards, seroStandards } = this;
  const { createNode, createNodes, colorChip, withOut, isMac } = GeneralJs;
  class PriceDoms extends Array {
    constructor(arr) {
      super();
      for (let i of arr) {
        this.push(i);
      }
    }
    pick(x, y) {
      if (typeof x !== "number" || typeof y !== "number") {
        throw new Error("input must be x, y");
      }
      let target = null;
      let length = instance.garoStandards.length;
      if (this[(y * length) + x] !== undefined) {
        target = this[(y * length) + x];
      }
      return target;
    }
    pickY(y) {
      if (typeof y !== "number") {
        throw new Error("input must be y");
      }
      let arr = [];
      let length = instance.garoStandards.length;
      for (let i = 0; i < length; i++) {
        if (this[(y * length) + i] !== undefined) {
          arr.push(this[(y * length) + i]);
        }
      }
      return arr;
    }
    pickX(x) {
      if (typeof x !== "number") {
        throw new Error("input must be x");
      }
      let arr = [];
      let length = instance.seroStandards.length;
      let length2 = instance.garoStandards.length;
      for (let i = 0; i < length; i++) {
        if (this[(i * length2) + x] !== undefined) {
          arr.push(this[(i * length2) + x]);
        }
      }
      return arr;
    }
    next(x, y) {
      if (typeof x !== "number" || typeof y !== "number") {
        throw new Error("input must be x, y");
      }
      if (this.length === 0) {
        throw new Error("invaild instance");
      }
      let target = null;
      let length = instance.garoStandards.length;
      if (this[(y * length) + x + 1] !== undefined) {
        target = this[(y * length) + x + 1];
      } else {
        target = this[0];
      }
      return target;
    }
    previous(x, y) {
      if (typeof x !== "number" || typeof y !== "number") {
        throw new Error("input must be x, y");
      }
      if (this.length === 0) {
        throw new Error("invaild instance");
      }
      let target = null;
      let length = instance.garoStandards.length;
      if (this[(y * length) + x - 1] !== undefined) {
        target = this[(y * length) + x - 1];
      } else {
        target = this[this.length - 1];
      }
      return target;
    }
    up(x, y) {
      if (typeof x !== "number" || typeof y !== "number") {
        throw new Error("input must be x, y");
      }
      if (this.length === 0) {
        throw new Error("invaild instance");
      }
      if (y === 0) {
        return this.pick(x, instance.seroStandards.length - 1);
      } else if (y < instance.seroStandards.length) {
        return this.pick(x, y - 1);
      }
    }
    down(x, y) {
      if (typeof x !== "number" || typeof y !== "number") {
        throw new Error("input must be x, y");
      }
      if (this.length === 0) {
        throw new Error("invaild instance");
      }
      if (y === instance.seroStandards.length - 1) {
        return this.pick(x, 0);
      } else if (y > -1) {
        return this.pick(x, y + 1);
      }
    }
    removeAll() {
      for (let dom of this) {
        while (dom.firstChild) {
          dom.removeChild(dom.lastChild);
        }
      }
    }
  }
  let margin;
  let totalMother;
  let belowPannelHeight;
  let matrixBaseMother, matrixBase;
  let garoZone, seroZone;
  let garo, sero;
  let titleMargin_top, titleMargin_left;
  let length;
  let nodeArr;
  let titleSize, titleFontHeight;
  let belowPannel, belowButton;
  let belowBottom;
  let x, y;
  let feeButton;

  margin = 30;
  belowPannelHeight = 90;
  titleMargin_top = 38;
  titleMargin_left = 54;
  titleSize = 21;
  titleFontHeight = titleSize + 2;
  belowBottom = 40;
  feeButton = 6;

  garo = garoStandards.length;
  sero = seroStandards.length;

  totalMother = createNode({
    mother: document.getElementById("totalcontents"),
    class: [ "totalMother" ],
    style: {
      position: "fixed",
      top: String(0),
      left: String(0),
      paddingTop: String(margin) + ea,
      paddingLeft: String(margin) + ea,
      paddingRight: String(margin) + ea,
      width: withOut(margin * 2, ea),
      height: withOut(margin + belowHeight, ea),
    }
  });
  this.totalMother = totalMother;

  [ matrixBaseMother, belowPannel, belowButton ] = createNodes([
    {
      mother: totalMother,
      style: {
        position: "relative",
        paddingTop: String(titleMargin_top) + ea,
        paddingLeft: String(titleMargin_left) + ea,
        width: withOut(100, titleMargin_left, ea),
        height: withOut(100, belowPannelHeight + titleMargin_top + margin, ea),
      }
    },
    {
      mother: totalMother,
      style: {
        position: "relative",
        marginTop: String(margin * (2 / 3)) + ea,
        marginLeft: String(titleMargin_left) + ea,
        width: withOut(100, titleMargin_left + belowPannelHeight + feeButton - (margin / 2), ea),
        height: String(belowPannelHeight - belowBottom + (margin * (1 / 3))) + ea,
        background: colorChip.gray1,
        borderRadius: String(5) + ea,
      }
    },
    {
      mother: totalMother,
      events: [
        {
          type: "click",
          event: instance.priceFeeAdjust(),
        }
      ],
      style: {
        position: "absolute",
        bottom: String(belowBottom) + ea,
        right: String(margin) + ea,
        width: String(belowPannelHeight + feeButton - margin) + ea,
        height: String(belowPannelHeight - belowBottom + (margin * (1 / 3))) + ea,
        background: colorChip.gradientGreen,
        borderRadius: String(5) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      text: "수수료",
      class: [ "hoverDefault_lite" ],
      style: {
        position: "absolute",
        fontSize: String(titleSize - 7) + ea,
        fontWeight: String(600),
        width: String(100) + '%',
        textAlign: "center",
        left: String(0),
        top: withOut(50, (titleSize / 2) + (isMac() ? 1 : 0), ea),
        color: colorChip.white,
      }
    }
  ]);

  [ matrixBase, garoZone, seroZone ] = createNodes([
    {
      mother: matrixBaseMother,
      style: {
        position: "relative",
        width: String(100) + '%',
        height: String(100) + '%',
        borderRadius: String(5) + ea,
        boxSizing: "border-box",
        border: "1px solid " + colorChip.gray3,
        overflow: "hidden",
      }
    },
    {
      mother: matrixBaseMother,
      style: {
        position: "absolute",
        top: String(0) + ea,
        left: String(titleMargin_left) + ea,
        width: withOut(100, titleMargin_left, ea),
        height: String(titleMargin_top) + ea,
        boxSizing: "border-box",
      }
    },
    {
      mother: matrixBaseMother,
      style: {
        position: "absolute",
        top: String(titleMargin_top) + ea,
        left: String(0) + ea,
        width: String(titleMargin_left) + ea,
        height: withOut(100, titleMargin_top, ea),
        boxSizing: "border-box",
      }
    }
  ]);
  this.matrixBase = matrixBase;
  this.garoZone = garoZone;
  this.seroZone = seroZone;

  length = garo * sero;
  nodeArr = [];
  for (let i = 0; i < length; i++) {
    x = String(i % garo);
    y = String(Math.floor(i / garo));
    nodeArr.push({
      mother: matrixBase,
      attribute: [ { x }, { y } ],
      class: [ this.domClassName + x + y ],
      style: {
        display: "inline-block",
        position: "relative",
        width: "calc(100% / " + String(garo) + ")",
        height: "calc(100% / " + String(sero) + ")",
        boxSizing: "border-box",
        borderBottom: (Math.floor(i / garo) >= (sero - 1)) ? "" : "1px solid " + colorChip.gray3,
        borderRight: ((i + 1) % garo === 0) ? "" : "1px solid " + colorChip.gray3,
      }
    });
  }

  for (let i = 0; i < sero; i++) {
    createNodes([
      {
        mother: seroZone,
        id: "titleY" + String(i),
        class: [ "titleY" ],
        style: {
          display: "block",
          position: "relative",
          width: String(50) + '%',
          height: "calc(100% / " + String(sero) + ")",
          boxSizing: "border-box",
        }
      },
      {
        mother: -1,
        text: seroStandards[i],
        style: {
          position: "absolute",
          width: String(100) + '%',
          textAlign: "center",
          height: String(titleFontHeight) + ea,
          fontSize: String(titleSize) + ea,
          fontWeight: String(400),
          fontFamily: "graphik",
          top: withOut(50, (titleFontHeight / 2) + 5, ea),
          left: String(0) + ea,
        }
      }
    ]);
  }

  for (let i = 0; i < garo; i++) {
    createNodes([
      {
        mother: garoZone,
        id: "titleX" + String(i),
        class: [ "titleX" ],
        style: {
          display: "inline-block",
          position: "relative",
          width: "calc(100% / " + String(garo) + ")",
          height: String(100) + '%',
          boxSizing: "border-box",
        }
      },
      {
        mother: -1,
        text: garoStandards[i],
        style: {
          position: "absolute",
          width: String(100) + '%',
          textAlign: "center",
          fontSize: String(titleSize - 3) + ea,
          fontWeight: String(400),
          fontFamily: "graphik",
          top: String(0) + ea,
          left: String(0) + ea,
        }
      }
    ]);
  }

  this.doms = new PriceDoms(createNodes(nodeArr));
  this.belowPannel = belowPannel;
  this.pricePannel();
  this.priceAllCase();
}

DesignerJs.prototype.priceNumbers = function () {
  const instance = this;
  const price = this.price.pick(...this.key);
  const matrix = price.matrix;
  const { ea, doms } = this;
  const { createNode, createNodes, colorChip, withOut, ajaxJson } = GeneralJs;
  let x, y;
  let height, size;
  let divVisualSpecific, inputVisualSpecific;
  let allCaseLaunching;

  allCaseLaunching = (document.querySelector('.' + "caseTarget") !== null);
  doms.removeAll();

  size = <%% 30, 26, 26, 26, 26 %%>;
  height = size + 4;
  divVisualSpecific = 8;
  inputVisualSpecific = divVisualSpecific - 3;

  if (this.eventFunc === null) {
    this.eventFunc = function (e) {
      e.preventDefault();
      e.stopPropagation();
      const x = Number(this.getAttribute('x'));
      const y = Number(this.getAttribute('y'));
      const thisDom = doms.pick(x, y);
      const xDoms = doms.pickX(x);
      const yDoms = doms.pickY(y);
      const matrix = instance.price.pick(...instance.key).matrix;
      let input;
      let titleX, titleY;

      titleX = document.querySelectorAll(".titleX");
      titleY = document.querySelectorAll(".titleY");

      instance.cancelBox = createNode({
        mother: this.parentElement,
        events: [
          {
            type: "click",
            event: function (e) {
              e.preventDefault();
              e.stopPropagation();
              const mother = this.parentElement;
              mother.removeChild(mother.lastChild);
              mother.removeChild(mother.lastChild);
              for (let dom of doms) {
                for (let child of dom.children) {
                  child.style.color = colorChip.green;
                }
                dom.firstChild.style.color = colorChip.black;
              }
              for (let dom of titleX) {
                dom.firstChild.style.color = colorChip.black;
              }
              for (let dom of titleY) {
                dom.firstChild.style.color = colorChip.black;
              }
            }
          }
        ],
        style: {
          position: "fixed",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          height: String(100) + '%',
          background: "transparent",
          zIndex: String(1),
          cursor: "pointer",
        }
      });

      input = createNode({
        mother: this.parentElement,
        mode: "input",
        attribute: [
          { x },
          { y },
          { type: "text" },
          { value: String(matrix[x][y]) },
        ],
        events: [
          {
            type: "keypress",
            event: function (e) {
              if (e.key === "Enter") {
                e.preventDefault();
                e.stopPropagation();
                const mother = this.parentElement;
                const x = Number(this.getAttribute('x'));
                const y = Number(this.getAttribute('y'));
                const value = Number(this.value.replace(/[^0-9]/g, ''));
                let updateQuery;
                updateQuery = {};
                updateQuery["matrix." + String(x) + '.' + String(y)] = value;
                ajaxJson({
                  mode: "update",
                  db: "console",
                  collection: "designerPrice",
                  whereQuery: { key: (instance.key[0] * 10) + instance.key[1] },
                  updateQuery
                }, "/generalMongo").then((data) => {
                  mother.firstChild.textContent = String(Math.round(value * (instance.newcomer.boo ? instance.newcomer.ratio : 1) * (instance.premium.boo ? instance.premium.ratio : 1)));
                  instance.price.pick(...instance.key).matrix[x][y] = value;
                  mother.style.background = colorChip[value === 0 ? "gray0" : "white"];
                  instance.cancelBox.click();
                }).catch((err) => {
                  throw new Error(err);
                });
              }
            }
          },
          {
            type: "keydown",
            event: function (e) {
              if (e.key === "Tab") {
                e.preventDefault();
                e.stopPropagation();
                const mother = this.parentElement;
                const x = Number(this.getAttribute('x'));
                const y = Number(this.getAttribute('y'));
                const value = Number(this.value.replace(/[^0-9]/g, ''));
                let updateQuery;
                updateQuery = {};
                updateQuery["matrix." + String(x) + '.' + String(y)] = value;
                ajaxJson({
                  mode: "update",
                  db: "console",
                  collection: "designerPrice",
                  whereQuery: { key: (instance.key[0] * 10) + instance.key[1] },
                  updateQuery
                }, "/generalMongo").then((data) => {
                  mother.firstChild.textContent = String(value);
                  instance.price.pick(...instance.key).matrix[x][y] = value;
                  mother.style.background = colorChip[value === 0 ? "gray0" : "white"];
                  instance.cancelBox.click();
                  doms.next(x, y).firstChild.click();
                }).catch((err) => {
                  throw new Error(err);
                });
              } else if (e.key === "Escape" || e.key === " ") {
                e.preventDefault();
                e.stopPropagation();
                instance.cancelBox.click();
              }
              if (e.altKey) {
                if (e.key === "ArrowLeft") {
                  e.preventDefault();
                  e.stopPropagation();
                  instance.cancelBox.click();
                  doms.previous(x, y).firstChild.click();
                } else if (e.key === "ArrowRight") {
                  e.preventDefault();
                  e.stopPropagation();
                  instance.cancelBox.click();
                  doms.next(x, y).firstChild.click();
                } else if (e.key === "ArrowUp") {
                  e.preventDefault();
                  e.stopPropagation();
                  instance.cancelBox.click();
                  doms.up(x, y).firstChild.click();
                } else if (e.key === "ArrowDown") {
                  e.preventDefault();
                  e.stopPropagation();
                  instance.cancelBox.click();
                  doms.down(x, y).firstChild.click();
                }
              }
            }
          }
        ],
        style: {
          position: "absolute",
          width: String(30) + '%',
          textAlign: "center",
          fontFamily: "graphik",
          fontSize: String(size) + ea,
          fontWeight: String(200),
          height: String(height) + ea,
          left: String(35) + '%',
          top: withOut(50, (height / 2) + inputVisualSpecific, ea),
          color: colorChip.green,
          border: String(0),
          outline: String(0),
          boxSizing: "border-box",
          zIndex: String(1),
          background: colorChip[matrix[x][y] === 0 ? "gray0" : "white"],
        }
      });
      input.focus();

      for (let dom of doms) {
        if (!xDoms.includes(dom) && !yDoms.includes(dom)) {
          for (let child of dom.children) {
            child.style.color = colorChip.gray3;
          }
        }
      }
      document.getElementById("titleX" + String(x)).firstChild.style.color = colorChip.green;
      document.getElementById("titleY" + String(y)).firstChild.style.color = colorChip.green;

    }
  }

  for (let i = 0; i < doms.length; i++) {
    x = Number(doms[i].getAttribute('x'));
    y = Number(doms[i].getAttribute('y'));
    createNode({
      mother: doms[i],
      attribute: [ { x }, { y } ],
      events: [ { type: [ "click", "contextmenu" ], event: instance.eventFunc } ],
      text: String(Math.round(matrix[x][y] * (instance.newcomer.boo ? instance.newcomer.ratio : 1) * (instance.premium.boo ? instance.premium.ratio : 1))),
      style: {
        position: "absolute",
        width: String(100) + '%',
        textAlign: "center",
        fontFamily: "graphik",
        fontSize: String(size) + ea,
        fontWeight: String(200),
        height: String(height) + ea,
        left: String(0) + ea,
        top: withOut(50, (height / 2) + divVisualSpecific, ea),
        color: colorChip.black,
        cursor: "pointer",
      }
    });
    if (matrix[x][y] !== 0) {
      doms[i].style.background = colorChip["white"];
    } else {
      doms[i].style.background = colorChip["gray0"];
    }
  }

  if (allCaseLaunching) {
    this.priceAllCase(false);
  }
}

DesignerJs.prototype.priceAllCase = function (remove = false) {
  const instance = this;
  const { ea, doms, price: pricePast } = this;
  const { createNode, createNodes, colorChip, withOut, isMac, ajaxJson } = GeneralJs;
  const { price, standard } = pricePast.allCase(...this.key);
  const className = "caseTarget";
  const validRangeNumber = 12;
  let x, y;
  let removeTargets;
  let topStart, between;
  let lineHeight;
  let leftPadding;

  topStart = isMac() ? 9 : 10;
  between = isMac() ? 7 : 6;
  lineHeight = 21;
  leftPadding = 16;

  this.newcomer.boo = false;
  this.premium.boo = false;
  document.getElementById("newcomerBoo").textContent = 'N';
  document.getElementById("premiumBoo").textContent = 'N';

  for (let i = 0; i < doms.length; i++) {
    x = Number(doms[i].getAttribute('x'));
    y = Number(doms[i].getAttribute('y'));
    for (let j = 0; j < price.length; j++) {
      createNode({
        mother: doms[i],
        attribute: {
          unique: "v" + String(x) + String(y) + "s" + String(Math.floor(j / 4)) + String(j % 4),
        },
        class: [ className ],
        text: standard[i][j],
        style: {
          position: "absolute",
          fontSize: String(0.9) + "vh",
          fontWeight: String(700),
          textAlign: "center",
          // color: colorChip.green,
          color: j >= validRangeNumber ? colorChip.deactive : colorChip.green,
          width: "calc(calc(100% - " + String(leftPadding * 3) + ea + ") / 4)",
          top: "calc(" + String(topStart) + "% + calc(" + String(lineHeight) + "% * " + String(Math.floor(j / 4)) + "))",
          left: "calc(" + String(leftPadding) + ea + " + calc(calc(calc(100% - " + String(leftPadding * 2) + ea + ") / 4) * " + String(j % 4) + "))",
        }
      });
      createNode({
        mother: doms[i],
        class: [ className ],
        attribute: {
          key: String(price[j].key),
          x: String(x),
          y: String(y),
          i: String(i),
          j: String(j),
          value: String(price[j].matrix[x][y]),
        },
        event: {
          click: function (e) {
            const self = this;
            const tempTargetClassName = "tempTargetClassName";
            const key = Number(this.getAttribute("key"));
            const x = Number(this.getAttribute("x"));
            const y = Number(this.getAttribute("y"));
            const i = Number(this.getAttribute("i"));
            const j = Number(this.getAttribute("j"));
            const value = Number(this.getAttribute("value"));
            let cancelBack, input;

            cancelBack = createNode({
              mother: doms[i],
              class: [ tempTargetClassName ],
              event: {
                click: function (e) {
                  const removeTargets = document.querySelectorAll('.' + tempTargetClassName);
                  for (let dom of removeTargets) {
                    dom.remove();
                  }
                }
              },
              style: {
                position: "fixed",
                top: String(0),
                left: String(0),
                width: String(100) + '%',
                height: String(100) + '%',
                background: "transparent",
                zIndex: String(1),
              }
            });
            input = createNode({
              mother: doms[i],
              class: [ tempTargetClassName ],
              mode: "input",
              attribute: {
                type: "text",
              },
              event: {
                keypress: async function (e) {
                  if (e.key === "Enter") {
                    try {
                      if (this.value.replace(/[^0-9]/gi, '') === '') {
                        this.value = String(0);
                      } else {
                        this.value = this.value.replace(/[^0-9]/gi, '');
                      }
                      const finalValue = Number(this.value);
                      const removeTargets = document.querySelectorAll('.' + tempTargetClassName);
                      let updateQuery;

                      updateQuery = {};
                      updateQuery["matrix." + String(x) + '.' + String(y)] = finalValue;
                      // await ajaxJson({
                      //   mode: "update",
                      //   db: "console",
                      //   collection: "designerPrice",
                      //   whereQuery: { key: key },
                      //   updateQuery
                      // }, BACKHOST + "/generalMongo");
                      // instance.price.pick(Math.floor(key / 10), key % 10).matrix[x][y] = finalValue;
                      // self.setAttribute("value", String(finalValue));
                      // self.textContent = String(finalValue);
                      for (let dom of removeTargets) {
                        dom.remove();
                      }
                    } catch (e) {
                      console.log(e);
                    }
                  }
                }
              },
              style: {
                position: "absolute",
                fontSize: String(1.6) + "vh",
                fontWeight: String(300),
                fontFamily: "graphik",
                textAlign: "center",
                color: colorChip.green,
                width: "calc(calc(100% - " + String(leftPadding * 3) + ea + ") / 4)",
                top: "calc(" + String(topStart + between) + "% + calc(" + String(lineHeight) + "% * " + String(Math.floor(j / 4)) + "))",
                left: "calc(" + String(leftPadding) + ea + " + calc(calc(calc(100% - " + String(leftPadding * 2) + ea + ") / 4) * " + String(j % 4) + "))",
                border: String(0),
                outline: String(0),
                background: colorChip.white,
                zIndex: String(1),
              }
            });

            input.value = String(value);
            input.focus();

          }
        },
        text: String(price[j].matrix[x][y]),
        style: {
          position: "absolute",
          fontSize: String(1.6) + "vh",
          fontWeight: String(300),
          fontFamily: "graphik",
          textAlign: "center",
          // color: colorChip.black,
          color: j >= validRangeNumber ? colorChip.gray3 : colorChip.black,
          width: "calc(calc(100% - " + String(leftPadding * 3) + ea + ") / 4)",
          top: "calc(" + String(topStart + between) + "% + calc(" + String(lineHeight) + "% * " + String(Math.floor(j / 4)) + "))",
          left: "calc(" + String(leftPadding) + ea + " + calc(calc(calc(100% - " + String(leftPadding * 2) + ea + ") / 4) * " + String(j % 4) + "))",
        }
      });

    }
  }

}

DesignerJs.prototype.pricePannel = function () {
  const instance = this;
  const { ea, belowPannel } = this;
  const { createNode, createNodes, colorChip, withOut, isMac } = GeneralJs;
  const standard = [ "없", "하", "중", "상" ];
  const widthSpec = {
    left: [
      89.47,
      13.84,
      117.14,
      13.84,
      89.47,
      89.47,
    ],
    right: [
      18.56,
      86.25,
      10.84,
      86.25,
      23.61,
      58.58,
      10.84,
      58.58,
      72.42,
      72.42,
    ]
  };
  const priceTravelButton = "priceTravelButton";
  let motherHeight;
  let size;
  let margin;
  let title0 = {}, title1 = {}, title2 = {}, title3 = {}, title4 = {};
  let ratio0 = {}, ratio1 = {}, ratio2 = {}, ratio3 = {};
  let value0 = {}, value1 = {};
  let ratioValue0 = {}, ratioValue1 = {}, ratioValue2 = {}, ratioValue3 = {};
  let top;
  let between;
  let clickEvent;
  let accumulate;
  let betweenWords;
  let price;
  let premiumEvent;
  let newcomerEvent;
  let premiumRatioEvent;
  let newcomerRatioEvent;
  let onlineEvent;
  let onlineViewEvent;

  price = this.price.pick(3, 3);

  motherHeight = Number(belowPannel.style.height.replace(/[^0-9]/gi, ''));
  size = 16;
  margin = 24;
  top = isMac() ? 17 : 19;
  between = 8;
  betweenWords = margin * 1;

  clickEvent = function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (/디자이너/gi.test(document.getElementById(priceTravelButton).textContent)) {
      instance.priceTravel().call(document.getElementById(priceTravelButton));
    }
    const key = Number(this.getAttribute("key"));
    const target = document.getElementById("key" + String(key));
    let num;
    if (instance.key[key] === 1) {
      num = (e.type === "click" ? 2 : 3);
    } else if (instance.key[key] === 2) {
      num = (e.type === "click" ? 3 : 1);
    } else if (instance.key[key] === 3) {
      num = (e.type === "click" ? 1 : 2);
    }
    instance.key[key] = num;
    target.textContent = standard[num];
    price = instance.price.pick(...instance.key);
    instance.priceNumbers();
  }
  premiumEvent = function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (/디자이너/gi.test(document.getElementById(priceTravelButton).textContent)) {
      instance.priceTravel().call(document.getElementById(priceTravelButton));
    }
    const doms = instance.doms;
    const { matrix } = instance.price.pick(...instance.key);
    let x, y;
    if (!instance.premium.boo) {
      for (let dom of doms) {
        dom.firstChild.textContent = String(Math.round(Number(dom.firstChild.textContent) * instance.premium.ratio));
      }
      ratioValue1.textContent = 'Y';
    } else {
      for (let dom of doms) {
        x = Number(dom.getAttribute('x'));
        y = Number(dom.getAttribute('y'));
        dom.firstChild.textContent = String(Math.round(matrix[x][y] * (instance.newcomer.boo ? instance.newcomer.ratio : 1) * (!instance.premium.boo ? instance.premium.ratio : 1)));
      }
      ratioValue1.textContent = 'N';
    }
    instance.premium.boo = !instance.premium.boo;
  }
  newcomerEvent = function (e) {
    e.preventDefault();
    e.stopPropagation();
    if (/디자이너/gi.test(document.getElementById(priceTravelButton).textContent)) {
      instance.priceTravel().call(document.getElementById(priceTravelButton));
    }
    const doms = instance.doms;
    const { matrix } = instance.price.pick(...instance.key);
    let x, y;
    if (!instance.newcomer.boo) {
      for (let dom of doms) {
        dom.firstChild.textContent = String(Math.round(Number(dom.firstChild.textContent) * instance.newcomer.ratio));
      }
      ratioValue3.textContent = 'Y';
    } else {
      for (let dom of doms) {
        x = Number(dom.getAttribute('x'));
        y = Number(dom.getAttribute('y'));
        dom.firstChild.textContent = String(Math.round(matrix[x][y] * (!instance.newcomer.boo ? instance.newcomer.ratio : 1) * (instance.premium.boo ? instance.premium.ratio : 1)));
      }
      ratioValue3.textContent = 'N';
    }
    instance.newcomer.boo = !instance.newcomer.boo;
  }
  premiumRatioEvent = async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      if (/디자이너/gi.test(document.getElementById(priceTravelButton).textContent)) {
        instance.priceTravel().call(document.getElementById(priceTravelButton));
      }
      const ratio = instance.premium.ratio;
      if (1 <= ratio && ratio < 2) {
        instance.premium.ratio = Math.round((ratio + (e.type === "click" ? 0.1 : -0.1)) * 10) / 10;
      } else {
        instance.premium.ratio = 1.1;
      }
      ratioValue0.textContent = String(Math.round(instance.premium.ratio * 10) / 10);
      if (instance.premium.boo) {
        premiumEvent.call(ratioValue1, { preventDefault: () => {}, stopPropagation: () => {} });
        premiumEvent.call(ratioValue1, { preventDefault: () => {}, stopPropagation: () => {} });
      }
      await GeneralJs.ajaxJson({
        mode: "update",
        db: "console",
        collection: "designerPrice",
        whereQuery: { key: 33 },
        updateQuery: { premium: (Math.round(instance.premium.ratio * 10) / 10), newcomer: (Math.round(instance.newcomer.ratio * 10) / 10) }
      }, "/generalMongo");
    } catch (e) {
      console.log(e);
    }
  }
  newcomerRatioEvent = async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      if (/디자이너/gi.test(document.getElementById(priceTravelButton).textContent)) {
        instance.priceTravel().call(document.getElementById(priceTravelButton));
      }
      const ratio = Math.round(instance.newcomer.ratio * 10) / 10;
      if (0 < ratio && ratio < 1) {
        instance.newcomer.ratio = Math.round((ratio + (e.type === "click" ? -0.1 : 0.1)) * 10) / 10;
      } else {
        instance.newcomer.ratio = 0.9;
      }
      ratioValue2.textContent = String(Math.round(instance.newcomer.ratio * 10) / 10);
      if (instance.newcomer.boo) {
        newcomerEvent.call(ratioValue1, { preventDefault: () => {}, stopPropagation: () => {} });
        newcomerEvent.call(ratioValue1, { preventDefault: () => {}, stopPropagation: () => {} });
      }
      await GeneralJs.ajaxJson({
        mode: "update",
        db: "console",
        collection: "designerPrice",
        whereQuery: { key: 33 },
        updateQuery: { premium: (Math.round(instance.premium.ratio * 10) / 10), newcomer: (Math.round(instance.newcomer.ratio * 10) / 10) }
      }, "/generalMongo");
    } catch (e) {
      console.log(e);
    }
  }

  belowPannel.addEventListener("selectstart", (e) => { e.preventDefault(); });

  accumulate = margin;
  title0 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "디자이너 판단",
    events: [ { type: "click", event: this.priceDesignersLevel() } ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      left: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate = margin;
  ratioValue0 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: String(price.premium),
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: premiumRatioEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(600),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.green,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[0] + between;
  ratio0 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "프리미엄 비율",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: premiumRatioEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[1] + betweenWords;
  ratioValue1 = createNode({
    mother: belowPannel,
    id: "premiumBoo",
    class: [ "hoverDefault_lite" ],
    text: "N",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: premiumEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(600),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.green,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[2] + between;
  ratio1 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "프리미엄 적용",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: premiumEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[3] + betweenWords;
  ratioValue2 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: String(price.newcomer),
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: newcomerRatioEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(600),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.green,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[4] + between;
  ratio2 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "신입 비율",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: newcomerRatioEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[5] + betweenWords;
  ratioValue3 = createNode({
    mother: belowPannel,
    id: "newcomerBoo",
    class: [ "hoverDefault_lite" ],
    text: "N",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: newcomerEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(600),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.green,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[6] + between;
  ratio3 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "신입 적용",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: newcomerEvent
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[7] + betweenWords;
  ratio3 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    text: "온라인 관리",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: this.priceOnlineAdjust(),
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

  accumulate += widthSpec.right[8] + betweenWords;
  ratio3 = createNode({
    mother: belowPannel,
    class: [ "hoverDefault_lite" ],
    id: priceTravelButton,
    text: "출장비 관리",
    events: [
      {
        type: [ "click", "contextmenu" ],
        event: this.priceTravel(),
      }
    ],
    style: {
      position: "absolute",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      top: String(top) + ea,
      right: String(accumulate) + ea,
      color: colorChip.black,
      cursor: "pointer",
    }
  });

}

DesignerJs.prototype.priceDesignersLevel = function () {
  const instance = this;
  return function (e) {
    let samples;
    if (instance.levelBase === undefined || instance.levelBase === null) {
      const levelBase = instance.matrixBase.cloneNode(false);
      instance.matrixBase.style.display = "none";
      instance.garoZone.style.opacity = String(0.2);
      instance.seroZone.style.opacity = String(0.2);
      instance.levelBase = levelBase;
      instance.samples = samples;
      instance.matrixBase.parentElement.appendChild(levelBase);
      instance.priceDesignersLevelDetail();
    } else {
      instance.matrixBase.parentElement.removeChild(instance.levelBase);
      instance.matrixBase.style.display = "block";
      instance.garoZone.style.opacity = String(1);
      instance.seroZone.style.opacity = String(1);
      instance.levelBase = null;
    }
  }
}

DesignerJs.prototype.priceDesignersLevelDetail = function () {
  const instance = this;
  const { ea, levelBase, designers } = this;
  const { createNode, createNodes, withOut, colorChip, autoComma, cleanChildren, ajaxJson, isMac } = GeneralJs;
  const levelWords = [ '없', '하', '중', '상' ];
  const className = "baguni";
  let leftMargin, margin, baseTong;
  let size;
  let blocks;
  let blockMargin;
  let titleHeight;
  let innerMargin;
  let textTop;
  let x, y;
  let designerBlock;
  let blockSplit;
  let innerBlockMargin;
  let innerBlockSize;
  let innerBlockTextTop;
  let innerBlockHeight;
  let baguni;
  let dropEvent;
  let dragenterEvent;
  let dragleaveEvent;
  let dragoverEvent;

  size = 13;
  margin = 20;
  leftMargin = 32;
  blockMargin = 8;
  titleHeight = 24;
  innerMargin = 8;
  textTop = 1;
  innerBlockMargin = 4;
  innerBlockSize = 11;
  innerBlockTextTop = isMac() ? 5 : 7;
  innerBlockHeight = 27;
  blockSplit = 6;

  cleanChildren(levelBase);

  designerBlock = function (designer, fiveBoo = false) {
    let block, name;
    let style;

    block = GeneralJs.nodes.div.cloneNode(true);
    block.setAttribute("x", String(designer.analytics.construct.level));
    block.setAttribute("y", String(designer.analytics.styling.level));
    block.setAttribute("draggable", "true");
    block.setAttribute("desid", designer.desid);
    block.id = designer.desid;
    style = {
      position: "relative",
      display: "inline-block",
      marginRight: String(fiveBoo ? 0 : innerBlockMargin) + ea,
      marginBottom: String(innerBlockMargin) + ea,
      background: colorChip.white,
      width: "calc(calc(100% - " + String(innerBlockMargin * (blockSplit - 1)) + ea + ") / " + String(blockSplit) + ")",
      height: String(innerBlockHeight) + ea,
      borderRadius: String(3) + "px",
      cursor: "pointer",
      transition: "all 0s ease",
    }
    block.addEventListener("dragstart", function (e) {
      e.dataTransfer.setData("dragData", this.getAttribute("desid"));
    });
    block.addEventListener("dragenter", (e) => { e.preventDefault(); });
    block.addEventListener("dragleave", (e) => { e.preventDefault(); });
    block.addEventListener("dragover", (e) => { e.preventDefault(); });
    block.addEventListener("drop", (e) => { e.preventDefault(); });
    for (let i in style) {
      block.style[i] = style[i];
    }

    name = GeneralJs.nodes.div.cloneNode(true);
    name.textContent = designer.designer;
    style = {
      position: "absolute",
      top: String(innerBlockTextTop) + ea,
      width: String(100) + '%',
      textAlign: "center",
      fontSize: String(innerBlockSize) + ea,
      fontWeight: String(500),
      color: colorChip.black,
      wordSpacing: String(-1),
      transition: "all 0s ease",
    }
    for (let i in style) {
      name.style[i] = style[i];
    }

    block.appendChild(name);

    return block;
  }

  baseTong = createNode({
    mother: levelBase,
    style: {
      position: "relative",
      top: String(margin - textTop) + ea,
      left: String(leftMargin) + ea,
      width: withOut(100, leftMargin * 2, ea),
      height: withOut(100, margin + (margin - textTop), ea),
    }
  });

  blocks = [];
  dragenterEvent = function (e) {
    e.preventDefault();
    const x = Number(this.getAttribute('x'));
    const y = Number(this.getAttribute('y'));
    const thisTarget = blocks["xy" + String(x) + String(y)];
    const baguni = thisTarget.querySelector('.' + className);
    const pan = baguni.parentElement.parentElement;
    pan.style.background = colorChip.whiteGreen;
  }
  dragoverEvent = function (e) {
    e.preventDefault();
    const x = Number(this.getAttribute('x'));
    const y = Number(this.getAttribute('y'));
    const thisTarget = blocks["xy" + String(x) + String(y)];
    const baguni = thisTarget.querySelector('.' + className);
    const pan = baguni.parentElement.parentElement;
    pan.style.background = colorChip.whiteGreen;
  }
  dragleaveEvent = function (e) {
    e.preventDefault();
    const x = Number(this.getAttribute('x'));
    const y = Number(this.getAttribute('y'));
    const thisTarget = blocks["xy" + String(x) + String(y)];
    const baguni = thisTarget.querySelector('.' + className);
    const pan = baguni.parentElement.parentElement;
    pan.style.background = colorChip.gray1;
  }
  dropEvent = function (e) {
    e.preventDefault();
    const desid = e.dataTransfer.getData("dragData");
    const designerDom = document.getElementById(desid);
    const x = Number(this.getAttribute('x'));
    const y = Number(this.getAttribute('y'));
    const fromX = Number(designerDom.getAttribute('x'));
    const fromY = Number(designerDom.getAttribute('y'));
    const thisTarget = blocks["xy" + String(x) + String(y)];
    const fromTarget = blocks["xy" + String(fromX) + String(fromY)];
    const baguni = thisTarget.querySelector('.' + className);
    const fromBaguni = fromTarget.querySelector('.' + className);
    const pan = baguni.parentElement.parentElement;
    let length, fromLength;
    let whereQuery, updateQuery;
    pan.style.background = colorChip.gray1;
    baguni.appendChild(designerDom);

    length = baguni.children.length;
    fromLength = fromBaguni.children.length;
    for (let i = 0; i < length; i++) {
      baguni.children[i].style.marginRight = String(i % blockSplit === (blockSplit - 1) ? 0 : innerBlockMargin) + ea;
    }
    for (let i = 0; i < fromLength; i++) {
      fromBaguni.children[i].style.marginRight = String(i % blockSplit === (blockSplit - 1) ? 0 : innerBlockMargin) + ea;
    }

    designerDom.setAttribute('x', String(x));
    designerDom.setAttribute('y', String(y));
    whereQuery = { desid };
    updateQuery = { "analytics.construct.level": (x), "analytics.styling.level": (y) };
    instance.designers.update([ whereQuery, updateQuery ]);
    ajaxJson({ whereQuery, updateQuery }, "/rawUpdateDesigner").catch((err) => { console.log(err); });
  }
  for (let i = 0; i < 16; i++) {
    x = i % 4;
    y = 3 - Math.floor(i / 4);
    blocks.push(createNode({
      mother: baseTong,
      attribute: [
        { x: String(x) },
        { y: String(y) },
      ],
      events: [
        {
          type: "dragenter",
          event: (e) => { e.preventDefault(); }
        },
        {
          type: "dragleave",
          event: (e) => { e.preventDefault(); }
        },
        {
          type: "dragover",
          event: (e) => { e.preventDefault(); }
        },
      ],
      style: {
        position: "relative",
        display: "inline-block",
        width: "calc(calc(100% - " + String(blockMargin * 3) + ea + ") / 4)",
        height: "calc(calc(100% - " + String(blockMargin * 3) + ea + ") / 4)",
        marginRight: String(i % 4 === 3 ? 0 : blockMargin) + ea,
        marginBottom: String(Math.floor(i / 4) === 3 ? 0 : blockMargin) + ea,
      },
      children: [
        {
          text: `시공 능력 <b style="color:${colorChip.green}">${levelWords[x]}</b>&nbsp;&nbsp;&nbsp;&nbsp;스타일링 능력 <b style="color:${colorChip.green}">${levelWords[y]}</b>`,
          style: {
            position: "absolute",
            fontSize: String(size) + ea,
            fontWeight: String(500),
            color: colorChip.black,
            width: String(100) + '%',
            textAlign: "center",
            top: String(textTop) + ea,
            left: String(0) + ea,
          }
        },
        {
          style: {
            position: "relative",
            top: String(titleHeight) + ea,
            paddingTop: String(innerMargin) + ea,
            height: withOut(titleHeight + innerMargin, ea),
            borderRadius: String(3) + "px",
            background: colorChip.gray1,
            overflow: "hidden",
            transition: "all 0.4s ease",
          },
          children: [
            {
              attribute: [
                { x: String(x) },
                { y: String(y) },
              ],
              events: [
                {
                  type: "dragenter",
                  event: dragenterEvent
                },
                {
                  type: "dragleave",
                  event: dragleaveEvent
                },
                {
                  type: "dragover",
                  event: dragoverEvent
                },
                {
                  type: "drop",
                  event: dropEvent
                }
              ],
              style: {
                position: "relative",
                marginLeft: String(innerMargin) + ea,
                width: withOut(innerMargin * 2, ea),
                height: withOut(innerMargin, ea),
                overflow: "scroll",
              },
              children: [
                {
                  class: [ className ],
                  attribute: [
                    { x: String(x) },
                    { y: String(y) },
                  ],
                  events: [
                    {
                      type: "dragenter",
                      event: dragenterEvent
                    },
                    {
                      type: "dragleave",
                      event: dragleaveEvent
                    },
                    {
                      type: "dragover",
                      event: dragoverEvent
                    },
                    {
                      type: "drop",
                      event: dropEvent
                    }
                  ],
                  style: {
                    position: "relative",
                    width: String(100) + '%',
                    height: "auto",
                  }
                }
              ]
            }
          ]
        }
      ]
    }));
    blocks["xy" + String(x) + String(y)] = blocks[blocks.length - 1];
  }

  for (let designer of designers) {
    baguni = blocks["xy" + String(designer.analytics.construct.level) + String(designer.analytics.styling.level)].querySelector('.' + className);
    baguni.appendChild(designerBlock(designer, baguni.children.length % blockSplit === (blockSplit - 1)));
  }

}

DesignerJs.prototype.priceTravel = function () {
  const instance = this;
  const { ajaxJson } = GeneralJs;
  return async function (e) {
    try {
      let samples;
      if (/출/gi.test(this.textContent)) {
        samples = await ajaxJson({ mode: "sample" }, "/parsingAddress");
        this.textContent = "디자이너비 관리";
        const travelBase = instance.matrixBase.cloneNode(false);
        instance.matrixBase.style.display = "none";
        instance.garoZone.style.opacity = String(0.2);
        instance.seroZone.style.opacity = String(0.2);
        instance.travelBase = travelBase;
        instance.samples = samples;
        instance.matrixBase.parentElement.appendChild(travelBase);
        instance.priceTravelDetail();
      } else {
        this.textContent = "출장비 관리"
        instance.matrixBase.parentElement.removeChild(instance.travelBase);
        instance.matrixBase.style.display = "block";
        instance.garoZone.style.opacity = String(1);
        instance.seroZone.style.opacity = String(1);
        instance.travelBase = null;
      }
    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.priceTravelDetail = function () {
  const instance = this;
  const { ea, travelBase, samples, belowHeight } = this;
  const { createNode, createNodes, withOut, colorChip, autoComma, cleanChildren, ajaxJson } = GeneralJs;
  let leftMargin, margin, baseTong;
  let size;
  let blockHeight;
  let between, betweenWords;
  let tong;
  let designerTong, contentsTong;
  let designerTongWidth;
  let lineTop;
  let blockMargin, contentsMargin;
  let addressWidth, distanceWidth, timeWidth, amountWidth;
  let contentsTongWidth;
  let totalTongWidth;
  let temp, temp2, temp3, temp4;
  let ratio;
  let num;
  let smallBoo;
  let veryBigBoo;
  let totalPaddingBottom;
  let updateEvent, saveEvent;
  let updateClassName;
  let buttonBottom;
  let buttonRight;
  let buttonWidth;
  let buttonHeight;
  let buttonTextTop;

  size = 15;
  margin = 28;
  leftMargin = 32;
  blockHeight = 20;
  travelBase.style.overflow = "scroll";
  between = 14;
  betweenWords = 6;
  designerTongWidth = 230;
  contentsTongWidth = 500;
  addressWidth = 260;
  distanceWidth = 60;
  timeWidth = 85;
  amountWidth = 75;
  lineTop = 3;
  blockMargin = 20;
  contentsMargin = 12;
  totalTongWidth = 760;
  totalPaddingBottom = 160;
  buttonBottom = 147;
  buttonRight = 57;
  buttonWidth = 56;
  buttonHeight = 34;
  buttonTextTop = 6;

  temp = (((window.innerWidth - (60 + 54)) - (leftMargin * (4.5))) / 2);
  temp2 = temp - distanceWidth - timeWidth - amountWidth;
  temp3 = temp2 * (designerTongWidth / (designerTongWidth + addressWidth));
  temp4 = temp2 * (addressWidth / (designerTongWidth + addressWidth));
  designerTongWidth = temp3;
  addressWidth = temp4;
  contentsTongWidth = addressWidth + distanceWidth + timeWidth + amountWidth + (betweenWords * 3);
  totalTongWidth = designerTongWidth + contentsTongWidth;

  smallBoo = false;
  if (designerTongWidth < 200) {
    smallBoo = true;
  }
  veryBigBoo = false;
  if (window.innerWidth > 1760) {
    veryBigBoo = true;
  }

  updateClassName = "updateTarget";

  updateEvent = function (e) {
    const self = this;
    let cancelBox, inputBox;
    cancelBox = createNode({
      mother: this,
      events: [
        {
          type: "click",
          event: function (e) {
            e.preventDefault();
            e.stopPropagation();
            self.removeChild(self.lastChild);
            self.removeChild(self.lastChild);
          }
        }
      ],
      style: {
        position: "fixed",
        width: String(100) + '%',
        height: String(100) + '%',
        top: String(0) + ea,
        left: String(0) + ea,
        zIndex: String(1),
      }
    });
    inputBox = createNode({
      mother: this,
      mode: "input",
      attribute: [
        { type: "text" },
        { value: this.textContent },
      ],
      events: [
        {
          type: "click",
          event: function (e) {
            e.preventDefault();
            e.stopPropagation();
          }
        },
        {
          type: "keydown",
          event: function (e) {
            if (e.key === "Enter" || e.key === "Tab") {
              e.preventDefault();
              this.blur();
            }
          }
        },
        {
          type: "blur",
          event: function (e) {
            let targets, tong, temp, amount;
            e.preventDefault();
            this.parentElement.firstChild.textContent = this.value;
            this.parentElement.setAttribute("value", this.value.replace(/[^0-9\.]/gi, ''));

            targets = document.querySelectorAll('.' + updateClassName);
            tong = {};
            for (let dom of targets) {
              tong[dom.getAttribute("name")] = Number(dom.getAttribute("value").replace(/[^0-9\.]/gi, ''));
            }

            instance.samples.standard.unit.meters = tong.meters;
            instance.samples.standard.unit.seconds = tong.seconds;
            instance.samples.standard.consulting.hours = tong.hours;
            instance.samples.standard.consulting.labor = tong.labor;

            for (let obj of instance.samples.designers) {
              for (let obj2 of obj.detail) {
                temp = (obj2.distance * tong.meters * 2) + (tong.seconds * obj2.time * 2);
                amount = (Math.round(temp / 1000) * 1000) + (tong.hours * tong.labor);
                obj2.amount = amount;
                obj2.amountString = autoComma(amount) + '원';
              }
            }

            instance.priceTravelDetail();
          }
        }
      ],
      style: {
        position: "absolute",
        width: String(100) + '%',
        height: String(100) + '%',
        top: String(0) + ea,
        left: String(0) + ea,
        zIndex: String(1),
        border: String(0),
        outline: String(0),
        fontSize: "inherit",
        fontWeight: "inherit",
        color: "inherit",
      }
    });
    inputBox.focus();
  }

  saveEvent = function (e) {
    let targets, tong, temp, amount;

    targets = document.querySelectorAll('.' + updateClassName);
    tong = {};
    for (let dom of targets) {
      tong[dom.getAttribute("name")] = Number(dom.getAttribute("value").replace(/[^0-9\.]/gi, ''));
    }

    instance.samples.standard.unit.meters = tong.meters;
    instance.samples.standard.unit.seconds = tong.seconds;
    instance.samples.standard.consulting.hours = tong.hours;
    instance.samples.standard.consulting.labor = tong.labor;

    for (let obj of instance.samples.designers) {
      for (let obj2 of obj.detail) {
        temp = (obj2.distance * tong.meters * 2) + (tong.seconds * obj2.time * 2);
        amount = (Math.round(temp / 1000) * 1000) + (tong.hours * tong.labor);
        obj2.amount = amount;
        obj2.amountString = autoComma(amount) + '원';
      }
    }

    ajaxJson({
      mode: "update",
      db: "console",
      collection: "designerPrice",
      whereQuery: { key: 33 },
      updateQuery: {
        "travel.unit.meters": tong.meters,
        "travel.unit.seconds": tong.seconds,
        "travel.consulting.hours": tong.hours,
        "travel.consulting.labor": tong.labor,
      }
    }, "/generalMongo").then((json) => {
      window.alert("저장되었습니다!");
    }).catch((err) => {
      console.log(err);
    });

  }

  cleanChildren(travelBase);

  baseTong = createNode({
    mother: travelBase,
    style: {
      position: "relative",
      top: String(margin) + ea,
      left: String(leftMargin) + ea,
      width: withOut(100, leftMargin * 2, ea),
      paddingBottom: String(totalPaddingBottom) + ea,
      background: colorChip.white,
    }
  });

  createNode({
    mother: baseTong,
    style: {
      position: "relative",
      display: "block",
      fontSize: String(size) + ea,
      fontWeight: String(500),
      color: colorChip.black,
      width: String(100) + '%',
      height: String(blockHeight) + ea,
      marginBottom: String(blockMargin) + ea,
    },
    children: [
      {
        text: "미터당 가격 : ",
        style: {
          display: "inline-block",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          paddingRight: String(betweenWords) + ea,
        }
      },
      {
        text: String(samples.standard.unit.meters) + "원",
        events: [ { type: "click", event: updateEvent } ],
        class: [ updateClassName ],
        attribute: [ { name: "meters" }, { value: String(samples.standard.unit.meters) } ],
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: colorChip.green,
          cursor: "pointer",
          paddingRight: String(between) + ea,
        }
      },
      {
        text: "초당 가격 : ",
        style: {
          display: "inline-block",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          paddingRight: String(betweenWords) + ea,
        }
      },
      {
        text: String(samples.standard.unit.seconds) + "원",
        events: [ { type: "click", event: updateEvent } ],
        class: [ updateClassName ],
        attribute: [ { name: "seconds" }, { value: String(samples.standard.unit.seconds) } ],
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: colorChip.green,
          paddingRight: String(between) + ea,
        }
      },
      {
        text: "1회 미팅 시간 : ",
        style: {
          display: "inline-block",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          paddingRight: String(betweenWords) + ea,
        }
      },
      {
        text: String(samples.standard.consulting.hours) + "시간",
        events: [ { type: "click", event: updateEvent } ],
        class: [ updateClassName ],
        attribute: [ { name: "hours" }, { value: String(samples.standard.consulting.hours) } ],
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: colorChip.green,
          paddingRight: String(between) + ea,
        }
      },
      {
        text: "시간당 인건비 : ",
        style: {
          display: "inline-block",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          paddingRight: String(betweenWords) + ea,
        }
      },
      {
        text: autoComma(samples.standard.consulting.labor) + "원",
        events: [ { type: "click", event: updateEvent } ],
        class: [ updateClassName ],
        attribute: [ { name: "labor", value: String(samples.standard.consulting.labor) } ],
        style: {
          display: "inline-block",
          position: "relative",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: colorChip.green,
          paddingRight: String(between) + ea,
        }
      },
    ]
  });

  num = 0;
  for (let { desid, designer, address, detail } of samples.designers) {
    tong = createNode({
      mother: baseTong,
      style: {
        display: "inline-block",
        position: "relative",
        fontSize: String(size) + ea,
        fontWeight: String(500),
        color: colorChip.black,
        width: String(totalTongWidth) + ea,
        marginBottom: String(blockMargin) + ea,
        marginRight: String(num % 2 === 0 ? (leftMargin - betweenWords + (leftMargin * 0.5)) : 0) + ea,
      }
    });
    [ designerTong, contentsTong ] = createNodes([
      {
        mother: tong,
        style: {
          display: "inline-block",
          position: "relative",
          width: String(designerTongWidth) + ea,
          height: String(100) + '%',
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          verticalAlign: "top",
        },
        children: [
          {
            text: designer,
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(600),
              color: "inherit",
              paddingRight: String(betweenWords) + ea,
            }
          },
          {
            text: desid,
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(200),
              color: colorChip.gray5,
              paddingRight: String(betweenWords) + ea,
            }
          },
          {
            text: address.replace(/ \([^\)]+\)/gi, '').slice(0, 27).split(' ').slice(0, (smallBoo ? 2 : (veryBigBoo ? 20 : 3))).join(' '),
            style: {
              display: "block",
              fontSize: "inherit",
              fontWeight: String(400),
              color: "inherit",
              marginTop: String(lineTop) + ea,
              paddingRight: String(betweenWords) + ea,
            }
          },
        ]
      },
      {
        mother: tong,
        style: {
          display: "inline-block",
          position: "relative",
          width: String(contentsTongWidth) + ea,
          height: String(100) + '%',
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          verticalAlign: "top",
        }
      }
    ]);

    for (let { amountString: amount, distanceString: distance, timeString: time, to } of detail) {
      createNode({
        mother: contentsTong,
        style: {
          display: "block",
          fontSize: "inherit",
          fontWeight: "inherit",
          color: "inherit",
          height: String(100) + '%',
          marginBottom: String(contentsMargin) + ea,
        },
        children: [
          {
            text: to.replace(/ \([^\)]+\)/gi, '').slice(0, 27).split(' ').slice(0, (smallBoo ? 2 : (veryBigBoo ? 20 : 3))).join(' '),
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(400),
              color: "inherit",
              width: String(addressWidth) + ea,
              paddingRight: String(betweenWords) + ea,
            }
          },
          {
            text: distance,
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(200),
              color: colorChip.gray5,
              width: String(distanceWidth) + ea,
              paddingRight: String(betweenWords) + ea,
            }
          },
          {
            text: time,
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(200),
              color: colorChip.gray5,
              width: String(timeWidth) + ea,
              paddingRight: String(betweenWords) + ea,
            }
          },
          {
            text: amount,
            style: {
              display: "inline-block",
              fontSize: "inherit",
              fontWeight: String(400),
              color: colorChip.green,
              width: String(amountWidth) + ea,
            }
          },
        ]
      })
    }

    num++;
  }

  createNode({
    mother: travelBase,
    class: [ "hoverDefault_lite" ],
    events: [ { type: "click", event: saveEvent } ],
    style: {
      position: "fixed",
      bottom: String(belowHeight + buttonBottom) + ea,
      right: String(buttonRight) + ea,
      width: String(buttonWidth) + ea,
      height: String(buttonHeight) + ea,
      borderRadius: String(3) + "px",
      background: colorChip.gradientGreen,
    },
    children: [
      {
        text: "저장",
        style: {
          position: "absolute",
          fontSize: String(size) + ea,
          fontWeight: String(500),
          color: colorChip.white,
          width: String(100) + '%',
          textAlign: "center",
          top: String(buttonTextTop) + ea,
        }
      }
    ]
  });

}

DesignerJs.prototype.priceFeeAdjust = function () {
  const instance = this;
  const { createNode, createNodes, withOut, colorChip, ajaxJson } = GeneralJs;
  return function (e) {
    const { ea, matrixBase, garoStandards } = instance;
    const length = garoStandards.length;
    const className = "grayTarget";
    const classNameValue = "grayTargetValue";
    const fee = instance.price.pick(3, 3).fee;
    if (document.querySelector('.' + className) === null) {
      let top;
      let height, width;
      let size;

      top = <%% 16, 19, 19, 19, 19 %%>;
      width = 72;
      size = <%% 28, 24, 24, 24, 24 %%>;
      height = (top * 2) + size + 19;

      createNode({
        mother: matrixBase,
        class: [ className ],
        style: {
          position: "absolute",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          height: String(100) + '%',
          background: colorChip.gray5,
          opacity: String(0.6),
        }
      });

      for (let i = 0; i < length; i++) {
        createNodes([
          {
            mother: matrixBase,
            class: [ className ],
            events: [
              {
                type: "click",
                event: function (e) {
                  let targets, boo;
                  targets = document.querySelectorAll('.' + classNameValue);
                  boo = false;
                  for (let dom of targets) {
                    if (dom.parentElement.querySelector("input") !== null) {
                      boo = true;
                      dom.parentElement.removeChild(dom.parentElement.querySelector("input"));
                    }
                  }
                  if (!boo) {
                    targets = document.querySelectorAll('.' + className);
                    for (let dom of targets) {
                      dom.parentElement.removeChild(dom);
                    }
                  }
                }
              }
            ],
            style: {
              position: "absolute",
              width: "calc(100% / " + String(length) + ")",
              height: String(100) + '%',
              top: String(0),
              left: "calc(calc(100% / " + String(length) + ") * " + String(i) + ")",
              cursor: "pointer",
            }
          },
          {
            mother: -1,
            style: {
              position: "relative",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              height: String(100) + '%',
            }
          },
          {
            mother: -1,
            events: [ { type: "click", event: (e) => { e.stopPropagation(); } } ],
            style: {
              position: "absolute",
              width: String(width) + '%',
              height: String(height) + ea,
              left: String((100 - width) / 2) + '%',
              top: withOut(50, (height / 2), ea),
              background: colorChip.white,
              borderRadius: String(3) + "px",
              boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
              animation: "fadeup 0.3s ease forwards",
            }
          },
          {
            mother: -1,
            text: String(fee[i]) + '%',
            attribute: [
              { index: String(i) }
            ],
            class: [ classNameValue ],
            events: [
              {
                type: "click",
                event: function (e) {
                  e.stopPropagation();
                  const index = Number(this.getAttribute("index"));
                  const input = createNode({
                    mother: this.parentNode,
                    mode: "input",
                    attribute: [
                      { type: "text" },
                      { value: this.textContent },
                      { index: String(index) },
                    ],
                    events: [
                      {
                        type: "keydown",
                        event: async function (e) {
                          try {
                            if (e.key === "Tab" || e.key === "Enter") {
                              e.stopPropagation();
                              e.preventDefault();
                              const index = Number(this.getAttribute("index"));
                              const children = document.querySelectorAll('.' + classNameValue);
                              const next = (children[index + 1] === undefined) ? children[0] : children[index + 1];
                              const mother = children[index].parentElement;
                              instance.price.pick(3, 3).fee[index] = Number(this.value.replace(/[^0-9]/g, ''));
                              await ajaxJson({
                                mode: "update",
                                db: "console",
                                collection: "designerPrice",
                                whereQuery: { key: 33 },
                                updateQuery: { fee: instance.price.pick(3, 3).fee }
                              }, "/generalMongo");
                              mother.querySelector("div").textContent = String(instance.price.pick(3, 3).fee[index]) + '%';
                              mother.removeChild(mother.querySelector("input"));
                              if (e.key === "Tab") {
                                next.click();
                              }
                            }
                          } catch (e) {
                            console.log(e);
                          }
                        }
                      }
                    ],
                    style: {
                      position: "absolute",
                      fontSize: String(size) + ea,
                      fontFamily: "graphik",
                      fontWeight: String(200),
                      color: colorChip.red,
                      width: String(100) + '%',
                      textAlign: "center",
                      top: String(top) + ea,
                      border: String(0),
                      outline: String(0),
                    }
                  });
                  input.focus();
                }
              }
            ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontFamily: "graphik",
              fontWeight: String(200),
              color: colorChip.green,
              width: String(100) + '%',
              textAlign: "center",
              top: String(top) + ea,
            }
          }
        ]);
      }
    } else {
      const targets = document.querySelectorAll('.' + className);
      for (let dom of targets) {
        dom.parentElement.removeChild(dom);
      }
    }
  }
}

DesignerJs.prototype.priceOnlineAdjust = function () {
  const instance = this;
  const { createNode, createNodes, withOut, colorChip, ajaxJson, autoComma, isMac } = GeneralJs;
  return function (e) {
    if (/디자이너/gi.test(document.getElementById("priceTravelButton").textContent)) {
      instance.priceTravel().call(document.getElementById("priceTravelButton"));
    }
    const { ea, matrixBase, seroStandards } = instance;
    const length = seroStandards.length;
    const className = "grayTarget";
    const classNameValue = "grayTargetValue";
    const online = instance.price.pick(3, 3).online;

    if (document.querySelector('.' + className) === null) {
      let top;
      let height, width;
      let size;
      let subPannel, subPannelBase;
      let subPannelMargin, subPannelWidth, subPannelHeight;
      let smallSize;
      let nodeArr;
      let subPannelLeftMargin, subPannelTopMargin, subPannelTextTop, lineHeight, subPannelInputWidth, subPannelInputHeight;

      top = 16;
      width = 120;
      size = 28;
      height = (top * 2) + size + 19;
      subPannelMargin = 32;
      subPannelWidth = 352;
      subPannelHeight = 148;
      smallSize = 16;
      subPannelLeftMargin = 24;
      subPannelTopMargin = 21;
      subPannelTextTop = 2.5;
      lineHeight = 38;
      subPannelInputWidth = 160;
      subPannelInputHeight = 29;

      createNode({
        mother: matrixBase,
        class: [ className ],
        style: {
          position: "absolute",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          height: String(100) + '%',
          background: colorChip.gray5,
          opacity: String(0.6),
        }
      });

      for (let i = 0; i < length; i++) {
        createNodes([
          {
            mother: matrixBase,
            class: [ className ],
            events: [
              {
                type: "click",
                event: function (e) {
                  let targets, boo;
                  targets = document.querySelectorAll('.' + classNameValue);
                  boo = false;
                  for (let dom of targets) {
                    if (dom.parentElement.querySelector("input") !== null) {
                      boo = true;
                      dom.parentElement.removeChild(dom.parentElement.querySelector("input"));
                    }
                  }
                  if (!boo) {
                    targets = document.querySelectorAll('.' + className);
                    for (let dom of targets) {
                      dom.parentElement.removeChild(dom);
                    }
                  }
                }
              }
            ],
            style: {
              position: "absolute",
              height: "calc(100% / " + String(length) + ")",
              width: String(100) + '%',
              left: String(0),
              top: "calc(calc(100% / " + String(length) + ") * " + String(i) + ")",
              cursor: "pointer",
            }
          },
          {
            mother: -1,
            style: {
              position: "relative",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              height: String(100) + '%',
            }
          },
          {
            mother: -1,
            events: [ { type: "click", event: (e) => { e.stopPropagation(); } } ],
            style: {
              position: "absolute",
              width: String(width) + ea,
              height: String(height) + ea,
              left: withOut(50, (width / 2), ea),
              top: withOut(50, (height / 2), ea),
              background: colorChip.white,
              borderRadius: String(3) + "px",
              boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
              animation: "fadeup 0.3s ease forwards",
            }
          },
          {
            mother: -1,
            text: String(online.matrix[i]) + "회",
            attribute: [
              { index: String(i) }
            ],
            class: [ classNameValue ],
            events: [
              {
                type: "click",
                event: function (e) {
                  e.stopPropagation();
                  const index = Number(this.getAttribute("index"));
                  const input = createNode({
                    mother: this.parentNode,
                    mode: "input",
                    attribute: [
                      { type: "text" },
                      { value: this.textContent },
                      { index: String(index) },
                    ],
                    events: [
                      {
                        type: "keydown",
                        event: async function (e) {
                          try {
                            if (e.key === "Tab" || e.key === "Enter") {
                              e.stopPropagation();
                              e.preventDefault();
                              const index = Number(this.getAttribute("index"));
                              const children = document.querySelectorAll('.' + classNameValue);
                              const next = (children[index + 1] === undefined) ? children[0] : children[index + 1];
                              const mother = children[index].parentElement;
                              instance.price.pick(3, 3).online.matrix[index] = Number(this.value.replace(/[^0-9]/g, ''));

                              await ajaxJson({
                                mode: "update",
                                db: "console",
                                collection: "designerPrice",
                                whereQuery: { key: 33 },
                                updateQuery: { online: instance.price.pick(3, 3).online }
                              }, "/generalMongo");

                              mother.querySelector("div").textContent = String(instance.price.pick(3, 3).online.matrix[index]) + '회';
                              mother.removeChild(mother.querySelector("input"));
                              if (e.key === "Tab") {
                                next.click();
                              }
                            }
                          } catch (e) {
                            console.log(e);
                          }
                        }
                      }
                    ],
                    style: {
                      position: "absolute",
                      fontSize: String(size) + ea,
                      fontWeight: String(200),
                      color: colorChip.red,
                      width: String(100) + '%',
                      textAlign: "center",
                      top: String(top) + ea,
                      border: String(0),
                      outline: String(0),
                    }
                  });
                  input.focus();
                }
              }
            ],
            style: {
              position: "absolute",
              fontSize: String(size) + ea,
              fontWeight: String(200),
              color: colorChip.green,
              width: String(100) + '%',
              textAlign: "center",
              top: String(top + (isMac() ? 0 : 5)) + ea,
            }
          }
        ]);
      }

      subPannel = createNode({
        mother: matrixBase,
        class: [ className ],
        style: {
          position: "absolute",
          width: String(subPannelWidth) + ea,
          height: String(subPannelHeight) + ea,
          right: String(subPannelMargin) + ea,
          bottom: String(subPannelMargin) + ea,
          background: colorChip.white,
          borderRadius: String(3) + "px",
          boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
          animation: "fadeup 0.3s ease forwards",
        }
      });

      subPannelBase = createNode({
        mother: subPannel,
        style: {
          position: "relative",
          top: String(0),
          left: String(0),
          width: String(100) + '%',
          height: String(100) + '%',
          fontSize: String(smallSize) + ea,
          fontWeight: String(500),
          color: colorChip.black,
        }
      });

      subContents = [
        { name: "온라인 감소치 최소값", value: online.minus.min, position: "online.minus.min" },
        { name: "온라인 감소치 최대값", value: online.minus.max, position: "online.minus.max" },
        { name: "온라인 절대량 최소값", value: online.absolute.min, position: "online.absolute.min" },
      ];

      nodeArr = [];

      for (let i = 0; i < subContents.length; i++) {
        nodeArr.push({
          mother: subPannelBase,
          text: subContents[i].name,
          style: {
            position: "absolute",
            fontSize: "inherit",
            fontWeight: String(300),
            color: "inherit",
            left: String(subPannelLeftMargin) + ea,
            top: String(subPannelTopMargin + subPannelTextTop + (lineHeight * i)) + ea,
          }
        });
        nodeArr.push({
          mother: subPannelBase,
          style: {
            position: "absolute",
            width: String(subPannelInputWidth) + ea,
            height: String(subPannelInputHeight) + ea,
            background: colorChip.gray1,
            borderRadius: String(3) + "px",
            right: String(subPannelLeftMargin) + ea,
            top: String(subPannelTopMargin + (lineHeight * i)) + ea,
            fontSize: "inherit",
            fontWeight: "inherit",
            color: "inherit",
          },
          children: [
            {
              mode: "input",
              attribute: [
                { index: String(i) },
                { type: "text" },
                { value: autoComma(subContents[i].value) + '원' },
              ],
              events: [
                {
                  type: "focus",
                  event: function (e) {
                    this.style.color = colorChip.green;
                  }
                },
                {
                  type: "blur",
                  event: function (e) {
                    const index = Number(this.getAttribute("index"));
                    const position = subContents[index].position;
                    let whereQuery, updateQuery;

                    whereQuery = { key: 33 };
                    updateQuery = {};
                    updateQuery[position] = Number(this.value.trim().replace(/[^0-9]/gi, ''));

                    ajaxJson({
                      mode: "update",
                      db: "console",
                      collection: "designerPrice",
                      whereQuery: whereQuery,
                      updateQuery: updateQuery
                    }, "/generalMongo").catch((err) => {
                      console.log(err);
                    });

                    instance.price.update([ whereQuery, updateQuery ]);
                    this.value = autoComma(Number(this.value.trim().replace(/[^0-9]/gi, ''))) + '원';
                    this.style.color = colorChip.black;
                  }
                },
                {
                  type: "keydown",
                  event: function (e) {
                    if (e.key === "Enter") {
                      this.blur();
                    }
                  }
                }
              ],
              style: {
                position: "absolute",
                width: String(100) + '%',
                height: String(isMac() ? 95 : 100) + '%',
                fontSize: String(smallSize - 1) + ea,
                fontWeight: "inherit",
                color: "inherit",
                border: String(0),
                outline: String(0),
                background: "transparent",
                textAlign: "center",
              }
            }
          ]
        });
      }

      createNodes(nodeArr);

    } else {
      const targets = document.querySelectorAll('.' + className);
      for (let dom of targets) {
        dom.parentElement.removeChild(dom);
      }
    }
  }
}

DesignerJs.prototype.priceView = async function () {
  const instance = this;
  try {
    const { colorChip, ajaxJson, sleep, cssInjection } = GeneralJs;
    let loading, price;

    cssInjection("* { transition: all 0.2s ease }");
    class PriceMatrix extends Array {
      constructor(arr) {
        super();
        for (let i of arr) {
          this.push(i);
        }
      }
      select(key0, key1) {
        if (typeof key0 !== "number" || typeof key1 !== "number") {
          throw new Error("input must be level, level");
        }
        if (!(0 <= key0 && key0 < 4)) {
          throw new Error("invaild level");
        }
        if (!(0 <= key1 && key1 < 4)) {
          throw new Error("invaild level");
        }
        const key = (key0 * 10) + key1;
        let target = null;
        for (let obj of this) {
          if (obj.key === key) {
            target = obj;
            break;
          }
        }
        return target;
      }
      search(key0, key1) {
        return this.select(key0, key1);
      }
      find(key0, key1) {
        return this.select(key0, key1);
      }
      pick(key0, key1) {
        return this.select(key0, key1);
      }
      key(key0, key1) {
        return this.select(key0, key1);
      }
      allCase(key0, key1) {
        if (typeof key0 !== "number" || typeof key1 !== "number") {
          throw new Error("input must be level, level");
        }
        const words = [ "없", "하", "중", "상" ];
        const add = (num) => { return ((num + 1) === 4 ? 1 : (num + 1)); }
        const subtract = (num) => { return ((num - 1) === -1 ? 3 : (num - 1)); }
        const doubleAdd = (num) => { return ((num + 2) === 4 ? 1 : (num + 2)); }
        const doubleSubtract = (num) => { return ((num - 2) === -1 ? 3 : (num - 2)); }
        let arr;
        let standard;
        let tempArr;
        let order = [
          [ doubleSubtract(key0), add(key1) ],
          [ subtract(key0), add(key1) ],
          [ key0, add(key1) ],
          [ add(key0), add(key1) ],

          [ doubleSubtract(key0), key1 ],
          [ subtract(key0), key1 ],
          [ key0, key1 ],
          [ add(key0), key1 ],
          
          [ doubleSubtract(key0), subtract(key1) ],
          [ subtract(key0), subtract(key1) ],
          [ key0, subtract(key1) ],
          [ add(key0), subtract(key1) ],

          [ doubleSubtract(key0), doubleSubtract(key1) ],
          [ subtract(key0), doubleSubtract(key1) ],
          [ key0, doubleSubtract(key1) ],
          [ add(key0), doubleSubtract(key1) ],
        ];
        tempArr = [];
        arr = [];
        for (let [ x, y ] of order) {
          tempArr.push(words[x] + words[y]);
          arr.push(this.pick(x, y));
        }
        standard = [];
        for (let i = 0; i < 36; i++) {
          standard.push(JSON.parse(JSON.stringify(tempArr)));
        }

        return { price: (new PriceMatrix(arr)), standard };
      }
      update(queryArr) {
        if (!Array.isArray(queryArr)) {
          throw new Error("must be query arr");
        }
        if (queryArr.length !== 2) {
          throw new Error("must be query arr");
        }
        const [ whereQuery, updateQuery ] = queryArr;
        if (typeof whereQuery !== "object" || typeof updateQuery !== "object") {
          throw new Error("invaild query");
        }
        if (whereQuery.key === undefined) {
          throw new Error("invaild whereQuery");
        }
        let tempArr, targetObj;
        for (let position in updateQuery) {
          tempArr = position.split('.');
          targetObj = this.pick(Math.floor(whereQuery.key / 10), whereQuery.key % 10);
          for (let i = 0; i < tempArr.length - 1; i++) {
            targetObj = targetObj[tempArr[i]];
          }
          targetObj[tempArr[tempArr.length - 1]] = updateQuery[position];
        }
      }
    }

    loading = await this.mother.loadingRun();

    this.designers = new Designers(await ajaxJson({ noFlat: true }, "/getDesigners", { equal: true }));
    this.domClassName = "priceDom";
    this.price = new PriceMatrix(await ajaxJson({
      mode: "read",
      db: "console",
      collection: "designerPrice",
      whereQuery: {},
    }, BACKHOST + "/generalMongo", { equal: true }));


    
    this.seroStandards = this.price.pick(3, 3).standard.y.string;
    this.garoStandards = this.price.pick(3, 3).standard.x.string;
    this.key = [ 2, 2 ];
    this.doms = null;
    this.eventFunc = null;
    this.cancelBox = null;
    this.belowPannel = null;
    this.newcomer = {
      boo: false,
      ratio: this.price.pick(3, 3).newcomer
    };
    this.premium = {
      boo: false,
      ratio: this.price.pick(3, 3).premium
    };
    this.matrixBase = null;
    this.priceBase();

    loading.parentNode.removeChild(loading);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.projectDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight, middleMode } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip } = GeneralJs;
  let target, pastScrollTop;

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  if (!middleMode) {
    this.pageHistory.unshift({ path: "project", status: "list", desid });
  }
  window.history.pushState({ path: "project", status: "list", desid }, '');

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  if (!middleMode) {
    target = null;
    for (let i = 0; i < this.standardDoms.length; i++) {
      if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
        if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
          target = i;
        }
      }
    }
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (i !== target) {
        this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
      } else {
        this.standardDoms[i].style.color = colorChip.green;
        if (i !== 1) {
          if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
            standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
          }
        } else {
          standardBar.parentElement.scrollTo({ top: 0 });
        }
      }
    }
  }

  if (middleMode) {
    ajaxJson({
      page: "project",
      mode: "page",
      who: instance.designer.information.phone,
      desid,
    }, "/ghostDesigner_updateAnalytics").then((message) => {
      console.log(message);
    }).catch((err) => {
      console.log(err);
    });
  }

  this.projectDetail(desid);
  this.projectIconSet(desid);
  scrollTo(totalMother, pastScrollTop);
  if (callback !== null) {
    if (typeof callback === "function") {
      callback();
    }
  }
}

DesignerJs.prototype.projectDetail = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, findByAttribute, uniqueValue, swipePatch, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, projectMap, middleMode } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const token = "__split__";
  const detailWhitePopupConst = "detailWhitePopupConst";
  let designer;
  let margin;
  let baseTong0, baseTong;
  let tempObj, nodeArr, subNodeArr;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let temp;
  let tong;
  let baseTongMarginBottom;
  let baseTongPaddingTop, baseTongPaddingBottom;
  let divisionEntireMap;
  let baseArea;
  let num, num2;
  let areaBetween;
  let innerPaddingTop;
  let innerPaddingLeft;
  let titleHeight;
  let areaPaddingTop, areaPaddingLeft, areaPaddingBottom;
  let areaTitleTop, areaTitleLeft;
  let fontSize0, fontSize1, fontSize2, fontSize3;
  let mainTitleTextTop, mainTitleTextLeft;
  let countNumberBetween;
  let countNumberTextTop;
  let lastMargin;
  let cardHeight;
  let cardMargin;
  let areaMinHeight;
  let cards;
  let whiteCard, nameWord, idWord;
  let division;
  let divideArr, sizeArr;
  let totalStandard;
  let tempSize;
  let divideNumber;
  let cardWidthConstant;
  let fixedHeightSize;
  let outerMargin;
  let divisionMap;
  let nameFontSize, nameWordTop;
  let idFontSize, idWordTop;
  let intend;
  let between;
  let requestNumber;
  let grayBarWidthMinus;
  let numbers;
  let greenPannel;
  let greenPannelBottom, greenPannelRight, greenPannelVisual;
  let greenPannelHeight, greenPannelZIndex;
  let greenPannelPaddingLeft, greenPannelPaddingTop;
  let greenPannelCard;
  let greenPannelCardPaddingLeft;
  let greenPannelCardHeight;
  let greenPannelCardInnerMargin;
  let greenPannelCardSize, greenPannelCardWeight;
  let greenPannelCardVisual;

  designer = this.designers.pick(desid);
  divisionEntireMap = projectMap.action.itemMap;
  divisionMap = [];
  for (let arr of divisionEntireMap) {
    divisionMap = divisionMap.concat(arr[1]);
  }

  cardWidthConstant = <%% 140, 140, 140, 140, 14 %%>;
  fixedHeightSize = <%% 40, 40, 40, 40, 7 %%>;

  margin = <%% 8, 8, 8, 8, 1 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 11 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 3.5 %%>;

  outerMargin = <%% 24, 24, 24, 24, 4 %%>;

  baseTongPaddingTop = 1;
  baseTongPaddingBottom = <%% 50, 50, 50, 50, 5 %%>;

  areaBetween = <%% 13, 12, 12, 12, 1.5 %%>;
  innerPaddingTop = <%% 24, 22, 20, 16, 5.2 %%>;
  innerPaddingLeft = <%% 36, 32, 30, 24, 6 %%>;
  titleHeight = <%% 62, 58, 56, 52, 10.5 %%>;

  areaPaddingTop = <%% (isMac() ? 48 : 47), (isMac() ? 48 : 47), (isMac() ? 46 : 45), (isMac() ? 44 : 43), 7.5 %%>;
  areaPaddingLeft = 0;
  areaPaddingBottom = 0;

  areaTitleTop = <%% (isMac() ? 13 : 15), (isMac() ? 13 : 15), (isMac() ? 13 : 15), (isMac() ? 13 : 15), 1.7 %%>;
  areaTitleLeft = <%% 20, 20, 20, 20, 3 %%>;

  fontSize0 = <%% 25, 23, 22, 21, 4 %%>;
  fontSize1 = <%% 16, 16, 15, 14, 2.8 %%>;
  fontSize2 = <%% 14, 14, 13, 12, 3 %%>;
  fontSize3 = <%% 12, 12, 11, 11, 2.5 %%>;

  mainTitleTextTop = <%% -3, -3, -3, -3, 0 %%>;
  mainTitleTextLeft = <%% 3, 3, 3, 3, 1 %%>;
  countNumberBetween = <%% 9, 9, 9, 9, 1 %%>;
  countNumberTextTop = <%% 1, 1, 1, 1, 0 %%>;

  lastMargin = <%% 30, 30, 30, 30, 3 %%>;

  cardHeight = <%% 40, 40, 40, 40, 6 %%>;
  cardMargin = <%% 10, 10, 10, 10, 1.5 %%>;
  areaMinHeight = cardHeight + (cardMargin * 2);

  nameFontSize = <%% 14, 14, 14, 14, 2.8 %%>;
  idFontSize = <%% 11, 11, 11, 11, 2.8 %%>;
  nameWordTop = <%% (isMac() ? 9 : 11), (isMac() ? 9 : 11), (isMac() ? 9 : 11), (isMac() ? 9 : 11), -0.3 %%>;
  idWordTop = <%% (isMac() ? 13 : 14), (isMac() ? 13 : 14), (isMac() ? 13 : 14), (isMac() ? 13 : 14), 3 %%>;
  intend = <%% 16, 16, 16, 16, 4 %%>;
  between = <%% 8, 8, 8, 8, 1 %%>;

  greenPannelBottom = <%% 40, 40, 40, 40, 4 %%>;
  greenPannelRight = <%% 40, 40, 40, 40, 4 %%>;
  greenPannelVisual = <%% 2, 2, 2, 2, 0 %%>;
  greenPannelHeight = <%% 95, 95, 95, 95, 9 %%>;
  greenPannelZIndex = <%% 3, 3, 3, 3, 0 %%>;

  greenPannelPaddingLeft = <%% 12, 12, 12, 12, 1 %%>;
  greenPannelPaddingTop = <%% 12, 12, 12, 12, 1 %%>;

  greenPannelCardPaddingLeft = <%% 16, 16, 16, 16, 2 %%>;
  greenPannelCardHeight = <%% 33, 33, 33, 33, 3 %%>;
  greenPannelCardInnerMargin = <%% 5, 5, 5, 5, 1 %%>;

  greenPannelCardSize = <%% 13, 13, 13, 13, 1 %%>;
  greenPannelCardWeight = 500;
  greenPannelCardVisual = <%% (isMac() ? -2 : 0), (isMac() ? -2 : 0), (isMac() ? -2 : 0), (isMac() ? -2 : 0), 0 %%>;

  grayBarWidthMinus = this.grayBarWidth;
  cards = designer.projects;

  divideArr = [];
  sizeArr = [];
  for (let i = 0; i < 5; i++) {
    if (desktop) {
      totalStandard = (window.innerWidth - grayBarWidthMinus - (outerMargin * 2) - (innerPaddingLeft * 2) - 2 - (areaPaddingLeft * 2) - (((areaPaddingLeft * 2) + areaBetween + 2) * i)) / (i + 1);
    } else {
      totalStandard = (100 - (outerMargin * 2) - (innerPaddingLeft * 2) - (areaPaddingLeft * 2) - (((areaPaddingLeft * 2) + areaBetween + 2) * i)) / (i + 1);
    }
    divideNumber = Math.floor(totalStandard / (cardMargin + cardWidthConstant));
    if (divideNumber === 0) {
      divideNumber = 1;
    }
    tempSize = (totalStandard - (cardMargin * (divideNumber + 1))) / divideNumber;
    divideArr.push(divideNumber);
    sizeArr.push(tempSize);
  }

  if (mobile) {
    totalMother.style.background = colorChip.gray2;
  }

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(margin * 3) + ea : (this.middleMode ? String(60) + "px" : String(0)),
      left: String(grayBarWidth + outerMargin) + ea,
      width: withOut(grayBarWidth + (outerMargin * 2), ea),
      height: "auto",
      animation: "",
      paddingTop: desktop ? "" : String(outerMargin) + ea,
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: colorChip.white,
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingTop: String(innerPaddingTop) + ea,
      paddingBottom: String(baseTongPaddingBottom) + ea,
    }
  });

  greenPannel = createNode({
    mother: baseTong0,
    style: {
      display: desktop ? "block" : "none",
      position: "fixed",
      bottom: String(belowHeight + greenPannelBottom) + ea,
      right: String(greenPannelRight) + ea,
      width: withOut(grayBarWidth + (greenPannelRight * 2) + (greenPannelVisual) + (greenPannelPaddingLeft * 2), ea),
      height: String(greenPannelHeight - (greenPannelPaddingTop * 2)) + ea,
      background: colorChip.gradientGreen3,
      zIndex: String(greenPannelZIndex),
      borderRadius: String(5) + "px",
      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
      opacity: String(0),
      animation: "fadeup 0.5s ease 0.7s forwards",
      paddingTop: String(greenPannelPaddingTop) + ea,
      paddingBottom: String(greenPannelPaddingTop) + ea,
      paddingLeft: String(greenPannelPaddingLeft) + ea,
      paddingRight: String(greenPannelPaddingLeft) + ea,
      overflow: "scroll",
    }
  });
  this.greenPannel = greenPannel;
  GeneralJs.stacks.greenPannel = greenPannel;

  numbers = new Map();
  division = new Map();
  for (let [ title, subTitles ] of divisionEntireMap) {

    createNode({
      mother: baseTong,
      style: {
        display: "flex",
        position: "relative",
        alignItems: "center",
        height: String(titleHeight) + ea,
        paddingLeft: String(innerPaddingLeft) + ea,
      },
      children: [
        {
          text: title,
          style: {
            fontSize: String(fontSize0) + ea,
            fontWeight: String(600),
            color: colorChip.black,
            position: "relative",
            top: String(mainTitleTextTop) + ea,
            left: String(mainTitleTextLeft) + ea,
          }
        }
      ]
    });

    num2 = 0;
    for (let subTitle of subTitles) {
      baseArea = createNode({
        mother: baseTong,
        style: {
          display: "flex",
          flexDirection: "row",
          position: "relative",
          paddingLeft: String(innerPaddingLeft) + ea,
          width: withOut(innerPaddingLeft * 2, ea),
          marginBottom: String(num2 !== subTitles.length - 1 ? areaBetween : lastMargin) + ea,
        },
      });
      num = 0;
      for (let sub of subTitle) {
        tong = createNode({
          mother: baseArea,
          style: {
            verticalAlign: "top",
            position: "relative",
            borderRadius: String(5) + "px",
            border: "1px dashed " + colorChip.gray4,
            boxSizing: "border-box",
            width: "calc(calc(100% - " + String(areaBetween * (subTitle.length - 1)) + ea + ") / " + String(subTitle.length) + ")",
            marginRight: String(num !== subTitle.length - 1 ? areaBetween : 0) + ea,
            paddingTop: String(areaPaddingTop) + ea,
            paddingLeft: String(areaPaddingLeft) + ea,
            paddingRight: String(areaPaddingLeft) + ea,
            paddingBottom: String(areaPaddingBottom) + ea,
          },
          children: [
            {
              style: {
                display: "block",
                position: "absolute",
                width: withOut(areaTitleLeft * 2, ea),
                top: String(areaTitleTop) + ea,
                left: String(areaTitleLeft) + ea,
              },
              children: [
                {
                  text: sub,
                  style: {
                    display: "inline-block",
                    position: "relative",
                    fontSize: String(fontSize1) + ea,
                    fontWeight: String(600),
                    color: colorChip.black,
                  }
                },
                {
                  text: String(0) + "명",
                  style: {
                    display: desktop ? "inline-block" : "none",
                    position: "relative",
                    fontSize: String(fontSize2) + ea,
                    fontWeight: String(400),
                    color: colorChip.deactive,
                    top: String(countNumberTextTop) + ea,
                    marginLeft: String(countNumberBetween) + ea,
                  }
                }
              ]
            },
            {
              attribute: {
                kinds: "area",
                name: sub,
                action: sub,
                family: JSON.stringify(subTitle),
                length: String(subTitle.length),
                size: String(sizeArr[subTitle.length - 1]),
                divide: String(divideArr[subTitle.length - 1]),
              },
              event: {
                dragenter: (e) => { e.preventDefault(); },
                dragleave: function (e) {
                  e.preventDefault();
                  this.style.background = colorChip.gray1;
                  this.parentElement.firstChild.style.color = colorChip.black;
                },
                dragover: function (e) {
                  e.preventDefault();
                  this.style.background = colorChip.whiteGreen;
                  this.parentElement.firstChild.style.color = colorChip.green;
                },
                drop: async function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  const name = this.getAttribute("name");
                  const length = Number(this.getAttribute("length"));
                  const size = Number(this.getAttribute("size"));
                  const divide = Number(this.getAttribute("divide"));
                  const proid = e.dataTransfer.getData("dragData").split(token)[0];
                  const fromAction = e.dataTransfer.getData("dragData").split(token)[1];
                  const requestNumber = Number(e.dataTransfer.getData("dragData").split(token)[2]);
                  const card = findByAttribute(instance.whiteCards, [ "proid", "request" ], [ proid, String(requestNumber) ]);
                  const from = division.get(fromAction);
                  const fromSize = Number(from.getAttribute("size"));
                  const fromName = from.getAttribute("name");
                  const fromDivide = Number(from.getAttribute("divide"));
                  instance.randomToken = uniqueValue();
                  try {
                    let thisChildren;
                    let thisChildrenLength;

                    this.style.background = colorChip.gray1;
                    this.parentElement.firstChild.style.color = colorChip.black;
                    this.appendChild(card);

                    thisChildren = this.children;
                    thisChildrenLength = thisChildren.length;
                    for (let c of thisChildren) {
                      c.style.width = String(size) + ea;
                    }

                  } catch (e) {
                    console.log(e);
                  }
                },
              },
              style: {
                display: "block",
                position: "relative",
                background: colorChip.gray1,
                minHeight: String(areaMinHeight - cardMargin) + ea,
                height: withOut(cardMargin, ea),
                borderRadius: String(5) + "px",
                paddingBottom: String(cardMargin) + ea,
                borderTopRightRadius: desktop ? "" : String(0),
                borderTopLeftRadius: desktop ? "" : String(0),
              }
            }
          ]
        });
        numbers.set(sub, tong.children[0].children[1]);
        division.set(sub, tong.children[1]);
        num++;
      }
      num2++;
    }
  }

  this.whiteCards = [];
  for (let obj of cards) {
    whiteCard = createNode({
      mother: division.get(obj.process.action),
      attribute: {
        kinds: "card",
        action: obj.process.action,
        proid: obj.proid,
        cliid: obj.cliid,
        draggable: "true",
        request: String(obj.requestNumber),
      },
      event: {
        dragstart: function (e) {
          e.dataTransfer.setData("dragData", this.getAttribute("proid") + token + this.getAttribute("action") + token + this.getAttribute("request"));
        },
        dragend: function (e) {
          e.preventDefault();
        },
        dragenter: function (e) {
          e.preventDefault();
        },
        dragleave: function (e) {
          e.preventDefault();
        },
        click: async function (e) {
          const proid = this.getAttribute("proid");
          const action = this.getAttribute("action");
          const requestNumber = Number(this.getAttribute("request"));
          const cliid = this.getAttribute("cliid");
          const totalMother = document.querySelector(".totalMother");
          const zIndex = 2;
          try {
            let cancelBack, whiteBox;
            let whiteMargin;
            let whiteResult;
            let mobileNavigatorHeight;

            if (instance.greenPannel !== undefined && instance.greenPannel !== null) {
              instance.greenPannel.style.bottom = String(-1 * greenPannelHeight) + "px";
            }

            if (desktop) {
              whiteMargin = Math.floor(totalMother.getBoundingClientRect().height * (1 / 27));
            } else {
              whiteMargin = 4;
            }
            mobileNavigatorHeight = 60;
            cancelBack = createNode({
              mother: totalMother,
              mode: "aside",
              event: {
                click: function (e) {
                  document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                  document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                  if (instance.greenPannel !== undefined && instance.greenPannel !== null) {
                    instance.greenPannel.style.bottom = String(belowHeight + greenPannelBottom) + "px";
                  }
                }
              },
              style: {
                position: "fixed",
                top: String(0),
                left: String(instance.grayBarWidth) + ea,
                width: withOut(instance.grayBarWidth, ea),
                height: desktop ? withOut(belowHeight, ea) : String(100) + "%",
                background: colorChip.shadow,
                zIndex: String(zIndex),
                animation: "justfadeinmiddle 0.3s ease forwards",
              }
            });
            whiteBox = createNode({
              mother: totalMother,
              mode: "aside",
              class: [ detailWhitePopupConst ],
              style: {
                position: "fixed",
                top: desktop ? String(whiteMargin) + ea : "calc(" + String(whiteMargin) + ea + " + " + String(mobileNavigatorHeight) + "px" + ")",
                left: String(instance.grayBarWidth + whiteMargin) + ea,
                width: withOut(instance.grayBarWidth + (whiteMargin * 2), ea),
                height: desktop ? withOut(belowHeight + (whiteMargin * 2), ea) : "calc(calc(100% - " + String(whiteMargin * 2) + ea + ") - " + String(belowHeight + mobileNavigatorHeight) + "px)",
                background: colorChip.white,
                borderRadius: String(5) + "px",
                zIndex: String(zIndex),
                boxShadow: "0px 3px 15px -9px " + colorChip.darkDarkShadow,
                animation: "fadeup 0.3s ease forwards",
              }
            });

            await instance.projectWhiteDetail(whiteBox, action, proid, cliid, requestNumber, desid, divisionEntireMap);

            if (mobile) {
              swipePatch({
                left: (e) => {
                  if (document.querySelector('.' + detailWhitePopupConst) !== null) {
                    document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                    document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                  }
                },
                right: (e) => {
                  if (document.querySelector('.' + detailWhitePopupConst) !== null) {
                    document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                    document.querySelector(".totalMother").removeChild(document.querySelector(".totalMother").lastChild);
                  }
                },
              });
            }
          } catch (e) {
            console.log(e);
          }
        }
      },
      style: {
        display: desktop ? "inline-block" : "inline-flex",
        position: "relative",
        width: desktop ? String(sizeArr[divisionMap[divisionMap.findIndex((arr) => { return arr.includes(obj.process.action); })].length - 1]) + ea : "calc(" + String(sizeArr[divisionMap[divisionMap.findIndex((arr) => { return arr.includes(obj.process.action); })].length - 1]) + ea + " - " + String(2 / divideArr[divisionMap[divisionMap.findIndex((arr) => { return arr.includes(obj.process.action); })].length - 1]) + "px" + ")",
        height: String(fixedHeightSize) + ea,
        marginLeft: String(cardMargin) + ea,
        marginTop: String(cardMargin) + ea,
        background: colorChip.white,
        borderRadius: String(5) + "px",
        cursor: "pointer",
        justifyContent: desktop ? "" : "center",
        alignItems: desktop ? "" : "center",
      }
    });

    nameWord = createNode({
      mother: whiteCard,
      text: obj.name,
      style: {
        display: "inline-block",
        position: "relative",
        fontSize: String(nameFontSize) + ea,
        fontWeight: String(500),
        top: String(nameWordTop) + ea,
        marginLeft: desktop ? String(intend) + ea : "",
        color: desktop ? colorChip.black : colorChip.green,
        cursor: "pointer",
      }
    });
    idWord = createNode({
      mother: whiteCard,
      text: obj.proid,
      style: {
        display: desktop ? "inline-block" : "none",
        position: "relative",
        fontSize: String(idFontSize) + ea,
        fontWeight: String(400),
        top: String(nameWordTop) + ea,
        marginLeft: String(between) + ea,
        color: colorChip.green,
        cursor: "pointer",
      }
    });

    greenPannelCard = createNode({
      mother: greenPannel,
      attribute: {
        proid: obj.proid
      },
      event: {
        click: function (e) {
          const proid = this.getAttribute("proid");
          const target = findByAttribute(instance.whiteCards, "proid", proid);
          scrollTo(document.querySelector(".mainBaseTong").parentElement, target, 50);
        }
      },
      style: {
        display: desktop ? "inline-flex" : "none",
        position: "relative",
        background: colorChip.white,
        paddingLeft: String(greenPannelCardPaddingLeft) + ea,
        paddingRight: String(greenPannelCardPaddingLeft) + ea,
        height: String(greenPannelCardHeight) + ea,
        marginRight: String(greenPannelCardInnerMargin) + ea,
        marginBottom: String(greenPannelCardInnerMargin) + ea,
        borderRadius: String(5) + "px",
        justifyContent: "center",
        alignItems: "center",
        cursor: "pointer",
      },
      children: [
        {
          text: obj.name,
          style: {
            fontSize: String(greenPannelCardSize) + ea,
            fontWeight: String(greenPannelCardWeight),
            color: colorChip.green,
            position: "relative",
            top: String(greenPannelCardVisual) + ea,
          }
        }
      ]
    });

    this.whiteCards.push(whiteCard);
  }

  numbers.forEach((value, key) => {
    numbers.get(key).textContent = String(division.get(key).children.length) + "명";
    numbers.get(key).setAttribute("number", String(division.get(key).children.length));
  });

  this.divisionMap = division;
  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.projectWhiteDetail = function (mother, action, proid, cliid, requestNumber, desid, divisionEntireMap) {
  const instance = this;
  const { createNode, colorChip, withOut, ajaxJson, setQueue, cleanChildren, isMac, scrollTo, copyJson, colorCalendar } = GeneralJs;
  const { ea, projects, clients, designers, projectMap, checklist, totalMother } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  try {
    let pIndex, cIndex;
    let project, client, designer;
    let base;
    let baseTop;
    let baseLeft;
    let titleSize;
    let titleTextBetween;
    let titlePaddingBottom;
    let areaMother, area;
    let barHeight;
    let factorSize;
    let num;
    let titleHeight;
    let descriptionMap;
    let textArea;
    let checklistFactor;
    let contentsBase;
    let contentsBasePaddingTop;
    let contentsBetween;
    let contentsHeightBetween;
    let contentsHeightBetweenRatio;
    let firstContents, secondContents, thirdContents, fourthContents;
    let firstContentsWidth, secondContentsWidth, thirdContentsWidth;
    let baseHeight;
    let percentage;
    let borderSize;
    let buttonsNumber;
    let contentsCalendarHeight;
    let blockHeightNumber;
    let blockHeight;
    let blockScrollBox;
    let blockWidth;
    let blockLeft;
    let blockInnerMargin;
    let blockColor;
    let blockFontColor;
    let blockFontSize, blockFontTop;
    let blockNameSize;
    let blockNameTop;
    let blockNameLeft;
    let blockIconHeight;
    let entireActionRaw, entireAction;
    let nullObject, nullNumber;
    let blockIconTop;
    let iconFillColor;
    let blockBackColor;
    let secondContentsCalendar, secondContentsTable;
    let calendarIndent;
    let calendarMarginTop, calendarMarginBottom;
    let customButtons;
    let customButtonNumberTop, customButtonNumberLeft, customButtonNumberSize;
    let customButtonTitleBottom, customButtonTitleRight, customButtonTitleWidth, customButtonTitleHeight, customButtonTitleSize;
    let secondContentsTableBase;
    let secondContentsTableContentsTitle, secondContentsTableContentsBase;
    let secondContentsSize;
    let secondContentsMarginTop;
    let secondContentsMarginLeft;
    let secondContentsMarginBetween;
    let secondContentsTableInnerPaddingTop, secondContentsTableInnerPaddingLeft;
    let secondContentsTableInnerContentsHeight, secondContentsTableInnerContentsBetween;
    let secondContentsTableInnerContentsLineHeight;
    let secondContentsTableInnerContentsTitleWeight;
    let secondContentsTableInnerContentsValueWeight;
    let secondContentsTableInnerContentsWidthRatio;
    let secondContentsTableInnerContentsHeightRatio;

    // DEV ===============================================================================================

    let dummySchedule;

    dummySchedule = [
      {
        date: {
          start: new Date(2022, 0, 10),
          end: new Date(2022, 0, 18),
        },
        contents: {
          title: "안녕하세요",
          description: "test",
          color: colorChip.green
        }
      },
      {
        date: {
          start: new Date(2022, 0, 19),
          end: new Date(2022, 0, 30),
        },
        contents: {
          title: "안녕하세요",
          description: "test",
          color: colorChip.green
        }
      },
      {
        date: {
          start: new Date(2022, 0, 19),
          end: new Date(2022, 0, 30),
        },
        contents: {
          title: "안녕하세요",
          description: "test",
          color: colorChip.green
        }
      },
      {
        date: {
          start: new Date(2022, 0, 19),
          end: new Date(2022, 0, 30),
        },
        contents: {
          title: "안녕하세요",
          description: "test",
          color: colorChip.green
        }
      },
    ];
    customButtons = [
      {
        name: "선호 사진\n다시 선택",
      },
      {
        name: "추가 현장\n사진 전송",
      },
      {
        name: "디자이너 제안서\n다시보기",
      },
      {
        name: "현장 미팅 안내\n다시보기",
      },
      {
        name: "선호 사진\n다시 선택",
      },
      {
        name: "추가 현장\n사진 전송",
      },
      {
        name: "디자이너 제안서\n다시보기",
      },
      {
        name: "현장 미팅 안내\n다시보기",
      },
    ];
    buttonsNumber = customButtons.length;

    // DEV ===============================================================================================

    nullObject = { name: null };
    nullNumber = 5;
    entireActionRaw = divisionEntireMap.map((arr) => { return arr[1]; });
    entireAction = [ copyJson(nullObject) ];
    for (let arr of entireActionRaw) {
      for (let arr2 of arr) {
        for (let str of arr2) {
          entireAction.push({ name: str });
        }
      }
    }
    for (let i = 0; i < nullNumber; i++) {
      entireAction.push(copyJson(nullObject));
    }

    pIndex = projects.findIndex((obj) => { return obj.proid === proid; });
    cIndex = clients.findIndex((obj) => { return obj.cliid === cliid; });

    project = projects[pIndex];
    client = clients[cIndex];
    designer = designers.pick(desid);
    const { request, analytics } = client.requests[requestNumber];

    if (desktop) {
      baseTop = totalMother.getBoundingClientRect().height * (40 / 1080);
      baseLeft = totalMother.getBoundingClientRect().height * (45 / 1080);
      baseBottom = totalMother.getBoundingClientRect().height * (48 / 1080);
      titleSize = totalMother.getBoundingClientRect().height * (22 / 1080);
      titleHeight = totalMother.getBoundingClientRect().height * (31 / 1080);
      titleTextBetween = totalMother.getBoundingClientRect().height * (10 / 1080);
      titlePaddingBottom = totalMother.getBoundingClientRect().height * (13 / 1080);
      contentsBasePaddingTop = totalMother.getBoundingClientRect().height * (24 / 1080);
    } else {
      baseTop = 6;
      baseLeft = 6.1;
      baseBottom = 6.1;
      titleSize = 4;
      titleHeight = 5;
      titleTextBetween = 1;
      titlePaddingBottom = 2.5;
      contentsBasePaddingTop = 4;
    }

    percentage = 0.01;
    borderSize = 1;
    contentsBetween = 1.8;
    firstContentsWidth = 40;
    secondContentsWidth = 64;
    thirdContentsWidth = 20;
    contentsHeightBetweenRatio = 2;
    contentsCalendarHeight = 61;
    blockHeightNumber = 10;
    blockWidth = 88;
    blockLeft = 11;
    blockHeight = 7.4;
    blockInnerMargin = 0.8;
    blockFontSize = 2.3;
    blockFontTop = 1.1;
    blockNameSize = 1.9;
    blockNameTop = 1.5;
    blockNameLeft = 1.7;
    blockIconHeight = 1.8;
    blockIconTop = 1.8;
    calendarIndent = 2.41;
    calendarMarginTop = 0.1;
    calendarMarginBottom = 6;

    customButtonNumberTop = 9 / 8.33;
    customButtonNumberLeft = 13 / 8.33;
    customButtonNumberSize = 13 / 8.33;
    customButtonTitleBottom = 9 / 8.33;
    customButtonTitleRight = 14 / 8.33;
    customButtonTitleWidth = 120 / 8.33;
    customButtonTitleHeight = 44 / 8.33;
    customButtonTitleSize = 14 / 8.33;

    secondContentsSize = 13 / 8.33;
    secondContentsMarginTop = 14 / 8.33;
    secondContentsMarginLeft = 18 / 8.33;
    secondContentsMarginBetween = 8 / 8.33;
    secondContentsTableInnerPaddingTop = 15 / 8.33;
    secondContentsTableInnerPaddingLeft = 20 / 8.33;
    secondContentsTableInnerContentsHeight = 26 / 8.33;
    secondContentsTableInnerContentsBetween = 10 / 8.33;

    secondContentsTableInnerContentsLineHeight = 1.4;
    secondContentsTableInnerContentsTitleWeight = 700;
    secondContentsTableInnerContentsValueWeight = 300;
    secondContentsTableInnerContentsWidthRatio = 85;
    secondContentsTableInnerContentsHeightRatio = 76;

    // base
    base = createNode({
      mother,
      style: {
        display: "block",
        position: "relative",
        top: String(baseTop) + ea,
        left: String(baseLeft) + ea,
        width: withOut(baseLeft * 2, ea),
        height: withOut(baseTop + (desktop ? baseBottom : 0), ea),
        overflowY: "scroll",
        overflowX: "hidden",
      }
    });

    // title
    createNode({
      mother: base,
      style: {
        display: "block",
        position: "relative",
        height: String(titleHeight) + ea,
        paddingBottom: String(titlePaddingBottom) + ea,
        borderBottom: "1px solid " + colorChip.gray3
      },
      children: [
        {
          text: "프로젝트 관리 :",
          style: {
            display: "inline-block",
            fontSize: String(titleSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
          }
        },
        {
          text: client.name,
          style: {
            display: "inline-block",
            fontSize: String(titleSize) + ea,
            fontWeight: String(300),
            color: colorChip.green,
            marginLeft: String(titleTextBetween) + ea,
          }
        }
      ]
    });

    // contents base
    contentsBase = createNode({
      mother: base,
      style: {
        verticalAlign: "top",
        display: "block",
        position: "relative",
        marginTop: String(contentsBasePaddingTop) + ea,
        height: withOut(titleHeight + titlePaddingBottom + contentsBasePaddingTop, ea),
        overflow: "hidden",
      }
    });

    baseHeight = contentsBase.getBoundingClientRect().height;
    contentsBetween = Math.floor(baseHeight * contentsBetween * percentage);
    firstContentsWidth = baseHeight * firstContentsWidth * percentage;
    secondContentsWidth = baseHeight * secondContentsWidth * percentage;
    thirdContentsWidth = baseHeight * thirdContentsWidth * percentage;
    contentsHeightBetween = Math.floor(contentsBetween / contentsHeightBetweenRatio);
    blockHeight = Math.floor(baseHeight * blockHeight * percentage);
    blockInnerMargin = Math.floor(baseHeight * blockInnerMargin * percentage);
    blockFontSize = Math.round(baseHeight * blockFontSize * percentage);
    blockFontTop = Math.round(baseHeight * blockFontTop * percentage);
    blockNameSize = Math.round(baseHeight * blockNameSize * percentage);
    blockNameTop = Math.round(baseHeight * blockNameTop * percentage);
    blockNameLeft = Math.round(baseHeight * blockNameLeft * percentage);
    blockIconHeight = Math.round(baseHeight * blockIconHeight * percentage);
    blockIconTop = Math.round(baseHeight * blockIconTop * percentage);
    calendarIndent = Math.round(baseHeight * calendarIndent * percentage);
    calendarMarginTop = Math.round(baseHeight * calendarMarginTop * percentage);
    calendarMarginBottom = Math.round(baseHeight * calendarMarginBottom * percentage);
    customButtonNumberTop = Math.round(baseHeight * customButtonNumberTop * percentage);
    customButtonNumberLeft = Math.round(baseHeight * customButtonNumberLeft * percentage);
    customButtonNumberSize = Math.round(baseHeight * customButtonNumberSize * percentage);
    customButtonTitleBottom = Math.round(baseHeight * customButtonTitleBottom * percentage);
    customButtonTitleRight = Math.round(baseHeight * customButtonTitleRight * percentage);
    customButtonTitleWidth = Math.round(baseHeight * customButtonTitleWidth * percentage);
    customButtonTitleHeight = Math.round(baseHeight * customButtonTitleHeight * percentage);
    customButtonTitleSize = Math.round(baseHeight * customButtonTitleSize * percentage);
    secondContentsSize = Math.round(baseHeight * secondContentsSize * percentage);
    secondContentsMarginTop = Math.round(baseHeight * secondContentsMarginTop * percentage);
    secondContentsMarginLeft = Math.round(baseHeight * secondContentsMarginLeft * percentage);
    secondContentsMarginBetween = Math.round(baseHeight * secondContentsMarginBetween * percentage);
    secondContentsTableInnerPaddingTop = Math.round(baseHeight * secondContentsTableInnerPaddingTop * percentage);
    secondContentsTableInnerPaddingLeft = Math.round(baseHeight * secondContentsTableInnerPaddingLeft * percentage);
    secondContentsTableInnerContentsHeight = Math.round(baseHeight * secondContentsTableInnerContentsHeight * percentage);
    secondContentsTableInnerContentsBetween = Math.round(baseHeight * secondContentsTableInnerContentsBetween * percentage);

    // first
    firstContents = createNode({
      mother: contentsBase,
      style: {
        display: "inline-block",
        position: "relative",
        verticalAlign: "top",
        width: String(firstContentsWidth) + ea,
        height: String(baseHeight) + ea,
        marginRight: String(contentsBetween) + ea,
        top: String(borderSize) + ea,
        height: String(baseHeight - (borderSize * 4)) + ea,
        borderTop: String(borderSize) + "px solid " + colorChip.deactive,
        borderBottom: String(borderSize) + "px solid " + colorChip.deactive,
      }
    });

    blockScrollBox = createNode({
      mother: firstContents,
      style: {
        display: "block",
        width: String(blockWidth) + '%',
        marginLeft: String(blockLeft) + '%',
        paddingTop: String(contentsHeightBetween) + ea,
        height: withOut(contentsHeightBetween, ea),
        overflow: "scroll",
      }
    });

    num = 0;
    for (let { name } of entireAction) {

      if (name === null) {
        blockBackColor = colorChip.gray2;
        blockColor = colorChip.gray1;
        blockFontColor = colorChip.gray3;
        iconFillColor = colorChip.gray4;
      } else if (name === action) {
        blockBackColor = colorChip.gradientGreen2;
        blockColor = colorChip.white;
        blockFontColor = colorChip.darkGreen;
        iconFillColor = colorChip.green;
      } else {
        blockBackColor = colorChip.gray2;
        blockColor = colorChip.white;
        blockFontColor = colorChip.black;
        iconFillColor = colorChip.green;
      }

      createNode({
        mother: blockScrollBox,
        style: {
          display: "block",
          width: withOut(blockInnerMargin * 2, ea),
          height: String(blockHeight - (blockInnerMargin * 2)) + ea,
          paddingTop: String(blockInnerMargin) + ea,
          paddingBottom: String(blockInnerMargin) + ea,
          paddingLeft: String(blockInnerMargin) + ea,
          borderRadius: String(5) + "px",
          background: blockBackColor,
          marginBottom: String(contentsHeightBetween) + ea,
        },
        children: [
          {
            style: {
              display: "inline-block",
              verticalAlign: "top",
              width: String(blockHeight - (blockInnerMargin * 2)) + ea,
              height: String(blockHeight - (blockInnerMargin * 2)) + ea,
              position: "relative",
              borderRadius: String(5) + "px",
              background: blockColor,
              marginRight: String(blockInnerMargin) + ea,
            },
            children: [
              {
                text: String(num),
                style: {
                  fontSize: String(blockFontSize) + ea,
                  fontWeight: String(400),
                  color: blockFontColor,
                  fontFamily: "graphik",
                  position: "absolute",
                  top: String(blockFontTop) + ea,
                  left: String(0) + ea,
                  width: String(100) + '%',
                  textAlign: "center",
                }
              }
            ]
          },
          {
            style: {
              display: "inline-block",
              verticalAlign: "top",
              width: withOut(blockHeight, ea),
              height: String(blockHeight - (blockInnerMargin * 2) - blockNameTop) + ea,
              position: "relative",
              borderRadius: String(5) + "px",
              background: blockColor,
              paddingTop: String(blockNameTop) + ea,
            },
            children: [
              {
                text: name,
                style: {
                  display: "inline-block",
                  position: "relative",
                  fontSize: String(blockNameSize) + ea,
                  fontWeight: String(600),
                  color: blockFontColor,
                  marginLeft: String(blockNameLeft) + ea,
                  textAlign: "left",
                }
              },
              {
                mode: "svg",
                source: instance.mother.returnDownload(iconFillColor, true),
                style: {
                  position: "absolute",
                  height: String(blockIconHeight) + ea,
                  right: String(blockNameLeft) + ea,
                  top: String(blockIconTop) + ea,
                }
              }
            ]
          },
        ]
      });

      num++;
    }

    scrollTo(blockScrollBox, (blockHeight / 2) + contentsHeightBetween);

    // second
    secondContents = createNode({
      mother: contentsBase,
      style: {
        display: "inline-block",
        position: "relative",
        verticalAlign: "top",
        width: String(secondContentsWidth) + ea,
        height: String(baseHeight) + ea,
        marginRight: String(contentsBetween) + ea,
      }
    });
    secondContentsCalendar = createNode({
      mother: secondContents,
      style: {
        display: "block",
        position: "relative",
        height: "calc(calc(100% - " + String(contentsHeightBetween) + ea + ") * " + String((contentsCalendarHeight * percentage)) + ")",
        marginBottom: String(contentsHeightBetween) + ea,
        background: colorChip.gray1,
        borderRadius: String(5) + "px",
        paddingTop: String(calendarIndent) + ea,
        paddingBottom: String(calendarIndent) + ea,
        overflow: "hidden",
      },
      children: [
        {
          style: {
            display: "block",
            position: "relative",
            marginLeft: String(calendarIndent) + ea,
            marginRight: String(calendarIndent) + ea,
            width: withOut(calendarIndent * 2, ea),
            height: withOut(0, ea),
            overflow: "scroll",
          }
        },
        {
          style: {
            position: "absolute",
            bottom: String(0),
            left: String(0),
            height: String(calendarIndent) + ea,
            width: String(100) + '%',
            background: colorChip.gray2,
            borderTop: "1px dashed " + colorChip.gray3,
            boxSizing: "border-box",
          }
        }
      ]
    }).firstChild;
    colorCalendar(secondContentsCalendar, dummySchedule, {
      heightMode: true,
      height: secondContentsCalendar.getBoundingClientRect().height
    });
    secondContentsCalendar.firstChild.style.marginTop = String(calendarMarginTop) + ea;
    secondContentsCalendar.firstChild.style.marginBottom = String(calendarMarginBottom) + ea;

    secondContentsTable = createNode({
      mother: secondContents,
      style: {
        display: "block",
        position: "relative",
        height: "calc(calc(calc(100% - " + String(contentsHeightBetween) + ea + ") * " + String(1 - (contentsCalendarHeight * percentage)) + ") - " + String((calendarIndent * (2 + 2)) + 1) + ea + ")",
        background: colorChip.gray1,
        borderRadius: String(5) + "px",
        paddingTop: String(calendarIndent) + ea,
        paddingBottom: String(calendarIndent) + ea,
        overflow: "hidden",
      },
      children: [
        {
          style: {
            display: "block",
            position: "relative",
            marginLeft: String(calendarIndent) + ea,
            marginRight: String(calendarIndent) + ea,
            width: withOut(calendarIndent * 2, ea),
            height: withOut(0, ea),
            overflow: "hidden",
            background: colorChip.white,
            borderTopLeftRadius: String(5) + "px",
            borderTopRightRadius: String(5) + "px",
          }
        },
        {
          style: {
            position: "absolute",
            bottom: String(0),
            left: String(0),
            height: String(calendarIndent) + ea,
            width: String(100) + '%',
            background: colorChip.gray2,
            borderTop: "1px dashed " + colorChip.gray3,
            boxSizing: "border-box",
          }
        },
      ]
    });
    secondContentsTableBase = secondContentsTable.firstChild;

    secondContentsTableContentsTitle = createNode({
      mother: secondContentsTableBase,
      text: "기본 정보",
      style: {
        fontSize: String(secondContentsSize) + ea,
        fontWeight: String(600),
        color: colorChip.black,
        marginTop: String(secondContentsMarginTop) + ea,
        marginLeft: String(secondContentsMarginLeft) + ea,
      }
    });

    secondContentsTableContentsBase = createNode({
      mother: secondContentsTableBase,
      style: {
        display: "block",
        position: "relative",
        marginTop: String(secondContentsMarginBetween) + ea,
        marginLeft: String(secondContentsMarginLeft) + ea,
        paddingTop: String(secondContentsTableInnerPaddingTop) + ea,
        paddingBottom: String(secondContentsTableInnerPaddingTop) + ea,
        paddingLeft: String(secondContentsTableInnerPaddingLeft) + ea,
        paddingRight: String(secondContentsTableInnerPaddingLeft) + ea,
        width: withOut((secondContentsMarginLeft * 2), ea),
        height: withOut(secondContentsMarginTop + secondContentsTableContentsTitle.getBoundingClientRect().height + secondContentsMarginBetween + secondContentsMarginLeft, ea),
        border: "1px solid " + colorChip.gray3,
        boxSizing: "border-box",
        borderRadius: String(3) + "px",
      }
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "성함",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: client.name,
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        }
      ]
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "연락처",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: client.phone,
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: "이메일",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: client.email,
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: String(0),
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
      ]
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "주소",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          style: {
            position: "absolute",
            textAlign: "right",
            right: String(0),
            top: String(0),
            width: String(secondContentsTableInnerContentsWidthRatio) + '%',
            height: String(secondContentsTableInnerContentsHeightRatio) + '%',
            overflow: "scroll",
          },
          children: [
            {
              text: request.space.address,
              style: {
                position: "absolute",
                textAlign: "right",
                fontSize: String(secondContentsSize) + ea,
                fontWeight: String(secondContentsTableInnerContentsValueWeight),
                color: colorChip.black,
                right: String(0),
                top: String(0),
                lineHeight: String(secondContentsTableInnerContentsLineHeight),
              }
            }
          ]
        }
      ]
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "평수",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: String(request.space.pyeong) + "평",
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: "계약 형태",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: request.space.contract,
            left: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: request.space.contract,
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: String(0),
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
      ]
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "방",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: String(request.space.spec.room) + "개",
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: "화장실",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: request.space.contract,
            left: "calc(50% + " + String(secondContentsTableInnerContentsBetween) + ea + ")",
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          text: String(request.space.spec.bathroom) + "개",
          style: {
            position: "absolute",
            textAlign: "right",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsValueWeight),
            color: colorChip.black,
            right: String(0),
            top: String(0) + ea,
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
      ]
    });

    createNode({
      mother: secondContentsTableContentsBase,
      style: {
        display: "block",
        position: "relative",
        height: String(secondContentsTableInnerContentsHeight) + ea,
        width: String(100) + '%',
      },
      children: [
        {
          text: "요청 사항",
          style: {
            position: "absolute",
            textAlign: "left",
            fontSize: String(secondContentsSize) + ea,
            fontWeight: String(secondContentsTableInnerContentsTitleWeight),
            color: colorChip.darkDarkShadow,
            left: String(0),
            top: String(0),
            lineHeight: String(secondContentsTableInnerContentsLineHeight),
          }
        },
        {
          style: {
            position: "absolute",
            textAlign: "right",
            right: String(0),
            top: String(0),
            width: String(secondContentsTableInnerContentsWidthRatio) + '%',
            height: String(secondContentsTableInnerContentsHeightRatio) + '%',
            overflow: "scroll",
          },
          children: [
            {
              text: request.etc.comment,
              style: {
                position: "absolute",
                textAlign: "right",
                fontSize: String(secondContentsSize) + ea,
                fontWeight: String(secondContentsTableInnerContentsValueWeight),
                color: colorChip.black,
                right: String(0),
                top: String(0),
                lineHeight: String(secondContentsTableInnerContentsLineHeight),
              }
            }
          ]
        }
      ]
    });

    // third
    thirdContents = createNode({
      mother: contentsBase,
      style: {
        display: "inline-block",
        position: "relative",
        verticalAlign: "top",
        width: String(thirdContentsWidth) + ea,
        height: String(baseHeight) + ea,
        marginRight: String(contentsBetween) + ea,
      }
    });
    for (let i = 0; i < buttonsNumber; i++) {
      createNode({
        mother: thirdContents,
        style: {
          display: "block",
          position: "relative",
          width: withOut(blockInnerMargin, ea),
          height: "calc(calc(calc(100% - " + String(contentsHeightBetween * (buttonsNumber - 1)) + ea + ") / " + String(buttonsNumber) + ") - " + String(blockInnerMargin) + ea + ")",
          marginBottom: String(i !== buttonsNumber - 1 ? contentsHeightBetween : 0) + ea,
          background: colorChip.gray3,
          borderRadius: String(5) + "px",
          paddingTop: String(blockInnerMargin) + ea,
          paddingLeft: String(blockInnerMargin) + ea,
        },
        children: [
          {
            event: {
              mouseenter: function (e) {
                this.style.transform = "translateY(-1px)";
                this.style.boxShadow = "0px 2px 17px -9px " + colorChip.black;
                this.children[0].style.color = colorChip.whiteGreen;
                this.children[1].children[0].style.color = colorChip.green;
              },
              mouseleave: function (e) {
                this.style.transform = "translateY(0px)";
                this.style.boxShadow = "0px 2px 13px -9px " + colorChip.shadow;
                this.children[0].style.color = colorChip.deactive;
                this.children[1].children[0].style.color = colorChip.black;
              }
            },
            style: {
              display: "block",
              position: "relative",
              height: withOut(blockInnerMargin, ea),
              width: withOut(blockInnerMargin, ea),
              background: colorChip.white,
              borderRadius: String(5) + "px",
              boxShadow: "0px 2px 13px -9px " + colorChip.shadow,
              cursor: "pointer",
            },
            children: [
              {
                text: 'A' + String(i + 1),
                style: {
                  position: "absolute",
                  top: String(customButtonNumberTop) + ea,
                  left: String(customButtonNumberLeft) + ea,
                  fontSize: String(customButtonNumberSize) + ea,
                  fontWeight: String(400),
                  fontFamily: "graphik",
                  color: colorChip.deactive,
                }
              },
              {
                style: {
                  position: "absolute",
                  bottom: String(customButtonTitleBottom) + ea,
                  right: String(customButtonTitleRight) + ea,
                  width: String(customButtonTitleWidth) + ea,
                  height: String(customButtonTitleHeight) + ea,
                  textAlign: "right",
                },
                children: [
                  {
                    text: customButtons[i].name,
                    style: {
                      fontSize: String(customButtonTitleSize) + ea,
                      fontWeight: String(500),
                      color: colorChip.black,
                      lineHeight: String(1.4),
                    }
                  }
                ]
              },
            ]
          }
        ]
      });
    }

    // fourth
    fourthContents = createNode({
      mother: contentsBase,
      style: {
        display: "inline-block",
        position: "relative",
        verticalAlign: "top",
        width: withOut(firstContentsWidth + secondContentsWidth + thirdContentsWidth + (contentsBetween * 3), ea),
        height: String(baseHeight) + ea,
        borderRadius: String(5) + "px",
        background: colorChip.gray1,
      }
    });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.projectIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  if (!this.middleMode) {

    listIcon.addEventListener("click", function (e) {
      blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
    });

    previousIcon.addEventListener("click", function (e) {
      let previousDesid, boo, thisStandard;
      previousDesid = desid;
      do {
        previousDesid = instance.designers.previous(previousDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === previousDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      if (instance.modes.indexOf(instance.mode) === 0) {
        instance.projectDetailLaunching(previousDesid);
      } else {
        instance.reportDetailLaunching(previousDesid);
      }
    });

    nextIcon.addEventListener("click", function (e) {
      let nextDesid, boo, thisStandard;
      nextDesid = desid;
      do {
        nextDesid = instance.designers.next(nextDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === nextDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      if (instance.modes.indexOf(instance.mode) === 0) {
        instance.projectDetailLaunching(nextDesid);
      } else {
        instance.reportDetailLaunching(nextDesid);
      }
    });

  } else {

    if (desktop) {

      listIcon.addEventListener("click", function (e) {
        const totalContents = document.getElementById("totalcontents");
        const totalMother = document.querySelector(".totalMother");
        const grayBack = totalContents.children[0];
        const listPannel = totalMother.children[0].children[0];
        const iconSetPannel = instance.iconTong;
        const mainBaseTong = instance.mainBaseTong;
        const outerMargin = Number(mainBaseTong.style.top.replace(/[^0-9\.\-]/gi, ''));

        if (grayBack.getAttribute("toggle") !== "off") {
          grayBack.style.width = String(0) + ea;
          listPannel.style.transform = "translateX(" + String((instance.grayBarWidth + instance.tabletWidth) * -1) + ea + ")";
          iconSetPannel.style.background = "transparent";
          mainBaseTong.style.left = String(outerMargin) + ea;
          mainBaseTong.style.width = withOut(outerMargin * 2, ea);
          instance.listIcon.style.left = String(left2) + ea;
          grayBack.setAttribute("toggle", "off");
        } else {
          grayBack.style.width = String(instance.grayBarWidth) + ea;
          listPannel.style.transform = "translateX(" + String(0) + ea + ")";
          iconSetPannel.style.background = colorChip.gray0;
          mainBaseTong.style.left = String(instance.grayBarWidth + outerMargin) + ea;
          mainBaseTong.style.width = withOut(instance.grayBarWidth + (outerMargin * 2), ea);
          instance.listIcon.style.left = String(left) + ea;
          grayBack.setAttribute("toggle", "on");
        }

      });

    } else {

      listIcon.addEventListener("click", function (e) {
        let num = designer.information.did.replace(/[^0-9]/g, '');
        let id;
        id = '';
        for (let i = 0; i < 3 - num.length; i++) {
          id += '0';
        }
        id += num;
        blankHref(FRONTHOST + "/desdetail.php?desid=" + designer.desid);
      });

    }

    previousIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index - 1] === undefined ? targets[targets.length - 1] : targets[index - 1];
        target.click();
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index + 1] === undefined ? targets[0] : targets[index + 1];
        target.click();
      }
    });

  }

  rInitialIcon.addEventListener("click", function (e) {
    instance.reportDetailLaunching(desid);
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
      GeneralJs.ajaxJson({
        method: "designerConsole",
        name: designer.designer,
        phone: designer.information.phone,
        option: {
          desid: designer.desid,
          designer: designer.designer,
          host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
          path: "dashboard",
        }
      }, "/alimTalk").then(() => {
        return GeneralJs.ajaxJson({
          page: "project",
          mode: "send",
          who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
          desid: designer.desid,
        }, "/ghostDesigner_updateAnalytics");
      }).then(() => {
        instance.mother.greenAlert("알림톡이 전송되었습니다!");
      }).catch((err) => {
        console.log(err);
      });
    } else {
      instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
    }
  });

}

DesignerJs.prototype.projectSseParsing = function (raw) {
  const instance = this;
  const { ea } = this;
  const { equalJson, setDebounce, findByAttribute } = GeneralJs;
  const order = equalJson(raw);
  const debounceNameConst = "sseCardAction_";
  let division, num;
  let fromArea, toArea;
  let divide, oppositeDivide;
  let self, opposite;
  let thisHeightNumber, oppositeHeightNumber;
  let thisHeight, oppositeHeight;
  let finalHeight;
  let size;
  let name, oppositeName;
  let loop;
  let index, indexTong;
  let rowDom;
  let thisStandardDom, thisCaseDom;
  let length;
  let fromAction;

  if (this.divisionMap !== null) {
    division = this.divisionMap;
    num = 0;
    if (Array.isArray(order) && order.length > 0 && order[0].randomToken !== instance.randomToken) {
      for (let { proid, requestNumber, from, to, randomToken } of order) {

        setDebounce(() => {
          card = findByAttribute(instance.whiteCards, [ "proid", "request" ], [ proid, String(requestNumber) ]);
          fromArea = division.get(from);
          toArea = division.get(to);
          loop = [ fromArea, toArea ];

          if (card.parentElement !== toArea) {
            toArea.appendChild(card);
            for (let self of loop) {
              name = self.getAttribute("name");
              divide = Number(self.getAttribute("divide"));
              size = Number(self.getAttribute("size"));
              for (let c of self.children) {
                c.style.width = String(size) + ea;
              }
              self.parentElement.children[0].children[1].setAttribute("number", String(self.children.length));
              self.parentElement.children[0].children[1].textContent = String(self.children.length) + "명";
            }

            name = toArea.getAttribute("name");
            card.setAttribute("action", name);

            instance.designer.projects.find((obj) => { return obj.proid === proid }).process.action = name;
          }

        }, debounceNameConst + String(num));

        num++;
      }
    }
  }
}

DesignerJs.prototype.projectView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    const middleMode = /middle/gi.test(window.location.pathname);
    this.backGrayBar();
    await this.spreadData(null, true, middleMode ? "middle" : null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight, media } = this;
    const mobile = media[4];
    const desktop = !mobile;
    const standardBar = totalMother.firstChild;
    const getObj = returnGet();
    let designers, length;
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;
    let projects, clients;

    if (!middleMode) {
      designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
      length = designers.length;
      this.designers = new Designers(designers);
    } else {
      designers = await ajaxJson({ noFlat: true, whereQuery: { desid: getObj.desid } }, "/getDesigners", { equal: true });
      if (designers.length === 0) {
        throw new Error("invaild desid");
      }
      length = designers.length;
      this.designers = new Designers(designers);
      this.designer = this.designers.pick(getObj.desid);
    }

    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.middleMode = middleMode;
    this.modes = [ "checklist", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[0];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };

    this.projects = await ajaxJson({ noFlat: true, whereQuery: { desid: { $regex: "^d" } } }, "/getProjects", { equal: true });
    this.clients = await ajaxJson({ noFlat: true, whereQuery: { $or: [ ...new Set(this.projects.map((obj) => { return obj.cliid; })) ].map((cliid) => { return { cliid }; }) } }, "/getClients", { equal: true })
    this.designers.setProjects(this.projects);
    this.designers.setClients(this.clients);

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    if (!middleMode) {
      //search event
      if (this.searchInput !== undefined && this.searchInput !== null) {
        searchInput = this.searchInput;
        searchInput.addEventListener("keypress", function (e) {
          if (e.key === "Enter") {
            if (this.value.trim() !== '') {
              let value;

              value = this.value.trim();

              if (/\:/gi.test(value)) {
                value = value.split(':')[1];
                const targets = instance.standardDoms.map((dom) => { return dom.textContent });
                const index = targets.findIndex((str) => { return (new RegExp(value, "gi")).test(str); });
                if (index !== -1) {
                  GeneralJs.setQueue(() => {
                    instance.standardDoms[index].click();
                  });
                }
              } else {
                if (document.querySelector(".detailWhitePopupConst") === null) {
                  const targets = instance.whiteCards.map((dom) => { return dom.textContent });
                  const index = targets.findIndex((str) => { return (new RegExp(value, "gi")).test(str); });
                  if (index !== -1) {
                    GeneralJs.setQueue(() => {
                      instance.whiteCards[index].click();
                    });
                  }
                } else {
                  document.querySelector(".totalMother").querySelector("aside").click();
                  GeneralJs.setQueue(() => {
                    const targets = instance.whiteCards.map((dom) => { return dom.textContent });
                    const index = targets.findIndex((str) => { return (new RegExp(value, "gi")).test(str); });
                    if (index !== -1) {
                      GeneralJs.setQueue(() => {
                        instance.whiteCards[index].click();
                      });
                    }
                  }, 501);
                }
              }

            }
          }
        });
      }

      //standard doms event
      standardBar_mother = standardBar.cloneNode(false);
      style = {
        position: "fixed",
        height: withOut(100, belowHeight + motherHeight, ea),
        overflow: "scroll",
      };
      for (let i in style) {
        standardBar_mother.style[i] = style[i];
      }
      totalMother.insertBefore(standardBar_mother, standardBar);
      standardBar_mother.appendChild(standardBar);
      for (let i = 1; i < this.standardDoms.length; i++) {
        if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
          this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
          this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
          this.standardDoms[i].style.transition = "all 0s ease";
          this.standardDoms[i].addEventListener("click", (e) => {
            instance.projectDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
          });
          children = this.standardDoms[i].children;
          childrenLength = children.length;
          for (let j = 0; j < childrenLength; j++) {
            children[j].style.color = "inherit";
            children[j].style.transition = "all 0s ease";
          }
        } else {
          this.standardDoms[i].style.display = "none";
        }
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    this.projectMap = await ajaxJson({ method: "projectMap" }, "/getDataPatch");
    this.checklist = await ajaxJson({ kind: "checklist" }, "/getServicesByKind");

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    if (desktop) {
      window.addEventListener("resize", (e) => {
        window.location.reload();
      });
    }
    window.addEventListener("popstate", (e) => {
      let targets, targetIndex;
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (!middleMode) {
          if (getObj.mode === instance.pageHistory[1].path) {
            instance.projectDetailLaunching(instance.pageHistory[1].desid);
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          }
        } else {

          targets = document.querySelectorAll(".leftMenus");
          if (instance.pageHistory[1].status === "page") {
            if (targets[instance.pageHistory[1].index] !== undefined) {
              targets[instance.pageHistory[1].index].click();
            } else if (instance.menuMap[instance.pageHistory[1].index] !== undefined) {
              instance.menuMap[instance.pageHistory[1].index].event.call(({
                getAttribute: (index) => {
                  return instance.pageHistory[1].index;
                }
              }));
            }
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          } else if (instance.pageHistory[1].status === "card") {
            targetIndex = 5;
            if (targets[targetIndex] !== undefined) {
              targets[targetIndex].click();
            } else if (instance.menuMap[targetIndex] !== undefined) {
              instance.menuMap[targetIndex].event.call(({
                getAttribute: (index) => {
                  return targetIndex;
                }
              }));
            }
            instance.pageHistory.shift();
            for (let box of instance.requestBoxes) {
              if (box.getAttribute("cliid") === instance.pageHistory[1].cliid) {
                box.click();
              }
            }
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          }

        }
      }
    });

    //launching
    this.projectDetailLaunching(this.desid);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.reportDataRendering = async function (desid) {
  const instance = this;
  const { ea, media } = this;
  const mobile = media[4];
  const desktop = !mobile;
  try {
    const { ajaxJson, dateToString, autoComma } = GeneralJs;
    const today = new Date();
    const yearsAgo = new Date(today.getFullYear() - 10, today.getMonth(), today.getDate());
    const tenYearsAgo = new Date(today.getFullYear() - 10, today.getMonth(), today.getDate());
    const fourYearsAgo = new Date(today.getFullYear() - 4, today.getMonth(), today.getDate());
    const emptyDate = new Date(1800, 0, 1);
    const emptyDateValue = (new Date(2000, 0, 1)).valueOf();
    const reverseMatrix = function (matrix) {
      if (!Array.isArray(matrix)) {
        throw new Error("must be 2 matrix");
      }
      let length = null;
      for (let arr of matrix) {
        if (!Array.isArray(arr)) {
          throw new Error("invaild matrix");
        }
        if (length !== null) {
          if (length !== arr.length) {
            throw new Error("invaild matrix");
          }
        }
        length = arr.length;
      }
      if (length === null) {
        return [];
      }
      let tong;
      let tempArr;
      tong = [];
      for (let i = 0; i < length; i++) {
        tempArr = [];
        for (let arr of matrix) {
          tempArr.push(arr[i]);
        }
        tong.push(tempArr);
      }
      return tong;
    }
    const service = [
      { serid: "s2011_aa01s", column: "homeFurnishing", name: "홈퍼니싱", id: 'F' },
      { serid: "s2011_aa02s", column: "homeStyling", name: "홈스타일링", id: 'S' },
      { serid: "s2011_aa03s", column: "totalStyling", name: "토탈 스타일링", id: 'T' },
      { serid: "s2011_aa04s", column: "architecture", name: "설계 변경", id: 'XT' }
    ];
    const xValueMap = { "M": "mini", "B": "basic", "P": "premium" };
    const { projects: allProjects, clients, contentsArr, price } = await ajaxJson({ desid }, "/getDesignerReport", { equal: true });
    class DesignerReports extends Array {
      constructor(arr, projects, price) {
        super();
        if (!Array.isArray(arr) || projects === undefined || price === undefined) {
          throw new Error("invaild input");
        }
        this.projects = projects;
        this.price = price;
        for (let i of arr) {
          if (!(i instanceof DesignerReport)) {
            throw new Error("child must be DesignerReport type");
          }
          this.push(i);
        }
      }
      pick(q) {
        if (typeof q !== "string") {
          throw new Error("invaild input");
        }
        let result;
        result = null;
        if (/^d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]$/.test(q)) {
          for (let obj of this) {
            if (obj.desid === q) {
              result = obj;
              break;
            }
          }
        } else {
          for (let obj of this) {
            if ((new RegExp(q, "gi")).test(obj.designer.designer)) {
              result = obj;
              break;
            }
          }
        }
        return result;
      }
    }
    class DesignerReport {
      constructor(designer, projects, price) {
        if (designer === undefined || projects === undefined || price === undefined) {
          throw new Error("invaild input");
        }
        this.designer = designer;
        this.projects = projects;
        this.price = price;
      }
      timeSplit() {
        const { proposal, contract, price, contents } = this;
        const today = new Date();
        const timeHalfConst = "반기";
        const timeHalfArr = [ "상", "하" ];
        const timeHalfToken = [ 30000, 60000 ];
        const service = [
          { serid: "s2011_aa01s", column: "homeFurnishing", name: "홈퍼니싱", id: 'F' },
          { serid: "s2011_aa02s", column: "homeStyling", name: "홈스타일링", id: 'S' },
          { serid: "s2011_aa03s", column: "totalStyling", name: "토탈 스타일링", id: 'T' },
          { serid: "s2011_aa04s", column: "architecture", name: "설계 변경", id: 'XT' }
        ];
        const proposalConst = {
          width: [
            50,
            50,
            50,
            72,
            60,
            120,
            120,
            64,
            110,
            72,
            60,
            60,
          ],
          columns: [
            'E',
            'Y',
            'H',
            "고객",
            "서비스",
            "제안 날짜",
            "제안 금액",
            "평수",
            "평단가",
            "방식",
            "부분",
            "계약",
          ],
          type: [
            "number",
            "number",
            "number",
            "string",
            "string",
            "string",
            "number",
            "string",
            "number",
            "string",
            "string",
            "string",
          ],
          middle: [
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            false,
            false,
            true,
            true,
            true
          ]
        };
        const contractConst = {
          width: [
            50,
            50,
            50,
            72,
            60,
            110,
            110,
            72,
            50,
            120,
            70,
            120,
            64,
            110,
            110,
            110,
          ],
          columns: [
            'E',
            'Y',
            'H',
            "고객",
            "서비스",
            "시작일",
            "종료일",
            "방식",
            "부분",
            "정산 금액",
            "수수료",
            "제안 금액",
            "평수",
            "평단가",
            "선금 정산일",
            "잔금 정산일",
          ],
          type: [
            "number",
            "number",
            "number",
            "string",
            "string",
            "string",
            "string",
            "string",
            "string",
            "number",
            "string",
            "number",
            "string",
            "number",
            "string",
            "string",
          ],
          middle: [
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            false,
            false,
            true,
            true
          ]
        };
        const priceConst = {
          width: [
            50,
            150,
            130,
            130,
            130,
            130,
            130,
            130,
            130,
            130,
          ],
          columns: [
            "추가값",
            "서비스명",
            "0 - 8",
            "9 - 14",
            "15 - 22",
            "23 - 29",
            "30 - 33",
            "34 - 38",
            "39 - 44",
            "44 - 999",
          ],
          type: [
            "string",
            "string",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
            "number",
          ],
          middle: [
            false,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
            true,
          ]
        };
        const contentsConst = {
          width: [
            50,
            50,
            50,
            72,
            72,
            72,
            110,
            110,
            360,
            360
          ],
          columns: [
            'E',
            'Y',
            'H',
            "종류",
            "고객",
            "아이디",
            "발행일",
            "고객 후기",
            "포트폴리오 링크",
            "고객 후기 링크"
          ],
          type: [
            "number",
            "number",
            "number",
            "string",
            "string",
            "string",
            "string",
            "string",
            "string",
            "string"
          ],
          middle: [
            true,
            true,
            true,
            true,
            true,
            false,
            true,
            true,
            true,
            false
          ]
        };
        const homepage = "https://home-liaison.com";
        const portfolioPath = "/portdetail.php";
        const reviewPath = "/revdetail.php";
        class TimeArray extends Array {
          setWidth(width) {
            if (!Array.isArray(width)) {
              throw new Error("invaild input");
            }
            this.width = width;
          }
          setColumns(columns) {
            if (!Array.isArray(columns)) {
              throw new Error("invaild input");
            }
            this.columns = columns;
          }
          setTypeArr(type) {
            if (!Array.isArray(type)) {
              throw new Error("invaild input");
            }
            this.typeArr = type;
          }
          setProperty(name, value) {
            this[name] = value;
          }
          setType(type) {
            const types = [ "timeMatrix", "generalMatrix" ];
            if (!types.includes(type)) {
              console.log(type);
              throw new Error("invaile type : 'timeMatrix' or 'generalMatrix'");
            }
            this.type = type;
          }
          intoSheetsMatrix(resultMode = false) {
            if (this.typeArr === undefined || this.columns === undefined || this.typeArr === undefined) {
              throw new Error("set first");
            }
            if (this.type !== "timeMatrix" && this.type !== "generalMatrix") {
              console.log(this.type);
              throw new Error("invaile type : 'timeMatrix' or 'generalMatrix'");
            }
            const { type, columns, typeArr } = this;
            const resultTargets = [ "year", "total" ];
            let matrix, tempArr;
            matrix = [];
            if (type === "timeMatrix") {

              if (!resultMode) {

                tempArr = [ "시간" ];
                for (let i of columns) {
                  tempArr.push(i);
                }
                matrix.push(tempArr);
                for (let obj of this) {
                  for (let i = 0; i < obj.matrix.length; i++) {
                    tempArr = [ (i === 0 ? obj.name : "") ];
                    for (let j = 0; j < obj.matrix[i].length; j++) {
                      if (typeArr[j] === "number") {
                        tempArr.push(Number(String(obj.matrix[i][j]).replace(/[^0-9\.\-]/g, '')));
                      } else if (typeArr[j] === "string") {
                        tempArr.push(String(obj.matrix[i][j]));
                      } else {
                        throw new Error("invaild type");
                      }
                    }
                    matrix.push(tempArr);
                  }
                  tempArr = columns.map((z) => { return ''; });
                  tempArr.unshift('');
                  matrix.push(tempArr);
                }

              } else {

                if (this.result !== undefined && this.result !== null) {

                  for (let i = 0; i < this.result["words"].length; i++) {
                    tempArr = [ this.result["words"][i].name ];
                    for (let j = 0; j < this.result["words"][i].values.length; j++) {
                      tempArr.push(Number(String(this.result["words"][i].values[j].value).replace(/[^0-9\.\-]/g, '')));
                    }
                    matrix.push(tempArr);
                  }

                  if (matrix.length > 0) {
                    tempArr = [ "시간" ];
                    for (let i = 0; i < this.result["words"][0].values.length; i++) {
                      tempArr.push(this.result["words"][0].values[i].name);
                    }
                    matrix.unshift(tempArr);
                    matrix.push(matrix[0].map((z) => { return ''; }));

                    for (let w of resultTargets) {
                      for (let i = 0; i < this.result[w].words.length; i++) {
                        tempArr = [ this.result[w].words[i].name ];
                        for (let j = 0; j < this.result[w].words[i].values.length; j++) {
                          tempArr.push(Number(String(this.result[w].words[i].values[j].value).replace(/[^0-9\.\-]/g, '')));
                        }
                        matrix.push(tempArr);
                      }

                      tempArr = matrix[0].map((z) => { return ''; });
                      matrix.push(tempArr);
                    }
                  }
                }

              }

            } else {

              tempArr = columns.map((z) => { return z; });
              matrix.push(tempArr);
              for (let arr of this) {
                tempArr = [];
                for (let i = 0; i < arr.length; i++) {
                  if (typeArr[i] === "number") {
                    tempArr.push(Number(String(arr[i]).replace(/[^0-9\.\-]/g, '')));
                  } else if (typeArr[i] === "string") {
                    tempArr.push(String(arr[i]));
                  } else {
                    throw new Error("invaild type");
                  }
                }
                matrix.push(tempArr);
              }

            }
            return matrix;
          }
        }
        class TimeSplitResult {
          constructor(designer) {
            this.designer = designer;
          }
          async toSheets() {
            if (this.proposal === undefined || this.contract === undefined || this.price === undefined || this.contents === undefined) {
              throw new Error("render first");
            }
            try {
              const { proposal, contract, price, contents } = this;
              const parentId = "1oKc2UD6hhMyLwfAKWylqh1iKTa7zBc6l";
              const values = [
                { sheets: "제안", matrix: proposal.intoSheetsMatrix() },
                { sheets: "제안 합계", matrix: proposal.intoSheetsMatrix(true) },
                { sheets: "계약", matrix: contract.intoSheetsMatrix() },
                { sheets: "계약 합계", matrix: contract.intoSheetsMatrix(true) },
                { sheets: "가격", matrix: price.intoSheetsMatrix() },
                { sheets: "컨텐츠", matrix: contents.intoSheetsMatrix() },
              ];
              const { link } = await GeneralJs.ajaxJson({
                sheetName: this.designer.designer + " 보고서_" + dateToString(new Date()).replace(/-/g, '').slice(2),
                multiple: true,
                async: true,
                channel: "#300_designer",
                parentId,
                values
              }, "/sendSheets", { equal: true });
              return link;
            } catch (e) {
              console.log(e);
            }
          }
        }
        let proposalFirst, contactFirst;
        let timeValue0, timeValue1;
        let timeCaseBoo;
        let timeArr;
        let timeLength;
        let timeHalfFirst;
        let first;
        let thisYear, thisHalf;
        let tempDate0, tempDate1;
        let tempTong;
        let resultObj;
        let tempArr;
        let boo;
        let totalOrder;
        let yearOrders, yearOrder;
        let order;
        let pastYear;
        let targetProject, tempProposal;
        let tempObj;
        let yearSums, yearSums_key;
        let totalSums;
        let basicTarget, premiumTarget;
        let mapFunction;
        let target;

        resultObj = new TimeSplitResult(this.designer);

        //proposal
        if (proposal.length === 0) {

          resultObj.proposal = new TimeArray();
          resultObj.proposal.setWidth(proposalConst.width);
          resultObj.proposal.setColumns(proposalConst.columns);
          resultObj.proposal.setTypeArr(proposalConst.type);
          resultObj.proposal.setType("timeMatrix");

        } else {

          proposal.sort((a, b) => { return b.date.valueOf() - a.date.valueOf(); });
          proposalFirst = proposal[proposal.length - 1].date;

          first = proposalFirst;
          timeValue0 = (today.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + today.getFullYear();
          timeValue1 = (first.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + first.getFullYear();
          timeCaseBoo = (0 <= timeValue0 - timeValue1 && timeValue0 - timeValue1 < 10000);
          timeLength = timeCaseBoo ? (((timeValue0 - timeValue1) * 2) + 1) : ((Math.abs(timeHalfToken[0] - Math.abs(timeValue0 - timeValue1)) * 2) + (timeValue0 >= timeHalfToken[1] ? 2 : 0));
          timeHalfFirst = timeValue0 >= timeHalfToken[1] ? 1 : 0;

          timeArr = new TimeArray();
          for (let i = 0; i < timeLength; i++) {
            thisYear = ((new Date()).getMonth() >= 6 ? (today.getFullYear() - Math.floor(i / 2)) : (today.getFullYear() - Math.ceil(i / 2)));
            thisHalf = i % 2 === 0 ? timeHalfFirst : 1 - timeHalfFirst;
            if (thisHalf === 0) {
              tempDate0 = new Date(thisYear, 0, 1);
              tempDate1 = new Date(thisYear, 6, 1);
            } else {
              tempDate0 = new Date(thisYear, 6, 1);
              tempDate1 = new Date(thisYear + 1, 0, 1);
            }
            tempTong = [];

            for (let p of proposal) {
              if (p.date.valueOf() >= tempDate0.valueOf() && p.date.valueOf() < tempDate1.valueOf()) {
                tempTong.push(p);
              }
            }

            timeArr.push({
              key: ((thisHalf === 0 ? timeHalfToken[0] : timeHalfToken[1]) + thisYear),
              year: thisYear,
              half: thisHalf,
              name: String(thisYear).slice(2) + "년 " + timeHalfArr[thisHalf] + timeHalfConst,
              values: tempTong,
              matrix: [],
              result: {},
            });

          }
          resultObj.proposal = timeArr;
          resultObj.proposal.setWidth(proposalConst.width);
          resultObj.proposal.setColumns(proposalConst.columns);
          resultObj.proposal.setTypeArr(proposalConst.type);
          resultObj.proposal.setType("timeMatrix");

          totalOrder = 1;
          yearOrders = {};
          yearSums = {};
          totalSums = {
            proposal: 0,
            pyeongEa: 0,
            pyeongLength: 0,
          };
          for (let i = 0; i < resultObj.proposal.length; i++) {
            order = resultObj.proposal[i].values.length;
            if (yearOrders['y' + String(resultObj.proposal[i].year)] === undefined) {
              yearOrders['y' + String(resultObj.proposal[i].year)] = 1;
            }
            if (yearSums['y' + String(resultObj.proposal[i].year)] === undefined) {
              yearSums['y' + String(resultObj.proposal[i].year)] = {
                proposal: 0,
                pyeongEa: 0,
                pyeongLength: 0,
              };
            }

            resultObj.proposal[i].result.order = 0;
            resultObj.proposal[i].result.proposal = 0;
            resultObj.proposal[i].result.pyeongEa = 0;
            resultObj.proposal[i].result.pyeongLength = 0;

            for (let obj of resultObj.proposal[i].values) {
              tempArr = [];
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(obj.client.name);
              tempArr.push(obj.service.name);
              tempArr.push(dateToString(obj.date));
              tempArr.push(autoComma(obj.detail.amount) + '원');
              tempArr.push(String(obj.client.pyeong) + '평');
              if (obj.client.pyeong === 0) {
                alert("평수 에러 : " + obj.client.name + " 고객님의 평수가 0평으로 되어 있습니다! 바르게 고쳐 주세요!");
                window.location.href = window.location.protocol + "//" + window.location.host + "/client?cliid=" + obj.client.cliid;
              }
              tempArr.push(autoComma(Math.round((obj.detail.amount / obj.client.pyeong) / 1000) * 1000) + '원');
              tempArr.push(obj.detail.method);
              tempArr.push(obj.detail.partial ? 'O' : 'X');
              boo = false;
              for (let obj2 of this.contract) {
                if (obj.proid === obj2.project.proid) {
                  boo = true;
                }
              }
              tempArr.push(boo ? 'O' : 'X');
              resultObj.proposal[i].matrix.push(tempArr);
              order = order - 1;
              totalOrder = totalOrder + 1;
              yearOrders['y' + String(resultObj.proposal[i].year)] = yearOrders['y' + String(resultObj.proposal[i].year)] + 1;

              resultObj.proposal[i].result.order += 1;
              resultObj.proposal[i].result.proposal += obj.detail.amount;
              totalSums.proposal += obj.detail.amount;
              yearSums['y' + String(resultObj.proposal[i].year)].proposal += obj.detail.amount;
              if (!obj.detail.partial) {
                resultObj.proposal[i].result.pyeongEa += Math.round((obj.detail.amount / obj.client.pyeong) / 1000) * 1000;
                resultObj.proposal[i].result.pyeongLength += 1;
                totalSums.pyeongEa += Math.round((obj.detail.amount / obj.client.pyeong) / 1000) * 1000;
                totalSums.pyeongLength += 1;
                yearSums['y' + String(resultObj.proposal[i].year)].pyeongEa += Math.round((obj.detail.amount / obj.client.pyeong) / 1000) * 1000;
                yearSums['y' + String(resultObj.proposal[i].year)].pyeongLength += 1;
              }

            }
          }

          totalSums.order = totalOrder - 1;
          if (totalSums.pyeongLength !== 0) {
            totalSums.pyeongEaAverage = Math.round((totalSums.pyeongEa / totalSums.pyeongLength) / 1000) * 1000;
          } else {
            totalSums.pyeongEaAverage = 0;
          }
          for (let i in yearSums) {
            yearSums[i].order = yearOrders[i] - 1;
            if (yearSums[i].pyeongLength !== 0) {
              yearSums[i].pyeongEaAverage = Math.round((yearSums[i].pyeongEa / yearSums[i].pyeongLength) / 1000) * 1000;
            } else {
              yearSums[i].pyeongEaAverage = 0;
            }
          }

          order = 1;
          yearOrder = 1;
          pastYear = null;
          for (let i = 0; i < resultObj.proposal.length; i++) {
            if (pastYear !== null) {
              if (resultObj.proposal[i].year !== pastYear) {
                yearOrder = 1;
              }
            }

            if (resultObj.proposal[i].result.pyeongLength !== 0) {
              resultObj.proposal[i].result.pyeongEaAverage = Math.round((resultObj.proposal[i].result.pyeongEa / resultObj.proposal[i].result.pyeongLength) / 1000) * 1000;
            } else {
              resultObj.proposal[i].result.pyeongEaAverage = 0;
            }

            resultObj.proposal[i].result.total = {};
            resultObj.proposal[i].result.total.order = totalOrder - 1;
            resultObj.proposal[i].result.total.proposal = totalSums.proposal;
            resultObj.proposal[i].result.total.pyeongEa = totalSums.pyeongEa;
            resultObj.proposal[i].result.total.pyeongLength = totalSums.pyeongLength;
            resultObj.proposal[i].result.total.pyeongEaAverage = totalSums.pyeongEaAverage;

            resultObj.proposal[i].result.year = {};
            resultObj.proposal[i].result.year.order = yearOrders['y' + String(resultObj.proposal[i].year)] - 1;
            resultObj.proposal[i].result.year.proposal = yearSums['y' + String(resultObj.proposal[i].year)].proposal;
            resultObj.proposal[i].result.year.pyeongEa = yearSums['y' + String(resultObj.proposal[i].year)].pyeongEa;
            resultObj.proposal[i].result.year.pyeongLength = yearSums['y' + String(resultObj.proposal[i].year)].pyeongLength;
            resultObj.proposal[i].result.year.pyeongEaAverage = yearSums['y' + String(resultObj.proposal[i].year)].pyeongEaAverage;

            for (let arr of resultObj.proposal[i].matrix) {
              arr[0] = totalOrder - order;
              arr[1] = yearOrders['y' + String(resultObj.proposal[i].year)] - yearOrder;
              order = order + 1;
              yearOrder = yearOrder + 1;
            }
            pastYear = resultObj.proposal[i].year;
          }

          resultObj.proposal.setProperty("result", {});
          resultObj.proposal.result.words = [];
          resultObj.proposal.result.year = {};
          resultObj.proposal.result.total = {};
          resultObj.proposal.result.year.words = [];
          resultObj.proposal.result.total.words = [];
          for (let i = 0; i < resultObj.proposal.length; i++) {
            if (resultObj.proposal[i].values.length > 0) {
              tempObj = {};
              tempObj.name = resultObj.proposal[i].name;
              tempObj.values = [];
              tempObj.values.push({ name: "건수", value: String(resultObj.proposal[i].result.order) + "건", width: [ 50, 80 ] });
              tempObj.values.push({ name: "제안 총 금액", value: autoComma(resultObj.proposal[i].result.proposal) + "원", width: [ 98, 145 ] });
              tempObj.values.push({ name: "평단가 평균", value: autoComma(resultObj.proposal[i].result.pyeongEaAverage) + "원", width: [ 94, 120 ] });
              resultObj.proposal.result.words.push(tempObj);
            }
          }

          yearSums_key = Object.keys(yearSums);
          yearSums_key.sort((a, b) => { return Number(b.replace(/[^0-9]/g, '')) - Number(a.replace(/[^0-9]/g, '')); });
          for (let year of yearSums_key) {
            tempObj = {};
            tempObj.name = String(year.replace(/[^0-9]/g, '')) + "년 합계";
            tempObj.values = [];
            tempObj.values.push({ name: "건수", value: String(yearSums[year].order) + "건", width: [ 50, 80 ] });
            tempObj.values.push({ name: "제안 총 금액", value: autoComma(yearSums[year].proposal) + "원", width: [ 98, 145 ] });
            tempObj.values.push({ name: "평단가 평균", value: autoComma(yearSums[year].pyeongEaAverage) + "원", width: [ 94, 120 ] });
            resultObj.proposal.result.year.words.push(tempObj);
          }

          tempObj = {};
          tempObj.name = "총 합계";
          tempObj.values = [];
          tempObj.values.push({ name: "건수", value: String(totalSums.order) + "건", width: [ 50, 80 ] });
          tempObj.values.push({ name: "제안 총 금액", value: autoComma(totalSums.proposal) + "원", width: [ 98, 145 ] });
          tempObj.values.push({ name: "평단가 평균", value: autoComma(totalSums.pyeongEaAverage) + "원", width: [ 94, 120 ] });
          resultObj.proposal.result.total.words.push(tempObj);

        }

        //contract
        if (contract.length === 0) {

          resultObj.contract = new TimeArray();
          resultObj.contract.setWidth(contractConst.width);
          resultObj.contract.setColumns(contractConst.columns);
          resultObj.contract.setTypeArr(contractConst.type);
          resultObj.contract.setType("timeMatrix");

        } else {

          contract.sort((a, b) => { return b.project.start.valueOf() - a.project.start.valueOf(); });
          contactFirst = contract[contract.length - 1].project.start;

          first = contactFirst;
          timeValue0 = (today.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + today.getFullYear();
          timeValue1 = (first.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + first.getFullYear();
          timeCaseBoo = (0 <= timeValue0 - timeValue1 && timeValue0 - timeValue1 < 10000);
          timeLength = timeCaseBoo ? (((timeValue0 - timeValue1) * 2) + 1) : ((Math.abs(timeHalfToken[0] - Math.abs(timeValue0 - timeValue1)) * 2) + (timeValue0 >= timeHalfToken[1] ? 2 : 0));
          timeHalfFirst = timeValue0 >= timeHalfToken[1] ? 1 : 0;

          timeArr = new TimeArray();
          for (let i = 0; i < timeLength; i++) {
            thisYear = ((new Date()).getMonth() >= 6 ? (today.getFullYear() - Math.floor(i / 2)) : (today.getFullYear() - Math.ceil(i / 2)));
            thisHalf = i % 2 === 0 ? timeHalfFirst : 1 - timeHalfFirst;
            if (thisHalf === 0) {
              tempDate0 = new Date(thisYear, 0, 1);
              tempDate1 = new Date(thisYear, 6, 1);
            } else {
              tempDate0 = new Date(thisYear, 6, 1);
              tempDate1 = new Date(thisYear + 1, 0, 1);
            }
            tempTong = [];
            for (let c of contract) {
              if (c.project.start.valueOf() >= tempDate0.valueOf() && c.project.start.valueOf() < tempDate1.valueOf()) {
                tempTong.push(c);
              }
            }

            timeArr.push({
              key: ((thisHalf === 0 ? timeHalfToken[0] : timeHalfToken[1]) + thisYear),
              year: thisYear,
              half: thisHalf,
              name: String(thisYear).slice(2) + "년 " + timeHalfArr[thisHalf] + timeHalfConst,
              values: tempTong,
              matrix: [],
              result: {},
            });

          }
          resultObj.contract = timeArr;
          resultObj.contract.setWidth(contractConst.width);
          resultObj.contract.setColumns(contractConst.columns);
          resultObj.contract.setTypeArr(contractConst.type);
          resultObj.contract.setType("timeMatrix");

          totalOrder = 1;
          yearOrders = {};
          yearSums = {};
          totalSums = {
            contract: 0,
            first: 0,
            remain: 0,
            proposal: 0,
            pyeongEa: 0,
            pyeongLength: 0,
          };
          for (let i = 0; i < resultObj.contract.length; i++) {
            order = resultObj.contract[i].values.length;
            if (yearOrders['y' + String(resultObj.contract[i].year)] === undefined) {
              yearOrders['y' + String(resultObj.contract[i].year)] = 1;
            }
            if (yearSums['y' + String(resultObj.contract[i].year)] === undefined) {
              yearSums['y' + String(resultObj.contract[i].year)] = {
                contract: 0,
                first: 0,
                remain: 0,
                proposal: 0,
                pyeongEa: 0,
                pyeongLength: 0,
              };
            }

            resultObj.contract[i].result.order = 0;
            resultObj.contract[i].result.contract = 0;
            resultObj.contract[i].result.first = 0;
            resultObj.contract[i].result.remain = 0;
            resultObj.contract[i].result.proposal = 0;
            resultObj.contract[i].result.pyeongEa = 0;
            resultObj.contract[i].result.pyeongLength = 0;

            for (let obj of resultObj.contract[i].values) {

              tempProposal = null;
              for (let obj2 of this.proposal) {
                if (obj2.proid === obj.project.proid) {
                  tempProposal = obj2;
                }
              }
              if (tempProposal === null) {
                for (let project of this.projects) {
                  if (obj.project.proid === project.proid) {
                    targetProject = project;
                  }
                }
                tempProposal = {
                  detail: {
                    method: targetProject.proposal.detail[0].fee[0].method,
                    partial: targetProject.proposal.detail[0].fee[0].partial,
                    amount: 0
                  }
                };
              }

              tempArr = [];
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(obj.client.name);
              tempArr.push(obj.service.name);
              tempArr.push(dateToString(obj.project.start));
              tempArr.push(dateToString(obj.project.end));
              tempArr.push(tempProposal.detail.method);
              tempArr.push(tempProposal.detail.partial ? 'O' : 'X');
              tempArr.push(autoComma(obj.payments.amount) + '원');
              tempArr.push(String(obj.payments.percentage) + '%');
              tempArr.push(autoComma(tempProposal.detail.amount) + '원');
              tempArr.push(String(obj.client.pyeong) + '평');
              if (obj.client.pyeong === 0) {
                alert("평수 에러 : " + obj.client.name + " 고객님의 평수가 0평으로 되어 있습니다! 바르게 고쳐 주세요!");
                window.location.href = window.location.protocol + "//" + window.location.host + "/client?cliid=" + obj.client.cliid;
              }
              tempArr.push(autoComma(Math.round((tempProposal.detail.amount / obj.client.pyeong) / 1000) * 1000) + '원');
              tempArr.push(/없음/gi.test(dateToString(obj.payments.first)) ? "예정" : dateToString(obj.payments.first));
              tempArr.push(/없음/gi.test(dateToString(obj.payments.remain)) ? "예정" : dateToString(obj.payments.remain));
              resultObj.contract[i].matrix.push(tempArr);
              order = order - 1;
              totalOrder = totalOrder + 1;
              yearOrders['y' + String(resultObj.contract[i].year)] = yearOrders['y' + String(resultObj.contract[i].year)] + 1;

              resultObj.contract[i].result.order += 1;
              resultObj.contract[i].result.contract += obj.payments.amount;
              totalSums.contract += obj.payments.amount;
              yearSums['y' + String(resultObj.contract[i].year)].contract += obj.payments.amount;

              if ((new Date(2000, 0, 1)).valueOf() <= obj.payments.first.valueOf() && (new Date(3000, 0, 1)).valueOf() >= obj.payments.first.valueOf()) {
                resultObj.contract[i].result.first += Math.round(obj.payments.amount / 2);
                totalSums.first += Math.round(obj.payments.amount / 2);
                yearSums['y' + String(resultObj.contract[i].year)].first += Math.round(obj.payments.amount / 2);
              }
              if ((new Date(2000, 0, 1)).valueOf() <= obj.payments.remain.valueOf() && (new Date(3000, 0, 1)).valueOf() >= obj.payments.remain.valueOf()) {
                resultObj.contract[i].result.remain += Math.round(obj.payments.amount / 2);
                totalSums.remain += Math.round(obj.payments.amount / 2);
                yearSums['y' + String(resultObj.contract[i].year)].remain += Math.round(obj.payments.amount / 2);
              }
              resultObj.contract[i].result.proposal += tempProposal.detail.amount;
              totalSums.proposal += tempProposal.detail.amount;
              yearSums['y' + String(resultObj.contract[i].year)].proposal += tempProposal.detail.amount;

              if (!tempProposal.detail.partial && (tempProposal.detail.amount !== 0)) {
                resultObj.contract[i].result.pyeongEa += Math.round((tempProposal.detail.amount / obj.client.pyeong) / 1000) * 1000;
                resultObj.contract[i].result.pyeongLength += 1;
                totalSums.pyeongEa += Math.round((tempProposal.detail.amount / obj.client.pyeong) / 1000) * 1000;
                totalSums.pyeongLength += 1;
                yearSums['y' + String(resultObj.contract[i].year)].pyeongEa += Math.round((tempProposal.detail.amount / obj.client.pyeong) / 1000) * 1000;
                yearSums['y' + String(resultObj.contract[i].year)].pyeongLength += 1;
              }

            }
          }

          totalSums.order = totalOrder - 1;
          if (totalSums.pyeongLength !== 0) {
            totalSums.pyeongEaAverage = Math.round((totalSums.pyeongEa / totalSums.pyeongLength) / 1000) * 1000;
          } else {
            totalSums.pyeongEaAverage = 0;
          }
          for (let i in yearSums) {
            yearSums[i].order = yearOrders[i] - 1;
            if (yearSums[i].pyeongLength !== 0) {
              yearSums[i].pyeongEaAverage = Math.round((yearSums[i].pyeongEa / yearSums[i].pyeongLength) / 1000) * 1000;
            } else {
              yearSums[i].pyeongEaAverage = 0;
            }
          }

          order = 1;
          yearOrder = 1;
          pastYear = null;
          for (let i = 0; i < resultObj.contract.length; i++) {
            if (pastYear !== null) {
              if (resultObj.contract[i].year !== pastYear) {
                yearOrder = 1;
              }
            }
            if (resultObj.contract[i].result.pyeongLength !== 0) {
              resultObj.contract[i].result.pyeongEaAverage = Math.round((resultObj.contract[i].result.pyeongEa / resultObj.contract[i].result.pyeongLength) / 1000) * 1000;
            } else {
              resultObj.contract[i].result.pyeongEaAverage = 0;
            }

            resultObj.contract[i].result.total = {};
            resultObj.contract[i].result.total.order = totalOrder - 1;
            resultObj.contract[i].result.total.contract = totalSums.contract;
            resultObj.contract[i].result.total.first = totalSums.first;
            resultObj.contract[i].result.total.remain = totalSums.remain;
            resultObj.contract[i].result.total.proposal = totalSums.proposal;
            resultObj.contract[i].result.total.pyeongEa = totalSums.pyeongEa;
            resultObj.contract[i].result.total.pyeongLength = totalSums.pyeongLength;
            resultObj.contract[i].result.total.pyeongEaAverage = totalSums.pyeongEaAverage;

            resultObj.contract[i].result.year = {};
            resultObj.contract[i].result.year.order = yearOrders['y' + String(resultObj.contract[i].year)] - 1;
            resultObj.contract[i].result.year.contract = yearSums['y' + String(resultObj.contract[i].year)].contract;
            resultObj.contract[i].result.year.first = yearSums['y' + String(resultObj.contract[i].year)].first;
            resultObj.contract[i].result.year.remain = yearSums['y' + String(resultObj.contract[i].year)].remain;
            resultObj.contract[i].result.year.proposal = yearSums['y' + String(resultObj.contract[i].year)].proposal;
            resultObj.contract[i].result.year.pyeongEa = yearSums['y' + String(resultObj.contract[i].year)].pyeongEa;
            resultObj.contract[i].result.year.pyeongLength = yearSums['y' + String(resultObj.contract[i].year)].pyeongLength;
            resultObj.contract[i].result.year.pyeongEaAverage = yearSums['y' + String(resultObj.contract[i].year)].pyeongEaAverage;

            for (let arr of resultObj.contract[i].matrix) {
              arr[0] = totalOrder - order;
              arr[1] = yearOrders['y' + String(resultObj.contract[i].year)] - yearOrder;
              order = order + 1;
              yearOrder = yearOrder + 1;
            }
            pastYear = resultObj.contract[i].year;
          }

          resultObj.contract.setProperty("result", {});
          resultObj.contract.result.words = [];
          resultObj.contract.result.year = {};
          resultObj.contract.result.total = {};
          resultObj.contract.result.year.words = [];
          resultObj.contract.result.total.words = [];
          for (let i = 0; i < resultObj.contract.length; i++) {
            if (resultObj.contract[i].values.length > 0) {
              tempObj = {};
              tempObj.name = resultObj.contract[i].name;
              tempObj.values = [];
              tempObj.values.push({ name: "건수", value: String(resultObj.contract[i].result.order) + "건", width: [ 50, 80 ] });
              tempObj.values.push({ name: "계약 총 금액", value: autoComma(resultObj.contract[i].result.contract) + "원", width: [ 98, 145 ] });
              tempObj.values.push({ name: "선금 정산액", value: autoComma(resultObj.contract[i].result.first) + "원", width: [ 94, 140 ] });
              tempObj.values.push({ name: "잔금 정산액", value: autoComma(resultObj.contract[i].result.remain) + "원", width: [ 94, 140 ] });
              tempObj.values.push({ name: "제안 총 금액", value: autoComma(resultObj.contract[i].result.proposal) + "원", width: [ 98, 145 ] });
              tempObj.values.push({ name: "평단가 평균", value: autoComma(resultObj.contract[i].result.pyeongEaAverage) + "원", width: [ 94, 140 ] });
              resultObj.contract.result.words.push(tempObj);
            }
          }

          yearSums_key = Object.keys(yearSums);
          yearSums_key.sort((a, b) => { return Number(b.replace(/[^0-9]/g, '')) - Number(a.replace(/[^0-9]/g, '')); });
          for (let year of yearSums_key) {
            tempObj = {};
            tempObj.name = String(year.replace(/[^0-9]/g, '')) + "년 합계";
            tempObj.values = [];
            tempObj.values.push({ name: "건수", value: String(yearSums[year].order) + "건", width: [ 50, 80 ] });
            tempObj.values.push({ name: "계약 총 금액", value: autoComma(yearSums[year].contract) + "원", width: [ 98, 145 ] });
            tempObj.values.push({ name: "선금 정산액", value: autoComma(yearSums[year].first) + "원", width: [ 94, 140 ] });
            tempObj.values.push({ name: "잔금 정산액", value: autoComma(yearSums[year].remain) + "원", width: [ 94, 140 ] });
            tempObj.values.push({ name: "제안 총 금액", value: autoComma(yearSums[year].proposal) + "원", width: [ 98, 145 ] });
            tempObj.values.push({ name: "평단가 평균", value: autoComma(yearSums[year].pyeongEaAverage) + "원", width: [ 94, 140 ] });
            resultObj.contract.result.year.words.push(tempObj);
          }

          tempObj = {};
          tempObj.name = "총 합계";
          tempObj.values = [];
          tempObj.values.push({ name: "건수", value: String(totalSums.order) + "건", width: [ 50, 80 ] });
          tempObj.values.push({ name: "계약 총 금액", value: autoComma(totalSums.contract) + "원", width: [ 98, 145 ] });
          tempObj.values.push({ name: "선금 정산액", value: autoComma(totalSums.first) + "원", width: [ 94, 140 ] });
          tempObj.values.push({ name: "잔금 정산액", value: autoComma(totalSums.remain) + "원", width: [ 94, 140 ] });
          tempObj.values.push({ name: "제안 총 금액", value: autoComma(totalSums.proposal) + "원", width: [ 98, 145 ] });
          tempObj.values.push({ name: "평단가 평균", value: autoComma(totalSums.pyeongEaAverage) + "원", width: [ 94, 140 ] });
          resultObj.contract.result.total.words.push(tempObj);

        }

        //contents
        if (contents.length === 0) {

          resultObj.contents = new TimeArray();
          resultObj.contents.setWidth(contentsConst.width);
          resultObj.contents.setColumns(contentsConst.columns);
          resultObj.contents.setTypeArr(contentsConst.type);
          resultObj.contents.setType("timeMatrix");

        } else {

          contents.sort((a, b) => { return b.contents.portfolio.date.valueOf() - a.contents.portfolio.date.valueOf(); });
          first = contents[contents.length - 1].contents.portfolio.date;
          timeValue0 = (today.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + today.getFullYear();
          timeValue1 = (first.getMonth() < 6 ? timeHalfToken[0] : timeHalfToken[1]) + first.getFullYear();
          timeCaseBoo = (0 <= timeValue0 - timeValue1 && timeValue0 - timeValue1 < 10000);
          timeLength = timeCaseBoo ? (((timeValue0 - timeValue1) * 2) + 1) : ((Math.abs(timeHalfToken[0] - Math.abs(timeValue0 - timeValue1)) * 2) + (timeValue0 >= timeHalfToken[1] ? 2 : 0));
          timeHalfFirst = timeValue0 >= timeHalfToken[1] ? 1 : 0;

          timeArr = new TimeArray();
          for (let i = 0; i < timeLength; i++) {
            thisYear = ((new Date()).getMonth() >= 6 ? (today.getFullYear() - Math.floor(i / 2)) : (today.getFullYear() - Math.ceil(i / 2)));
            thisHalf = i % 2 === 0 ? timeHalfFirst : 1 - timeHalfFirst;
            if (thisHalf === 0) {
              tempDate0 = new Date(thisYear, 0, 1);
              tempDate1 = new Date(thisYear, 6, 1);
            } else {
              tempDate0 = new Date(thisYear, 6, 1);
              tempDate1 = new Date(thisYear + 1, 0, 1);
            }
            tempTong = [];
            for (let p of contents) {
              if (p.contents.portfolio.date.valueOf() >= tempDate0.valueOf() && p.contents.portfolio.date.valueOf() < tempDate1.valueOf()) {
                tempTong.push(p);
              }
            }

            timeArr.push({
              key: ((thisHalf === 0 ? timeHalfToken[0] : timeHalfToken[1]) + thisYear),
              year: thisYear,
              half: thisHalf,
              name: String(thisYear).slice(2) + "년 " + timeHalfArr[thisHalf] + timeHalfConst,
              values: tempTong,
              matrix: [],
              result: {},
            });

          }
          resultObj.contents = timeArr;
          resultObj.contents.setWidth(contentsConst.width);
          resultObj.contents.setColumns(contentsConst.columns);
          resultObj.contents.setTypeArr(contentsConst.type);
          resultObj.contents.setType("timeMatrix");

          totalOrder = 1;
          yearOrders = {};

          for (let i = 0; i < resultObj.contents.length; i++) {
            order = resultObj.contents[i].values.length;
            if (yearOrders['y' + String(resultObj.contents[i].year)] === undefined) {
              yearOrders['y' + String(resultObj.contents[i].year)] = 1;
            }

            for (let obj of resultObj.contents[i].values) {
              tempArr = [];
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(order);
              tempArr.push(obj.proid === "" ? "개인" : "HL");
              tempArr.push(obj.name === undefined ? "개인" : obj.name);
              tempArr.push(obj.contents.portfolio.pid);
              tempArr.push(dateToString(obj.contents.portfolio.date));
              tempArr.push(dateToString(obj.contents.review.date));
              tempArr.push(homepage + portfolioPath + "?pid=" + obj.contents.portfolio.pid);
              tempArr.push(/999/g.test(obj.contents.review.rid) ? "-" : homepage + reviewPath + "?pid=" + obj.contents.portfolio.pid);
              resultObj.contents[i].matrix.push(tempArr);
              order = order - 1;
              totalOrder = totalOrder + 1;
              yearOrders['y' + String(resultObj.contents[i].year)] = yearOrders['y' + String(resultObj.contents[i].year)] + 1;
            }
          }

          order = 1;
          yearOrder = 1;
          pastYear = null;
          for (let i = 0; i < resultObj.contents.length; i++) {
            if (pastYear !== null) {
              if (resultObj.contents[i].year !== pastYear) {
                yearOrder = 1;
              }
            }
            for (let arr of resultObj.contents[i].matrix) {
              arr[0] = totalOrder - order;
              arr[1] = yearOrders['y' + String(resultObj.contents[i].year)] - yearOrder;
              order = order + 1;
              yearOrder = yearOrder + 1;
            }
            pastYear = resultObj.contents[i].year;
          }

        }

        //price
        resultObj.price = new TimeArray();
        resultObj.price.setWidth(priceConst.width);
        resultObj.price.setColumns(priceConst.columns);
        resultObj.price.setTypeArr(priceConst.type);
        resultObj.price.setType("generalMatrix");

        basicTarget = Object.keys(price.detail.basic);
        premiumTarget = Object.keys(price.detail.premium);
        mapFunction = (str) => {
          for (let { column, name } of service) {
            if (column === str) {
              return { column, name };
            }
          }
        }
        basicTarget = basicTarget.map(mapFunction);
        premiumTarget = premiumTarget.map(mapFunction);

        for (let i = 0; i < basicTarget.length; i++) {
          tempArr = [];
          if (i === 0) {
            tempArr.push(String(price.alpha) + '%');
          } else {
            tempArr.push('');
          }
          tempArr.push(basicTarget[i].name + ' B');
          target = price.detail.basic[basicTarget[i].column];
          for (let j = 0; j < target.length; j++) {
            tempArr.push(autoComma(target[j] * 10000) + '원');
          }
          resultObj.price.push(tempArr);
        }
        for (let i = 0; i < premiumTarget.length; i++) {
          tempArr = [];
          tempArr.push('');
          tempArr.push(premiumTarget[i].name + ' P');
          target = price.detail.premium[premiumTarget[i].column];
          for (let j = 0; j < target.length; j++) {
            tempArr.push(autoComma(target[j] * 10000) + '원');
          }
          resultObj.price.push(tempArr);
        }

        tempArr = [];
        tempArr.push('');
        tempArr.push("수수료");
        for (let num of this.fee) {
          tempArr.push(String(Math.round(num)) + '%');
        }
        resultObj.price.push(tempArr);

        if (instance.middleMode) {
          resultObj.proposal.columns = resultObj.proposal.columns.filter((element, i) => { return proposalConst.middle[i]; });
          resultObj.proposal.typeArr = resultObj.proposal.typeArr.filter((element, i) => { return proposalConst.middle[i]; });
          resultObj.proposal.width = resultObj.proposal.width.filter((element, i) => { return proposalConst.middle[i]; });
          for (let obj of resultObj.proposal) {
            for (let m = 0; m < obj.matrix.length; m++) {
              obj.matrix[m] = obj.matrix[m].filter((element, i) => { return proposalConst.middle[i]; });
            }
          }
          for (let obj of resultObj.proposal.result.words) {
            obj.values.pop();
          }
          for (let obj of resultObj.proposal.result.total.words) {
            obj.values.pop();
          }
          for (let obj of resultObj.proposal.result.year.words) {
            obj.values.pop();
          }

          resultObj.contract.columns = resultObj.contract.columns.filter((element, i) => { return contractConst.middle[i]; });
          resultObj.contract.typeArr = resultObj.contract.typeArr.filter((element, i) => { return contractConst.middle[i]; });
          resultObj.contract.width = resultObj.contract.width.filter((element, i) => { return contractConst.middle[i]; });
          for (let obj of resultObj.contract) {
            for (let m = 0; m < obj.matrix.length; m++) {
              obj.matrix[m] = obj.matrix[m].filter((element, i) => { return contractConst.middle[i]; });
            }
          }
          for (let obj of resultObj.contract.result.words) {
            obj.values.pop();
          }
          for (let obj of resultObj.contract.result.total.words) {
            obj.values.pop();
          }
          for (let obj of resultObj.contract.result.year.words) {
            obj.values.pop();
          }

          resultObj.contents.columns = resultObj.contents.columns.filter((element, i) => { return contentsConst.middle[i]; });
          resultObj.contents.typeArr = resultObj.contents.typeArr.filter((element, i) => { return contentsConst.middle[i]; });
          resultObj.contents.width = resultObj.contents.width.filter((element, i) => { return contentsConst.middle[i]; });
          for (let obj of resultObj.contents) {
            for (let m = 0; m < obj.matrix.length; m++) {
              obj.matrix[m] = obj.matrix[m].filter((element, i) => { return contentsConst.middle[i]; });
            }
          }

          resultObj.price.columns = resultObj.price.columns.filter((element, i) => { return priceConst.middle[i]; });
          resultObj.price.typeArr = resultObj.price.typeArr.filter((element, i) => { return priceConst.middle[i]; });
          resultObj.price.width = resultObj.price.width.filter((element, i) => { return priceConst.middle[i]; });
          for (let m = 0; m < resultObj.price.length; m++) {
            resultObj.price[m] = resultObj.price[m].filter((element, i) => { return priceConst.middle[i]; });
          }

        }

        return resultObj;
      }
    }
    let projects;
    let proposalArr;
    let standard;
    let allDesigners;
    let entireTong;
    let proposals, contract;
    let alpha, alphaPercentage;
    let homeliaison;
    let key0, key1;
    let matrix;
    let newcomer;
    let premium;
    let fee;
    let possible;
    let targetService;
    let targetServicePremium;
    let serviceTong;
    let tong;
    let requests;
    let boo;
    let contents;
    let tempArr;
    let thisDesignerCareerStart;

    allDesigners = [ this.designers.pick(desid) ];

    for (let obj of price) {
      if (obj.key === 33) {
        standard = obj;
        break;
      }
    }

    tong = [];
    for (let designer of allDesigners) {
      desid = designer.desid;
      entireTong = new DesignerReport(designer, allProjects, price);
      entireTong.desid = desid;
      entireTong.designer = designer;
      projects = [];
      for (let project of allProjects) {
        if (project.desid === desid) {
          projects.push(project);
        }
      }

      proposals = [];
      for (let project of allProjects) {
        for (let obj of project.proposal.detail) {
          if (desid === obj.desid) {
            serviceName = "";
            for (let { serid, name, id } of service) {
              if (serid === project.service.serid) {
                serviceName += id;
              }
            }
            serviceName += project.service.xValue;
            proposals.push({
              proid: project.proid,
              date: project.proposal.date,
              service: {
                name: serviceName,
                serid: project.service.serid,
                xValue: project.service.xValue
              },
              client: {
                name: project.name,
                cliid: project.cliid,
                pyeong: project.pyeong
              },
              detail: {
                amount: obj.fee[0].amount,
                method: obj.fee[0].method,
                partial: obj.fee[0].partial,
              }
            });
          }
        }
      }

      contract = [];
      for (let project of projects) {
        serviceName = "";
        for (let { serid, name, id } of service) {
          if (serid === project.service.serid) {
            serviceName += id;
          }
        }
        serviceName += project.service.xValue;
        contract.push({
          client: {
            name: project.name,
            cliid: project.cliid,
            pyeong: project.pyeong
          },
          service: {
            name: serviceName,
            serid: project.service.serid,
            xValue: project.service.xValue
          },
          project: {
            proid: project.proid,
            start: (project.process.contract.meeting.date.valueOf() < emptyDateValue ? project.proposal.date : project.process.contract.meeting.date),
            end: (project.process.contract.form.date.to.valueOf() < emptyDateValue ? ((project.process.calculation.payments.remain.date.valueOf() < emptyDateValue) ? (project.contents.photo.date.valueOf() < emptyDateValue ? (new Date(3800, 0, 1)) : project.contents.photo.date) : project.process.calculation.payments.remain.date) : project.process.contract.form.date.to),
          },
          payments: {
            percentage: project.process.calculation.percentage,
            amount: project.process.calculation.payments.totalAmount,
            first: project.process.calculation.payments.first.date,
            remain: project.process.calculation.payments.remain.date,
          }
        });
      }

      entireTong.proposal = proposals;
      entireTong.contract = contract;

      thisDesignerCareerStart = new Date(designer.information.business.career.startY, designer.information.business.career.startM - 1, 1);

      alpha = 0;
      alpha += (designer.information.business.career.relatedY >= 4 ? 0.5 : 0);
      alpha += thisDesignerCareerStart.valueOf() <= tenYearsAgo.valueOf() ? 1 : (thisDesignerCareerStart.valueOf() <= fourYearsAgo.valueOf() ? 0.5 : 0);
      alpha += (designer.analytics.project.paperWork.includes("3D") ? 0.5 : 0);
      alpha += (designer.analytics.project.paperWork.includes("콜라주") ? 0.5 : 0);
      alpha += (designer.analytics.project.paperWork.length >= 4 ? 0.5 : 0);

      homeliaison = 0;
      for (let { value } of designer.analytics.etc.personality) {
        if (value) {
          homeliaison = homeliaison + 1;
        }
      }
      relationItems = [ "지속가능성 높음", "그냥 평범", "확인중", "좋지 않음" ];
      homeliaison += 2 - relationItems.indexOf(designer.analytics.etc.relation);

      alpha += (homeliaison * (4.5 / 7));

      //고객 평가 (2점 만점)
      alpha += 1;
      //인기도 (0.5점 만점)
      alpha += 0.5;

      alphaPercentage = (alpha / 100) + 1;
      alpha = (Math.floor(alpha * 100) / 100);

      key0 = designer.analytics.construct.level;
      key1 = designer.analytics.styling.level;

      row = null;
      for (let obj of price) {
        if (obj.key === ((key0 * 10) + key1)) {
          row = obj;
        }
      }
      if (row === null) {
        throw new Error("invaild key");
      }
      matrix = reverseMatrix(row.matrix);

      newcomer = standard.newcomer;
      premium = standard.premium;
      fee = standard.fee;
      possible = designer.analytics.project.matrix;

      targetService = [];
      targetServicePremium = [];
      for (let i = 0; i < possible.length; i++) {
        if (possible[i][1] === 1) {
          targetService.push(i);
        }
        if (possible[i][2] === 1) {
          targetServicePremium.push(i);
        }
      }

      serviceTong = {
         basic: {},
         premium: {}
      };
      for (let index of targetService) {
        serviceTong.basic[service[index].column] = matrix[index].map((amount) => { return Math.round(amount * alphaPercentage) });
      }
      for (let index of targetServicePremium) {
        serviceTong.premium[service[index].column] = matrix[index].map((amount) => { return Math.round(amount * premium * alphaPercentage) });
      }
      fee = fee.map((num) => { return designer.information.business.service.cost.percentage * (num / 30) });

      entireTong.price = {};
      entireTong.price.alpha = alpha;
      entireTong.price.detail = serviceTong;
      entireTong.fee = fee;

      contents = [];
      for (let c of contentsArr) {
        if (c.desid === designer.desid) {
          contents.push(c);
        }
      }
      entireTong.contents = contents;

      //mobile
      if (mobile) {
        entireTong.mobile = {
          proposal: [],
          contract: [],
          contents: [],
        };

        for (let obj of entireTong.proposal) {
          tempArr = [
            obj.client.name,
            String(obj.client.pyeong) + "평",
            dateToString(obj.date).slice(2).replace(/\-/gi, '.'),
            autoComma(obj.detail.amount) + "원",
          ];
          entireTong.mobile.proposal.push(tempArr);
        }

        for (let obj of entireTong.contract) {
          tempArr = [
            obj.client.name,
            dateToString(obj.project.start).slice(2).replace(/\-/gi, '.'),
            dateToString(obj.project.end).slice(2).replace(/\-/gi, '.'),
            autoComma(obj.payments.amount) + "원",
          ];
          entireTong.mobile.contract.push(tempArr);
        }

        for (let obj of entireTong.contents) {
          tempArr = [
            (obj.name === undefined ? "개인" : obj.name),
            dateToString(obj.contents.portfolio.date).slice(2).replace(/\-/gi, '.'),
            FRONTHOST + "/portdetail.php?pid=" + obj.contents.portfolio.pid,
          ];
          entireTong.mobile.contents.push(tempArr);
        }

      }

      tong.push(entireTong);
    }

    this.reports = new DesignerReports(tong, allProjects, price);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.reportDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight, middleMode } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip } = GeneralJs;
  let target;
  let loading;

  if (!middleMode) {
    this.pageHistory.unshift({ path: "report", status: "list", desid });
  }
  window.history.pushState({ path: "report", status: "list", desid }, '');

  this.desid = desid;
  this.fixTargets = [];

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  if (!middleMode) {
    target = null;
    for (let i = 0; i < this.standardDoms.length; i++) {
      if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
        if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
          target = i;
        }
      }
    }
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (i !== target) {
        this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
      } else {
        this.standardDoms[i].style.color = colorChip.green;
        if (i !== 1) {
          if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
            standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
          }
        } else {
          standardBar.parentElement.scrollTo({ top: 0 });
        }
      }
    }
  }

  if (middleMode) {
    ajaxJson({
      page: "report",
      mode: "page",
      who: instance.designer.information.phone,
      desid,
    }, "/ghostDesigner_updateAnalytics").then((message) => {
      console.log(message);
    }).catch((err) => {
      console.log(err);
    });
  }

  totalMother.scrollTo({ top: 0, behavior: "smooth" });
  this.reportIconSet(desid);
  this.mother.loadingRun().then((l) => {
    loading = l;
    return instance.reportDataRendering(desid);
  }).then(() => {
    loading.parentNode.removeChild(loading);
    instance.reportDetail(desid);
    if (callback !== null) {
      if (typeof callback === "function") {
        callback();
      }
    }
  }).catch((err) => {
    console.log(err);
  });

}

DesignerJs.prototype.reportDetail = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, equalJson } = GeneralJs;
  const { totalMother, ea, grayBarWidth, media } = this;
  const mobile = media[4];
  const desktop = !mobile;
  const matrixButtonConst = "matrixButtons_" + desid;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const overConst = 3;
  const today = new Date();
  const thisReport = this.reports.pick(desid);
  const timeSplitResult = thisReport.timeSplit();
  const { proposal, contract, price, contents } = timeSplitResult;
  const reportData = [
    { name: "제안", children: [] },
    { name: "계약", children: [] },
    { name: "가격", children: [] },
    { name: "컨텐츠", children: [] },
  ];
  let designer;
  let information, analytics;
  let margin;
  let baseTong0, baseTong;
  let matrix;
  let tempArr;
  let tempObj, nodeArr;
  let eachTotalTong, eachNameTong, eachValueTong;
  let level1Width, level1Left;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let tempMatrix;
  let alphabetWidth;
  let temp;
  let factorHeight, factorWidth;
  let tendencyTop, tendencyHeight;
  let tendencyFactorHeight, tendencyIndent, tendencyWidthIndent;
  let textAreaTop;
  let baseTongMarginBottom;
  let factorMarginTop, factorMarginBottom;
  let left;
  let columnVisual;
  let sumStartLeft;
  let overTargets;
  let overWidth, overRadius;
  let offConst;
  let mediaWidthRatio;
  let mobileReportData;
  let mergeMap, callbackMap, boldMap, titleMap, widthRatio;
  let table;
  let mobileBlock;
  let mobileBlockPaddingTop;
  let mobileBlockLineTop;
  let mobileBlockLineBetween;
  let mobileBlockTitleSize;
  let mobileBlockTableBetween;
  let mobileTableFontSize;
  let mobileTableBlockHeight;
  let mobileTableMarginBottom;
  let mobileTableInnderMargin;
  let baseTongPaddingTop, baseTongPaddingBottom;
  let mobileOuterMargin;

  designer = this.designers.pick(desid);
  information = designer.information;
  analytics = designer.analytics;

  this.result = timeSplitResult;
  this.proposal = proposal;
  this.contract = contract;
  this.price = price;
  this.contents = contents;

  mediaWidthRatio = <%% 1, 0.82, 0.82, 0.82, 0.82 %%>;

  margin = 8;
  level1Width = <%% 130, 110, 110, 110, 34 %%>;
  level1Left = <%% 120, 110, 110, 110, 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 12 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 3 %%>;
  tendencyTop = 3;
  tendencyHeight = 16;
  alphabetWidth = 30;

  factorHeight = <%% 34, 32, 32, 32, 10 %%>;
  factorWidth = <%% 210, 172, 172, 172, 210 %%>;
  tendencyFactorHeight = 30;
  tendencyIndent = <%% 105, 71, 71, 71, 65 %%>;
  tendencyWidthIndent = -135;

  factorMarginTop = 22;
  factorMarginBottom = factorHeight - (size - 2 + (isMac() ? 9 : 7));
  columnVisual = 5;

  sumStartLeft = 12;
  overWidth = 40;
  overRadius = 6;

  offConst = 102;

  textAreaTop = isMac() ? -3 : -4;

  baseTongPaddingTop = 1;
  baseTongPaddingBottom = 20;
  mobileOuterMargin = 4;

  mobileBlockPaddingTop = 7;
  mobileBlockLineTop = 2.4;
  mobileBlockTitleSize = 4;
  mobileBlockLineBetween = 3;
  mobileBlockTableBetween = 3.5;

  mobileTableFontSize = 2.8;
  mobileTableMarginBottom = 2;
  mobileTableBlockHeight = 8.9;
  mobileTableInnderMargin = 1;

  reportData[0].children.push({
    name: "",
    matrix: [ proposal.columns ],
    width: proposal.width,
    over: false,
    height: factorHeight + factorMarginBottom - columnVisual,
  });

  reportData[1].children.push({
    name: "",
    matrix: [ contract.columns ],
    width: contract.width,
    over: false,
    height: factorHeight + factorMarginBottom - columnVisual,
  });

  reportData[3].children.push({
    name: "",
    matrix: [ contents.columns ],
    width: contents.width,
    over: false,
    height: factorHeight + factorMarginBottom - columnVisual,
  });

  if (proposal.length > 0) {
    for (let { name, matrix, values } of proposal) {
      if (values.length === 0) {
        reportData[0].children.push({
          name,
          matrix: [ (proposal.columns.map((i) => { return '-'; })) ],
          width: proposal.width,
          over: false,
          height: factorHeight + factorMarginBottom,
        });
      } else {
        reportData[0].children.push({
          name,
          matrix,
          width: proposal.width,
          over: (values.length > overConst),
          height: (values.length >= overConst) ? ((factorHeight * overConst) + factorMarginBottom) : ((factorHeight * values.length) + factorMarginBottom),
        });
      }
    }
    reportData[0].children.push({
      name: "",
      result: proposal.result,
      height: (factorHeight * proposal.result.words.length) + factorMarginBottom,
    });
    reportData[0].children.push({
      name: "",
      result: proposal.result.year,
      height: (factorHeight * proposal.result.year.words.length) + factorMarginBottom,
    });
    reportData[0].children.push({
      name: "",
      result: proposal.result.total,
      height: (factorHeight * proposal.result.total.words.length) + factorMarginBottom,
    });
  } else {
    reportData[0].children.push({
      name: "제안건 없음",
      matrix: [ (proposal.columns.map((i) => { return '-'; })) ],
      width: proposal.width,
      over: false,
      height: factorHeight + factorMarginBottom,
    });
  }

  if (contract.length > 0) {
    for (let { name, matrix, values } of contract) {
      if (values.length === 0) {
        reportData[1].children.push({
          name,
          matrix: [ (contract.columns.map((i) => { return '-'; })) ],
          width: contract.width,
          over: false,
          height: factorHeight + factorMarginBottom,
        });
      } else {
        reportData[1].children.push({
          name,
          matrix,
          width: contract.width,
          over: (values.length > overConst),
          height: (values.length >= overConst) ? ((factorHeight * overConst) + factorMarginBottom) : ((factorHeight * values.length) + factorMarginBottom),
        });
      }
    }
    reportData[1].children.push({
      name: "",
      result: contract.result,
      height: (factorHeight * contract.result.words.length) + factorMarginBottom,
    });
    reportData[1].children.push({
      name: "",
      result: contract.result.year,
      height: (factorHeight * contract.result.year.words.length) + factorMarginBottom,
    });
    reportData[1].children.push({
      name: "",
      result: contract.result.total,
      height: (factorHeight * contract.result.total.words.length) + factorMarginBottom,
    });
  } else {
    reportData[1].children.push({
      name: "계약건 없음",
      matrix: [ (contract.columns.map((i) => { return '-'; })) ],
      width: contract.width,
      over: false,
      height: factorHeight + factorMarginBottom,
    });
  }

  reportData[2].children.push({
    name: "",
    matrix: [ price.columns ],
    width: price.width,
    over: false,
    height: factorHeight + factorMarginBottom - columnVisual,
  });
  if (price.length > 0) {
    reportData[2].children.push({
      name: String(today.getFullYear()).slice(2) + "년 현재",
      matrix: price,
      width: price.width,
      over: false,
      height: (factorHeight * price.length) + factorMarginBottom,
    });
  } else {
    reportData[2].children.push({
      name: "가격 없음",
      matrix: [ (price.columns.map((i) => { return '-'; })) ],
      width: price.width,
      over: false,
      height: factorHeight + factorMarginBottom,
    });
  }

  if (contents.length > 0) {
    for (let { name, matrix, values } of contents) {
      if (values.length === 0) {
        reportData[3].children.push({
          name,
          matrix: [ (contents.columns.map((i) => { return '-'; })) ],
          width: contents.width,
          over: false,
          height: factorHeight + factorMarginBottom,
        });
      } else {
        reportData[3].children.push({
          name,
          matrix,
          width: contents.width,
          over: (values.length > overConst),
          height: (values.length >= overConst) ? ((factorHeight * overConst) + factorMarginBottom) : ((factorHeight * values.length) + factorMarginBottom),
        });
      }
    }
  } else {
    reportData[3].children.push({
      name: "컨텐츠 없음",
      matrix: [ (contents.columns.map((i) => { return '-'; })) ],
      width: contents.width,
      over: false,
      height: factorHeight + factorMarginBottom,
    });
  }

  // mobile
  if (mobile) {
    mobileReportData = equalJson(JSON.stringify(reportData));
    mobileReportData.splice(2, 1);
    mobileReportData[0].children = thisReport.mobile.proposal;
    mobileReportData[1].children = thisReport.mobile.contract;
    mobileReportData[2].children = thisReport.mobile.contents;

    for (let i = 0; i < mobileReportData.length; i++) {
      if (i === 0) {
        mobileReportData[i].columns = [ "고객", "평수", "제안일", "금액" ];
        mobileReportData[i].widthRatio = [ 1, 1, 1, 2 ];
      } else if (i === 1) {
        mobileReportData[i].columns = [ "고객", "시작일", "종료일", "금액" ];
        mobileReportData[i].widthRatio = [ 1, 1, 1, 2 ];
      } else if (i === 2) {
        mobileReportData[i].columns = [ "고객", "발행일", "홈페이지 링크" ];
        mobileReportData[i].widthRatio = [ 1, 1, 3 ];
      }

      mobileReportData[i].boldMap = [];
      mobileReportData[i].callbackMap = [];
      if (mobileReportData[i].children.length > 0) {
        for (let j = 0; j < mobileReportData[i].children.length + 1; j++) {
          mobileReportData[i].boldMap.push((new Array(mobileReportData[i].children[0].length)).fill(0, 0));
          mobileReportData[i].callbackMap.push((new Array(mobileReportData[i].children[0].length)).fill(null, 0));
        }
        if (i === 2) {
          for (let j = 0; j < mobileReportData[i].callbackMap.length; j++) {
            mobileReportData[i].callbackMap[j][mobileReportData[i].callbackMap[j].length - 1] = function (e) {
              const target = this.firstChild.firstChild;
              const link = target.textContent;
              GeneralJs.blankHref(link);
            }
          }
        }
      }

      mobileReportData[i].titleMap = (new Array(mobileReportData[i].boldMap.length)).fill(0, 0);
      if (mobileReportData[i].boldMap.length > 0) {
        mobileReportData[i].boldMap[0].fill(1, 0);
        mobileReportData[i].titleMap[0] = 1;
      }
    }

  }

  if (mobile) {
    totalMother.style.background = colorChip.gray2;
  }

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(margin * 3) + ea : (this.middleMode ? String(60) + "px" : String(0)),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2), ea),
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
      height: "auto",
      animation: "",
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      background: colorChip.white,
      height: "auto",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingTop: desktop ? "" : String(baseTongPaddingTop) + ea,
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingTop: desktop ? "" : String(baseTongPaddingTop) + ea,
      paddingBottom: desktop ? "" : String(baseTongPaddingBottom) + ea,
    }
  });

  if (desktop) {
    for (let i = 0; i < reportData.length; i++) {
      nodeArr = createNodes([
        {
          mother: baseTong,
          class: [ "totalname_" + String(i) ],
          attribute: [
            { x: String(i) },
          ],
          style: {
            position: "relative",
            width: String(100) + '%',
            height: "auto",
            overflow: "hidden",
            borderBottom: (desktop ? (i !== reportData.length - 1 ? "1px solid " + colorChip.gray4 : "") : ""),
          }
        },
        {
          mother: -1,
          class: [ "hoverDefault" ],
          text: reportData[i].name,
          events: [
            {
              type: "click",
              event: function (e) {
                const x = Number(this.getAttribute('x'));
                const toggle = this.getAttribute("toggle");
                const target = document.querySelector(".totalname_" + String(x));
                if (toggle === "on") {
                  target.style.height = String(offConst) + ea;
                  this.setAttribute("toggle", "off");
                } else {
                  target.style.height = "auto";
                  this.setAttribute("toggle", "on");
                }
              }
            }
          ],
          attribute: [
            { x: String(i) },
            { toggle: "on" },
          ],
          style: {
            position: "absolute",
            fontSize: String(size) + ea,
            fontWeight: String(600),
            color: colorChip.black,
            top: String(topMargin + 1) + ea,
            left: String(leftMargin) + ea,
          }
        },
        {
          mother: -2,
          style: {
            position: "absolute",
            width: String(level1Width) + ea,
            top: String(0) + ea,
            left: String(level1Left) + ea,
            paddingTop: String(topMargin) + ea,
          }
        },
        {
          mother: -3,
          style: {
            position: "relative",
            width: withOut(level1Width + level1Left, ea),
            top: String(0) + ea,
            left: String(level1Width + level1Left) + ea,
            height: String(100) + '%',
            paddingTop: String(topMargin) + ea,
          }
        },
      ]);

      eachTotalTong = nodeArr[0];
      eachNameTong = nodeArr[2];
      eachValueTong = nodeArr[3];

      for (let j = 0; j < reportData[i].children.length; j++) {
        tempArr = [];
        tempObj = {
          mother: eachNameTong,
          class: [ "name_" + String(i) + "_" + String(j), ((reportData[i].children[j].matrix !== undefined && reportData[i].children[j].over) ? "overTarget" : "generalTarget") ],
          attribute: [
            { x: String(i) },
            { y: String(j) },
          ],
          text: reportData[i].children[j].name,
          style: {
            display: "block",
            position: "relative",
            fontSize: String(size - 2) + ea,
            fontWeight: String(600),
            color: colorChip.green,
            height: String(reportData[i].children[j].height) + ea,
            width: String(100) + '%',
            marginBottom: String((j !== reportData[i].children.length - 1) ? factorMarginTop : 0) + ea,
            borderBottom: j !== reportData[i].children.length - 1 ? ("1px solid " + colorChip.gray4) : "",
          }
        };
        tempArr.push(tempObj);

        tempObj = {
          mother: eachValueTong,
          class: [ "report_" + String(i) + "_" + String(j) ],
          attribute: [
            { x: String(i) },
            { y: String(j) },
          ],
          style: {
            display: "block",
            position: "relative",
            height: String(reportData[i].children[j].height) + ea,
            width: String(100) + '%',
            overflow: "hidden",
            marginBottom: String((j !== reportData[i].children.length - 1) ? factorMarginTop : 0) + ea,
            borderBottom: j !== reportData[i].children.length - 1 ? ("1px solid " + colorChip.gray4) : "",
          }
        };
        tempArr.push(tempObj);

        if (reportData[i].children[j].matrix !== undefined) {
          for (let h = 0; h < reportData[i].children[j].matrix.length; h++) {
            tempObj = {
              mother: -1 + (-1 * h * (reportData[i].children[j].width.length + 1)),
              class: [ "report_" + String(i) + "_" + String(j), "report_" + String(i) + "_" + String(j) + "_" + String(h) ],
              attribute: [
                { x: String(i) },
                { y: String(j) },
                { z: String(h) },
              ],
              style: {
                display: ((i === 2) || (h < overConst)) ? "block" : "none",
                position: "relative",
                height: String(factorHeight) + ea,
                width: String(100) + '%',
                left: String(0) + ea,
                overflow: "hidden"
              }
            };
            tempArr.push(tempObj);
            left = 0;
            for (let k = 0; k < reportData[i].children[j].width.length; k++) {
              tempObj = {
                mother: -1 + (-1 * k),
                text: String(reportData[i].children[j].matrix[h][k]),
                style: {
                  position: "absolute",
                  fontSize: String(size - 2) + ea,
                  fontWeight: String(j === 0 ? 600 : 400),
                  color: colorChip.black,
                  height: String(100) + '%',
                  width: String(reportData[i].children[j].width[k] * mediaWidthRatio) + ea,
                  top: String(0) + ea,
                  left: String(left) + ea,
                  textAlign: "center",
                }
              };
              tempArr.push(tempObj);
              left += reportData[i].children[j].width[k] * mediaWidthRatio;
            }
          }
        } else if (reportData[i].children[j].result !== undefined) {

          for (let h = 0; h < reportData[i].children[j].result.words.length; h++) {
            tempObj = {
              mother: -1 + (-1 * h * ((reportData[i].children[j].result.words[h].values.length * 2) + 1 + 1)),
              class: [ "report_" + String(i) + "_" + String(j), "report_" + String(i) + "_" + String(j) + "_" + String(h) ],
              attribute: [
                { x: String(i) },
                { y: String(j) },
                { z: String(h) },
              ],
              style: {
                display: "block",
                position: "relative",
                height: String(factorHeight) + ea,
                width: String(100) + '%',
                left: String(0) + ea,
                overflow: "hidden"
              }
            };
            tempArr.push(tempObj);

            tempObj = {
              mother: -3 + (-1 * h * ((reportData[i].children[j].result.words[h].values.length * 2) + 1 + 1)),
              text: String(reportData[i].children[j].result.words[h].name),
              style: {
                display: "block",
                position: "relative",
                height: String(factorHeight) + ea,
                fontSize: String(size - 2) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                width: String(100) + '%',
                top: String(0) + ea,
                left: String(0) + ea,
                textAlign: "left",
              }
            };
            tempArr.push(tempObj);

            left = sumStartLeft;
            for (let k = 0; k < reportData[i].children[j].result.words[h].values.length; k++) {
              tempObj = {
                mother: -2 + (-2 * k),
                text: String(reportData[i].children[j].result.words[h].values[k].name),
                style: {
                  position: "absolute",
                  fontSize: String(size - 2) + ea,
                  fontWeight: String(400),
                  color: colorChip.green,
                  height: String(100) + '%',
                  width: String(reportData[i].children[j].result.words[h].values[k].width[0] * mediaWidthRatio) + ea,
                  top: String(0) + ea,
                  left: String(left) + ea,
                  textAlign: "left",
                }
              };
              tempArr.push(tempObj);
              left += reportData[i].children[j].result.words[h].values[k].width[0] * mediaWidthRatio;

              tempObj = {
                mother: -3 + (-2 * k),
                text: String(reportData[i].children[j].result.words[h].values[k].value),
                style: {
                  position: "absolute",
                  fontSize: String(size - 2) + ea,
                  fontWeight: String(400),
                  color: colorChip.black,
                  height: String(100) + '%',
                  width: String(reportData[i].children[j].result.words[h].values[k].width[1] * mediaWidthRatio) + ea,
                  top: String(0) + ea,
                  left: String(left) + ea,
                  textAlign: "left",
                }
              };
              tempArr.push(tempObj);
              left += reportData[i].children[j].result.words[h].values[k].width[1] * mediaWidthRatio;
            }
          }
        }
        createNodes(tempArr);
      }
    }
    overTargets = document.querySelectorAll('.' + "overTarget");
    for (let dom of overTargets) {
      createNode({
        mother: dom,
        attribute: [
          { x: dom.getAttribute('x') },
          { y: dom.getAttribute('y') },
          { toggle: "off" },
        ],
        events: [
          {
            type: "click",
            event: function (e) {
              const x = Number(this.getAttribute('x'));
              const y = Number(this.getAttribute('y'));
              const toggle = this.getAttribute("toggle");
              let targets, temp, length;

              targets = [];
              temp = document.querySelector(".report_" + String(x) + "_" + String(y));
              targets.push(temp);
              temp = document.querySelector(".name_" + String(x) + "_" + String(y));
              targets.push(temp);
              length = targets[0].children.length;

              if (toggle === "off") {
                for (let target of targets) {
                  target.style.height = String((factorHeight * length) + factorMarginBottom) + ea;
                }
                for (let child of targets[0].children) {
                  child.style.display = "block";
                }
                this.setAttribute("toggle", "on");
              } else {
                for (let target of targets) {
                  target.style.height = String((factorHeight * overConst) + factorMarginBottom) + ea;
                }
                for (let i = 0; i < length; i++) {
                  if (i < overConst) {
                    targets[0].children[i].style.display = "block";
                  } else {
                    targets[0].children[i].style.display = "none";
                  }
                }
                this.setAttribute("toggle", "off");
              }
            }
          }
        ],
        class: [ "hoverDefault" ],
        style: {
          position: "absolute",
          bottom: String(factorMarginTop + factorMarginBottom - 3) + ea,
          left: String(0) + ea,
          width: String(overWidth) + ea,
          height: String(overRadius + 12) + ea,
          background: colorChip.white,
          cursor: "pointer",
        },
        children: [
          {
            style: {
              position: "absolute",
              height: String(overRadius) + ea,
              width: String(overRadius) + ea,
              background: colorChip.green,
              borderRadius: String(overRadius) + ea,
              bottom: String(0) + ea,
              left: String(0) + ea,
            }
          },
          {
            style: {
              position: "absolute",
              height: String(overRadius) + ea,
              width: String(overRadius) + ea,
              background: colorChip.green,
              borderRadius: String(overRadius) + ea,
              bottom: String(0) + ea,
              left: String(overRadius * 1.5) + ea,
            }
          },
          {
            style: {
              position: "absolute",
              height: String(overRadius) + ea,
              width: String(overRadius) + ea,
              background: colorChip.green,
              borderRadius: String(overRadius) + ea,
              bottom: String(0) + ea,
              left: String(overRadius * 3) + ea,
            }
          },
        ]
      });
    }
  } else {
    for (let { name, children: matrix, boldMap, titleMap, callbackMap, widthRatio, columns } of mobileReportData) {
      if (matrix.length > 0) {

        mobileBlock = createNode({
          mother: baseTong,
          style: {
            display: "block",
            position: "relative",
            marginLeft: String(leftMargin) + ea,
            width: withOut(100, leftMargin * 2, ea),
            paddingTop: String(mobileBlockPaddingTop) + ea,
          },
          children: [
            {
              style: {
                position: "absolute",
                top: String(mobileBlockPaddingTop) + ea,
                left: String(0),
                height: String(mobileBlockLineTop) + ea,
                width: String(100) + '%',
                borderBottom: "1px dashed " + colorChip.gray3,
              }
            },
            {
              text: name,
              style: {
                display: "inline-block",
                position: "relative",
                fontSize: String(mobileBlockTitleSize) + ea,
                fontWeight: String(600),
                marginBottom: String(mobileBlockTableBetween) + ea,
                paddingRight: String(mobileBlockLineBetween) + ea,
                background: colorChip.white,
              }
            }
          ]
        });

        matrix.unshift(columns);
        table = mother.makeTable(matrix, { style: {
          width: (100 - (mobileOuterMargin * 2) - (leftMargin * 2)) / (widthRatio.reduce((accumulator, current) => { return accumulator + current; })),
          height: mobileTableBlockHeight,
          size: mobileTableFontSize,
          innerMargin: mobileTableInnderMargin,
          innerMarginLeft: mobileTableInnderMargin
        }, boldMap, titleMap, callbackMap, widthRatio, whiteMode: true });
        mobileBlock.appendChild(table);
        table = baseTong.lastChild;
        table.style.position = "relative";
        table.style.display = "block";
        table.style.marginBottom = String(mobileTableMarginBottom) + ea;

      }
    }
  }

  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.reportIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, cInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  cInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.cInitialIcon = cInitialIcon;

  if (!this.middleMode) {

    listIcon.addEventListener("click", function (e) {
      blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
    });

    previousIcon.addEventListener("click", function (e) {
      const { desid: previousDesid } = instance.designers.previous(desid);
      if (instance.modes.indexOf(instance.mode) === 0) {
        instance.adminDetailLaunching(previousDesid);
      } else {
        instance.reportDetailLaunching(previousDesid);
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const { desid: nextDesid } = instance.designers.next(desid);
      if (instance.modes.indexOf(instance.mode) === 0) {
        instance.adminDetailLaunching(nextDesid);
      } else {
        instance.reportDetailLaunching(nextDesid);
      }
    });

  } else {

    if (desktop) {

      listIcon.addEventListener("click", function (e) {
        const totalContents = document.getElementById("totalcontents");
        const totalMother = document.querySelector(".totalMother");
        const grayBack = totalContents.children[0];
        const listPannel = totalMother.children[0].children[0];
        const iconSetPannel = instance.iconTong;
        const mainBaseTong = instance.mainBaseTong;
        const outerMargin = Number(mainBaseTong.style.top.replace(/[^0-9\.\-]/gi, ''));

        if (grayBack.getAttribute("toggle") !== "off") {
          grayBack.style.width = String(0) + ea;
          listPannel.style.transform = "translateX(" + String((instance.grayBarWidth + instance.tabletWidth) * -1) + ea + ")";
          iconSetPannel.style.background = "transparent";
          mainBaseTong.style.left = String(outerMargin) + ea;
          mainBaseTong.style.width = withOut(outerMargin * 2, ea);
          grayBack.setAttribute("toggle", "off");
          instance.listIcon.style.left = String(left2) + ea;
        } else {
          grayBack.style.width = String(instance.grayBarWidth) + ea;
          listPannel.style.transform = "translateX(" + String(0) + ea + ")";
          iconSetPannel.style.background = colorChip.gray0;
          mainBaseTong.style.left = String(instance.grayBarWidth + outerMargin) + ea;
          mainBaseTong.style.width = withOut(instance.grayBarWidth + (outerMargin * 2), ea);
          grayBack.setAttribute("toggle", "on");
          instance.listIcon.style.left = String(left) + ea;
        }

      });

    } else {

      listIcon.addEventListener("click", function (e) {
        instance.mode = "request";
        instance.requestDetailLaunching(designer.desid);
      });

    }

    previousIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index - 1] === undefined ? targets[targets.length - 1] : targets[index - 1];
        target.click();
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index + 1] === undefined ? targets[0] : targets[index + 1];
        target.click();
      }
    });

  }

  cInitialIcon.addEventListener("click", function (e) {
    instance.adminDetailLaunching(desid);
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
      GeneralJs.ajaxJson({
        method: "designerCheckList",
        name: designer.designer,
        phone: designer.information.phone,
        option: {
          desid: designer.desid,
          designer: designer.designer,
          host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
          path: "about",
        }
      }, "/alimTalk").then(() => {
        return GeneralJs.ajaxJson({
          page: "report",
          mode: "send",
          who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
          desid: designer.desid,
        }, "/ghostDesigner_updateAnalytics");
      }).then(() => {
        instance.mother.greenAlert("알림톡이 전송되었습니다!");
      }).catch((err) => {
        console.log(err);
      });
    } else {
      instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
    }
  });

}

DesignerJs.prototype.reportAddExtractEvent = function () {
  const instance = this;
  const { ea } = this;
  const { createNode, createNodes, colorChip, withOut } = GeneralJs;
  if (this.mother.belowButtons !== undefined && this.mother.belowButtons !== null) {
    if (this.mother.belowButtons.sub !== undefined && this.mother.belowButtons.sub !== null) {
      if (this.mother.belowButtons.sub.extractIcon !== undefined && this.mother.belowButtons.sub.extractIcon !== null) {
        this.mother.belowButtons.sub.extractIcon.addEventListener("click", (e) => {
          if (instance.result !== null) {
            const width = 50;
            const [ back, icon ] = createNodes([
              {
                mother: instance.totalMother,
                class: [ "justfadein" ],
                style: {
                  position: "fixed",
                  zIndex: String(2),
                  background: colorChip.black,
                  opacity: String(0.2),
                  width: "100%",
                  height: "100%",
                  top: String(0),
                  left: String(0),
                }
              },
              {
                mother: instance.totalMother,
                class: [ "loading" ],
                mode: "svg",
                source: instance.mother.returnLoading(),
                style: {
                  position: "fixed",
                  zIndex: String(2),
                  width: String(width) + ea,
                  height: String(width) + ea,
                  top: "calc(50% - " + String((width / 2) + 60) + ea + ")",
                  left: "calc(50% - " + String((width / 2)) + ea + ")",
                }
              }
            ]);
            instance.result.toSheets().then((link) => {
              back.classList.remove("justfadein");
              back.classList.add("justfadeout");
              icon.style.opacity = "0";
              GeneralJs.timeouts["extractPendingBack"] = setTimeout(() => {
                let viewFunction;
                instance.totalMother.removeChild(instance.totalMother.lastChild);
                instance.totalMother.removeChild(instance.totalMother.lastChild);
                window.alert("시트 제작이 요청되었습니다! 슬랙을 통해 링크가 갈 예정입니다!");
                clearTimeout(GeneralJs.timeouts["extractPendingBack"]);
                GeneralJs.timeouts["extractPendingBack"] = null;
              }, 401);
            });
          }
        });
      }
    }
  }
}

DesignerJs.prototype.reportView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    const middleMode = /middle/gi.test(window.location.pathname);
    this.backGrayBar();
    await this.spreadData(null, true, middleMode ? "middle" : null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight } = this;
    const standardBar = totalMother.firstChild;
    const designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    const length = designers.length;
    const getObj = returnGet();
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;

    this.designers = new Designers(designers);
    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[1].getAttribute("desid");
    this.result = null;
    this.middleMode = middleMode;
    this.modes = [ "admin", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[1];

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.reportDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            target = null;
            for (let { designer, desid } of instance.designers) {
              if (value === designer) {
                target = desid;
              }
            }
            if (target !== null) {
              instance.reportDetailLaunching(target);
            }
          }
        }
      });
    }

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.reportDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }
    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    window.addEventListener("resize", (e) => {
      window.location.reload();
    });
    window.addEventListener("popstate", (e) => {
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          instance.reportDetailLaunching(instance.pageHistory[1].desid);
          instance.pageHistory.shift();
          instance.pageHistory.shift();
        }
      }
    });

    //launching
    this.reportDetailLaunching(this.desid);

    //add extract event
    this.reportAddExtractEvent();

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.requestDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight, middleMode } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip, returnGet } = GeneralJs;
  const getObj = returnGet();
  const entireMode = (getObj.dataonly === "true" && getObj.entire === "true");
  let target, pastScrollTop;
  let loading;

  if (!middleMode) {
    this.pageHistory.unshift({ path: "request", status: "list", desid });
  }
  window.history.pushState({ path: "request", status: "list", desid }, '');

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  if (!middleMode) {
    target = null;
    for (let i = 0; i < this.standardDoms.length; i++) {
      if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
        if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
          target = i;
        }
      }
    }
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (i !== target) {
        this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
      } else {
        this.standardDoms[i].style.color = colorChip.green;
        if (i !== 1) {
          if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
            standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
          }
        } else {
          standardBar.parentElement.scrollTo({ top: 0 });
        }
      }
    }
  }


  if (!entireMode) {
    this.requestIconSet(desid);
  }
  this.mother.loadingRun().then((dom) => {
    loading = dom;
    return ajaxJson({ noFlat: true, whereQuery: { desid } }, "/getProjects", { equal: true });
  }).then((projects) => {
    if (projects.length === 0) {
      return [];
    } else {
      instance.designers.setProjects(projects);
      return ajaxJson({
        noFlat: true,
        whereQuery: { $or: projects.map((obj) => { return { cliid: obj.cliid } }) }
      }, "/getClients", { equal: true });
    }
  }).then((clients) => {
    loading.parentNode.removeChild(loading);
    instance.designers.setClients(clients);
    instance.requestList(desid);
    scrollTo(totalMother, pastScrollTop);
    if (callback !== null) {
      if (typeof callback === "function") {
        callback();
      }
    }
  }).catch((err) => {
    console.log(err);
  });
}

DesignerJs.prototype.requestReturnStatic = function (designer, project, client, clientHistory, projectHistory, requestNumber) {
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, autoComma } = GeneralJs;
  const { totalMother, ea, grayBarWidth, middleMode } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;

  const title = "홈스타일링 의뢰서";
  const initialContents = "안녕하세요, <b%" + designer.designer + "%b> 실장님!\n홈리에종에 의뢰하신 " + client.name +  " 고객님 관련 정보를 보내드립니다. <b%" + GeneralJs.serviceParsing(project.service) + "%b>를 진행합니다.";
  const emptyReload = (originalArr, reloadArr) => {
    if (originalArr.map((a) => { return a.trim(); }).filter((a) => { return a !== ""; }).length > 0) {
      return originalArr;
    } else {
      return reloadArr;
    }
  }
  const mainContents = [
    {
      title: "현장 미팅 시간",
      className: "mainContents_when",
      position: "request.about.when",
      contents: emptyReload(projectHistory.request.about.when, [ dateToString(project.process.contract.meeting.date, true, true) ]),
      spread: true,
    },
    {
      title: "현장 미팅 주소",
      className: "mainContents_where",
      position: "request.about.where",
      contents: emptyReload(projectHistory.request.about.where, [ client.requests[requestNumber].request.space.address ]),
      spread: true,
    },
    {
      title: "현장 관련",
      className: "mainContents_site",
      position: "request.about.site",
      contents: emptyReload(projectHistory.request.about.site, [ "현장 관련 상세 사항 없음" ]),
      spread: true,
    },
    {
      title: "시공 관련",
      className: "mainContents_construct",
      position: "request.about.construct",
      contents: emptyReload(projectHistory.request.about.construct, [ "시공 관련 상세 사항 없음" ]),
      spread: true,
    },
    {
      title: "스타일링 관련",
      className: "mainContents_styling",
      position: "request.about.styling",
      contents: emptyReload(projectHistory.request.about.styling, [ "스타일링 관련 상세 사항 없음" ]),
      spread: true,
    },
    {
      title: "예산 관련",
      className: "mainContents_budget",
      position: "request.about.budget",
      contents: emptyReload(projectHistory.request.about.budget, [ "예산 관련 상세 사항 없음" ]),
      spread: true,
    },
    {
      title: "기타 사항",
      className: "mainContents_progress",
      position: "request.about.progress",
      contents: emptyReload(projectHistory.request.about.progress, [ "기타 관련 상세 사항 없음" ]),
      spread: true,
    }
  ];
  const pictureContents = "고객님이 선택한 사진";
  const pictureContentsSite = "고객님의 현장 사진";
  const pictureContentsPrefer = "고객님의 선호 사진";
  const pictures = clientHistory.curation.image;
  const noticeContents = [
    {
      title: "서비스비 안내",
      contents: [
        "이번 현장의 서비스비는 " + autoComma(project.process.contract.remain.calculation.amount.supply) + "원(VAT별도)으로 책정되어 있습니다.",
        "홈리에종의 계약금은 300,000원(VAT별도)으로 책정되어 있습니다.",
        "현재 고객은 홈리에종에 계약금 330,000원을 입금한 상태며, 현장 미팅 후 계약금을 제외한 서비스비를 전액 입금할 경우 서비스가 계속 진행됩니다.",
        "★ 현장 미팅 후 서비스비 지불 전에는 디자이너와 스타일링 논의를 할 수 없는 것이 원칙입니다.(고객에게도 필요시 안내해주세요)",
        "★ 서비스 진행중 타 공간에 대한 전체적인 스타일링이 추가되는 경우 꼭! 홈리에종을 통해 디자인비 조정이 될 수 있도록 해주세요.",
        "법인/개인사업자(일반과세), 개인사업자(간이과세), 프리랜서 정산 중에 정산 방식을 알려주시면 수수료를 제외한 정확한 정산액은 계산하여 말씀드리겠습니다.",
      ]
    },
    {
      title: "고객 안내 사항과 서비스 구성",
      contents: [
        "디자이너와 카톡(문자)/전화/메일 등의 채널을 통해 커뮤니케이션 하면서 전체 스타일링을 완성합니다. 커뮤니케이션에 적극적으로 참여해주시면 더 좋은 결과물을 얻으실 수 있습니다.",
        "디자이너와 현장 미팅을 진행하며 집컨디션/취향/생활특징/예산을 고려하여 컨설팅 해드립니다.",
        "시공팀은 추천하는 시공팀 외에 고객이 개별적으로 알아본 시공팀과 진행 가능합니다.",
        "시공 진행시 디자이너는 시공 방향 제시 및 전체 마감재를 셀렉해드립니다.",
        "기존에 사용하시는 가구들 중 가져갈 가구와 버릴가구 선택 및 배치/활용 제안 드립니다. 새로 구매하실 가구, 조명, 패브릭(커튼, 베딩, 러그, 쿠션), 소품(식물, 액자, 시계 등)을 제안해드립니다.",
        "디자이너의 제안에 따라 패브릭 및 가구의 맞춤 제작이 가능합니다.",
        "생활용품, 식기, 가전은 스타일링 제안 범위에 포함되지 않습니다. 다만 선택하신 후 제품 외관의 디자인 옵션(컬러 등)을 의논하실 경우 전체 디자인을 고려하여 골라드립니다. 생활용품과 식기의 경우, 고객님께서 찾으신 3~4품목중에서 셀렉은 가능합니다.",
        "디자이너 제안 후 고객 컨펌이 완료된 구매제품은 고객이 구매하실 수 있도록 안내드립니다. 연계 업체의 제품 구매시에는 할인혜택을 받으실 수 있습니다. 모든 제품이 해당되는 것은 아니며 업체마다 차이가 있습니다.",
        "제품 구매에 소요되는 배송비, 조립 및 설치비는 고객님께서 부담하시게 됩니다. 배송된 제품의 수령, 언박싱, 조립, 1차배치는 고객님께서 진행하시게 됩니다. 구매 및 물품배치가 완료되면 디자이너의 마무리터치 후 인터뷰와 촬영을 진행합니다.",
      ]
    },
    {
      title: "시공 연계수수료 안내",
      contents: [
        "고객이 시공 계약을 체결한 곳에 공사진행과 A/S에 대한 책임이 있습니다. (고객에게 동일하게 안내합니다.)",
        "고객이 데려온 시공팀과 진행할 경우 디자이너는 시공자재 셀렉과 필요시 시공관련 커뮤니케이션 업무가 있을 수 있습니다.",
        "고객이 실장님 또는 실장님과 협업하시는 시공사와 시공 계약을 체결할 경우 전체 계약 금액의 5%가 시공 연계 수수료 입니다.",
        "홈리에종은 적법한 방식의 시공계약을 권장하며, (세금 없는) 현금 거래로 시공을 진행했을 경우에도 시공 연계 수수료는 공급가에 VAT 10%를 더한 금액으로 전자세금계산서를 발행합니다. 입금하실 때에도 공급가에 VAT10% 더한 금액을 입금해주셔야합니다.",
      ]
    },
    {
      title: "정산 안내",
      contents: [
        "홈리에종에서 받은 서비스비는 수수료를 제하고 스타일링 시작 후 실장님께 선금 50%를 먼저 정산하고",
        "스타일링이 마무리되면 나머지 50%를 정산합니다.",
        "스타일링 마무리는",
        "1) 스타일링 제안이 마무리되어 제품들이 배송단계에 있고",
        "2) 촬영일이 (변동되더라도) 어느정도 정해지고",
        "3) 실장님께서 디자이너의 디자인 의도가 담긴 글(폼을 따로 드립니다) 저희쪽에 주시면",
        "4) 홈리에종에서 고객님께 정산 여부를 확인 후 정산을 진행합니다.",
      ]
    }
  ];
  const divToInput = function (position) {
    return async function (e) {
      try {
        if (!middleMode) {
          const { ajaxJson, createNode, withOut, colorChip, equalJson } = GeneralJs;
          const removeClassName = "divToInputRemove";
          const target = this.firstChild.firstChild;
          const text = target.textContent;
          const mother = this.firstChild;
          const proid = project.proid;
          let styleCopied, styleRaw, style;
          let input, cancel;
          let updateEvent;

          if (this.querySelector("input") === null) {

            styleRaw = equalJson(JSON.stringify(target.style));
            styleCopied = {};
            for (let i in styleRaw) {
              if (styleRaw[i] !== '' && !/^[0-9]+$/.test(i)) {
                styleCopied[i] = styleRaw[i];
              }
            }
            style = equalJson(JSON.stringify(styleCopied));
            styleCopied.outline = String(0);
            styleCopied.border = String(0);
            styleCopied.background = "transparent";
            styleCopied.color = colorChip.green;
            styleCopied.zIndex = String(2);

            updateEvent = async function (column, value) {
              try {
                const targets = document.querySelectorAll('.' + removeClassName);
                await ajaxJson({
                  id: proid,
                  column,
                  value,
                  email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
                }, "/updateProjectHistory");
                for (let dom of targets) {
                  dom.parentElement.removeChild(dom);
                }
                createNode({ mother, text: value, style });
              } catch (e) {
                console.log(e);
              }
            }

            cancel = createNode({
              mother,
              class: [ removeClassName ],
              events: [
                {
                  type: "click",
                  event: (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    const targets = document.querySelectorAll('.' + removeClassName);
                    for (let dom of targets) {
                      dom.parentElement.removeChild(dom);
                    }
                    createNode({ mother, text, style });
                  }
                }
              ],
              style: {
                position: "fixed",
                top: String(0),
                left: String(0),
                width: String(100) + '%',
                height: String(100) + '%',
                background: "transparent",
                zIndex: String(2),
              }
            });

            input = createNode({
              mother,
              class: [ removeClassName ],
              attribute: [
                { column: position },
                { value: text }
              ],
              mode: "input",
              events: [
                {
                  type: "click",
                  event: (e) => { e.preventDefault(); e.stopPropagation(); }
                },
                {
                  type: "keydown",
                  event: function (e) {
                    if (e.key === "Tab") {
                      e.preventDefault();
                    }
                  }
                },
                {
                  type: "keyup",
                  event: async function (e) {
                    try {
                      const column = this.getAttribute("column");
                      if (e.key === "Tab") {
                        await updateEvent(column, this.value);
                      }
                    } catch (e) {
                      console.log(e);
                    }
                  }
                },
                {
                  type: "keypress",
                  event: async function (e) {
                    try {
                      const column = this.getAttribute("column");
                      if (e.key === "Enter") {
                        await updateEvent(column, this.value);
                      }
                    } catch (e) {
                      console.log(e);
                    }
                  }
                }
              ],
              style: styleCopied
            });

            mother.removeChild(target);
            input.focus();

          }
        }
      } catch (e) {
        console.log(e);
      }
    }
  }
  const matrix = [
    [ "고객 정보", "", "공간 정보", "" ],
    [ (desktop ? "고객명" : "성함"), projectHistory.request.client.name, (desktop ? "계약 형태" : "계약"), projectHistory.request.space.contract ],
    [ "연락처", projectHistory.request.client.phone, (desktop ? "사전 점검일" : "사전점검"), projectHistory.request.space.precheck ],
    [ (desktop ? "가족 구성원" : "가족"), projectHistory.request.client.family, (desktop ? "집 비는 날" : "비는 날"), projectHistory.request.space.empty ],
    [ "주소", projectHistory.request.client.address, (desktop ? "입주 예정일" : "입주일"), projectHistory.request.space.movein ],
    [ "", "", (desktop ? "특이 사항" : "기타"), projectHistory.request.space.special ],
    [ "예산", projectHistory.request.client.budget, (desktop ? "공간구성" : "구성"), projectHistory.request.space.composition ],
    [ "서비스 정보", "", "고객 요청", "" ],
    [ "서비스", projectHistory.request.service.service, projectHistory.request.client.etc, "" ],
    [ (desktop ? "선호 컨셉" : "컨셉"), projectHistory.request.service.concept, "", "" ],
    [ "시공", projectHistory.request.service.construct, "", "" ],
    [ "스타일링", projectHistory.request.service.styling, "", "" ],
  ];
  const mergeMap = [
    [ null, [ 0, 0 ], null, [ 0, 2 ] ],
    [ null, null, null, null ],
    [ null, null, null, null ],
    [ null, null, null, null ],
    [ null, null, null, null ],
    [ [ 4, 0 ], [ 4, 1 ], null, null ],
    [ null, null, null, null ],
    [ null, [ 7, 0 ], null, [ 7, 2 ] ],
    [ null, null, null, [ 8, 2 ] ],
    [ null, null, null, [ 9, 2 ] ],
    [ null, null, null, [ 10, 2 ] ],
    [ null, null, [ 8, 2 ], [ 11, 2 ] ],
  ];
  const callbackMap = [
    [ null, null, null, null ],
    [ null, divToInput("request.client.name"), null, divToInput("request.space.contract") ],
    [ null, divToInput("request.client.phone"), null, divToInput("request.space.precheck") ],
    [ null, divToInput("request.client.family"), null, divToInput("request.space.empty") ],
    [ null, divToInput("request.client.address"), null, divToInput("request.space.movein") ],
    [ null, divToInput("request.client.address"), null, divToInput("request.space.special") ],
    [ null, divToInput("request.client.budget"), null, divToInput("request.space.composition") ],
    [ null, null, null, null ],
    [ null, divToInput("request.service.service"), divToInput("request.client.etc"), null ],
    [ null, divToInput("request.service.concept"), null, null ],
    [ null, divToInput("request.service.construct"), null, null ],
    [ null, divToInput("request.service.styling"), null, null ],
  ];
  const boldMap = [
    [ 0, 0, 0, 0 ],
    [ 1, 0, 1, 0 ],
    [ 1, 0, 1, 0 ],
    [ 1, 0, 1, 0 ],
    [ 1, 0, 1, 0 ],
    [ 1, 0, 1, 0 ],
    [ 1, 0, 1, 0 ],
    [ 0, 0, 0, 0 ],
    [ 1, 0, 0, 0 ],
    [ 1, 0, 0, 0 ],
    [ 1, 0, 0, 0 ],
    [ 1, 0, 0, 0 ],
  ];
  const titleMap = [ 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ];
  const widthRatio = desktop ? [ 1, 3, 1, 3 ] : [ 1, 2, 1, 2 ];

  return {
    title,
    initialContents,
    emptyReload,
    mainContents,
    pictureContents,
    pictureContentsSite,
    pictureContentsPrefer,
    pictures,
    noticeContents,
    divToInput,
    matrix,
    mergeMap,
    callbackMap,
    boldMap,
    titleMap,
    widthRatio,
  };
}

DesignerJs.prototype.requestList = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const mobile = this.media[4];
  const desktop = !mobile;
  const getObj = returnGet();
  let designer;
  let margin;
  let baseTong0, baseTong;
  let matrix;
  let tempArr;
  let tempObj, nodeArr, subNodeArr;
  let eachTotalTong, eachNameTong, eachValueTong;
  let level1Width, level1Left;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let tempMatrix;
  let alphabetWidth;
  let temp;
  let factorHeight, factorWidth;
  let tendencyTop, tendencyHeight;
  let tendencyFactorHeight, tendencyIndent, tendencyWidthIndent;
  let textAreaTop;
  let baseTongMarginBottom;
  let checkListData;
  let middleAdjustTong;
  let mobileTendencyTop;
  let mobileTendencyVisualMargin;
  let mobileTendencyIntend;
  let boxNumber, boxNumberArr;
  let requestBox, boxMargin;
  let projects;
  let requestSize;
  let requestWordMargin;
  let requestWordPaddingTop;
  let requestWordPaddingBottom;
  let thisChildWidth;
  let dateString;
  let baseTongPaddingBottom;
  let mobileOuterMargin;
  let borderRadius;
  let secondFont;
  let entireMode;
  let maxBoxNumber;

  entireMode = getObj.dataonly === "true" && getObj.entire === "true";

  designer = this.designers.pick(desid);
  projects = designer.projects;

  boxNumber = <%% 6, 6, 6, 6, 2 %%>;
  maxBoxNumber = projects.length;

  margin = 8;
  if (entireMode) {
    margin = 0;
  }
  level1Width = <%% 210, 172, 172, 172, 34 %%>;
  level1Left = <%% 160, 136, 136, 136, 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 12 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 4 %%>;

  tendencyTop = <%% 3, 3, 3, 3, 0.8 %%>;
  tendencyHeight = <%% 16, 16, 16, 16, 4 %%>;
  alphabetWidth = <%% 30, 30, 30, 30, 7 %%>;

  factorHeight = <%% 38, 36, 36, 36, 8.5 %%>;
  factorWidth = <%% 210, 172, 172, 172, 210 %%>;
  tendencyFactorHeight = <%% 30, 30, 30, 30, 7 %%>;
  tendencyIndent = <%% 105, 71, 71, 71, 65 %%>;
  tendencyWidthIndent = -135;

  textAreaTop = <%% (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), -0.7 %%>;

  mobileTendencyTop = 8;
  mobileTendencyVisualMargin = 13;
  mobileTendencyIntend = 20;

  boxMargin = <%% 13, 13, 12, 10, 2 %%>;

  requestSize = <%% 18, 18, 17, 16, 4.4 %%>;
  secondFont = <%% 2, 2, 2, 2, 1 %%>;
  requestWordMargin = <%% 1, 1, 1, 1, 0 %%>;
  requestWordPaddingTop = <%% (isMac() ? 24 : 26), (isMac() ? 24 : 26), (isMac() ? 24 : 26), (isMac() ? 24 : 26), 4.8 %%>;
  requestWordPaddingBottom = <%% (isMac() ? 20 : 18), (isMac() ? 20 : 18), (isMac() ? 20 : 18), (isMac() ? 20 : 18), 4.6 %%>;

  baseTongPaddingBottom = <%% 4, 4, 3, 3, 20 %%>;
  mobileOuterMargin = 4;

  borderRadius = <%% 10, 10, 10, 10, 8 %%>;

  if (mobile) {
    totalMother.style.background = colorChip.gray2;
  }

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(margin * 3) + ea : (this.middleMode ? String(60) + "px" : String(0)),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2), ea),
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
      height: "auto",
      animation: "",
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? (entireMode ? "" : "1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: desktop ? colorChip.gray0 : colorChip.gray1,
      height: "auto",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingBottom: String(baseTongPaddingBottom) + ea,
      boxSizing: "border-box",
    }
  });

  this.requestBoxes = [];
  boxNumberArr = [];
  for (let i = 0; i < maxBoxNumber; i++) {

    if (/없음/gi.test(dateToString(projects[i].process.contract.form.date.from)) || /예정/gi.test(dateToString(projects[i].process.contract.form.date.from))) {
      dateString = "00.00.00";
    } else {
      dateString = dateToString(projects[i].process.contract.form.date.from).slice(2).replace(/\-/g, '.');
    }

    requestBox = createNode({
      mother: baseTong,
      event: {
        click: this.requestDocument(baseTong, i, designer, projects[i]),
        mouseenter: function (e) {
          this.style.transition = "";
          if (desktop) {
            this.children[0].style.background = colorChip.green;
            this.children[1].firstChild.style.color = colorChip.green;
            this.style.transform = "translateY(-3px)";
          }
        },
        mouseleave: function (e) {
          if (desktop) {
            this.children[0].style.background = colorChip.gray3;
            this.children[1].firstChild.style.color = colorChip.black;
            this.style.transform = "translateY(0px)";
          }
        }
      },
      attribute: [
        { cliid: projects[i].cliid },
        { proid: projects[i].proid },
      ],
      style: {
        position: entireMode ? "absolute" : "relative",
        display: "inline-block",
        width: entireMode ? String(100) + '%' : "calc(calc(100% - " + String((boxNumber + 2) * boxMargin) + ea + ") / " + String(boxNumber) + ")",
        height: entireMode ? String(100) + '%' : "",
        left: entireMode ? String(0) : "",
        top: entireMode ? String(0) : "",
        borderRadius: String(borderRadius) + "px",
        marginTop: String(Math.floor(i / boxNumber) === 0 ? boxMargin * 1.5 : boxMargin) + ea,
        marginRight: String(boxMargin) + ea,
        marginLeft: String(i % boxNumber === 0 ? boxMargin * 1.5 : 0) + ea,
        marginBottom: String(Math.floor(i / boxNumber) === Math.floor((maxBoxNumber - 1) / boxNumber) ? (boxMargin * 1.5) : 0) + ea,
        background: colorChip.white,
        boxShadow: entireMode ? "" : "0px 3px 14px -9px " + colorChip.shadow,
        textAlign: "center",
        verticalAlign: "top",
        paddingTop: String(requestWordPaddingTop) + ea,
        paddingBottom: String(requestWordPaddingBottom) + ea,
        cursor: "pointer",
        transition: "all 0s ease",
        transform: "translateY(0px)",
      },
      children: [
        {
          style: {
            position: "absolute",
            top: String(0),
            width: String(100) + '%',
            left: String(0),
            height: String(desktop ? borderRadius : 2) + ea,
            background: colorChip.gray3,
            borderTopRightRadius: String(borderRadius / 2) + "px",
            borderTopLeftRadius: String(borderRadius / 2) + "px",
          }
        },
        {
          style: {
            position: "relative",
            marginBottom: String(requestWordMargin) + ea,
            textAlign: "center",
          },
          children: [
            {
              text: projects[i].name + " <b%고객님%b>",
              style: {
                fontSize: String(requestSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                display: "inline-block",
              },
              bold: {
                color: colorChip.black,
                fontWeight: String(300),
              }
            }
          ]
        },
        {
          style: {
            position: "relative",
          },
          children: [
            {
              text: dateString,
              style: {
                fontSize: String(requestSize - secondFont) + ea,
                fontWeight: String(300),
                color: colorChip.deactive,
                display: "inline-block",
              }
            }
          ]
        },
      ]
    });
    thisChildWidth = 0;
    for (let i = 1; i < Array.from(requestBox.children).length; i++) {
      if (thisChildWidth <= requestBox.children[i].firstChild.getBoundingClientRect().width) {
        thisChildWidth = requestBox.children[i].firstChild.getBoundingClientRect().width;
      }
    }
    thisChildWidth = thisChildWidth + (requestWordPaddingBottom * 3.2);

    if (desktop) {
      boxNumber = Math.floor((baseTong.getBoundingClientRect().width - (boxMargin * 2)) / (thisChildWidth + boxMargin));
      boxNumberArr.push(boxNumber);
    }

    this.requestBoxes.push(requestBox);
  }

  if (desktop) {
    boxNumberArr.sort((a, b) => { return b - a; });
    if (boxNumberArr.length > 0) {
      boxNumber = boxNumberArr[0];
      for (let i = 0; i < maxBoxNumber; i++) {
        this.requestBoxes[i].style.width = "calc(calc(100% - " + String((boxNumber + 2) * boxMargin) + ea + ") / " + String(boxNumber) + ")";
        this.requestBoxes[i].style.marginTop = String(Math.floor(i / boxNumber) === 0 ? boxMargin * 1.5 : boxMargin) + ea;
        this.requestBoxes[i].style.marginLeft = String(i % boxNumber === 0 ? boxMargin * 1.5 : 0) + ea;
        this.requestBoxes[i].style.marginBottom = String(Math.floor(i / boxNumber) === Math.floor((maxBoxNumber - 1) / boxNumber) ? (boxMargin * 1.5) : 0) + ea;
      }
    }
  }

  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.requestDocument = function (mother, index, designer, project) {
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, serviceParsing, setQueue, swipePatch, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;
  const blocks = mother.children;
  const getObj = returnGet();
  this.proid = null;
  this.project = null;
  this.client = null;
  return async function (e) {
    try {
      const [ client ] = await ajaxJson({ noFlat: true, whereQuery: { cliid } }, "/getClients", { equal: true });
      let clientHistory, projectHistory;
      let thisBlock, motherTop;
      let visualSpecific;
      let requestNumber, thisRequest;
      let site;
      let construct;
      let styling;
      let budget;
      let reloadBoo;
      let progress;

      requestNumber = 0;
      for (let i = 0; i < client.requests.length; i++) {
        if (project.proposal.date.valueOf() >= client.requests[i].request.timeline.valueOf()) {
          requestNumber = i;
          break;
        }
      }
      thisRequest = client.requests[requestNumber];

      clientHistory = await ajaxJson({ id: client.cliid, rawMode: true }, "/getClientHistory");
      projectHistory = await ajaxJson({ id: project.proid, rawMode: true }, "/getProjectHistory");

      reloadBoo = (JSON.stringify(projectHistory.request).replace(/[\{\}\[\]\"\' ]/gi, '').trim().replace(/[a-z]/gi, '').trim().replace(/[\:\,]/gi, '').trim().length === 0);
      if (e.altKey) {
        reloadBoo = window.confirm("정보를 다시 로드할 경우, 기존에 의뢰서 콘솔에서 적었던 내용이 없어질 수 있습니다! 초기화가 확실한가요?");
      }

      if (reloadBoo) {
        site = clientHistory.space.split("\n").map((i) => { return i.trim(); }).filter((i) => { return i !== ''; });
        construct = clientHistory.construct.split("\n").map((i) => { return i.trim(); }).filter((i) => { return i !== ''; });
        styling = clientHistory.styling.split("\n").map((i) => { return i.trim(); }).filter((i) => { return i !== ''; });
        budget = clientHistory.budget.split("\n").map((i) => { return i.trim(); }).filter((i) => { return i !== ''; });
        progress = clientHistory.progress.split("\n").map((i) => { return i.trim(); }).filter((i) => { return i !== ''; });

        if (site.length === 0) {
          site = [ "현장 관련 상세 사항 없음" ];
        }
        if (construct.length === 0) {
          construct = [ "시공 관련 상세 사항 없음" ];
        }
        if (styling.length === 0) {
          styling = [ "스타일링 관련 상세 사항 없음" ];
        }
        if (budget.length === 0) {
          budget = [ "예산 관련 상세 사항 없음" ];
        }
        if (progress.length === 0) {
          progress = [ "기타 관련 상세 사항 없음" ];
        }

        projectHistory.request = {
          client: {
            name: client.name,
            phone: client.phone,
            family: thisRequest.request.family,
            address: thisRequest.request.space.address,
            budget: thisRequest.request.budget,
            etc: thisRequest.request.etc.comment
          },
          space: {
            contract: thisRequest.request.space.contract,
            precheck: dateToString(thisRequest.analytics.date.space.precheck) === "해당 없음" ? '-' : dateToString(thisRequest.analytics.date.space.precheck),
            empty: dateToString(thisRequest.analytics.date.space.empty) === "해당 없음" ? '-' : dateToString(thisRequest.analytics.date.space.empty),
            movein: (thisRequest.request.space.resident.expected.valueOf() <= (new Date()).valueOf() ? "거주중" : dateToString(thisRequest.request.space.resident.expected)),
            special: "",
            composition: "<" + String(thisRequest.request.space.pyeong) + "평> " + "방 " + String(thisRequest.request.space.spec.room) + "개, 화장실 " + String(thisRequest.request.space.spec.bathroom) + "개, 발코니 확장" + (thisRequest.request.space.spec.valcony ? "" : " 없음"),
          },
          service: {
            service: serviceParsing(project.service),
            concept: "모던 그레이",
            construct: clientHistory.curation.construct.items.length === 0 ? "시공 없음" : clientHistory.curation.construct.items.join(", "),
            styling: "전체 구매 또는 재배치"
          },
          about: {
            when: [ dateToString(project.process.contract.meeting.date, true, true) ],
            where: [ thisRequest.request.space.address ],
            site: site,
            construct: construct,
            styling: styling,
            budget: budget,
            progress: progress
          }
        };

        await ajaxJson({
          id: proid,
          column: "request",
          value: projectHistory.request,
          email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
        }, "/updateProjectHistory");
      }

      if (desktop) {

        if (getObj.dataonly === "true") {
          mother.style.height = String(mother.getBoundingClientRect().height) + ea;
          motherTop = 0;
        } else {
          mother.style.height = String(mother.getBoundingClientRect().height) + ea;
          motherTop = mother.getBoundingClientRect().top;

          visualSpecific = <%% 1, 1, 1, 0, 0 %%>;

          for (let i = 0; i < blocks.length; i++) {
            blocks[i].style.transition = "all 0s ease";
            blocks[i].setAttribute("top", String(Math.floor(blocks[i].getBoundingClientRect().top - mother.getBoundingClientRect().top)) + ea);
            blocks[i].setAttribute("left", String(Math.floor(blocks[i].getBoundingClientRect().left - Math.ceil(mother.getBoundingClientRect().left))) + ea);
            if (i !== index) {
              blocks[i].style.animation = "fadedownlite 0.2s ease forwards";
            } else {
              thisBlock = blocks[i];
              thisBlock.style.transform = "";
              for (let dom of blocks[i].children) {
                dom.style.opacity = String(0);
              }
            }
          }
  
          for (let block of blocks) {
            block.style.position = "absolute";
            block.style.margin = String(0);
            block.style.left = block.getAttribute("left");
            block.style.top = block.getAttribute("top");
          }

        }

      } else {
        motherTop = 3.8;

        for (let i = 0; i < blocks.length; i++) {
          blocks[i].style.animation = "fadedownlite 0.2s ease forwards";
          if (i === index) {
            thisBlock = blocks[i];
          }
        }
      }

      if (getObj.dataonly !== "true") {
        setQueue(() => {
          if (desktop) {
            thisBlock.style.boxShadow = "";
            thisBlock.style.background = desktop ? colorChip.gray0 : colorChip.gray2;
            thisBlock.style.transition = "all 0.4s ease";
            thisBlock.style.position = "absolute";
            thisBlock.style.left = String(0);
            thisBlock.style.top = String(0);
            thisBlock.style.width = String(100) + '%';
            thisBlock.style.height = String(100) + '%';
          } else {
            for (let block of blocks) {
              block.style.position = "absolute";
            }
          }
  
          mother.parentElement.style.height = withOut(motherTop, ea);
          if (mobile) {
            mother.parentElement.style.left = String(0);
            mother.parentElement.style.width = String(100) + '%';
            mother.parentElement.style.paddingTop = "";
          }
          mother.style.boxShadow = "";
          mother.style.paddingBottom = "";
          mother.style.paddingTop = String(motherTop) + ea;
          mother.style.height = withOut(motherTop, ea);
          mother.style.overflow = "scroll";
  
          setQueue(async () => {
            try {
              mother.style.background = desktop ? colorChip.gray0 : colorChip.gray2;
              const board = createNode({
                mother,
                style: {
                  position: "relative",
                  left: String(motherTop) + ea,
                  width: withOut(motherTop * 2, ea),
                  height: String(8000) + ea,
                  borderRadius: String(5) + "px",
                  background: colorChip.white,
                  animation: "fadeupdelay 0.4s ease forwards",
                  boxShadow: "0px 3px 15px -10px " + colorChip.shadow,
                  zIndex: String(1),
                  marginBottom: String(motherTop) + ea,
                }
              });
              await instance.requestContents(board, designer, project, client, clientHistory, projectHistory, requestNumber);
              if (mobile) {
                mother.style.marginBottom = "";
              }
  
              if (mobile) {
                swipePatch({
                  right: (e) => {
                    instance.requestDetailLaunching(desid);
                  },
                });
              }
  
              instance.pageHistory.unshift({ path: "request", status: "card", desid, cliid });
              window.history.pushState({ path: "request", status: "list", desid }, '');
  
            } catch (e) {
              console.log(e);
            }
          }, 500);
  
        }, 400);
      } else {

        mother.parentElement.style.height = withOut(motherTop, ea);
        mother.style.boxShadow = "";
        mother.style.paddingBottom = "";
        mother.style.paddingTop = String(motherTop) + ea;
        mother.style.height = withOut(motherTop, ea);
        mother.style.overflow = "scroll";

        mother.style.background = desktop ? colorChip.gray0 : colorChip.gray2;
        const board = createNode({
          mother,
          style: {
            position: "relative",
            left: String(motherTop) + ea,
            width: withOut(motherTop * 2, ea),
            height: String(8000) + ea,
            borderRadius: String(5) + "px",
            background: colorChip.white,
            zIndex: String(1),
            marginBottom: String(motherTop) + ea,
            transition: "all 0s ease",
          }
        });
        await instance.requestContents(board, designer, project, client, clientHistory, projectHistory, requestNumber);
      }

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.requestStaticHtml = function (designer, project, client, clientHistory, projectHistory, requestNumber, clientPhoto) {
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, autoComma, downloadFile } = GeneralJs;
  const { totalMother, grayBarWidth, middleMode } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;
  const today = new Date();
  const ea = "px";
  const pe = "%";
  return async function (e) {
    try {
      const {
        title,
        initialContents,
        emptyReload,
        mainContents,
        pictureContents,
        pictureContentsSite,
        pictureContentsPrefer,
        pictures,
        noticeContents,
        divToInput,
        matrix,
        mergeMap,
        callbackMap,
        boldMap,
        titleMap,
        widthRatio,
      } = instance.requestReturnStatic(designer, project, client, clientHistory, projectHistory, requestNumber);
      for (let obj of mainContents) {
        obj.spread = true;
      }
      const loading = mother.grayLoading();
      const board = createNode({
        mother: document.body,
        style: {
          display: "none",
          position: "relative",
        }
      });
      let titleArea;
      let contentsArea;
      let topMargin;
      let leftMargin;
      let titleHeight;
      let titleSize;
      let titleBottom;
      let titlePaddingBottom;
      let fontSize;
      let sum;
      let titleDateVisualBottom;
      let contentsBetween;
      let contentsClientInfo;
      let clientInfoLeftWidth;
      let width;
      let wordsBetween0, wordsBetween1, wordsBetween2;
      let leftIndent;
      let words;
      let arrowTop, arrowWidth, arrowLeft;
      let tempDom;
      let tableVisual;
      let lineHeight;
      let contentsClientPhoto;
      let contentsClientPhotoTong;
      let images, siteImages, preferImages;
      let photoWidth;
      let photoMargin;
      let photoNumber;
      let clientInfoBottom;
      let noticeDom;
      let finalBottom;
      let num;
      let whitePopupEvent;
      let html;

      topMargin = 42;
      leftMargin = 60;
      titleSize = 35;
      titlePaddingLeft = 1;
      titleBottom = 35;
      titlePaddingBottom = (isMac() ? 18 : 15);
      titleDateVisualBottom = (isMac() ? 2 : -3);

      fontSize = 15;
      contentsBetween = 32;

      clientInfoBottom = 42;
      clientInfoLeftWidth = 380;

      wordsBetween0 = 6;
      wordsBetween1 = 22;
      wordsBetween2 = 10;

      tableVisual = 18;
      leftIndent = 15;

      arrowTop = (isMac() ? 5.5 : 4);
      arrowWidth = 8;
      arrowLeft = 1;

      lineHeight = 1.8;
      photoWidth = 260;
      photoMargin = 10;
      finalBottom = 240;

      sum = 0;
      for (let i of widthRatio) {
        sum += i;
      }

      board.style.paddingTop = String(topMargin) + ea;

      titleArea = createNode({
        mother: board,
        style: {
          marginLeft: String(leftMargin) + ea,
          paddingLeft: String(titlePaddingLeft) + ea,
          width: withOut((leftMargin * 2) + titlePaddingLeft, ea),
          borderBottom: "1px solid " + colorChip.gray3,
          marginBottom: String(titleBottom) + ea,
          paddingBottom: String(titlePaddingBottom) + ea,
          position: "relative",
        },
        children: [
          {
            text: title,
            style: {
              position: "relative",
              fontSize: String(titleSize) + ea,
              fontWeight: String(500),
              color: colorChip.black,
            }
          },
          {
            text: dateToString(today),
            style: {
              position: "absolute",
              fontSize: String(fontSize) + ea,
              fontWeight: String(600),
              color: colorChip.black,
              right: String(titlePaddingLeft) + ea,
              textAlign: "right",
              bottom: String(titlePaddingBottom - titleDateVisualBottom) + ea,
            }
          }
        ]
      });

      contentsArea = createNode({
        mother: board,
        style: {
          marginLeft: String(leftMargin) + ea,
          width: withOut(leftMargin * 2, ea),
        },
        children: [
          {
            text: initialContents,
            style: {
              position: "relative",
              fontSize: String(fontSize) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              lineHeight: String(lineHeight),
              marginBottom: String(titleBottom) + ea,
            },
            bold: {
              fontWeight: String(600),
              color: colorChip.black,
            }
          }
        ]
      });

      contentsClientInfo = createNode({
        mother: contentsArea,
        style: {
          position: "relative",
          display: "block",
          width: String(100) + '%',
          textAlign: "right",
          marginBottom: String(clientInfoBottom) + ea,
        },
        children: [
          {
            style: {
              position: "relative",
              top: String(0),
              paddingLeft: String(leftIndent) + ea,
              height: String(100) + '%',
              verticalAlign: "top",
              textAlign: "left",
              borderBottom: "1px solid " + colorChip.gray3,
              boxSizing: "border-box",
            }
          }
        ]
      });

      contentsClientInfo.appendChild(mother.makeTable(matrix, { style: { width: 1000 }, mergeMap, callbackMap, boldMap, titleMap, widthRatio }));
      contentsClientInfo.children[1].style.display = "block";
      contentsClientInfo.children[1].style.verticalAlign = "top";
      contentsClientInfo.children[1].style.width = String(100) + pe;
      contentsClientInfo.children[1].style.marginTop = String(35) + ea;

      num = 0;
      for (let { title, className, contents, position, spread } of mainContents) {
        words = createNode({
          mother: contentsClientInfo.children[0],
          class: [ className ],
          text: title,
          style: {
            position: "relative",
            fontSize: String(fontSize) + ea,
            fontWeight: String(600),
            color: colorChip.black,
            marginBottom: String(wordsBetween0) + ea,
            cursor: "pointer",
          }
        });
        createNode({
          mother: words,
          mode: "svg",
          source: mother.returnArrow("right", colorChip.green),
          style: {
            position: "absolute",
            width: String(arrowWidth) + ea,
            left: String((-1 * leftIndent) + arrowLeft) + ea,
            top: String(arrowTop) + ea,
          }
        });
        createNode({
          mother: contentsClientInfo.children[0],
          class: [ className ],
          text: contents.map((z) => { return "<b%-%b> " + z.replace(/^\-/, '').replace(/^\- /, ''); }).map((z) => { if (z.trim() === "<b%-%b>") { return ""; } else { return z; } }).join("\n"),
          style: {
            position: "relative",
            fontSize: String(fontSize) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            lineHeight: String(lineHeight),
            marginBottom: String(wordsBetween1) + ea,
            overflow: "hidden",
            transition: "all 0s ease",
            height: spread ? "auto" : String(0),
          },
          bold: {
            color: colorChip.gray4,
          }
        });
        num++;
      }

      images = pictures.map((image) => {
        const imageLink = "/corePortfolio/listImage";
        let pid;
        pid = image.split('.')[0].replace(/^t[0-9]+/gi, '');
        return S3HOST + imageLink + "/" + pid + "/" + image;
      });
      siteImages = clientPhoto.sitePhoto;
      preferImages = clientPhoto.preferredPhoto;

      photoNumber = 3;
      photoWidth = "calc(calc(100% - " + String(photoMargin * (photoNumber - 1)) + ea + ") / " + String(photoNumber) + ")";

      if (images.length > 0) {
        contentsClientPhoto = createNode({
          mother: contentsArea,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            marginBottom: String(clientInfoBottom) + ea,
          },
          children: [
            {
              text: pictureContents,
              style: {
                paddingLeft: String(leftIndent) + ea,
                position: "relative",
                display: "block",
                fontSize: String(fontSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                marginBottom: String(wordsBetween1) + ea,
              },
              children: [
                {
                  mode: "svg",
                  source: mother.returnArrow("right", colorChip.green),
                  style: {
                    position: "absolute",
                    width: String(arrowWidth) + ea,
                    left: String(arrowLeft) + ea,
                    top: String(arrowTop) + ea,
                  }
                }
              ]
            },
            {
              style: {
                position: "relative",
                display: "block",
              },
            }
          ]
        });
        contentsClientPhotoTong = contentsClientPhoto.children[1];

        for (let i = 0; i < images.length; i++) {
          createNode({
            mother: contentsClientPhotoTong,
            mode: "img",
            class: [ "hoverDefault_lite" ],
            attribute: [
              { src: images[i] },
              { index: String(i) },
              { method: /sitePhoto/g.test(images[i]) ? "site" : (/preferredPhoto/g.test(images[i]) ? "preferred" : "selected") },
              { length: String(images.length) }
            ],
            style: {
              display: "inline-block",
              position: "relative",
              width: photoWidth,
              borderRadius: String(3) + "px",
              marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
              marginBottom: String(Math.floor(i / photoNumber) === Math.floor((images.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
              cursor: "pointer",
              verticalAlign: "top",
            }
          });
        }
      }

      if (siteImages.length > 0) {
        contentsClientPhoto = createNode({
          mother: contentsArea,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            marginBottom: String(clientInfoBottom) + ea,
          },
          children: [
            {
              text: pictureContentsSite,
              style: {
                paddingLeft: String(leftIndent) + ea,
                position: "relative",
                display: "block",
                fontSize: String(fontSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                marginBottom: String(wordsBetween1) + ea,
              },
              children: [
                {
                  mode: "svg",
                  source: mother.returnArrow("right", colorChip.green),
                  style: {
                    position: "absolute",
                    width: String(arrowWidth) + ea,
                    left: String(arrowLeft) + ea,
                    top: String(arrowTop) + ea,
                  }
                }
              ]
            },
            {
              style: {
                position: "relative",
                display: "block",
              },
            }
          ]
        });
        contentsClientPhotoTong = contentsClientPhoto.children[1];

        for (let i = 0; i < siteImages.length; i++) {
          createNode({
            mother: contentsClientPhotoTong,
            mode: "img",
            class: [ "hoverDefault_lite" ],
            attribute: [
              { src: siteImages[i] },
              { index: String(i) },
              { method: /sitePhoto/g.test(siteImages[i]) ? "site" : (/preferredPhoto/g.test(siteImages[i]) ? "preferred" : "selected") },
              { length: String(siteImages.length) }
            ],
            style: {
              display: "inline-block",
              position: "relative",
              width: photoWidth,
              borderRadius: String(3) + "px",
              marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
              marginBottom: String(Math.floor(i / photoNumber) === Math.floor((siteImages.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
              cursor: "pointer",
              verticalAlign: "top",
            }
          });
        }
      }

      if (preferImages.length > 0) {
        contentsClientPhoto = createNode({
          mother: contentsArea,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            marginBottom: String(clientInfoBottom) + ea,
          },
          children: [
            {
              text: pictureContentsPrefer,
              style: {
                paddingLeft: String(leftIndent) + ea,
                position: "relative",
                display: "block",
                fontSize: String(fontSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                marginBottom: String(wordsBetween1) + ea,
              },
              children: [
                {
                  mode: "svg",
                  source: mother.returnArrow("right", colorChip.green),
                  style: {
                    position: "absolute",
                    width: String(arrowWidth) + ea,
                    left: String(arrowLeft) + ea,
                    top: String(arrowTop) + ea,
                  }
                }
              ]
            },
            {
              style: {
                position: "relative",
                display: "block",
              },
            }
          ]
        });
        contentsClientPhotoTong = contentsClientPhoto.children[1];

        for (let i = 0; i < preferImages.length; i++) {
          createNode({
            mother: contentsClientPhotoTong,
            mode: "img",
            class: [ "hoverDefault_lite" ],
            attribute: [
              { src: preferImages[i] },
              { index: String(i) },
              { method: /sitePhoto/g.test(preferImages[i]) ? "site" : (/preferredPhoto/g.test(preferImages[i]) ? "preferred" : "selected") },
              { length: String(preferImages.length) }
            ],
            style: {
              display: "inline-block",
              position: "relative",
              width: photoWidth,
              borderRadius: String(3) + "px",
              marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
              marginBottom: String(Math.floor(i / photoNumber) === Math.floor((preferImages.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
              cursor: "pointer",
              verticalAlign: "top",
            }
          });
        }
      }

      for (let { title, contents } of noticeContents) {
        noticeDom = createNode({
          mother: contentsArea,
          style: {
            position: "relative",
            display: "block",
            width: String(100) + '%',
            marginBottom: String(contentsBetween) + ea,
          },
          children: [
            {
              text: title,
              style: {
                paddingLeft: String(leftIndent) + ea,
                position: "relative",
                display: "block",
                fontSize: String(fontSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                marginBottom: String(wordsBetween2) + ea,
              },
              children: [
                {
                  mode: "svg",
                  source: mother.returnArrow("right", colorChip.green),
                  style: {
                    position: "absolute",
                    width: String(arrowWidth) + ea,
                    left: String(arrowLeft) + ea,
                    top: String(arrowTop) + ea,
                  }
                }
              ]
            },
            {
              text: contents.map((z) => { return "<b%-%b> " + z; }).join("\n"),
              style: {
                position: "relative",
                fontSize: String(fontSize) + ea,
                fontWeight: String(400),
                color: colorChip.black,
                lineHeight: String(lineHeight),
              },
              bold: {
                color: colorChip.gray4,
              }
            }
          ]
        });
      }

      board.style.height = "auto";
      board.style.paddingBottom = String(finalBottom) + ea;

      html = String(`<!DOCTYPE html>
      <html lang="ko" dir="ltr">
        <head>
          <meta charset="utf-8">
          <style>${String(document.querySelector("style").innerHTML.replace(/'/gi, "__quotes__"))}</style>
          <title></title>
        </head>
        <body style="padding-top:${String(leftMargin)}${ea};padding-bottom:${String(leftMargin)}${ea};">
          ${String(board.innerHTML)}
        </body>
      </html>`).replace(/\=/gi, "__equal__").replace(/\&/gi, "__ampersand__").replace(/\'/gi, '');

      document.body.removeChild(document.body.lastChild);

      console.log("done");

      loading.remove();

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.requestContents = async function (board, designer, project, client, clientHistory, projectHistory, requestNumber) {
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, autoComma, blankHref, returnGet } = GeneralJs;
  const { totalMother, ea, grayBarWidth, middleMode } = this;
  const getObj = returnGet();
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;
  const entireMode = (getObj.dataonly === "true" && getObj.entire === "true");
  this.proid = proid;
  this.client = client;
  this.project = project;
  const today = new Date();
  const totalStatic = this.requestReturnStatic(designer, project, client, clientHistory, projectHistory, requestNumber);
  const {
    title,
    initialContents,
    emptyReload,
    mainContents,
    pictureContents,
    pictureContentsSite,
    pictureContentsPrefer,
    pictures,
    noticeContents,
    divToInput,
    matrix,
    mergeMap,
    callbackMap,
    boldMap,
    titleMap,
    widthRatio,
  } = totalStatic;
  try {
    let titleArea;
    let contentsArea;
    let topMargin;
    let leftMargin;
    let titleHeight;
    let titleSize;
    let titleBottom;
    let titlePaddingBottom;
    let fontSize;
    let sum;
    let titleDateVisualBottom;
    let contentsBetween;
    let contentsClientInfo;
    let clientInfoLeftWidth;
    let width;
    let wordsBetween0, wordsBetween1, wordsBetween2;
    let leftIndent;
    let words;
    let arrowTop, arrowWidth, arrowLeft;
    let tempDom;
    let tableVisual;
    let lineHeight;
    let contentsClientPhoto;
    let contentsClientPhotoTong;
    let images, siteImages, preferImages;
    let photoWidth;
    let photoMargin;
    let photoNumber;
    let clientInfoBottom;
    let noticeDom;
    let finalBottom;
    let num;
    let whitePopupEvent;
    let clientPhoto;
    let positionArr;
    let imageTong;
    let tempImage;

    topMargin = <%% 42, 38, 32, 30, 5.8 %%>;
    leftMargin = <%% 50, 46, 38, 32, 5.8 %%>;

    titleSize = <%% 30, 32, 30, 26, 5 %%>;
    if (entireMode) {
      titleSize = 26;
    }
    titlePaddingLeft = <%% 1, 1, 1, 1, 0 %%>;
    titleBottom = <%% 35, 29, 28, 20, 5 %%>;
    titlePaddingBottom = <%% (isMac() ? 16 : 14), (isMac() ? 16 : 14), (isMac() ? 16 : 14), (isMac() ? 16 : 14), 3.2 %%>;
    if (entireMode) {
      titlePaddingBottom = isMac() ? 13 : 12;
    }
    titleDateVisualBottom = <%% (isMac() ? 2 : -3), (isMac() ? 2 : -3), (isMac() ? 2 : -3), (isMac() ? 2 : -3), 0.5 %%>;

    fontSize = <%% 15, 14, 13, 12, 3 %%>;
    contentsBetween = <%% 32, 28, 25, 22, 6 %%>;

    clientInfoBottom = <%% 42, 42, 42, 42, 7 %%>;
    clientInfoLeftWidth = <%% 380, 260, 215, 130, 20 %%>;

    wordsBetween0 = <%% 6, 6, 6, 6, 1 %%>;
    wordsBetween1 = <%% 22, 22, 22, 22, 4 %%>;
    wordsBetween2 = <%% 10, 10, 10, 10, 1 %%>;

    tableVisual = <%% 18, 18, 16, 10, 2 %%>;
    leftIndent = <%% 15, 14, 13, 12, 2.8 %%>;

    arrowTop = <%% (isMac() ? 5.5 : 4), (isMac() ? 5.5 : 4), (isMac() ? 5.5 : 4), (isMac() ? 5.5 : 4), 1.6 %%>;
    arrowWidth = <%% 8, 8, 7, 6, 1.6 %%>;
    arrowLeft = <%% 1, 1, 1, 1, 0 %%>;

    lineHeight = 1.7;
    photoWidth = <%% 260, 260, 260, 260, 20 %%>;
    photoMargin = <%% 10, 10, 10, 10, 1.5 %%>;
    finalBottom = <%% 240, 240, 240, 240, 10 %%>;

    clientPhoto = await ajaxJson({ cliid }, BRIDGEHOST + "/clientPhoto");
    siteImages = clientPhoto.sitePhoto;
    preferImages = clientPhoto.preferredPhoto;

    siteImages.sort((a, b) => {
      const aArr = a.split("/");
      const bArr = b.split("/");
      const aFileWording = aArr[aArr.length - 1];
      const bFileWording = bArr[bArr.length - 1];
      if (/_[0-9]+/gi.test(aFileWording) && /_[0-9]+/gi.test(bFileWording)) {
        return Number(aFileWording.split("_")[aFileWording.split("_").length - 1].replace(/[^0-9]/gi, '')) - Number(bFileWording.split("_")[bFileWording.split("_").length - 1].replace(/[^0-9]/gi, ''));
      } else {
        return aFileWording < bFileWording ? 1 : -1;
      }
    });
    preferImages.sort((a, b) => {
      const aArr = a.split("/");
      const bArr = b.split("/");
      const aFileWording = aArr[aArr.length - 1];
      const bFileWording = bArr[bArr.length - 1];
      if (/_[0-9]+/gi.test(aFileWording) && /_[0-9]+/gi.test(bFileWording)) {
        return Number(aFileWording.split("_")[aFileWording.split("_").length - 1].replace(/[^0-9]/gi, '')) - Number(bFileWording.split("_")[bFileWording.split("_").length - 1].replace(/[^0-9]/gi, ''));
      } else {
        return aFileWording < bFileWording ? 1 : -1;
      }
    });

    sum = 0;
    for (let i of widthRatio) {
      sum += i;
    }

    board.style.paddingTop = String(topMargin) + ea;

    titleArea = createNode({
      mother: board,
      style: {
        marginLeft: String(leftMargin) + ea,
        paddingLeft: String(titlePaddingLeft) + ea,
        width: withOut((leftMargin * 2) + titlePaddingLeft, ea),
        borderBottom: "1px solid " + colorChip.gray3,
        marginBottom: String(titleBottom) + ea,
        paddingBottom: String(titlePaddingBottom) + ea,
        position: "relative",
      },
      children: [
        {
          text: title,
          style: {
            position: "relative",
            fontSize: String(titleSize) + ea,
            fontWeight: String(700),
            color: colorChip.black,
          }
        },
        {
          text: "의뢰서 미리보기" + "&nbsp;&nbsp;&nbsp;<u%/%u>&nbsp;&nbsp;&nbsp;디자이너에게 전송하기&nbsp;&nbsp;&nbsp;<u%/%u>&nbsp;&nbsp;&nbsp;되돌아가기",
          attribute: { proid, cliid, desid },
          event: {
            click: async function (e) {
              try {
                const proid = this.getAttribute("proid");
                const cliid = this.getAttribute("cliid");
                const desid = this.getAttribute("desid");
                const [ standard, standard1 ] = [ ...this.querySelectorAll("b") ];
                if (e.x <= standard.getBoundingClientRect().x) {
                  blankHref(FRONTHOST + "/designer/process.php?proid=" + proid + "&mode=request&view=test");  
                } else if (e.x <= standard1.getBoundingClientRect().x) {
                  const [ designer ] = await ajaxJson({ noFlat: true, whereQuery: { desid } }, "/getDesigners", { equal: true });
                  const [ client ] = await ajaxJson({ noFlat: true, whereQuery: { cliid } }, "/getClients", { equal: true });

                  if (window.confirm(designer.designer + " 디자이너님에게 " + client.name + " 고객님 홈스타일링 의뢰서 알림톡을 전송합니다. 확실합니까?")) {
                    ajaxJson({
                      method: "designerConsoleRequest",
                      name: designer.designer,
                      phone: designer.information.phone,
                      option: {
                        desid: designer.desid,
                        designer: designer.designer,
                        client: client.name,
                        host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
                        path: "process",
                        proid: proid,
                      }
                    }, "/alimTalk").then(() => {
                      return ajaxJson({
                        page: "request",
                        mode: "send",
                        who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
                        desid: designer.desid,
                        cliid: client.cliid,
                      }, "/ghostDesigner_updateAnalytics");
                    }).then(() => {
                      instance.mother.greenAlert("알림톡이 전송되었습니다!");
                    }).catch((err) => {
                      console.log(err);
                    });
                  } else {
                    instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
                  }
                } else {
                  globalThis.window.parent.postMessage(JSON.stringify({
                    proid: proid,
                    mode: "reset",
                  }), "*");
                }
              } catch (e) {
                console.log(e);
              }
            }
          },
          style: {
            position: "absolute",
            fontSize: String(fontSize) + ea,
            fontWeight: String(600),
            color: colorChip.green,
            right: String(titlePaddingLeft) + ea,
            textAlign: "right",
            bottom: String(titlePaddingBottom - titleDateVisualBottom) + ea,
            cursor: "pointer",
          },
          under: {
            fontSize: String(fontSize) + ea,
            fontWeight: String(400),
            color: colorChip.gray3,
          }
        }
      ]
    });

    contentsArea = createNode({
      mother: board,
      style: {
        marginLeft: String(leftMargin) + ea,
        width: withOut(leftMargin * 2, ea),
      },
      children: [
        {
          text: initialContents,
          style: {
            position: "relative",
            fontSize: String(fontSize) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            lineHeight: String(lineHeight),
            marginBottom: String(titleBottom) + ea,
          },
          bold: {
            fontWeight: String(600),
            color: colorChip.black,
          }
        }
      ]
    });

    contentsClientInfo = createNode({
      mother: contentsArea,
      style: {
        position: "relative",
        display: "block",
        width: String(100) + '%',
        textAlign: "right",
        marginBottom: String(clientInfoBottom) + ea,
      },
      children: [
        {
          style: {
            position: desktop ? "absolute" : "relative",
            top: String(0),
            paddingLeft: String(desktop ? leftIndent : 0) + ea,
            width: desktop ? String(clientInfoLeftWidth) + ea : String(100) + '%',
            height: String(100) + '%',
            verticalAlign: "top",
            textAlign: "left",
            overflow: "scroll",
            borderBottom: "1px solid " + colorChip.gray3,
            boxSizing: "border-box",
            paddingBottom: desktop ? "" : String(titleBottom) + ea
          }
        }
      ]
    });

    if (desktop) {
      width = (contentsClientInfo.getBoundingClientRect().width - clientInfoLeftWidth - contentsBetween - leftIndent - tableVisual) / sum;
      contentsClientInfo.appendChild(mother.makeTable(matrix, { style: { width }, mergeMap, callbackMap, boldMap, titleMap, widthRatio }));
      contentsClientInfo.children[1].style.display = "inline-block";
      contentsClientInfo.children[1].style.verticalAlign = "top";
      this.fixTargets.push(contentsClientInfo.lastChild);
    } else {
      width = (100 - (Number(board.style.left.replace(/[^0-9\-\.]/gi, '')) * 2) - (leftMargin * 2)) / sum;
      contentsClientInfo.insertBefore(mother.makeTable(matrix, { style: { width }, mergeMap, callbackMap, boldMap, titleMap, widthRatio }), contentsClientInfo.firstChild);
      contentsClientInfo.children[0].style.marginBottom = String(contentsBetween) + ea;
      this.fixTargets.push(contentsClientInfo.firstChild);
    }

    whitePopupEvent = async function (e) {
      e.preventDefault();
      e.stopPropagation();
      try {
        if (!middleMode) {
          const self = this;
          const index = Number(this.getAttribute("index"));
          const { title, contents } = mainContents[index];
          const position = this.getAttribute("position");
          const proid = this.getAttribute("proid");
          const className = this.getAttribute("className");
          const whiteCardClassName = "mainContentsWhiteCardClass";
          const widthStandard = this.parentElement.parentElement.parentElement.parentElement.getBoundingClientRect().width;
          const heightStandard = this.parentElement.parentElement.parentElement.parentElement.parentElement.getBoundingClientRect().height;
          const [ titleDom, contentsDom ] = document.querySelectorAll('.' + className);
          let width, height;
          let topVisual;
          let frame;
          let textArea;
          let innerMargin, innerTopMargin;
          let base;
          let lineHeight, updateEvent;

          innerMargin = 38;
          innerTopMargin = 30;
          width = widthStandard * (3 / 4);
          height = heightStandard * (3 / 4);
          topVisual = 10;
          lineHeight = 1.7;

          updateEvent = async function (value) {
            try {
              let tempArr, doms;
              tempArr = value.split("\n").map((i) => { return i.trim(); });
              await ajaxJson({
                id: proid,
                column: position,
                value: tempArr,
                email: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail
              }, "/updateProjectHistory");
              mainContents[index].contents = tempArr;
              value = tempArr.map((i) => { return (i === '' ? "" : `<b style="${colorChip.gray4}">-</b> ${i}`); }).join("<br>");
              GeneralJs.cleanChildren(contentsDom);
              contentsDom.insertAdjacentHTML("beforeend", value);
              doms = document.querySelectorAll('.' + whiteCardClassName);
              for (let dom of doms) {
                dom.remove();
              }
            } catch (e) {
              console.log(e);
            }
          }

          GeneralJs.scrollTo(this.parentElement.parentElement.parentElement.parentElement.parentElement, 0);

          createNode({
            mother: this,
            class: [ whiteCardClassName ],
            events: [
              {
                type: "click",
                event: function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  const doms = document.querySelectorAll('.' + whiteCardClassName);
                  for (let dom of doms) {
                    dom.remove();
                  }
                }
              },
            ],
            style: {
              position: "fixed",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              height: String(100) + '%',
              background: colorChip.shadow,
              zIndex: String(2),
              animation: "justfadein 0.3s ease forwards",
            }
          });

          base = createNode({
            mother: this,
            class: [ whiteCardClassName ],
            events: [
              {
                type: "click",
                event: function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                }
              },
            ],
            style: {
              position: "fixed",
              top: String((heightStandard * (1 / 4) * (1 / 2)) - topVisual) + ea,
              left: withOut(50, width / 2, ea),
              width: String(width) + ea,
              height: String(height) + ea,
              background: colorChip.white,
              borderRadius: String(3) + "px",
              zIndex: String(2),
              animation: "fadeup 0.3s ease forwards",
              boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
              fontSize: String(fontSize) + ea,
              fontWeight: String(500),
              color: colorChip.black,
            }
          });
          frame = createNode({
            mother: base,
            style: {
              position: "relative",
              top: String(innerTopMargin) + ea,
              left: String(innerMargin) + ea,
              width: withOut(100, innerMargin * 2, ea),
              height: withOut(100, innerTopMargin * 2, ea),
            }
          });
          textArea = createNode({
            mother: frame,
            mode: "textarea",
            text: contents.join("\n"),
            events: [
              {
                type: "click",
                event: (e) => {
                  e.preventDefault();
                  e.stopPropagation();
                }
              },
              {
                type: "keydown",
                event: async function (e) {
                  try {
                    if (e.key === "Tab") {
                      e.preventDefault();
                      e.stopPropagation();
                      await updateEvent(this.value);
                    }
                  } catch (e) {
                    console.log(e);
                  }
                }
              },
            ],
            style: {
              position: "absolute",
              top: String(0),
              left: String(0),
              width: String(100) + '%',
              height: String(100) + '%',
              fontSize: String(fontSize) + ea,
              overflow: "scroll",
              border: String(0),
              outline: String(0),
              lineHeight: String(lineHeight),
              background: "transparent",
            }
          });

          textArea.focus();
        }
      } catch (e) {
        console.log(e);
      }
    }
    num = 0;
    for (let { title, className, contents, position, spread } of mainContents) {
      words = createNode({
        mother: contentsClientInfo.children[desktop ? 0 : 1],
        attribute: [
          { index: String(num) },
          { position },
          { proid },
          { className },
          { toggle: spread ? "off" : "on" }
        ],
        events: [
          {
            type: "contextmenu",
            event: whitePopupEvent
          },
          {
            type: "click",
            event: function (e) {
              const toggle = this.getAttribute("toggle");
              if (toggle === "off") {
                this.nextElementSibling.style.height = String(0);
                this.querySelector("svg").style.transform = "rotate(0deg)";
                this.setAttribute("toggle", "on");
              } else {
                this.nextElementSibling.style.height = "auto";
                this.querySelector("svg").style.transform = "rotate(90deg)";
                this.setAttribute("toggle", "off");
              }
            }
          }
        ],
        class: [ className ],
        text: title,
        style: {
          position: "relative",
          fontSize: String(fontSize) + ea,
          fontWeight: String(600),
          color: colorChip.black,
          marginBottom: String(wordsBetween0) + ea,
          paddingLeft: mobile ? String(leftIndent) + ea : "",
          cursor: "pointer",
        }
      });
      createNode({
        mother: words,
        mode: "svg",
        source: mother.returnArrow("right", colorChip.green),
        style: {
          position: "absolute",
          width: String(arrowWidth) + ea,
          left: String(desktop ? (-1 * leftIndent) + arrowLeft : 0) + ea,
          top: String(arrowTop) + ea,
          transform: spread ? "rotate(90deg)" : "rotate(0deg)",
        }
      });
      createNode({
        mother: contentsClientInfo.children[desktop ? 0 : 1],
        attribute: [
          { index: String(num) },
          { position },
          { proid },
          { className }
        ],
        class: [ className ],
        events: [
          {
            type: "click",
            event: whitePopupEvent
          }
        ],
        text: contents.map((z) => { return "<b%-%b> " + z.replace(/^\-/, '').replace(/^\- /, ''); }).map((z) => { if (z.trim() === "<b%-%b>") { return ""; } else { return z; } }).join("\n"),
        style: {
          position: "relative",
          fontSize: String(fontSize) + ea,
          fontWeight: String(400),
          color: colorChip.black,
          lineHeight: String(lineHeight),
          marginBottom: String(wordsBetween1) + ea,
          overflow: "hidden",
          transition: "all 0s ease",
          height: spread ? "auto" : String(0),
        },
        bold: {
          color: colorChip.gray4,
        }
      });
      num++;
    }

    images = pictures.map((image) => {
      const imageLink = "/corePortfolio/listImage";
      let pid;
      pid = image.split('.')[0].replace(/^t[0-9]+/gi, '');
      return S3HOST + imageLink + "/" + pid + "/" + image;
    });

    if (images.length > 0) {
      contentsClientPhoto = createNode({
        mother: contentsArea,
        style: {
          position: "relative",
          display: "block",
          width: String(100) + '%',
          marginBottom: String(clientInfoBottom) + ea,
        },
        children: [
          {
            text: pictureContents,
            style: {
              paddingLeft: String(leftIndent) + ea,
              position: "relative",
              display: "block",
              fontSize: String(fontSize) + ea,
              fontWeight: String(600),
              color: colorChip.black,
              marginBottom: String(wordsBetween1) + ea,
            },
            children: [
              {
                mode: "svg",
                source: mother.returnArrow("right", colorChip.green),
                style: {
                  position: "absolute",
                  width: String(arrowWidth) + ea,
                  left: String(arrowLeft) + ea,
                  top: String(arrowTop) + ea,
                }
              }
            ]
          },
          {
            style: {
              position: "relative",
              display: "block",
            },
          }
        ]
      });
      contentsClientPhotoTong = contentsClientPhoto.children[1];
      if (desktop) {
        photoNumber = Math.floor((contentsClientPhotoTong.getBoundingClientRect().width + photoMargin) / (photoWidth + photoMargin));
        photoWidth = (contentsClientPhotoTong.getBoundingClientRect().width - (photoMargin * (photoNumber - 1))) / photoNumber;
      } else {
        photoNumber = 2;
        photoWidth = (100 - (Number(board.style.left.replace(/[^0-9\-\.]/gi, '')) * 2) - (leftMargin * 2) - photoMargin) / photoNumber;
        photoMargin = photoMargin - 0.1;
      }

      positionArr = [];
      for (let i = 0; i < photoNumber; i++) {
        positionArr.push(createNode({
          mother: contentsClientPhotoTong,
          style: {
            position: "relative",
            display: "inline-block",
            width: "calc(calc(100% - " + String(photoMargin * (photoNumber - 1)) + ea + ") / " + String(photoNumber) + ")",
            height: "auto",
            marginRight: String(i === photoNumber - 1 ? 0 : photoMargin) + ea,
            verticalAlign: "top",
          }
        }));
      }

      num = 0;
      imageTong = [];
      for (let i = 0; i < images.length; i++) {
        tempImage = createNode({
          mother: contentsClientPhotoTong,
          mode: "img",
          class: [ "hoverDefault_lite" ],
          attribute: [
            { src: images[i] },
            { index: String(i) },
            { method: /sitePhoto/g.test(images[i]) ? "site" : (/preferredPhoto/g.test(images[i]) ? "preferred" : "selected") },
            { length: String(images.length) }
          ],
          events: [
            {
              type: "click",
              event: function (e) {
                if (desktop) {
                  e.preventDefault();
                  e.stopPropagation();
                  const { createNode, withOut, colorChip, equalJson, downloadFile } = GeneralJs;
                  const totalImages = equalJson(JSON.stringify(images));
                  const mother = document.getElementById("totalcontents");
                  const className = "photoSelectedTarget";
                  const length = Number(this.getAttribute("length"));
                  const zIndex = 3;
                  const wordDictionary = {
                    selected: "고객님이 선택한 사진",
                    site: "고객님이 보낸 현장",
                    preferred: "고객님의 선호 사진"
                  };
                  let img, height, imgBox;
                  let title, titleSize, bottom;
                  let titleBox;
                  let leftArrow, rightArrow;
                  let leftArrowBox, rightArrowBox;
                  let arrowHeight;
                  let arrowMargin;
                  let index, method, src;
                  let convertEvent;

                  index = Number(this.getAttribute("index"));
                  method = this.getAttribute("method");
                  src = this.getAttribute("src");

                  convertEvent = () => {};

                  height = 78;
                  titleSize = 2;
                  bottom = 6.6;
                  arrowHeight = 1.7;
                  arrowMargin = 78;

                  createNode({
                    mother,
                    class: [ className ],
                    events: [
                      {
                        type: "click",
                        event: function (e) {
                          const removeTargets = document.querySelectorAll('.' + className);
                          for (let dom of removeTargets) {
                            mother.removeChild(dom);
                          }
                        }
                      }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: String(100) + '%',
                      height: String(100) + '%',
                      background: colorChip.darkDarkShadow,
                      zIndex: String(zIndex),
                      animation: "justfadeineight 0.2s ease forwards",
                    }
                  });

                  img = createNode({
                    mother,
                    class: [ className ],
                    mode: "img",
                    attribute: [
                      { src },
                      { direction: "right" }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(height) + '%',
                      width: "auto",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      borderRadius: String(3) + "px",
                    }
                  });
                  imgBox = img.getBoundingClientRect();
                  img.style.top = withOut(50, imgBox.height / 2, ea);
                  img.style.left = withOut(50, imgBox.width / 2, ea);

                  title = createNode({
                    mother,
                    events: [
                      {
                        type: [ "click", "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    class: [ className ],
                    text: wordDictionary[method],
                    style: {
                      position: "fixed",
                      bottom: String(bottom) + '%',
                      fontSize: String(titleSize) + "vh",
                      fontWeight: String(600),
                      color: colorChip.whiteBlack,
                      left: String(50) + '%',
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                    }
                  });
                  titleBox = title.getBoundingClientRect();
                  title.style.left = withOut(50, titleBox.width / 2, ea);

                  leftArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "left" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("left", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  leftArrowBox = leftArrow.getBoundingClientRect();
                  leftArrow.style.top = withOut(50, leftArrowBox.height / 2, ea);
                  leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);

                  rightArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "right" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("right", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  rightArrowBox = rightArrow.getBoundingClientRect();
                  rightArrow.style.top = withOut(50, rightArrowBox.height / 2, ea);
                  rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                  convertEvent = function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    const direction = this.getAttribute("direction");
                    let targetIndex, targetImage;
                    if (direction === "left") {
                      targetIndex = index - 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = length - 1;
                      }
                    } else {
                      targetIndex = index + 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = 0;
                      }
                    }
                    targetImage = totalImages[targetIndex];
                    img.setAttribute("src", targetImage);
                    imgBox = img.getBoundingClientRect();
                    img.style.left = withOut(50, imgBox.width / 2, ea);
                    leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);
                    rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                    index = targetIndex;
                    src = targetImage;
                    method = /sitePhoto/g.test(targetImage) ? "site" : (/preferredPhoto/g.test(targetImage) ? "preferred" : "selected");

                    title.textContent = wordDictionary[method];
                    titleBox = title.getBoundingClientRect();
                    title.style.left = withOut(50, titleBox.width / 2, ea);
                  }
                  leftArrow.addEventListener("click", convertEvent);
                  rightArrow.addEventListener("click", convertEvent);
                  img.addEventListener("click", convertEvent);
                }
              }
            }
          ],
          style: {
            display: "inline-block",
            position: "relative",
            width: String(photoWidth) + ea,
            borderRadius: String(3) + "px",
            marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
            marginBottom: String(Math.floor(i / photoNumber) === Math.floor((images.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
            cursor: "pointer",
            verticalAlign: "top",
          }
        });

        imageTong.push(tempImage);
        if (imageTong.length === photoNumber) {
          positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
          imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
          for (let i = 0; i < imageTong.length; i++) {
            positionArr[i].appendChild(imageTong[i]);
          }
          imageTong = [];
          num = -1;
        }

        num++;
      }

      positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
      imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
      for (let i = 0; i < imageTong.length; i++) {
        positionArr[i].appendChild(imageTong[i]);
      }

    }

    if (siteImages.length > 0) {
      contentsClientPhoto = createNode({
        mother: contentsArea,
        style: {
          position: "relative",
          display: "block",
          width: String(100) + '%',
          marginBottom: String(clientInfoBottom) + ea,
        },
        children: [
          {
            text: pictureContentsSite,
            style: {
              paddingLeft: String(leftIndent) + ea,
              position: "relative",
              display: "block",
              fontSize: String(fontSize) + ea,
              fontWeight: String(600),
              color: colorChip.black,
              marginBottom: String(wordsBetween1) + ea,
            },
            children: [
              {
                mode: "svg",
                source: mother.returnArrow("right", colorChip.green),
                style: {
                  position: "absolute",
                  width: String(arrowWidth) + ea,
                  left: String(arrowLeft) + ea,
                  top: String(arrowTop) + ea,
                }
              }
            ]
          },
          {
            style: {
              position: "relative",
              display: "block",
            },
          }
        ]
      });
      contentsClientPhotoTong = contentsClientPhoto.children[1];
      if (desktop) {
        photoNumber = Math.floor((contentsClientPhotoTong.getBoundingClientRect().width + photoMargin) / (photoWidth + photoMargin));
        photoWidth = (contentsClientPhotoTong.getBoundingClientRect().width - (photoMargin * (photoNumber - 1))) / photoNumber;
      } else {
        photoNumber = 2;
        photoWidth = (100 - (Number(board.style.left.replace(/[^0-9\-\.]/gi, '')) * 2) - (leftMargin * 2) - photoMargin) / photoNumber;
      }

      positionArr = [];
      for (let i = 0; i < photoNumber; i++) {
        positionArr.push(createNode({
          mother: contentsClientPhotoTong,
          style: {
            position: "relative",
            display: "inline-block",
            width: "calc(calc(100% - " + String(photoMargin * (photoNumber - 1)) + ea + ") / " + String(photoNumber) + ")",
            height: "auto",
            marginRight: String(i === photoNumber - 1 ? 0 : photoMargin) + ea,
            verticalAlign: "top",
          }
        }));
      }

      num = 0;
      imageTong = [];
      for (let i = 0; i < siteImages.length; i++) {
        tempImage = createNode({
          mother: contentsClientPhotoTong,
          mode: "img",
          class: [ "hoverDefault_lite" ],
          attribute: [
            { src: siteImages[i] },
            { index: String(i) },
            { method: /sitePhoto/g.test(siteImages[i]) ? "site" : (/preferredPhoto/g.test(siteImages[i]) ? "preferred" : "selected") },
            { length: String(siteImages.length) }
          ],
          events: [
            {
              type: "click",
              event: function (e) {
                if (desktop) {
                  e.preventDefault();
                  e.stopPropagation();
                  const { createNode, withOut, colorChip, equalJson, downloadFile } = GeneralJs;
                  const totalImages = equalJson(JSON.stringify(siteImages));
                  const mother = document.getElementById("totalcontents");
                  const className = "photoSelectedTarget";
                  const length = Number(this.getAttribute("length"));
                  const zIndex = 3;
                  const wordDictionary = {
                    selected: "고객님이 선택한 사진",
                    site: "고객님이 보낸 현장",
                    preferred: "고객님의 선호 사진"
                  };
                  let img, height, imgBox;
                  let title, titleSize, bottom;
                  let titleBox;
                  let leftArrow, rightArrow;
                  let leftArrowBox, rightArrowBox;
                  let arrowHeight;
                  let arrowMargin;
                  let index, method, src;
                  let convertEvent;

                  index = Number(this.getAttribute("index"));
                  method = this.getAttribute("method");
                  src = this.getAttribute("src");

                  convertEvent = () => {};

                  height = 78;
                  titleSize = 2;
                  bottom = 6.6;
                  arrowHeight = 1.7;
                  arrowMargin = 78;

                  createNode({
                    mother,
                    class: [ className ],
                    events: [
                      {
                        type: "click",
                        event: function (e) {
                          const removeTargets = document.querySelectorAll('.' + className);
                          for (let dom of removeTargets) {
                            mother.removeChild(dom);
                          }
                        }
                      }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: String(100) + '%',
                      height: String(100) + '%',
                      background: colorChip.darkDarkShadow,
                      zIndex: String(zIndex),
                      animation: "justfadeineight 0.2s ease forwards",
                    }
                  });

                  img = createNode({
                    mother,
                    class: [ className ],
                    mode: "img",
                    attribute: [
                      { src },
                      { direction: "right" }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(height) + '%',
                      width: "auto",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      borderRadius: String(3) + "px",
                    }
                  });
                  imgBox = img.getBoundingClientRect();
                  img.style.top = withOut(50, imgBox.height / 2, ea);
                  img.style.left = withOut(50, imgBox.width / 2, ea);

                  title = createNode({
                    mother,
                    events: [
                      {
                        type: [ "click", "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    class: [ className ],
                    text: wordDictionary[method],
                    style: {
                      position: "fixed",
                      bottom: String(bottom) + '%',
                      fontSize: String(titleSize) + "vh",
                      fontWeight: String(600),
                      color: colorChip.whiteBlack,
                      left: String(50) + '%',
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                    }
                  });
                  titleBox = title.getBoundingClientRect();
                  title.style.left = withOut(50, titleBox.width / 2, ea);

                  leftArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "left" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("left", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  leftArrowBox = leftArrow.getBoundingClientRect();
                  leftArrow.style.top = withOut(50, leftArrowBox.height / 2, ea);
                  leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);

                  rightArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "right" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("right", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  rightArrowBox = rightArrow.getBoundingClientRect();
                  rightArrow.style.top = withOut(50, rightArrowBox.height / 2, ea);
                  rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                  convertEvent = function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    const direction = this.getAttribute("direction");
                    let targetIndex, targetImage;
                    if (direction === "left") {
                      targetIndex = index - 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = length - 1;
                      }
                    } else {
                      targetIndex = index + 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = 0;
                      }
                    }
                    targetImage = totalImages[targetIndex];
                    img.setAttribute("src", targetImage);
                    imgBox = img.getBoundingClientRect();
                    img.style.left = withOut(50, imgBox.width / 2, ea);
                    leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);
                    rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                    index = targetIndex;
                    src = targetImage;
                    method = /sitePhoto/g.test(targetImage) ? "site" : (/preferredPhoto/g.test(targetImage) ? "preferred" : "selected");

                    title.textContent = wordDictionary[method];
                    titleBox = title.getBoundingClientRect();
                    title.style.left = withOut(50, titleBox.width / 2, ea);
                  }
                  leftArrow.addEventListener("click", convertEvent);
                  rightArrow.addEventListener("click", convertEvent);
                  img.addEventListener("click", convertEvent);
                }
              }
            }
          ],
          style: {
            display: "inline-block",
            position: "relative",
            width: String(photoWidth) + ea,
            borderRadius: String(3) + "px",
            marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
            marginBottom: String(Math.floor(i / photoNumber) === Math.floor((siteImages.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
            cursor: "pointer",
            verticalAlign: "top",
          }
        });

        imageTong.push(tempImage);
        if (imageTong.length === photoNumber) {
          positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
          imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
          for (let i = 0; i < imageTong.length; i++) {
            positionArr[i].appendChild(imageTong[i]);
          }
          imageTong = [];
          num = -1;
        }

        num++;
      }

      positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
      imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
      for (let i = 0; i < imageTong.length; i++) {
        positionArr[i].appendChild(imageTong[i]);
      }

    }

    if (preferImages.length > 0) {
      contentsClientPhoto = createNode({
        mother: contentsArea,
        style: {
          position: "relative",
          display: "block",
          width: String(100) + '%',
          marginBottom: String(clientInfoBottom) + ea,
        },
        children: [
          {
            text: pictureContentsPrefer,
            style: {
              paddingLeft: String(leftIndent) + ea,
              position: "relative",
              display: "block",
              fontSize: String(fontSize) + ea,
              fontWeight: String(600),
              color: colorChip.black,
              marginBottom: String(wordsBetween1) + ea,
            },
            children: [
              {
                mode: "svg",
                source: mother.returnArrow("right", colorChip.green),
                style: {
                  position: "absolute",
                  width: String(arrowWidth) + ea,
                  left: String(arrowLeft) + ea,
                  top: String(arrowTop) + ea,
                }
              }
            ]
          },
          {
            style: {
              position: "relative",
              display: "block",
            },
          }
        ]
      });
      contentsClientPhotoTong = contentsClientPhoto.children[1];
      if (desktop) {
        photoNumber = Math.floor((contentsClientPhotoTong.getBoundingClientRect().width + photoMargin) / (photoWidth + photoMargin));
        photoWidth = (contentsClientPhotoTong.getBoundingClientRect().width - (photoMargin * (photoNumber - 1))) / photoNumber;
      } else {
        photoNumber = 2;
        photoWidth = (100 - (Number(board.style.left.replace(/[^0-9\-\.]/gi, '')) * 2) - (leftMargin * 2) - photoMargin) / photoNumber;
      }

      positionArr = [];
      for (let i = 0; i < photoNumber; i++) {
        positionArr.push(createNode({
          mother: contentsClientPhotoTong,
          style: {
            position: "relative",
            display: "inline-block",
            width: "calc(calc(100% - " + String(photoMargin * (photoNumber - 1)) + ea + ") / " + String(photoNumber) + ")",
            height: "auto",
            marginRight: String(i === photoNumber - 1 ? 0 : photoMargin) + ea,
            verticalAlign: "top",
          }
        }));
      }

      num = 0;
      imageTong = [];
      for (let i = 0; i < preferImages.length; i++) {
        tempImage = createNode({
          mother: contentsClientPhotoTong,
          mode: "img",
          class: [ "hoverDefault_lite" ],
          attribute: [
            { src: preferImages[i] },
            { index: String(i) },
            { method: /sitePhoto/g.test(preferImages[i]) ? "site" : (/preferredPhoto/g.test(preferImages[i]) ? "preferred" : "selected") },
            { length: String(preferImages.length) }
          ],
          events: [
            {
              type: "click",
              event: function (e) {
                if (desktop) {
                  e.preventDefault();
                  e.stopPropagation();
                  const { createNode, withOut, colorChip, equalJson, downloadFile } = GeneralJs;
                  const totalImages = equalJson(JSON.stringify(preferImages));
                  const mother = document.getElementById("totalcontents");
                  const className = "photoSelectedTarget";
                  const length = Number(this.getAttribute("length"));
                  const zIndex = 3;
                  const wordDictionary = {
                    selected: "고객님이 선택한 사진",
                    site: "고객님이 보낸 현장",
                    preferred: "고객님의 선호 사진"
                  };
                  let img, height, imgBox;
                  let title, titleSize, bottom;
                  let titleBox;
                  let leftArrow, rightArrow;
                  let leftArrowBox, rightArrowBox;
                  let arrowHeight;
                  let arrowMargin;
                  let index, method, src;
                  let convertEvent;

                  index = Number(this.getAttribute("index"));
                  method = this.getAttribute("method");
                  src = this.getAttribute("src");

                  convertEvent = () => {};

                  height = 78;
                  titleSize = 2;
                  bottom = 6.6;
                  arrowHeight = 1.7;
                  arrowMargin = 78;

                  createNode({
                    mother,
                    class: [ className ],
                    events: [
                      {
                        type: "click",
                        event: function (e) {
                          const removeTargets = document.querySelectorAll('.' + className);
                          for (let dom of removeTargets) {
                            mother.removeChild(dom);
                          }
                        }
                      }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      width: String(100) + '%',
                      height: String(100) + '%',
                      background: colorChip.darkDarkShadow,
                      zIndex: String(zIndex),
                      animation: "justfadeineight 0.2s ease forwards",
                    }
                  });

                  img = createNode({
                    mother,
                    class: [ className ],
                    mode: "img",
                    attribute: [
                      { src },
                      { direction: "right" }
                    ],
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(height) + '%',
                      width: "auto",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      borderRadius: String(3) + "px",
                    }
                  });
                  imgBox = img.getBoundingClientRect();
                  img.style.top = withOut(50, imgBox.height / 2, ea);
                  img.style.left = withOut(50, imgBox.width / 2, ea);

                  title = createNode({
                    mother,
                    events: [
                      {
                        type: [ "click", "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    class: [ className ],
                    text: wordDictionary[method],
                    style: {
                      position: "fixed",
                      bottom: String(bottom) + '%',
                      fontSize: String(titleSize) + "vh",
                      fontWeight: String(600),
                      color: colorChip.whiteBlack,
                      left: String(50) + '%',
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                    }
                  });
                  titleBox = title.getBoundingClientRect();
                  title.style.left = withOut(50, titleBox.width / 2, ea);

                  leftArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "left" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("left", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  leftArrowBox = leftArrow.getBoundingClientRect();
                  leftArrow.style.top = withOut(50, leftArrowBox.height / 2, ea);
                  leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);

                  rightArrow = createNode({
                    mother,
                    events: [
                      {
                        type: [ "dblclick", "selectstart" ],
                        event: (e) => {
                          e.stopPropagation();
                          e.preventDefault();
                        }
                      }
                    ],
                    attribute: [
                      { direction: "right" }
                    ],
                    class: [ className ],
                    mode: "svg",
                    source: instance.mother.returnArrow("right", colorChip.whiteBlack),
                    style: {
                      position: "fixed",
                      top: String(0),
                      left: String(0),
                      height: String(arrowHeight) + "vh",
                      zIndex: String(zIndex),
                      transition: "all 0s ease",
                      animation: "fadeuplite 0.2s ease forwards",
                      cursor: "pointer"
                    }
                  });
                  rightArrowBox = rightArrow.getBoundingClientRect();
                  rightArrow.style.top = withOut(50, rightArrowBox.height / 2, ea);
                  rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                  convertEvent = function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    const direction = this.getAttribute("direction");
                    let targetIndex, targetImage;
                    if (direction === "left") {
                      targetIndex = index - 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = length - 1;
                      }
                    } else {
                      targetIndex = index + 1;
                      if (totalImages[targetIndex] === undefined) {
                        targetIndex = 0;
                      }
                    }
                    targetImage = totalImages[targetIndex];
                    img.setAttribute("src", targetImage);
                    imgBox = img.getBoundingClientRect();
                    img.style.left = withOut(50, imgBox.width / 2, ea);
                    leftArrow.style.left = withOut(50, (imgBox.width / 2) + arrowMargin, ea);
                    rightArrow.style.left = withOut(50, ((imgBox.width / 2) + arrowMargin - rightArrowBox.width) * -1, ea);

                    index = targetIndex;
                    src = targetImage;
                    method = /sitePhoto/g.test(targetImage) ? "site" : (/preferredPhoto/g.test(targetImage) ? "preferred" : "selected");

                    title.textContent = wordDictionary[method];
                    titleBox = title.getBoundingClientRect();
                    title.style.left = withOut(50, titleBox.width / 2, ea);
                  }
                  leftArrow.addEventListener("click", convertEvent);
                  rightArrow.addEventListener("click", convertEvent);
                  img.addEventListener("click", convertEvent);
                }
              }
            }
          ],
          style: {
            display: "inline-block",
            position: "relative",
            width: String(photoWidth) + ea,
            borderRadius: String(3) + "px",
            marginRight: String(i % photoNumber === photoNumber - 1 ? 0 : photoMargin) + ea,
            marginBottom: String(Math.floor(i / photoNumber) === Math.floor((preferImages.length - 1) / photoNumber) ? 0 : photoMargin) + ea,
            cursor: "pointer",
            verticalAlign: "top",
          }
        });

        imageTong.push(tempImage);
        if (imageTong.length === photoNumber) {
          positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
          imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
          for (let i = 0; i < imageTong.length; i++) {
            positionArr[i].appendChild(imageTong[i]);
          }
          imageTong = [];
          num = -1;
        }

        num++;
      }

      positionArr.sort((a, b) => { return a.getBoundingClientRect().height - b.getBoundingClientRect().height; });
      imageTong.sort((a, b) => { return b.getBoundingClientRect().height - a.getBoundingClientRect().height; });
      for (let i = 0; i < imageTong.length; i++) {
        positionArr[i].appendChild(imageTong[i]);
      }

    }

    for (let { title, contents } of noticeContents) {
      noticeDom = createNode({
        mother: contentsArea,
        style: {
          position: "relative",
          display: "block",
          width: String(100) + '%',
          marginBottom: String(contentsBetween) + ea,
        },
        children: [
          {
            text: title,
            style: {
              paddingLeft: String(leftIndent) + ea,
              position: "relative",
              display: "block",
              fontSize: String(fontSize) + ea,
              fontWeight: String(600),
              color: colorChip.black,
              marginBottom: String(wordsBetween2) + ea,
            },
            children: [
              {
                mode: "svg",
                source: mother.returnArrow("right", colorChip.green),
                style: {
                  position: "absolute",
                  width: String(arrowWidth) + ea,
                  left: String(arrowLeft) + ea,
                  top: String(arrowTop) + ea,
                }
              }
            ]
          },
          {
            text: contents.map((z) => { return "<b%-%b> " + z; }).join("\n"),
            style: {
              position: "relative",
              fontSize: String(fontSize) + ea,
              fontWeight: String(400),
              color: colorChip.black,
              lineHeight: String(lineHeight),
            },
            bold: {
              color: colorChip.gray4,
            }
          }
        ]
      });
    }

    board.style.height = "auto";
    board.style.paddingBottom = String(finalBottom) + ea;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.requestIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  if (!this.middleMode) {

    listIcon.addEventListener("click", function (e) {
      blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
    });

    previousIcon.addEventListener("click", function (e) {
      let previousDesid, boo, thisStandard;
      previousDesid = desid;
      do {
        previousDesid = instance.designers.previous(previousDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === previousDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.requestDetailLaunching(previousDesid);
    });

    nextIcon.addEventListener("click", function (e) {
      let nextDesid, boo, thisStandard;
      nextDesid = desid;
      do {
        nextDesid = instance.designers.next(nextDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === nextDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.requestDetailLaunching(nextDesid);
    });

  } else {

    if (desktop) {

      listIcon.addEventListener("click", function (e) {
        const totalContents = document.getElementById("totalcontents");
        const totalMother = document.querySelector(".totalMother");
        const grayBack = totalContents.children[0];
        const listPannel = totalMother.children[0].children[0];
        const iconSetPannel = instance.iconTong;
        const mainBaseTong = instance.mainBaseTong;
        const outerMargin = Number(mainBaseTong.style.top.replace(/[^0-9\.\-]/gi, ''));

        if (grayBack.getAttribute("toggle") !== "off") {
          grayBack.style.width = String(0) + ea;
          listPannel.style.transform = "translateX(" + String((instance.grayBarWidth + instance.tabletWidth) * -1) + ea + ")";
          iconSetPannel.style.background = "transparent";
          mainBaseTong.style.left = String(outerMargin) + ea;
          mainBaseTong.style.width = withOut(outerMargin * 2, ea);
          instance.listIcon.style.left = String(left2) + ea;
          grayBack.setAttribute("toggle", "off");
          if (instance.fixTargets.length > 0) {
            instance.fixTargets[0].style.width = String(Number(instance.fixTargets[0].style.width.replace(/[^0-9\-\.]/gi, '')) + instance.grayBarWidth) + ea;
          }
        } else {
          grayBack.style.width = String(instance.grayBarWidth) + ea;
          listPannel.style.transform = "translateX(" + String(0) + ea + ")";
          iconSetPannel.style.background = colorChip.gray0;
          mainBaseTong.style.left = String(instance.grayBarWidth + outerMargin) + ea;
          mainBaseTong.style.width = withOut(instance.grayBarWidth + (outerMargin * 2), ea);
          instance.listIcon.style.left = String(left) + ea;
          grayBack.setAttribute("toggle", "on");
          if (instance.fixTargets.length > 0) {
            instance.fixTargets[0].style.width = String(Number(instance.fixTargets[0].style.width.replace(/[^0-9\-\.]/gi, '')) - instance.grayBarWidth) + ea;
          }
        }

      });

    } else {

      listIcon.addEventListener("click", function (e) {
        instance.mode = "request";
        instance.requestDetailLaunching(designer.desid);
      });

    }

    previousIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index - 1] === undefined ? targets[targets.length - 1] : targets[index - 1];
        target.click();
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index + 1] === undefined ? targets[0] : targets[index + 1];
        target.click();
      }
    });

  }

  rInitialIcon.addEventListener("click", function (e) {
    if (instance.proid === null) {
      window.alert("의뢰서를 선택해주세요!");
    } else {
      window.location.href = window.location.protocol + "//" + window.location.host + "/project?proid=" + instance.proid;
    }
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (instance.proid === null) {
      if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
        GeneralJs.ajaxJson({
          method: "designerConsole",
          name: designer.designer,
          phone: designer.information.phone,
          option: {
            desid: designer.desid,
            designer: designer.designer,
            host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
            path: "requests",
          }
        }, "/alimTalk").then(() => {
          return GeneralJs.ajaxJson({
            page: "request",
            mode: "send",
            who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
            desid: designer.desid,
          }, "/ghostDesigner_updateAnalytics");
        }).then(() => {
          instance.mother.greenAlert("알림톡이 전송되었습니다!");
        }).catch((err) => {
          console.log(err);
        });
      } else {
        instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
      }
    } else {
      if (window.confirm(designer.designer + " 디자이너님에게 " + instance.client.name + " 고객님 홈스타일링 의뢰서 알림톡을 전송합니다. 확실합니까?")) {
        GeneralJs.ajaxJson({
          method: "designerConsoleRequest",
          name: designer.designer,
          phone: designer.information.phone,
          option: {
            desid: designer.desid,
            designer: designer.designer,
            client: instance.client.name,
            host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
            path: "process",
            proid: instance.proid,
          }
        }, "/alimTalk").then(() => {
          return GeneralJs.ajaxJson({
            page: "request",
            mode: "send",
            who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
            desid: designer.desid,
            cliid: instance.client.cliid,
          }, "/ghostDesigner_updateAnalytics");
        }).then(() => {
          instance.mother.greenAlert("알림톡이 전송되었습니다!");
        }).catch((err) => {
          console.log(err);
        });
      } else {
        instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
      }
    }
  });

}

DesignerJs.prototype.requestView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    const middleMode = /middle/gi.test(window.location.pathname);
    const entireMode = GeneralJs.returnGet().dataonly === "true" && GeneralJs.returnGet().entire === "true";

    if (!entireMode) {
      this.backGrayBar();
    }
    await this.spreadData(null, true, middleMode ? "middle" : null);

    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight } = this;
    const standardBar = totalMother.firstChild;
    const designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    const length = designers.length;
    const getObj = returnGet();
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;

    if (entireMode) {
      this.grayBarWidth = 0;
      this.belowHeight = 0;
      this.mother.belowHeight = 0;
    }

    this.designers = new Designers(designers);
    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.middleMode = middleMode;
    this.modes = [ "checklist", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[2];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            document.getElementById("totalcontents").removeChild(document.querySelector(".totalFather"));
            instance.totalFather = null;
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
          }
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.requestDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            searchResult = instance.designers.search(value);
            if (searchResult.length > 0) {
              instance.requestDetailLaunching(searchResult[0].desid);
            }
          }
        }
      });
    }

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.requestDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    window.addEventListener("popstate", (e) => {
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          if (instance.pageHistory[1].status === "list") {
            instance.requestDetailLaunching(instance.pageHistory[1].desid);
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          } else {
            instance.requestDetailLaunching(instance.pageHistory[1].desid);
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          }
        }
      }
    });

    //launching
    this.proid = null;
    this.project = null;
    this.client = null;
    this.requestBoxes = [];
    this.requestDetailLaunching(this.desid, async () => {
      if (getObj.cliid !== undefined) {
        if (getObj.desid === undefined) {
          projects = await ajaxJson({ noFlat: true, whereQuery: { $and: [ { cliid: getObj.cliid }, { desid: { $regex: "^d" } } ] } }, "/getProjects");
          if (projects.length > 0) {
            instance.requestDetailLaunching(projects[0].desid, () => {
              for (let box of instance.requestBoxes) {
                if (box.getAttribute("cliid") === getObj.cliid) {
                  box.click();
                }
              }
            });
          }
        } else {
          for (let box of instance.requestBoxes) {
            if (box.getAttribute("cliid") === getObj.cliid) {
              box.click();
            }
          }
        }
      }
    });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.scheduleDetailLaunching = function (desid, callback = null) {
  const instance = this;
  const { ea, belowHeight, firstTop, motherHeight, middleMode } = this;
  const totalMother = document.querySelector(".totalMother");
  const standardBar = this.standardDoms[0].parentElement;
  const { scrollTo, ajaxJson, colorChip } = GeneralJs;
  let target, pastScrollTop;
  let loading;
  let projects;

  this.classNames = {
    base: "taskBlock",
    start: "taskDateStart",
    end: "taskDateEnd",
    title: "taskContentsTitle",
    description: "taskContentsDescription",
    color: "taskContentsColor"
  };
  this.colors = [ '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', '#FF5722', '#795548', '#9E9E9E', '#607D8B', '#405966' ];
  this.taskBlocks = [];

  if (!middleMode) {
    this.pageHistory.unshift({ path: "schedule", status: "list", desid });
  }
  window.history.pushState({ path: "schedule", status: "list", desid }, '');

  pastScrollTop = totalMother.scrollTop;
  this.desid = desid;
  this.fixTargets = [];

  if (this.mainBaseTong !== undefined && this.mainBaseTong !== null) {
    this.mainBaseTong.parentNode.removeChild(this.mainBaseTong);
    this.mainBaseTong = null;
    for (let i = 1; i < this.standardDoms.length; i++) {
      this.standardDoms[i].style.color = colorChip.black;
    }
    if (this.iconTong !== undefined && this.iconTong !== null) {
      this.iconTong.parentElement.removeChild(this.iconTong);
    }
    this.iconTong = null;
    if (document.getElementById("memoTong") !== null) {
      totalMother.removeChild(document.getElementById("memoTong"));
    }
  }

  if (!middleMode) {
    target = null;
    for (let i = 0; i < this.standardDoms.length; i++) {
      if (this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g) !== null) {
        if (desid === this.standardDoms[i].firstChild.textContent.match(/d[0-9][0-9][0-9][0-9]_[a-z][a-z][0-9][0-9][a-z]/g)[0]) {
          target = i;
        }
      }
    }
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (i !== target) {
        this.standardDoms[i].style.color = this.standardDoms[i].getAttribute("color");
      } else {
        this.standardDoms[i].style.color = colorChip.green;
        if (i !== 1) {
          if (this.standardDoms[i].getBoundingClientRect().top > window.innerHeight - belowHeight - motherHeight - this.standardDoms[i].getBoundingClientRect().height + 10 || this.standardDoms[i].getBoundingClientRect().top < firstTop) {
            standardBar.parentElement.scrollTo({ top: ((i - 1) * (this.standardDoms[i].getBoundingClientRect().height)) });
          }
        } else {
          standardBar.parentElement.scrollTo({ top: 0 });
        }
      }
    }
  }

  if (middleMode) {
    ajaxJson({
      page: "schedule",
      mode: "page",
      who: instance.designer.information.phone,
      desid,
    }, "/ghostDesigner_updateAnalytics").then((message) => {
      console.log(message);
    }).catch((err) => {
      console.log(err);
    });
  }

  this.scheduleIconSet(desid);
  this.mother.loadingRun().then((dom) => {
    loading = dom;
    return ajaxJson({ noFlat: true, whereQuery: { desid } }, "/getProjects", { equal: true });
  }).then((raw) => {
    projects = raw;
    return ajaxJson({ method: "project", idArr: projects.map((obj) => { return obj.proid }) }, "/getHistoryTotal", { equal: true });
  }).then((histories) => {
    if (projects.length === 0) {
      return [];
    } else {
      for (let project of projects) {
        project.history = histories[project.proid];
      }
      instance.designers.setProjects(projects);
      return ajaxJson({
        noFlat: true,
        whereQuery: { $or: projects.map((obj) => { return { cliid: obj.cliid } }) }
      }, "/getClients", { equal: true });
    }
  }).then((clients) => {
    loading.parentNode.removeChild(loading);
    instance.designers.setClients(clients);
    instance.scheduleList(desid);
    scrollTo(totalMother, pastScrollTop);
    if (callback !== null) {
      if (typeof callback === "function") {
        callback();
      }
    }
  }).catch((err) => {
    console.log(err);
  });
}

DesignerJs.prototype.scheduleReturnStatic = function (designer, project, client, clientHistory, projectHistory, requestNumber) {
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, autoComma } = GeneralJs;
  const { totalMother, ea, grayBarWidth, middleMode } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;

  const title = desktop ? client.name + "님 상세 일정표" : "상세 일정표";
  const initialContents = "안녕하세요, <b%" + designer.designer + "%b> 실장님!\n" + client.name +  " 고객님 <b%상세 일정 사항 기입%b>을 부탁드립니다. 해당 사항을 클릭하여 수정하실 수 있으며,\n수정된 내용을 바탕으로 고객님께 안내될 페이지는 다음 페이지 링크에서 보실 수 있습니다!";

  return {
    title,
    initialContents,
  };
}

DesignerJs.prototype.scheduleList = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight } = this;
  const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));
  const statusColors = [
    {
      color: colorChip.gray3,
      name: "미작성"
    },
    {
      color: colorChip.red,
      name: "작성중"
    },
    {
      color: colorChip.purple,
      name: "작성 완료"
    },
    {
      color: colorChip.green,
      name: "전송 완료"
    },
  ]
  const mobile = this.media[4];
  const desktop = !mobile;
  let designer;
  let margin;
  let baseTong0, baseTong;
  let tempArr;
  let tempObj, nodeArr, subNodeArr;
  let eachTotalTong, eachNameTong, eachValueTong;
  let level1Width, level1Left;
  let topMargin, leftMargin, bottomMargin;
  let size;
  let alphabetWidth;
  let temp;
  let factorHeight, factorWidth;
  let tendencyTop, tendencyHeight;
  let tendencyFactorHeight, tendencyIndent, tendencyWidthIndent;
  let textAreaTop;
  let baseTongMarginBottom;
  let checkListData;
  let middleAdjustTong;
  let mobileTendencyTop;
  let mobileTendencyVisualMargin;
  let mobileTendencyIntend;
  let boxNumber, boxNumberArr;
  let requestBox, boxMargin;
  let projects;
  let requestSize;
  let requestWordMargin;
  let requestWordPaddingTop;
  let requestWordPaddingBottom;
  let thisChildWidth;
  let dateString;
  let baseTongPaddingBottom;
  let mobileOuterMargin;
  let borderRadius;
  let secondFont;
  let statusNumber;
  let colorInfo;
  let colorInfoIndent;
  let colorInfoPaddingLeft;
  let colorInfoPaddingTop;
  let colorInfoPaddingBottom;
  let colorBlockHeight;
  let colorMarkWidth;
  let colorMarkHeight;
  let colorMarkBetween;
  let colorBlockSize;
  let colorBlockWeight;
  let colorBlockTextTop;
  let colorBlockIndex;

  designer = this.designers.pick(desid);
  projects = designer.projects;

  boxNumber = <%% 6, 6, 6, 6, 2 %%>;
  maxBoxNumber = projects.length;

  margin = 8;
  level1Width = <%% 210, 172, 172, 172, 34 %%>;
  level1Left = <%% 160, 136, 136, 136, 0 %%>;
  topMargin = <%% (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), (isMac() ? 30 : 34), 6 %%>;
  leftMargin = <%% 34, 34, 34, 34, 8 %%>;
  bottomMargin = <%% (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), (isMac() ? 15 : 13), 12 %%>;
  baseTongMarginBottom = <%% 80, 80, 80, 80, 25 %%>;
  size = <%% 16, 15, 15, 15, 4 %%>;

  tendencyTop = <%% 3, 3, 3, 3, 0.8 %%>;
  tendencyHeight = <%% 16, 16, 16, 16, 4 %%>;
  alphabetWidth = <%% 30, 30, 30, 30, 7 %%>;

  factorHeight = <%% 38, 36, 36, 36, 8.5 %%>;
  factorWidth = <%% 210, 172, 172, 172, 210 %%>;
  tendencyFactorHeight = <%% 30, 30, 30, 30, 7 %%>;
  tendencyIndent = <%% 105, 71, 71, 71, 65 %%>;
  tendencyWidthIndent = -135;

  textAreaTop = <%% (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), (isMac() ? -3 : -4), -0.7 %%>;

  mobileTendencyTop = 8;
  mobileTendencyVisualMargin = 13;
  mobileTendencyIntend = 20;

  boxMargin = <%% 13, 13, 12, 10, 2 %%>;

  requestSize = <%% 18, 18, 17, 16, 4.4 %%>;
  secondFont = <%% 2, 2, 2, 2, 1 %%>;
  requestWordMargin = <%% 1, 1, 1, 1, 0 %%>;
  requestWordPaddingTop = <%% (isMac() ? 24 : 26), (isMac() ? 24 : 26), (isMac() ? 24 : 26), (isMac() ? 24 : 26), 4.8 %%>;
  requestWordPaddingBottom = <%% (isMac() ? 20 : 18), (isMac() ? 20 : 18), (isMac() ? 20 : 18), (isMac() ? 20 : 18), 4.6 %%>;

  baseTongPaddingBottom = <%% 4, 4, 3, 3, 20 %%>;
  mobileOuterMargin = 4;

  borderRadius = <%% 10, 10, 10, 10, 8 %%>;

  colorInfoIndent = <%% 35, 35, 35, 35, 7.2 %%>;
  colorBlockHeight = <%% 24, 24, 24, 24, 3.8 %%>;

  colorInfoPaddingLeft = <%% 17, 17, 17, 17, 3 %%>;
  colorInfoPaddingTop = <%% 11, 11, 11, 11, 1.9 %%>;
  colorInfoPaddingBottom = <%% 12, 12, 12, 12, 2.2 %%>;

  colorMarkWidth = <%% 32, 32, 32, 32, 3.2 %%>;
  colorMarkHeight = <%% 10, 10, 10, 10, 1.0 %%>;
  colorMarkBetween = <%% 7, 7, 7, 7, 0.7 %%>;

  colorBlockSize = <%% 13, 13, 13, 13, 2.5 %%>;
  colorBlockWeight = <%% 500, 500, 500, 500, 500 %%>;

  colorBlockTextTop = <%% -1, -1, -1, -1, 0 %%>;

  if (mobile) {
    totalMother.style.background = colorChip.gray2;
  }

  baseTong0 = createNode({
    mother: totalMother,
    class: [ "mainBaseTong" ],
    style: {
      position: "absolute",
      top: desktop ? String(margin * 3) + ea : (this.middleMode ? String(60) + "px" : String(0)),
      left: String(grayBarWidth + (desktop ? margin * 3 : mobileOuterMargin)) + ea,
      width: withOut(grayBarWidth + (desktop ? margin * 6 : mobileOuterMargin * 2), ea),
      paddingTop: desktop ? "" : String(mobileOuterMargin) + ea,
      height: "auto",
      animation: "",
    }
  });
  baseTong = createNode({
    mother: baseTong0,
    style: {
      position: "relative",
      top: String(0) + ea,
      left: String(0) + ea,
      width: String(100) + '%',
      borderRadius: String(5) + "px",
      border: desktop ? ("1px solid " + colorChip.gray4) : "",
      boxShadow: desktop ? "" : "0px 3px 15px -9px " + colorChip.shadow,
      background: desktop ? colorChip.gray0 : colorChip.gray1,
      height: "auto",
      overflow: "hidden",
      marginBottom: String(baseTongMarginBottom) + ea,
      paddingBottom: String(baseTongPaddingBottom) + ea,
      boxSizing: "border-box",
    }
  });

  this.requestBoxes = [];
  boxNumberArr = [];
  for (let i = 0; i < maxBoxNumber; i++) {

    statusNumber = 0;
    if (projects[i].history.schedule.progress.start.valueOf() > (new Date(2000, 0, 1)).valueOf()) {
      statusNumber = 1;
    }
    if (projects[i].history.schedule.progress.complete.valueOf() > (new Date(2000, 0, 1)).valueOf()) {
      statusNumber = 2;
    }
    if (projects[i].history.schedule.progress.send.valueOf() > (new Date(2000, 0, 1)).valueOf()) {
      statusNumber = 3;
    }

    if (/없음/gi.test(dateToString(projects[i].process.contract.form.date.from)) || /예정/gi.test(dateToString(projects[i].process.contract.form.date.from))) {
      dateString = "00.00.00";
    } else {
      dateString = dateToString(projects[i].process.contract.form.date.from).slice(2).replace(/\-/g, '.');
    }

    requestBox = createNode({
      mother: baseTong,
      event: {
        click: this.scheduleDocument(baseTong, i, designer, projects[i]),
        mouseenter: function (e) {
          this.style.transition = "";
          if (desktop) {
            this.children[0].style.background = colorChip.green;
            this.children[1].firstChild.style.color = colorChip.green;
            this.style.transform = "translateY(-3px)";
          }
        },
        mouseleave: function (e) {
          const statusNumber = Number(this.getAttribute("status"));
          if (desktop) {
            this.children[0].style.background = statusColors[statusNumber].color;
            this.children[1].firstChild.style.color = colorChip.black;
            this.style.transform = "translateY(0px)";
          }
        }
      },
      attribute: [
        { cliid: projects[i].cliid },
        { proid: projects[i].proid },
        { status: String(statusNumber) },
      ],
      style: {
        position: "relative",
        display: "inline-block",
        width: "calc(calc(100% - " + String((boxNumber + 2) * boxMargin) + ea + ") / " + String(boxNumber) + ")",
        borderRadius: String(borderRadius) + "px",
        marginTop: String(Math.floor(i / boxNumber) === 0 ? boxMargin * 1.5 : boxMargin) + ea,
        marginRight: String(boxMargin) + ea,
        marginLeft: String(i % boxNumber === 0 ? boxMargin * 1.5 : 0) + ea,
        marginBottom: String(Math.floor(i / boxNumber) === Math.floor((maxBoxNumber - 1) / boxNumber) ? (boxMargin * 1.5) : 0) + ea,
        background: colorChip.white,
        boxShadow: "0px 3px 14px -9px " + colorChip.shadow,
        textAlign: "center",
        verticalAlign: "top",
        paddingTop: String(requestWordPaddingTop) + ea,
        paddingBottom: String(requestWordPaddingBottom) + ea,
        cursor: "pointer",
        transition: "all 0s ease",
        transform: "translateY(0px)",
      },
      children: [
        {
          style: {
            position: "absolute",
            top: String(0),
            width: String(100) + '%',
            left: String(0),
            height: String(desktop ? borderRadius : 2) + ea,
            background: statusColors[statusNumber].color,
            borderTopRightRadius: String(borderRadius / 2) + "px",
            borderTopLeftRadius: String(borderRadius / 2) + "px",
          }
        },
        {
          style: {
            position: "relative",
            marginBottom: String(requestWordMargin) + ea,
            textAlign: "center",
          },
          children: [
            {
              text: projects[i].name + " <b%고객님%b>",
              style: {
                fontSize: String(requestSize) + ea,
                fontWeight: String(600),
                color: colorChip.black,
                display: "inline-block",
              },
              bold: {
                color: colorChip.black,
                fontWeight: String(300),
              }
            }
          ]
        },
        {
          style: {
            position: "relative",
          },
          children: [
            {
              text: dateString,
              style: {
                fontSize: String(requestSize - secondFont) + ea,
                fontWeight: String(300),
                color: colorChip.deactive,
                display: "inline-block",
              }
            }
          ]
        },
      ]
    });
    thisChildWidth = 0;
    for (let i = 1; i < Array.from(requestBox.children).length; i++) {
      if (thisChildWidth <= requestBox.children[i].firstChild.getBoundingClientRect().width) {
        thisChildWidth = requestBox.children[i].firstChild.getBoundingClientRect().width;
      }
    }
    thisChildWidth = thisChildWidth + (requestWordPaddingBottom * 3.2);

    if (desktop) {
      boxNumber = Math.floor((baseTong.getBoundingClientRect().width - (boxMargin * 2)) / (thisChildWidth + boxMargin));
      boxNumberArr.push(boxNumber);
    }

    this.requestBoxes.push(requestBox);
  }

  if (desktop) {
    boxNumberArr.sort((a, b) => { return b - a; });
    if (boxNumberArr.length > 0) {
      boxNumber = boxNumberArr[0];
      for (let i = 0; i < maxBoxNumber; i++) {
        this.requestBoxes[i].style.width = "calc(calc(100% - " + String((boxNumber + 2) * boxMargin) + ea + ") / " + String(boxNumber) + ")";
        this.requestBoxes[i].style.marginTop = String(Math.floor(i / boxNumber) === 0 ? boxMargin * 1.5 : boxMargin) + ea;
        this.requestBoxes[i].style.marginLeft = String(i % boxNumber === 0 ? boxMargin * 1.5 : 0) + ea;
        this.requestBoxes[i].style.marginBottom = String(Math.floor(i / boxNumber) === Math.floor((maxBoxNumber - 1) / boxNumber) ? (boxMargin * 1.5) : 0) + ea;
      }
    }
  }

  colorInfo = createNode({
    mother: baseTong,
    style: {
      position: "fixed",
      background: colorChip.white,
      bottom: String(belowHeight + colorInfoIndent) + ea,
      right: desktop ? String(colorInfoIndent) + ea : "",
      left: mobile ? String(colorInfoIndent) + ea : "",
      boxShadow: "0px 4px 18px -9px " + colorChip.shadow,
      borderRadius: String(5) + "px",
      opacity: String(0),
      animation: "fadeuplite 0.5s ease 0.3s forwards",
      paddingTop: String(colorInfoPaddingTop) + ea,
      paddingBottom: String(colorInfoPaddingBottom) + ea,

    }
  });

  createNode({
    mother: colorInfo,
    attribute: {
      index: String(-1),
    },
    style: {
      display: "flex",
      flexDirection: "row",
      width: String(100) + '%',
      height: String(colorBlockHeight) + ea,
      alignItems: "center",
    },
    children: [
      {
        style: {
          marginLeft: String(colorInfoPaddingLeft) + ea,
          marginRight: String(colorMarkBetween) + ea,
          display: "inline-block",
          width: String(colorMarkWidth) + ea,
          height: String(colorMarkHeight) + ea,
          background: colorChip.black,
          borderRadius: String(1) + "px",
        }
      },
      {
        text: "전체",
        attribute: {
          index: String(-1),
        },
        event: {
          click: function (e) {
            let num;

            num = 0;
            for (let box of instance.requestBoxes) {
              if (num % boxNumber === 0) {
                box.style.marginLeft = String(boxMargin * 1.5) + ea;
              } else {
                box.style.marginLeft = String(0) + ea;
              }
              box.style.display = "inline-block";
              num++;
            }
          }
        },
        class: [ "hoverDefault_lite" ],
        style: {
          display: "inline-block",
          position: "relative",
          top: String(colorBlockTextTop) + ea,
          fontSize: String(colorBlockSize) + ea,
          fontWeight: String(colorBlockWeight),
          color: colorChip.black,
          marginRight: String(colorInfoPaddingLeft) + ea,
        }
      }
    ]
  });

  colorBlockIndex = 0;
  for (let { color, name } of statusColors) {
    createNode({
      mother: colorInfo,
      attribute: {
        index: String(colorBlockIndex),
      },
      style: {
        display: "flex",
        flexDirection: "row",
        width: String(100) + '%',
        height: String(colorBlockHeight) + ea,
        alignItems: "center",
      },
      children: [
        {
          style: {
            marginLeft: String(colorInfoPaddingLeft) + ea,
            marginRight: String(colorMarkBetween) + ea,
            display: "inline-block",
            width: String(colorMarkWidth) + ea,
            height: String(colorMarkHeight) + ea,
            background: color,
            borderRadius: String(1) + "px",
          }
        },
        {
          text: name,
          attribute: {
            index: String(colorBlockIndex),
          },
          event: {
            click: function (e) {
              const statusIndex = Number(this.getAttribute("index"));
              let num;

              num = 0;
              for (let box of instance.requestBoxes) {
                if (Number(box.getAttribute("status")) === statusIndex) {
                  if (num % boxNumber === 0) {
                    box.style.marginLeft = String(boxMargin * 1.5) + ea;
                  } else {
                    box.style.marginLeft = String(0) + ea;
                  }
                  box.style.display = "inline-block";
                  num++;
                } else {
                  box.style.display = "none";
                }
              }
            }
          },
          class: [ "hoverDefault_lite" ],
          style: {
            display: "inline-block",
            position: "relative",
            top: String(colorBlockTextTop) + ea,
            fontSize: String(colorBlockSize) + ea,
            fontWeight: String(colorBlockWeight),
            color: colorChip.black,
            marginRight: String(colorInfoPaddingLeft) + ea,
          }
        }
      ]
    });
    colorBlockIndex++;
  }

  this.mainBaseTong = baseTong0;
}

DesignerJs.prototype.scheduleDocument = function (mother, index, designer, project) {
  const instance = this;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, serviceParsing, setQueue, swipePatch } = GeneralJs;
  const { totalMother, ea, grayBarWidth } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;
  const blocks = mother.children;
  this.proid = null;
  this.project = null;
  this.client = null;
  return async function (e) {
    try {
      const [ client ] = await ajaxJson({ noFlat: true, whereQuery: { cliid } }, "/getClients", { equal: true });
      let clientHistory, projectHistory;
      let thisBlock, motherTop;
      let visualSpecific;
      let requestNumber, thisRequest;
      let site;
      let construct;
      let styling;
      let budget;
      let progress;

      requestNumber = 0;
      for (let i = 0; i < client.requests.length; i++) {
        if (project.proposal.date.valueOf() >= client.requests[i].request.timeline.valueOf()) {
          requestNumber = i;
          break;
        }
      }
      thisRequest = client.requests[requestNumber];

      clientHistory = await ajaxJson({ id: client.cliid, rawMode: true }, "/getClientHistory", { equal: true });
      projectHistory = await ajaxJson({ id: project.proid, rawMode: true }, "/getProjectHistory", { equal: true });

      if (desktop) {

        mother.style.height = String(mother.getBoundingClientRect().height) + ea;
        motherTop = mother.getBoundingClientRect().top;

        visualSpecific = <%% 1, 1, 1, 0, 0 %%>;

        for (let i = 0; i < blocks.length; i++) {
          blocks[i].style.transition = "all 0s ease";
          blocks[i].setAttribute("top", String(Math.floor(blocks[i].getBoundingClientRect().top - mother.getBoundingClientRect().top)) + ea);
          blocks[i].setAttribute("left", String(Math.floor(blocks[i].getBoundingClientRect().left - Math.ceil(mother.getBoundingClientRect().left))) + ea);
          if (i !== index) {
            blocks[i].style.animation = "fadedownlite 0.2s ease forwards";
          } else {
            thisBlock = blocks[i];
            thisBlock.style.transform = "";
            for (let dom of blocks[i].children) {
              dom.style.opacity = String(0);
            }
          }
        }

        for (let block of blocks) {
          block.style.position = "absolute";
          block.style.margin = String(0);
          block.style.left = block.getAttribute("left");
          block.style.top = block.getAttribute("top");
        }

      } else {
        motherTop = 3.8;

        for (let i = 0; i < blocks.length; i++) {
          blocks[i].style.animation = "fadedownlite 0.2s ease forwards";
          if (i === index) {
            thisBlock = blocks[i];
          }
        }
      }

      setQueue(() => {
        if (desktop) {
          thisBlock.style.boxShadow = "";
          thisBlock.style.background = desktop ? colorChip.gray0 : colorChip.gray2;
          thisBlock.style.transition = "all 0.4s ease";
          thisBlock.style.position = "absolute";
          thisBlock.style.left = String(0);
          thisBlock.style.top = String(0);
          thisBlock.style.width = String(100) + '%';
          thisBlock.style.height = String(100) + '%';
        } else {
          for (let block of blocks) {
            block.style.position = "absolute";
          }
        }

        mother.parentElement.style.height = withOut(motherTop, ea);
        if (mobile) {
          mother.parentElement.style.left = String(0);
          mother.parentElement.style.width = String(100) + '%';
          mother.parentElement.style.paddingTop = "";
        }
        mother.style.boxShadow = "";
        mother.style.paddingBottom = "";
        mother.style.paddingTop = String(motherTop) + ea;
        mother.style.height = withOut(motherTop, ea);
        mother.style.overflow = "scroll";

        setQueue(async () => {
          try {
            mother.style.background = desktop ? colorChip.gray0 : colorChip.gray2;
            const board = createNode({
              mother,
              style: {
                position: "relative",
                left: String(motherTop) + ea,
                width: withOut(motherTop * 2, ea),
                height: String(8000) + ea,
                borderRadius: String(5) + "px",
                background: colorChip.white,
                animation: "fadeupdelay 0.4s ease forwards",
                boxShadow: "0px 3px 15px -10px " + colorChip.shadow,
                zIndex: String(1),
                marginBottom: String(motherTop) + ea,
              }
            });
            await instance.scheduleContents(board, designer, project, client, clientHistory, projectHistory, requestNumber);
            if (mobile) {
              mother.style.marginBottom = "";
            }

            if (mobile) {
              swipePatch({
                right: (e) => {
                  instance.scheduleDetailLaunching(desid);
                },
              });
            }

            instance.pageHistory.unshift({ path: "schedule", status: "card", desid, cliid });
            window.history.pushState({ path: "schedule", status: "list", desid }, '');

          } catch (e) {
            console.log(e);
          }
        }, 500);

      }, 400);

    } catch (e) {
      console.log(e);
    }
  }
}

DesignerJs.prototype.scheduleChildrenParse = async function () {
  const instance = this;
  const { taskBlocks, ea, proid } = this;
  const {
    base,
    start,
    end,
    title,
    description,
    color
  } = this.classNames;
  const { stringToDate, colorCalendar } = GeneralJs;
  try {
    let children;

    children = [];
    for (let block of taskBlocks) {
      children.push({
        date: {
          start: stringToDate(block.querySelector('.' + start).getAttribute("value")),
          end: stringToDate(block.querySelector('.' + end).getAttribute("value"))
        },
        contents: {
          title: block.querySelector('.' + title).getAttribute("value"),
          description: block.querySelector('.' + description).getAttribute("value"),
          color: block.querySelector('.' + color).getAttribute("value")
        }
      });
    }

    colorCalendar(document.querySelector(".contentsArea").lastChild, children);
    await this.scheduleChildrenUpdate(proid, children);

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.scheduleChildrenUpdate = async function (proid, children) {
  if (typeof proid !== "string" || !Array.isArray(children)) {
    console.log(proid, children);
    throw new Error("invaild input");
  }
  const instance = this;
  try {
    const { ajaxJson } = GeneralJs;
    const cookies = JSON.parse(window.localStorage.getItem("GoogleClientProfile"));

    await ajaxJson({
      method: "project",
      id: proid,
      column: "schedule.children",
      value: children,
      email: cookies.homeliaisonConsoleLoginedEmail
    }, "/updateHistory").catch((err) => { console.log(err); });

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.scheduleContents = async function (board, designer, project, client, clientHistory, projectHistory, requestNumber) {
  const instance = this;
  const mother = this.mother;
  const { createNode, createNodes, ajaxJson, colorChip, withOut, isMac, dateToString, stringToDate, autoComma, serviceParsing, getDateMatrix, cleanChildren, uniqueValue, setQueue, blankHref, colorCalendar } = GeneralJs;
  const { totalMother, ea, grayBarWidth, middleMode } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const desid = designer.desid;
  const proid = project.proid;
  const cliid = project.cliid;
  this.proid = proid;
  this.client = client;
  this.project = project;
  const today = new Date();
  const totalStatic = this.scheduleReturnStatic(designer, project, client, clientHistory, projectHistory, requestNumber);
  const {
    title,
    initialContents,
  } = totalStatic;
  const classNames = this.classNames;
  try {
    let titleArea;
    let contentsArea;
    let topMargin;
    let leftMargin;
    let titleHeight;
    let titleSize;
    let titleBottom;
    let titlePaddingBottom;
    let fontSize;
    let titleDateVisualBottom;
    let width;
    let tempDom;
    let lineHeight;
    let finalBottom;
    let num;
    let blockArea;
    let blockFactor;
    let blockOuterPadding;
    let blockFactorHeight;
    let blockFactorMarginBottom;
    let blockWhite0, blockWhite1, blockWhite2;
    let blockInnerMargin;
    let blockSecondRatio;
    let numberSize, numberTextTop, numberWeight;
    let dateStart, dateEnd;
    let dateSize, dateWeight;
    let dateTop, dateLeft, dateBottom, datePadding, dateTop2;
    let dateCalendarWidth, dateCalendarIndent;
    let dateLineBottom;
    let wordingTitle, wordingDescription;
    let barColor;
    let colorBarWidth, colorBarVisual;
    let wordingSize, wordingLeft, wordingWeight0, wordingWeight1, wordingTop;
    let descriptionPaddingLeft, descriptionPaddingRight, descriptionPaddingTop, descriptionPaddingBottom;
    let descriptionLineHeight;
    let plusSize, plusWeight, plusTextTop;
    let blockAreaMarginBottom;
    let dateMatrix;
    let tempArr;
    let block;
    let thisService;
    let scheduleTasks;
    let scheduleStart, scheduleEnd;
    let pastOrder;
    let periodArr;
    let calendarCancelBackPadding;
    let dateCalendarVisual;
    let blocksReload;
    let dragstartEvent, dragenterEvent, dragleaveEvent, dragoverEvent, dropEvent;
    let blockMake;
    let colorBoxIndent, colorBoxPadding;
    let greenButtonPaddingTop, greenButtonPaddingBottom;
    let greenButtonPaddingLeft;
    let greenButtonMargin;
    let greenButtonSize;
    let greenButtonBaseTop;
    let greenButtonBaseWidth;

    topMargin = <%% 42, 38, 32, 30, 5.8 %%>;
    leftMargin = <%% 50, 46, 38, 32, 5.8 %%>;

    titleSize = <%% 35, 33, 30, 26, 5 %%>;
    titlePaddingLeft = <%% 1, 1, 1, 1, 0 %%>;
    titleBottom = <%% 35, 29, 28, 20, 5 %%>;
    titlePaddingBottom = <%% (isMac() ? 18 : 15), (isMac() ? 18 : 15), (isMac() ? 18 : 15), (isMac() ? 18 : 15), 3.2 %%>;
    titleDateVisualBottom = <%% (isMac() ? 2 : -3), (isMac() ? 2 : -3), (isMac() ? 2 : -3), (isMac() ? 2 : -3), 0.5 %%>;

    fontSize = <%% 15, 14, 13, 12, 3 %%>;

    lineHeight = 1.7;
    finalBottom = <%% 60, 60, 60, 60, 8 %%>;

    blockOuterPadding = <%% 10, 10, 10, 10, 1.5 %%>;
    blockFactorHeight = <%% 90, 90, 90, 90, 13 %%>;
    blockInnerMargin = <%% 6, 6, 6, 6, 1 %%>;
    blockFactorMarginBottom = <%% 6, 6, 6, 6, 1.5 %%>;

    numberSize = <%% 36, 36, 36, 36, 4.8 %%>;
    numberTextTop = <%% -4, -4, -4, -4, -0.6 %%>;
    numberWeight = <%% 400, 400, 400, 400, 400 %%>;

    blockSecondRatio = <%% 2.4, 2.1, 1.8, 1.5, 2.4 %%>;
    dateSize = <%% 15, 15, 15, 14, 3.6 %%>;
    dateWeight = <%% 400, 400, 400, 400, 400 %%>;
    dateTop = <%% 11, 11, 11, 14, 2 %%>;
    dateTop2 = <%% 34, 34, 34, 34, 2 %%>;
    dateBottom = <%% dateTop + (isMac() ? 5 : 6), dateTop + (isMac() ? 5 : 6), dateTop + (isMac() ? 5 : 6), dateTop + (isMac() ? 3 : 4), dateTop %%>;
    dateLeft = <%% 18, 18, 18, 18, 4.2 %%>;
    datePadding = <%% 8, 8, 8, 8, 2 %%>;
    dateLineBottom = <%% 24.5, 24.5, 24.5, 25, 5.3 %%>;

    dateCalendarWidth = <%% 260, 260, 260, 260, 80 %%>;
    dateCalendarIndent = <%% 6, 6, 6, 6, 0 %%>;
    dateCalendarVisual = <%% 2, 2, 2, 2, 0 %%>;
    calendarCancelBackPadding = <%% 24, 24, 24, 24, 2.4 %%>;
    colorBoxIndent = <%% 12, 12, 12, 12, 12 %%>;
    colorBoxPadding = <%% 12, 12, 12, 12, 12 %%>;

    colorBarWidth = <%% 6, 6, 6, 5, 1 %%>;
    colorBarVisual = <%% 1, 1, 1, 0, 0 %%>;

    wordingSize = <%% 14, 14, 13, 12, 2.8 %%>;
    wordingLeft = <%% 34, 34, 34, 34, 8 %%>;
    wordingWeight0 = <%% 600, 600, 600, 600, 600 %%>;
    wordingWeight1 = <%% 400, 400, 400, 400, 400 %%>;
    wordingTop = <%% (isMac() ? 13 : 15), (isMac() ? 13 : 15), (isMac() ? 13 : 15), (isMac() ? 13 : 15), 3.4 %%>;

    descriptionPaddingLeft = wordingLeft;
    descriptionPaddingRight = dateLeft;
    descriptionPaddingTop = <%% (isMac() ? 34 : 36), (isMac() ? 35 : 37), (isMac() ? 36 : 38), (isMac() ? 35 : 37), 8.2 %%>;
    descriptionPaddingBottom = <%% (isMac() ? 15 : 13), (isMac() ? 14 : 12), (isMac() ? 13 : 11), (isMac() ? 14 : 12), 3.8 %%>;
    descriptionLineHeight = 1.5;

    plusSize = <%% 48, 48, 48, 48, 4.8 %%>;
    plusWeight = <%% 500, 500, 500, 500, 500 %%>;
    plusTextTop = <%% -5, -5, -5, -5, -5 %%>;

    blockAreaMarginBottom = <%% 50, 50, 50, 50, 5 %%>;

    greenButtonPaddingTop = <%% (isMac() ? 6 : 7), (isMac() ? 6 : 7), (isMac() ? 6 : 7), (isMac() ? 6 : 7), 1.5 %%>;
    greenButtonPaddingBottom = <%% (isMac() ? 8 : 7), (isMac() ? 8 : 7), (isMac() ? 8 : 7), (isMac() ? 8 : 7), 2 %%>;
    greenButtonPaddingLeft = <%% 13, 13, 13, 13, 3 %%>;
    greenButtonMargin = <%% 4, 4, 4, 4, 1 %%>;
    greenButtonSize = <%% 13, 13, 12, 11, 3 %%>;
    greenButtonBaseTop = <%% 8, 8, 8, 8, 2 %%>;
    greenButtonBaseWidth = <%% 270, 270, 270, 270, 64 %%>;

    [ thisService ] = await ajaxJson({
      whereQuery: {
        serid: project.service.serid
      }
    }, "/getServices", { equal: true });
    thisService.setting.schedule.sort((a, b) => {
      return a.order - b.order;
    });
    scheduleStart = new Date(JSON.stringify(project.process.contract.form.date.from).slice(1, -1));
    scheduleTasks = [];
    pastOrder = -1;
    periodArr = [ 0 ];
    thisService.setting.schedule.forEach((obj) => {
      const { title, description, color, order, period } = obj;
      if (pastOrder !== order) {
        periodArr.sort((a, b) => { return b - a; });
        scheduleStart.setDate(scheduleStart.getDate() + periodArr[0]);
        periodArr = [];
      }
      scheduleEnd = new Date(JSON.stringify(scheduleStart).slice(1, -1));
      scheduleEnd.setDate(scheduleEnd.getDate() + period);
      scheduleTasks.push({
        contents: { title, description, color },
        date: {
          start: new Date(JSON.stringify(scheduleStart).slice(1, -1)),
          end: scheduleEnd
        }
      });
      pastOrder = order;
      periodArr.push(period);
    });
    this.samples = scheduleTasks.map((obj) => { return obj.contents; });

    if (projectHistory.schedule.children.length < scheduleTasks.length / 2) {
      projectHistory.schedule.children = scheduleTasks;
      await this.scheduleChildrenUpdate(proid, scheduleTasks);
    }

    board.style.paddingTop = String(topMargin) + ea;

    blockArea = {};
    blocksReload = (blocksMother) => {
      const children = [ ...blocksMother.children ];
      children.pop();
      instance.taskBlocks = [];
      for (let i = 0; i < children.length; i++) {
        children[i].style.background = colorChip.gray2;
        children[i].firstChild.firstChild.textContent = String(i + 1);
        instance.taskBlocks.push(children[i]);
      }
      instance.scheduleChildrenParse().catch((err) => { console.log(err); });
    }
    dragstartEvent = function (e) {
      e.dataTransfer.setData("dragData", this.id);
    }
    dragenterEvent = function (e) {
      e.stopPropagation();
      e.preventDefault();
      this.style.background = colorChip.whiteGreen;
      if (this.previousElementSibling !== null) {
        this.previousElementSibling.style.background = colorChip.whiteGreen;
      }
    }
    dragleaveEvent = function (e) {
      e.stopPropagation();
      e.preventDefault();
      this.style.background = colorChip.gray2;
      if (this.previousElementSibling !== null) {
        this.previousElementSibling.style.background = colorChip.gray2;
      }
    }
    dragoverEvent = function (e) {
      e.stopPropagation();
      e.preventDefault();
      this.style.background = colorChip.whiteGreen;
      if (this.previousElementSibling !== null) {
        this.previousElementSibling.style.background = colorChip.whiteGreen;
      }
    }
    dropEvent = function (e) {
      e.stopPropagation();
      e.preventDefault();
      const from = document.getElementById(e.dataTransfer.getData("dragData"));
      from.style.background = colorChip.gray2;
      this.style.background = colorChip.gray2;
      if (this.previousElementSibling !== null) {
        this.previousElementSibling.style.background = colorChip.gray2;
      }
      this.parentNode.insertBefore(from, this);
      blocksReload(this.parentNode);
    }
    blockMake = (i, dateStart, dateEnd, wordingTitle, wordingDescription, barColor) => {
      blockFactor = createNode({
        mother: blockArea,
        id: uniqueValue("hex"),
        class: [ classNames.base ],
        attribute: {
          draggable: "true",
        },
        event: {
          dragstart: dragstartEvent,
          dragenter: dragenterEvent,
          dragleave: dragleaveEvent,
          dragover: dragoverEvent,
          drop: dropEvent
        },
        style: {
          display: "block",
          position: "relative",
          padding: String(blockOuterPadding) + ea,
          width: withOut(blockOuterPadding * 2, ea),
          borderRadius: String(5) + "px",
          background: colorChip.gray2,
          marginBottom: String(blockFactorMarginBottom) + ea,
        }
      });
      blockWhite0 = createNode({
        mother: blockFactor,
        class: [ "hoverDefault_lite" ],
        event: {
          contextmenu: function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (window.confirm("해당 항목을 삭제하시겠습니까?")) {
              const baseMother = this.parentNode.parentNode;
              baseMother.removeChild(this.parentNode);
              blocksReload(baseMother);
            }
          }
        },
        style: {
          verticalAlign: "top",
          display: "inline-flex",
          alignItems: "center",
          justifyContent: "center",
          position: "relative",
          width: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
          height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
          background: colorChip.white,
          borderRadius: String(5) + "px",
          marginRight: String(blockInnerMargin) + ea,
        },
        children: [
          {
            text: String(i + 1),
            style: {
              position: "relative",
              fontSize: String(numberSize) + ea,
              fontWeight: String(numberWeight),
              fontFamily: "graphik",
              top: String(numberTextTop) + ea,
              color: colorChip.black,
            }
          }
        ]
      });
      blockWhite1 = createNode({
        mother: blockFactor,
        style: {
          verticalAlign: "top",
          display: "inline-block",
          position: "relative",
          width: desktop ? String((blockFactorHeight - (blockOuterPadding * 2)) * blockSecondRatio) + ea : withOut(blockFactorHeight - (blockOuterPadding * 2) + blockInnerMargin, ea),
          height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
          background: colorChip.white,
          borderRadius: String(5) + "px",
          marginRight: desktop ? String(blockInnerMargin) + ea : "",
        },
        children: [
          {
            style: {
              position: "absolute",
              width: withOut(dateLeft * 2, ea),
              bottom: String(dateLineBottom) + ea,
              left: String(dateLeft) + ea,
              borderBottom: "1px solid " + colorChip.green,
            }
          },
          {
            text: dateStart,
            class: [ classNames.start ],
            attribute: {
              value: String(20) + dateStart.replace(/\. /gi, "-"),
            },
            event: {
              click: function (e) {
                if (desktop) {
                  const dateStart = stringToDate(this.getAttribute("value"));
                  const thisBox = this.getBoundingClientRect();
                  const self = this;
                  let calendarBase, calendarCancelBack;

                  this.style.color = colorChip.green;
                  calendarCancelBack = createNode({
                    mother: self.parentElement,
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.style.color = colorChip.black;
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(calendarCancelBackPadding * -1) + ea,
                      left: String(calendarCancelBackPadding * -1) + ea,
                      width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      background: "transparent",
                      zIndex: String(1),
                    }
                  });
                  calendarBase = createNode({
                    mother: self.parentElement,
                    event: {
                      click: (e) => { e.stopPropagation() },
                      contextmenu: (e) => { e.stopPropagation() },
                    },
                    style: {
                      position: "absolute",
                      width: String(dateCalendarWidth) + ea,
                      transition: "all 0s ease",
                      background: colorChip.white,
                      borderRadius: String(5) + "px",
                      zIndex: String(1),
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                      animation: "fadeuphard 0.3s ease forwards",
                      top: String(dateTop + thisBox.height + dateCalendarIndent) + ea,
                      left: String(dateLeft + ((thisBox.width - datePadding) / 2) - (dateCalendarWidth / 2) - dateCalendarVisual) + ea,
                    }
                  });
                  const calendar = instance.mother.makeCalendar(dateStart, async function (e) {
                    try {
                      e.stopPropagation();
                      const thisDate = stringToDate(this.getAttribute("buttonValue"));
                      const updatedString = dateToString(thisDate).replace(/-/gi, ". ").slice(2);
                      self.setAttribute("value", dateToString(thisDate));
                      self.textContent = updatedString;
                      instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                      self.parentElement.removeChild(self.parentElement.lastChild);
                      self.parentElement.removeChild(self.parentElement.lastChild);
                      self.style.color = colorChip.black;
                    } catch (e) {
                      console.log(e);
                    }
                  });
                  calendarBase.appendChild(calendar.calendarBase);
                } else {
                  const thisBox = this.getBoundingClientRect();
                  const thisValue = this.getAttribute("value");
                  const self = this;
                  let calendarBase, calendarCancelBack;
                  let greenInput;

                  self.parentElement.parentElement.setAttribute("draggable", "false");

                  calendarCancelBack = createNode({
                    mother: self.parentElement,
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        self.parentElement.parentElement.setAttribute("draggable", "true");
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(calendarCancelBackPadding * -1) + ea,
                      left: String(calendarCancelBackPadding * -1) + ea,
                      width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      background: "transparent",
                      zIndex: String(1),
                    }
                  });

                  greenInput = createNode({
                    mother: self.parentElement,
                    mode: "input",
                    attribute: {
                      type: "text",
                    },
                    event: {
                      keypress: function (e) {
                        if (e.key === "Enter") {
                          this.value = this.value.trim().replace(/[\"\=\&\+]/gi, '');
                          if (/^[0-9][0-9](\. |\.|\-| )[0-9][0-9](\. |\.|\-| )[0-9][0-9]$/.test(this.value)) {
                            const numberArr = this.value.replace(/(\. |\.|\-| )/g, '-').split('-');
                            if (numberArr.length === 3) {
                              self.textContent = `${numberArr[0]}. ${numberArr[1]}. ${numberArr[2]}`;
                              self.setAttribute("value", `20${numberArr[0]}-${numberArr[1]}-${numberArr[2]}`);
                              instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                              self.parentElement.parentElement.setAttribute("draggable", "true");
                              self.parentElement.removeChild(self.parentElement.lastChild);
                              self.parentElement.removeChild(self.parentElement.lastChild);
                            } else {
                              window.alert("yy-mm-dd의 형식으로 적어주세요!");
                              this.value = self.textContent;
                              self.focus();
                            }
                          } else {
                            window.alert("yy-mm-dd의 형식으로 적어주세요!");
                            this.value = self.textContent;
                            self.focus();
                          }
                        }
                      }
                    },
                    style: {
                      position: "absolute",
                      fontSize: String(dateSize) + ea,
                      fontWeight: String(dateWeight),
                      fontFamily: "graphik",
                      color: colorChip.green,
                      top: String(dateTop) + ea,
                      left: String(dateLeft) + ea,
                      background: colorChip.white,
                      width: String(thisBox.width) + "px",
                      outline: String(0),
                      border: String(0),
                      zIndex: String(1),
                    }
                  });

                  greenInput.value = this.textContent;
                  greenInput.focus();
                }
              }
            },
            style: {
              position: "absolute",
              fontSize: String(dateSize) + ea,
              fontWeight: String(dateWeight),
              fontFamily: "graphik",
              color: colorChip.black,
              top: String(dateTop) + ea,
              left: String(dateLeft) + ea,
              background: colorChip.white,
              paddingRight: String(datePadding) + ea,
              cursor: "pointer",
            }
          },
          {
            text: dateEnd,
            class: [ classNames.end ],
            attribute: {
              value: String(20) + dateEnd.replace(/\. /gi, "-"),
            },
            event: {
              click: function (e) {
                if (desktop) {
                  const dateEnd = stringToDate(this.getAttribute("value"));
                  const thisBox = this.getBoundingClientRect();
                  const self = this;
                  let calendarBase, calendarCancelBack;

                  this.style.color = colorChip.green;
                  calendarCancelBack = createNode({
                    mother: self.parentElement,
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.style.color = colorChip.black;
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(calendarCancelBackPadding * -1) + ea,
                      left: String(calendarCancelBackPadding * -1) + ea,
                      width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      background: "transparent",
                      zIndex: String(1),
                    }
                  });
                  calendarBase = createNode({
                    mother: self.parentElement,
                    event: {
                      click: (e) => { e.stopPropagation() },
                      contextmenu: (e) => { e.stopPropagation() },
                    },
                    style: {
                      position: "absolute",
                      width: String(dateCalendarWidth) + ea,
                      transition: "all 0s ease",
                      background: colorChip.white,
                      borderRadius: String(5) + "px",
                      zIndex: String(1),
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                      animation: "fadeuphard 0.3s ease forwards",
                      top: String(dateTop2 + thisBox.height + dateCalendarIndent) + ea,
                      right: String(dateLeft + ((thisBox.width - datePadding) / 2) - (dateCalendarWidth / 2) - dateCalendarVisual) + ea,
                    }
                  });
                  const calendar = instance.mother.makeCalendar(dateEnd, async function (e) {
                    try {
                      e.stopPropagation();
                      const thisDate = stringToDate(this.getAttribute("buttonValue"));
                      const updatedString = dateToString(thisDate).replace(/-/gi, ". ").slice(2);
                      self.setAttribute("value", dateToString(thisDate));
                      self.textContent = updatedString;
                      instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                      self.parentElement.removeChild(self.parentElement.lastChild);
                      self.parentElement.removeChild(self.parentElement.lastChild);
                      self.style.color = colorChip.black;
                    } catch (e) {
                      console.log(e);
                    }
                  });
                  calendarBase.appendChild(calendar.calendarBase);
                } else {
                  const thisBox = this.getBoundingClientRect();
                  const thisValue = this.getAttribute("value");
                  const self = this;
                  let calendarBase, calendarCancelBack;
                  let greenInput;

                  self.parentElement.parentElement.setAttribute("draggable", "false");

                  calendarCancelBack = createNode({
                    mother: self.parentElement,
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        self.parentElement.parentElement.setAttribute("draggable", "true");
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(calendarCancelBackPadding * -1) + ea,
                      left: String(calendarCancelBackPadding * -1) + ea,
                      width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      background: "transparent",
                      zIndex: String(1),
                    }
                  });

                  greenInput = createNode({
                    mother: self.parentElement,
                    mode: "input",
                    attribute: {
                      type: "text",
                    },
                    event: {
                      keypress: function (e) {
                        if (e.key === "Enter") {
                          this.value = this.value.trim().replace(/[\"\=\&\+]/gi, '');
                          if (/^[0-9][0-9](\. |\.|\-| )[0-9][0-9](\. |\.|\-| )[0-9][0-9]$/.test(this.value)) {
                            const numberArr = this.value.replace(/(\. |\.|\-| )/g, '-').split('-');
                            if (numberArr.length === 3) {
                              self.textContent = `${numberArr[0]}. ${numberArr[1]}. ${numberArr[2]}`;
                              self.setAttribute("value", `20${numberArr[0]}-${numberArr[1]}-${numberArr[2]}`);
                              instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                              self.parentElement.parentElement.setAttribute("draggable", "true");
                              self.parentElement.removeChild(self.parentElement.lastChild);
                              self.parentElement.removeChild(self.parentElement.lastChild);
                            } else {
                              window.alert("yy-mm-dd의 형식으로 적어주세요!");
                              this.value = self.textContent;
                              self.focus();
                            }
                          } else {
                            window.alert("yy-mm-dd의 형식으로 적어주세요!");
                            this.value = self.textContent;
                            self.focus();
                          }
                        }
                      }
                    },
                    style: {
                      position: "absolute",
                      fontSize: String(dateSize) + ea,
                      fontWeight: String(dateWeight),
                      fontFamily: "graphik",
                      color: colorChip.green,
                      top: String(dateTop2) + ea,
                      right: String(dateLeft) + ea,
                      background: colorChip.white,
                      width: String(thisBox.width) + "px",
                      paddingLeft: String(datePadding) + ea,
                      outline: String(0),
                      border: String(0),
                      zIndex: String(1),
                    }
                  });

                  greenInput.value = this.textContent;
                  greenInput.focus();
                }
              }
            },
            style: {
              position: "absolute",
              fontSize: String(dateSize) + ea,
              fontWeight: String(dateWeight),
              fontFamily: "graphik",
              color: colorChip.black,
              top: String(dateTop2) + ea,
              right: String(dateLeft) + ea,
              background: colorChip.white,
              paddingLeft: String(datePadding) + ea,
              cursor: "pointer",
            }
          },
        ]
      });
      blockWhite2 = createNode({
        mother: blockFactor,
        style: {
          verticalAlign: "top",
          display: desktop ? "inline-block" : "block",
          position: "relative",
          width: desktop ? withOut(((blockFactorHeight - (blockOuterPadding * 2)) * (1 + blockSecondRatio) + (blockInnerMargin * 2) + descriptionPaddingLeft + descriptionPaddingRight), ea) : "",
          paddingTop: String(descriptionPaddingTop) + ea,
          paddingLeft: String(descriptionPaddingLeft) + ea,
          paddingRight: String(descriptionPaddingRight) + ea,
          paddingBottom: String(descriptionPaddingBottom) + ea,
          background: colorChip.white,
          borderRadius: String(5) + "px",
          marginTop: mobile ? String(blockInnerMargin) + ea : "",
        },
        children: [
          {
            attribute: {
              value: barColor,
            },
            event: {
              click: function (e) {
                if (desktop) {
                  const thisBox = this.getBoundingClientRect();
                  const self = this;
                  let colorBoxBase, colorBoxCancelBack;

                  colorBoxCancelBack = createNode({
                    mother: self.parentElement,
                    event: {
                      click: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                      }
                    },
                    style: {
                      position: "fixed",
                      top: String(calendarCancelBackPadding * -1) + ea,
                      left: String(calendarCancelBackPadding * -1) + ea,
                      width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                      background: "transparent",
                      zIndex: String(1),
                    }
                  });

                  colorBoxBase = createNode({
                    mother: self.parentElement,
                    event: {
                      click: (e) => { e.stopPropagation() },
                      contextmenu: (e) => { e.stopPropagation() },
                    },
                    style: {
                      position: "absolute",
                      width: String(dateCalendarWidth) + ea,
                      transition: "all 0s ease",
                      background: colorChip.white,
                      borderRadius: String(5) + "px",
                      zIndex: String(1),
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                      animation: "fadeuphard 0.3s ease forwards",
                      top: String(dateTop + thisBox.height + colorBoxIndent) + ea,
                      left: String(dateLeft + ((thisBox.width) / 2) - ((dateCalendarWidth + (colorBoxPadding * 2)) / 2)) + ea,
                      padding: String(colorBoxPadding) + ea,
                    }
                  });

                  for (let i = 0; i < instance.colors.length; i++) {
                    createNode({
                      mother: colorBoxBase,
                      style: {
                        display: "inline-flex",
                        alignItems: "center",
                        justifyContent: "center",
                        width: String(dateCalendarWidth / 10) + ea,
                        height: String(dateCalendarWidth / 10) + ea,
                      },
                      children: [
                        {
                          class: [ "hoverDefault_lite" ],
                          attribute: { value: instance.colors[i] },
                          event: {
                            click: function (e) {
                              const thisColor = this.getAttribute("value");
                              const blocksMother = this.parentElement.parentElement.parentElement.parentElement.parentElement;
                              e.preventDefault();
                              e.stopPropagation();
                              self.style.background = thisColor;
                              self.setAttribute("value", thisColor);
                              self.parentElement.removeChild(self.parentElement.lastChild);
                              self.parentElement.removeChild(self.parentElement.lastChild);
                              blocksReload(blocksMother);
                            }
                          },
                          style: {
                            position: "relative",
                            display: "inline-block",
                            width: String(80) + '%',
                            height: String(80) + '%',
                            background: instance.colors[i],
                            borderRadius: String(2) + "px",
                          }
                        }
                      ]
                    });
                  }
                }
              }
            },
            class: [ classNames.color, "hoverDefault_lite" ],
            style: {
              position: "absolute",
              left: String(dateLeft) + ea,
              top: String((desktop ? dateBottom : 4.2)) + ea,
              width: String(colorBarWidth) + ea,
              height: withOut(((desktop ? dateBottom : 4.4) * 2) + colorBarVisual, ea),
              borderRadius: String(colorBarWidth) + ea,
              background: barColor,
            }
          },
          {
            text: wordingTitle,
            attribute: {
              value: wordingTitle.replace(/[\"\=\&\+]/gi, ''),
            },
            event: {
              click: function (e) {
                const thisBox = this.getBoundingClientRect();
                const thisValue = this.getAttribute("value");
                const self = this;
                let calendarBase, calendarCancelBack;
                let greenBase;

                self.parentElement.parentElement.setAttribute("draggable", "false");

                calendarCancelBack = createNode({
                  mother: self.parentElement,
                  event: {
                    click: function (e) {
                      e.preventDefault();
                      e.stopPropagation();
                      self.parentElement.parentElement.setAttribute("draggable", "true");
                      self.parentElement.removeChild(self.parentElement.lastChild);
                      self.parentElement.removeChild(self.parentElement.lastChild);
                    }
                  },
                  style: {
                    position: "fixed",
                    top: String(calendarCancelBackPadding * -1) + ea,
                    left: String(calendarCancelBackPadding * -1) + ea,
                    width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                    height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                    background: "transparent",
                    zIndex: String(1),
                  }
                });

                greenBase = createNode({
                  mother: self.parentElement,
                  style: {
                    position: "absolute",
                    left: String(wordingLeft) + ea,
                    top: String(wordingTop + wordingSize + greenButtonBaseTop) + ea,
                    width: String(greenButtonBaseWidth) + ea,
                    zIndex: String(1),
                  }
                });

                for (let { title, description } of instance.samples) {
                  createNode({
                    mother: greenBase,
                    text: title,
                    attribute: { title, description },
                    event: {
                      click: function (e) {
                        const title = this.getAttribute("title");
                        const description = this.getAttribute("description");
                        self.textContent = title;
                        self.nextElementSibling.firstChild.textContent = description;
                        self.setAttribute("value", title);
                        self.nextElementSibling.firstChild.setAttribute("value", description);
                        instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                        self.parentElement.parentElement.parentElement.setAttribute("draggable", "true");
                        self.parentElement.removeChild(self.parentElement.lastChild);
                        self.parentElement.removeChild(self.parentElement.lastChild);
                      }
                    },
                    style: {
                      display: "inline-block",
                      paddingTop: String(greenButtonPaddingTop) + ea,
                      paddingBottom: String(greenButtonPaddingBottom) + ea,
                      paddingLeft: String(greenButtonPaddingLeft) + ea,
                      paddingRight: String(greenButtonPaddingLeft) + ea,
                      marginRight: String(greenButtonMargin) + ea,
                      marginBottom: String(greenButtonMargin) + ea,
                      fontSize: String(greenButtonSize) + ea,
                      fontWeight: String(wordingWeight0),
                      color: colorChip.white,
                      background: colorChip.gradientGreen3,
                      borderRadius: String(5) + "px",
                      animation: "fadeuphard 0.3s ease forwards",
                      cursor: "pointer",
                      boxShadow: "0px 3px 15px -9px " + colorChip.shadow,
                    }
                  });
                }

              }
            },
            class: [ classNames.title ],
            style: {
              position: "absolute",
              left: String(wordingLeft) + ea,
              top: String(wordingTop) + ea,
              fontSize: String(wordingSize) + ea,
              fontWeight: String(wordingWeight0),
              color: colorChip.black,
              cursor: "pointer",
            }
          },
          {
            style: {
              position: "relative",
              width: String(100) + '%',
              height: String(100) + '%',
              background: "transparent",
            },
            children: [
              {
                text: wordingDescription,
                attribute: {
                  value: wordingDescription.replace(/[\"\=\&\+]/gi, ''),
                },
                event: {
                  click: function (e) {
                    const thisBox = this.getBoundingClientRect();
                    const thisValue = this.getAttribute("value");
                    const self = this;
                    let calendarBase, calendarCancelBack;
                    let greenInput;

                    self.parentElement.parentElement.parentElement.setAttribute("draggable", "false");

                    calendarCancelBack = createNode({
                      mother: self.parentElement,
                      event: {
                        click: function (e) {
                          e.preventDefault();
                          e.stopPropagation();
                          self.parentElement.parentElement.parentElement.setAttribute("draggable", "true");
                          self.parentElement.removeChild(self.parentElement.lastChild);
                          self.parentElement.removeChild(self.parentElement.lastChild);
                        }
                      },
                      style: {
                        position: "fixed",
                        top: String(calendarCancelBackPadding * -1) + ea,
                        left: String(calendarCancelBackPadding * -1) + ea,
                        width: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                        height: "calc(100% + " + String(calendarCancelBackPadding * 2) + ea + ")",
                        background: "transparent",
                        zIndex: String(1),
                      }
                    });

                    greenInput = createNode({
                      mother: self.parentElement,
                      mode: "textarea",
                      attribute: {
                        type: "text",
                      },
                      event: {
                        keypress: function (e) {
                          if (e.key === "Enter") {
                            this.value = this.value.trim().replace(/[\"\=\&\+]/gi, '');
                            self.textContent = this.value;
                            self.setAttribute("value", this.value);
                            instance.scheduleChildrenParse().catch((err) => { console.log(err); });
                            self.parentElement.parentElement.parentElement.setAttribute("draggable", "true");
                            self.parentElement.removeChild(self.parentElement.lastChild);
                            self.parentElement.removeChild(self.parentElement.lastChild);
                          }
                        }
                      },
                      style: {
                        position: "absolute",
                        left: String(0) + ea,
                        top: String(0) + ea,
                        fontSize: String(wordingSize) + ea,
                        fontWeight: String(wordingWeight1),
                        width: withOut(0, ea),
                        height: String(thisBox.height) + "px",
                        outline: String(0),
                        border: String(0),
                        zIndex: String(1),
                        color: colorChip.green,
                        background: colorChip.white,
                        lineHeight: String(descriptionLineHeight),
                      }
                    });

                    greenInput.value = thisValue;
                    greenInput.focus();
                  }
                },
                class: [ classNames.description ],
                style: {
                  fontSize: String(wordingSize) + ea,
                  fontWeight: String(wordingWeight1),
                  color: colorChip.black,
                  lineHeight: String(descriptionLineHeight),
                }
              }
            ]
          }
        ]
      });
      return blockFactor;
    }

    // title area
    titleArea = createNode({
      mother: board,
      style: {
        marginLeft: String(leftMargin) + ea,
        paddingLeft: String(titlePaddingLeft) + ea,
        width: withOut((leftMargin * 2) + titlePaddingLeft, ea),
        borderBottom: "1px solid " + colorChip.gray3,
        marginBottom: String(titleBottom) + ea,
        paddingBottom: String(titlePaddingBottom) + ea,
        position: "relative",
      },
      children: [
        {
          text: title,
          style: {
            position: "relative",
            fontSize: String(titleSize) + ea,
            fontWeight: String(500),
            color: colorChip.black,
          }
        },
        {
          text: serviceParsing(project.service),
          class: [ "hoverDefault_lite" ],
          event: {
            click: (e) => { e.preventDefault(); }
          },
          style: {
            position: "absolute",
            fontSize: String(fontSize) + ea,
            fontWeight: String(600),
            color: colorChip.green,
            right: String(titlePaddingLeft) + ea,
            textAlign: "right",
            bottom: String(titlePaddingBottom - titleDateVisualBottom) + ea,
          }
        }
      ]
    });

    // contents base
    contentsArea = createNode({
      mother: board,
      class: [ "contentsArea" ],
      style: {
        position: "relative",
        marginLeft: String(leftMargin) + ea,
        width: withOut(leftMargin * 2, ea),
      },
      children: [
        {
          text: initialContents,
          style: {
            position: "relative",
            fontSize: String(fontSize) + ea,
            fontWeight: String(400),
            color: colorChip.black,
            lineHeight: String(lineHeight),
            marginBottom: String(titleBottom) + ea,
          },
          bold: {
            fontWeight: String(600),
            color: colorChip.black,
          },
          under: {
            fontWeight: String(600),
            color: colorChip.green,
            cursor: "pointer",
          },
        }
      ]
    });
    contentsArea.querySelectorAll("b")[contentsArea.querySelectorAll("b").length - 1].addEventListener("click", function (e) {
      blankHref(this.textContent);
    });

    // task blocks
    blockArea = createNode({
      mother: contentsArea,
      style: {
        display: "block",
        position: "relative",
        marginBottom: String(blockAreaMarginBottom) + ea,
      }
    });
    this.taskBlocks = [];
    for (let i = 0; i < projectHistory.schedule.children.length; i++) {
      ({ date: { start: dateStart, end: dateEnd }, contents: { title: wordingTitle, description: wordingDescription, color: barColor } } = projectHistory.schedule.children[i]);
      dateStart = dateToString(dateStart).replace(/-/gi, ". ").slice(2);
      dateEnd = dateToString(dateEnd).replace(/-/gi, ". ").slice(2);
      this.taskBlocks.push(blockMake(i, dateStart, dateEnd, wordingTitle, wordingDescription, barColor));
    }
    if (desktop) {
      blockFactor = createNode({
        mother: blockArea,
        style: {
          verticalAlign: "top",
          display: "block",
          position: "relative",
          padding: String(blockOuterPadding) + ea,
          width: withOut(blockOuterPadding * 2, ea),
          height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
          borderRadius: String(5) + "px",
          background: colorChip.gray2,
        },
        children: [
          {
            class: [ "hoverDefault_lite" ],
            event: {
              click: function (e) {
                const children = [ ...this.parentElement.parentElement.children ];
                children.pop();

                const index = Number(children[children.length - 1].firstChild.firstChild.textContent) - 1;
                const lastDate = stringToDate(children[children.length - 1].querySelector('.' + classNames.end).getAttribute("value"));
                let startDate, endDate;

                startDate = dateToString(lastDate)
                lastDate.setDate(lastDate.getDate() + 7);
                endDate = dateToString(lastDate)

                startDate = startDate.replace(/-/gi, ". ").slice(2);
                endDate = endDate.replace(/-/gi, ". ").slice(2);

                blockMake(index + 1, startDate, endDate, "작업명 입력", "작업명에 대해서 상세한 설명을 적어주세요.", colorChip.green);
                this.parentElement.parentElement.appendChild(this.parentElement);

                blocksReload(this.parentElement.parentElement);
              }
            },
            style: {
              verticalAlign: "top",
              display: "inline-flex",
              alignItems: "center",
              justifyContent: "center",
              position: "relative",
              width: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
              height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
              background: colorChip.gray3,
              borderRadius: String(5) + "px",
              marginRight: String(blockInnerMargin) + ea,
            },
            children: [
              {
                text: '+',
                style: {
                  position: "relative",
                  fontSize: String(plusSize) + ea,
                  fontWeight: String(plusWeight),
                  fontFamily: "graphik",
                  top: String(plusTextTop) + ea,
                  color: colorChip.white,
                }
              }
            ]
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: String((blockFactorHeight - (blockOuterPadding * 2)) * blockSecondRatio) + ea,
              height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
              background: colorChip.gray3,
              borderRadius: String(5) + "px",
              marginRight: String(blockInnerMargin) + ea,
            }
          },
          {
            style: {
              display: "inline-block",
              position: "relative",
              width: withOut(((blockFactorHeight - (blockOuterPadding * 2)) * (1 + blockSecondRatio) + (blockInnerMargin * 2)), ea),
              height: String(blockFactorHeight - (blockOuterPadding * 2)) + ea,
              background: colorChip.gray3,
              borderRadius: String(5) + "px",
            }
          }
        ]
      });
    }

    // calendar
    createNode({
      mother: contentsArea,
      style: {
        display: "block",
        position: "relative",
        width: String(100) + '%',
      }
    });
    colorCalendar(contentsArea.lastChild, projectHistory.schedule.children);

    // end
    board.style.height = "auto";
    board.style.paddingBottom = String(finalBottom) + ea;

  } catch (e) {
    console.log(e);
  }
}

DesignerJs.prototype.scheduleIconSet = function (desid) {
  if (desid === undefined) {
    throw new Error("invaild input");
  }
  const instance = this;
  const { createNode, createNodes, colorChip, withOut, blankHref, scrollTo, dateToString } = GeneralJs;
  const { totalMother, ea, grayBarWidth, belowHeight, motherHeight } = this;
  const mobile = this.media[4];
  const desktop = !mobile;
  const designer = this.designers.pick(desid);
  let mother;
  let radius;
  let left, bottom;
  let left2;
  let margin;
  let color;
  let iconTop;
  let nodeArr;
  let listIcon, previousIcon, nextIcon, aInitialIcon, mInitialIcon, rInitialIcon;

  radius = <%% 20, 18.5, 17, 15, 6 %%>;
  left = <%% 40, 30, 25, 19, 0 %%>;
  left2 = <%% 40, 36, 36, 19, 0 %%>;
  bottom = <%% 40, 36, 30, 22, 7.2 %%>;
  margin = <%% 6, 5, 4, 4, 0 %%>;
  color = colorChip.gradientGreen;
  iconTop = <%% 12.5, 12, 11, 10, 3.8 %%>;

  mother = createNode({
    mother: document.querySelector(".totalMother"),
    class: [ "iconTong" ],
    style: {
      display: "block",
      position: "fixed",
      height: String(desktop ? motherHeight : (bottom + (radius * 2))) + ea,
      width: String(desktop ? grayBarWidth : (bottom + (radius * 2))) + ea,
      left: desktop ? String(0) : "",
      right: desktop ? "" : String(0),
      bottom: String(belowHeight) + ea,
      background: desktop ? colorChip.gray0 : "transparent",
      zIndex: String(2),
    }
  });

  nodeArr = createNodes([
    {
      mother,
      style: {
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnHamburger(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: "calc(50% - " + String(radius * 0.45) + ea + ")",
        top: String(iconTop) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnAinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(15) + ea,
        left: String(12.5) + ea,
        top: String(11) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnDecrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(9.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnMinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(16.5) + ea,
        left: String(11.5) + ea,
        top: String(11.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnIncrease(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(radius * 0.9) + ea,
        left: String(11.5) + ea,
        top: String(iconTop - 1.5) + ea,
      }
    },
    {
      mother,
      style: {
        display: (instance.middleMode ? "none" : "block"),
        position: "absolute",
        width: String(radius * 2) + ea,
        height: String(radius * 2) + ea,
        bottom: String(bottom + (radius * 2) + margin) + ea,
        left: String(left + (radius * 2) + margin + (radius * 2) + margin) + ea,
        background: color,
        borderRadius: String(radius * 2) + ea,
        cursor: "pointer",
      }
    },
    {
      mother: -1,
      mode: "svg",
      source: this.mother.returnRinitial(colorChip.whiteIcon),
      style: {
        position: "absolute",
        width: String(14) + ea,
        left: String(13.5) + ea,
        top: String(10.5) + ea,
      }
    },
  ]);

  listIcon = nodeArr[0];
  aInitialIcon = nodeArr[2];
  previousIcon = nodeArr[4];
  mInitialIcon = nodeArr[6];
  nextIcon = nodeArr[8];
  rInitialIcon = nodeArr[10];

  this.iconTong = mother;
  this.listIcon = listIcon;
  this.aInitialIcon = aInitialIcon;
  this.previousIcon = previousIcon;
  this.mInitialIcon = mInitialIcon;
  this.nextIcon = nextIcon;
  this.rInitialIcon = rInitialIcon;

  if (!this.middleMode) {

    listIcon.addEventListener("click", function (e) {
      blankHref(window.location.protocol + "//" + window.location.host + window.location.pathname + "?mode=general");
    });

    previousIcon.addEventListener("click", function (e) {
      let previousDesid, boo, thisStandard;
      previousDesid = desid;
      do {
        previousDesid = instance.designers.previous(previousDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === previousDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.scheduleDetailLaunching(previousDesid);
    });

    nextIcon.addEventListener("click", function (e) {
      let nextDesid, boo, thisStandard;
      nextDesid = desid;
      do {
        nextDesid = instance.designers.next(nextDesid).desid;
        for (let dom of instance.standardDoms) {
          if (dom.getAttribute("desid") === nextDesid) {
            thisStandard = dom;
            boo = (dom.style.display === "none");
          }
        }
      } while (boo);
      instance.scheduleDetailLaunching(nextDesid);
    });

  } else {

    if (desktop) {

      listIcon.addEventListener("click", function (e) {
        const totalContents = document.getElementById("totalcontents");
        const totalMother = document.querySelector(".totalMother");
        const grayBack = totalContents.children[0];
        const listPannel = totalMother.children[0].children[0];
        const iconSetPannel = instance.iconTong;
        const mainBaseTong = instance.mainBaseTong;
        const outerMargin = Number(mainBaseTong.style.top.replace(/[^0-9\.\-]/gi, ''));

        if (grayBack.getAttribute("toggle") !== "off") {
          grayBack.style.width = String(0) + ea;
          listPannel.style.transform = "translateX(" + String((instance.grayBarWidth + instance.tabletWidth) * -1) + ea + ")";
          iconSetPannel.style.background = "transparent";
          mainBaseTong.style.left = String(outerMargin) + ea;
          mainBaseTong.style.width = withOut(outerMargin * 2, ea);
          instance.listIcon.style.left = String(left2) + ea;
          grayBack.setAttribute("toggle", "off");
          if (instance.fixTargets.length > 0) {
            instance.fixTargets[0].style.width = String(Number(instance.fixTargets[0].style.width.replace(/[^0-9\-\.]/gi, '')) + instance.grayBarWidth) + ea;
          }
        } else {
          grayBack.style.width = String(instance.grayBarWidth) + ea;
          listPannel.style.transform = "translateX(" + String(0) + ea + ")";
          iconSetPannel.style.background = colorChip.gray0;
          mainBaseTong.style.left = String(instance.grayBarWidth + outerMargin) + ea;
          mainBaseTong.style.width = withOut(instance.grayBarWidth + (outerMargin * 2), ea);
          instance.listIcon.style.left = String(left) + ea;
          grayBack.setAttribute("toggle", "on");
          if (instance.fixTargets.length > 0) {
            instance.fixTargets[0].style.width = String(Number(instance.fixTargets[0].style.width.replace(/[^0-9\-\.]/gi, '')) - instance.grayBarWidth) + ea;
          }
        }

      });

    } else {

      listIcon.addEventListener("click", function (e) {
        instance.mode = "request";
        instance.scheduleDetailLaunching(designer.desid);
      });

    }

    previousIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index - 1] === undefined ? targets[targets.length - 1] : targets[index - 1];
        target.click();
      }
    });

    nextIcon.addEventListener("click", function (e) {
      const targets = document.querySelectorAll(".leftMenus");
      if (targets.length > 0) {
        let index, target;
        index = null;
        for (let i = 0; i < targets.length; i++) {
          if (targets[i].getAttribute("toggle") === "on") {
            index = i;
          }
        }
        if (index === null) {
          throw new Error("invaild index");
        }
        target = targets[index + 1] === undefined ? targets[0] : targets[index + 1];
        target.click();
      }
    });

  }

  rInitialIcon.addEventListener("click", function (e) {
    if (instance.proid === null) {
      window.alert("의뢰서를 선택해주세요!");
    } else {
      window.location.href = window.location.protocol + "//" + window.location.host + "/project?proid=" + instance.proid;
    }
  });

  mInitialIcon.addEventListener("click", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 문서가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].docs);
      }
    } catch (e) {
      console.log(e);
    }
  });

  mInitialIcon.addEventListener("contextmenu", async function (e) {
    try {
      e.preventDefault();
      e.stopPropagation();
      const links = await GeneralJs.ajaxJson({
        mode: "read",
        db: "console",
        collection: "folderDesigner",
        whereQuery: { desid }
      }, "/generalMongo", { equal: true });
      if (links.length === 0) {
        alert("만들어진 폴더가 없습니다!");
      } else {
        GeneralJs.blankHref(links[0].drive);
      }
    } catch (e) {
      console.log(e);
    }
  });

  aInitialIcon.addEventListener("click", function (e) {
    if (instance.proid === null) {
      if (window.confirm(designer.designer + " 디자이너님에게 디자이너 콘솔 알림톡을 전송합니다. 확실합니까?")) {
        GeneralJs.ajaxJson({
          method: "designerConsole",
          name: designer.designer,
          phone: designer.information.phone,
          option: {
            desid: designer.desid,
            designer: designer.designer,
            host: FRONTHOST.replace(/https\:\/\//gi, "").trim(),
            path: "dashboard",
          }
        }, "/alimTalk").then(() => {
          return GeneralJs.ajaxJson({
            page: "schedule",
            mode: "send",
            who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
            desid: designer.desid,
          }, "/ghostDesigner_updateAnalytics");
        }).then(() => {
          instance.mother.greenAlert("알림톡이 전송되었습니다!");
        }).catch((err) => {
          console.log(err);
        });
      } else {
        instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
      }
    } else {
      if (window.confirm(designer.designer + " 디자이너님에게 " + instance.client.name + " 고객님 상세 일정 안내 작성 알림톡을 전송합니다. 확실합니까?")) {
        GeneralJs.ajaxJson({
          method: "designerSchedule",
          name: designer.designer,
          phone: designer.information.phone,
          option: {
            desid: designer.desid,
            designer: designer.designer,
            client: instance.client.name,
            cliid: instance.client.cliid,
            host: BACKHOST.slice(8, -5),
            path: "console",
            mode: "schedule",
            date: dateToString(instance.project.process.contract.form.date.from).replace(/\-/gi, ".").slice(2),
          }
        }, "/alimTalk").then(() => {
          return GeneralJs.ajaxJson({
            page: "schedule",
            mode: "send",
            who: JSON.parse(window.localStorage.getItem("GoogleClientProfile")).homeliaisonConsoleLoginedEmail,
            desid: designer.desid,
            cliid: instance.client.cliid,
          }, "/ghostDesigner_updateAnalytics");
        }).then(() => {
          instance.mother.greenAlert("알림톡이 전송되었습니다!");
        }).catch((err) => {
          console.log(err);
        });
      } else {
        instance.mother.greenAlert("알림톡 전송을 취소하였습니다.");
      }
    }
  });

}

DesignerJs.prototype.scheduleView = async function () {
  const instance = this;
  try {
    const loading = await this.mother.loadingRun();
    const middleMode = /middle/gi.test(window.location.pathname);
    this.backGrayBar();
    await this.spreadData(null, true, middleMode ? "middle" : null);
    const { returnGet, createNode, createNodes, ajaxJson, colorChip, withOut, equalJson } = GeneralJs;
    const { totalMother, ea, grayBarWidth, belowHeight } = this;
    const standardBar = totalMother.firstChild;
    const designers = await ajaxJson({ noFlat: true, whereQuery: { "information.contract.status": { $not: { $regex: "해지" } } } }, "/getDesigners", { equal: true });
    const length = designers.length;
    const getObj = returnGet();
    let boxTong;
    let nodeArr;
    let tempObj;
    let width, height;
    let boxNumber;
    let status;
    let searchInput;
    let standardBar_mother;
    let style;
    let childrenLength, children;
    let motherHeight;
    let searchResult;

    this.designers = new Designers(designers);
    this.desid = (getObj.desid !== undefined) ? getObj.desid : this.standardDoms[this.standardDoms.length - 1].getAttribute("desid");
    this.middleMode = middleMode;
    this.modes = [ "checklist", "report", "request", "possible", "project", "schedule" ];
    this.mode = this.modes[5];
    this.result = null;
    this.searchCondition = {
      mode: "or",
      conditions: [],
      blocks: [],
    };

    motherHeight = <%% 154, 148, 148, 148, 148 %%>;

    //search event
    if (this.searchInput !== undefined && this.searchInput !== null) {
      searchInput = this.searchInput;
      searchInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          if (instance.totalFather !== null) {
            document.getElementById("totalcontents").removeChild(document.querySelector(".totalFather"));
            instance.totalFather = null;
            instance.totalMother.classList.remove("justfadeoutoriginal");
            instance.totalMother.classList.add("justfadeinoriginal");
          }
          const value = this.value.trim().replace(/[ㄱ-ㅎㅏ-ㅣ]/gi, '').replace(/[\~\@\#\$\%\^\&\*\(\)\-\=\+\[\]\{\}\<\>\/\\ \n\t]/gi, '');
          let target;
          if (value === "") {
            instance.scheduleDetailLaunching(instance.standardDoms[1].getAttribute("desid"));
          } else {
            searchResult = instance.designers.search(value);
            if (searchResult.length > 0) {
              instance.scheduleDetailLaunching(searchResult[0].desid);
            }
          }
        }
      });
    }

    //standard doms event
    standardBar_mother = standardBar.cloneNode(false);
    style = {
      position: "fixed",
      height: withOut(100, belowHeight + motherHeight, ea),
      overflow: "scroll",
    };
    for (let i in style) {
      standardBar_mother.style[i] = style[i];
    }
    totalMother.insertBefore(standardBar_mother, standardBar);
    standardBar_mother.appendChild(standardBar);
    for (let i = 1; i < this.standardDoms.length; i++) {
      if (this.designers.pick(this.standardDoms[i].getAttribute("desid")) !== null) {
        this.standardDoms[i].style.color = colorChip[(/완료/g.test(this.designers.pick(this.standardDoms[i].getAttribute("desid")).information.contract.status)) ? "black" : "deactive"];
        this.standardDoms[i].setAttribute("color", this.standardDoms[i].style.color);
        this.standardDoms[i].style.transition = "all 0s ease";
        this.standardDoms[i].addEventListener("click", (e) => {
          instance.scheduleDetailLaunching(instance.standardDoms[i].getAttribute("desid"));
        });
        children = this.standardDoms[i].children;
        childrenLength = children.length;
        for (let j = 0; j < childrenLength; j++) {
          children[j].style.color = "inherit";
          children[j].style.transition = "all 0s ease";
        }
      } else {
        this.standardDoms[i].style.display = "none";
      }
    }

    this.firstTop = this.standardDoms[1].getBoundingClientRect().top;
    this.motherHeight = motherHeight;

    loading.parentNode.removeChild(loading);

    this.pageHistory = [];
    window.addEventListener("popstate", (e) => {
      e.preventDefault();
      if (instance.pageHistory.length > 1) {
        if (getObj.mode === instance.pageHistory[1].path) {
          if (instance.pageHistory[1].status === "list") {
            instance.scheduleDetailLaunching(instance.pageHistory[1].desid);
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          } else {
            instance.scheduleDetailLaunching(instance.pageHistory[1].desid);
            instance.pageHistory.shift();
            instance.pageHistory.shift();
          }
        }
      }
    });

    //launching
    this.proid = null;
    this.project = null;
    this.client = null;
    this.requestBoxes = [];
    this.scheduleDetailLaunching(this.desid, async () => {
      if (getObj.cliid !== undefined) {
        if (getObj.desid === undefined) {
          projects = await ajaxJson({ noFlat: true, whereQuery: { $and: [ { cliid: getObj.cliid }, { desid: { $regex: "^d" } } ] } }, "/getProjects");
          if (projects.length > 0) {
            instance.scheduleDetailLaunching(projects[0].desid, () => {
              for (let box of instance.requestBoxes) {
                if (box.getAttribute("cliid") === getObj.cliid) {
                  box.click();
                }
              }
            });
          }
        } else {
          for (let box of instance.requestBoxes) {
            if (box.getAttribute("cliid") === getObj.cliid) {
              box.click();
            }
          }
        }
      }
    });

  } catch (e) {
    console.log(e);
  }
}


DesignerJs.prototype.launching = async function () {
  const instance = this;
  const { returnGet, getUser } = GeneralJs;
  try {
    const getObj = returnGet();
    const modulePath = BACKHOST + "/module/designer";
    let getTarget;
    let tempFunction;

    this.user = getUser();
    this.grayBarWidth = this.mother.grayBarWidth;
    this.belowHeight = this.mother.belowHeight;
    this.searchInput = this.mother.searchInput;

    this.grayBarWidth = <%% 210, 200, 200, 200, 0 %%>;
    this.mother.grayBarWidth = <%% 210, 200, 200, 210, 0 %%>;

    if (getObj.dataonly === "true") {
      this.belowHeight = this.mother.belowHeight = 0;
      this.grayBarWidth = this.mother.grayBarWidth = 0;
    }

    if (getObj.desid !== undefined && getObj.mode === undefined) {
      getObj.mode = "admin";
    }

    getTarget = null;
    if (getObj.mode === "general") {

      if (getObj.dataonly === "true") {
        await this.spreadData();
        this.whiteResize();
      } else {
        this.backGrayBar();
        await this.spreadData();
        this.addTransFormEvent();
        this.addSearchEvent();
        this.addExtractEvent();
        this.whiteResize();
      }

      if (getObj.desid !== undefined) {
        for (let dom of this.standardDoms) {
          if ((new RegExp(getObj.desid, 'gi')).test(dom.textContent)) {
            getTarget = dom;
          }
        }
        if (getTarget === null) {
          tempFunction = this.makeSearchEvent(getObj.desid);
          await tempFunction({ key: "Enter" });
          for (let dom of this.standardDoms) {
            if ((new RegExp(getObj.desid, 'gi')).test(dom.textContent)) {
              getTarget = dom;
            }
          }
        }
        if (getTarget !== null) {
          getTarget.click();
        }
      }

    } else if (getObj.mode === "aspirant") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.aspirantView();

    } else if (getObj.mode === "calendar") {

      this.grayBarWidth = 600;
      this.mother.grayBarWidth = 600;
      document.getElementById("grayLeftOpenButton").remove();
      await this.calendarView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "contents") {

      this.grayBarWidth = 0;
      this.mother.grayBarWidth = 0;
      document.getElementById("grayLeftOpenButton").remove();
      await this.contentsView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "calculation") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.calculationView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "admin") {

      if (getObj.entire === "true") {
        this.grayBarWidth = 0;
        this.belowHeight = 0;    
      }

      document.getElementById("grayLeftOpenButton").remove();
      await this.adminView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "price") {

      this.grayBarWidth = 0;
      this.mother.grayBarWidth = 0;
      document.getElementById("grayLeftOpenButton").remove();
      await this.priceView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "normal") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.normalView();

    } else if (getObj.mode === "report") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.reportView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "request") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.requestView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "possible") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.possibleView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "project") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.projectView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else if (getObj.mode === "schedule") {

      document.getElementById("grayLeftOpenButton").remove();
      await this.scheduleView();
      this.addTransFormEvent();
      document.getElementById("moveRightArea").style.display = "none";
      document.getElementById("moveLeftArea").style.display = "none";

    } else {

      tempFunction = this.cardViewMaker(true);
      await tempFunction();

      document.getElementById("grayLeftOpenButton").remove();
      await this.normalView();

      this.totalMother.classList.add("justfadeoutoriginal");

    }

  } catch (e) {
    GeneralJs.ajax("message=" + JSON.stringify(e).replace(/[\&\=]/g, '') + "&channel=#error_log", "/sendSlack", function () {});
    console.log(e);
  }
}
